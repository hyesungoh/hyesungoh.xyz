<?xml version="1.0" ?>
  <rss
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:content="http://purl.org/rss/1.0/modules/content/"
    xmlns:atom="http://www.w3.org/2005/Atom"
    version="2.0"
  >
    <channel>
        <title><![CDATA[Cometin']]></title>
        <link>https://www.hyesungoh.xyz</link>
        <description>
          <![CDATA[I like to share my knowledge for those who wandering in issue.]]>
        </description>
        <language>en</language>
        <lastBuildDate>2023-07-05</lastBuildDate>
        <item>
    <title><![CDATA['왜 일하는가'를 읽고]]></title>
    <link>https://www.hyesungoh.xyz/왜-일하는가</link>
    <pubDate>2023-07-05</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/왜-일하는가</guid>
    <description>
    <![CDATA[왜-일하는가]]>
    </description>
    <content:encoded>
      <![CDATA[<p><img src="https://github.com/hyesungoh/hyesungoh/assets/26461307/378b0429-e778-4fdd-a243-a837990f5f51" alt="왜 일하는가"></p>
<h2 id="읽게-된-계기" class="heading">읽게 된 계기</h2>
<p>이 책은 주변 지인의 추천으로 알게 된 책이였다.</p>
<p>책의 제목을 보고 일을 왜 하는지는 깊게 고민한 적이 없던 나를 찾을 수 있었다.</p>
<p>그저 생계를 위해 일한다고만 생각하고 있었고 저자가 왜 일을 하는지 그리고 무슨 가치관을 가지고 있는지 궁금했다.</p>
<h2 id="읽은-후-느낀-점" class="heading">읽은 후 느낀 점</h2>
<p>저자의 가치관이 공감되며 내 가치관의 넓이를 넓힐 수 있었다.</p>
<p>일을 통해서 얻는 것에서 의미를 찾는 것이 아닌, 일 자체에서 의미를 찾을 생각은 해보지 못한 것 같다.</p>
<p>일을 통해 인격을 성장시켜, 더 나은 인간이 될 수 있다고 믿게 되었으며 이는 내 목표에 부합한 과정이라고 생각한다.</p>
<br />
<p>늦게 퇴근하는 날들이 많아져 '내 삶'에 대한 고민이 생길 때 쯤 읽게 된 것이 운이 좋았다고 생각됐다.</p>
<p>일 자체가 '내 삶'이고 그것을 더 잘 구성하기 위한 방법이라는 생각을 갖게 되었으며,</p>
<p>자칫 지칠 수 있었던 타이밍에 더 멀리 그리고 빠르게 달릴 수 있는 연료를 얻은 느낌이다.</p>
<h2 id="밑줄-친-문장들" class="heading">밑줄 친 문장들</h2>
<ul>
<li>왜 그 일을 하는가? 그 일을 통해 당신은 무엇이 되길 꿈꾸는가? 끌려다녀서는 아무것도 제대로 할 수 없다. (p.19)</li>
<li>한결같이 자신의 일을 올곧게 갈고닦아온 사람만이 가질 수 있는 인격의 깊이와 흔들리지 않는 존재감을 마주할 때마다 일하는 것이 얼마나 고귀한 행위인지를 깨닫는다. (p.43)</li>
<li>그저 막연히 불만을 품고 회사를 그만둔다면, 아무리 좋은 회사에 간들 또 똑같지 않겠는가. (p.54)</li>
<li>겨울이 추울수록 그 겨울을 견뎌낸 나무가 더 아름다운 꽃을 피우는 것과 마찬가지로, 지독한 고민과 고통을 겪어본 사람만이 크게 성장하고 진정한 행복을 붙잡을 수 있다. (p.61)</li>
<li>물질은 불에 가까이 대면 타는 가연성 물질, 불에 가까이대도 타지 않는 불연성 물질, 스스로도 잘 타는 자연성 물질이 있다. 사람도 마찬가지다. (중략) 어떤 일이든 그 일을 끝까지 해내려면 스스로 타오르는 사람이 되어야 한다. 스스로 타오르기 위해서는 자신이 하고 있는 일을 좋아하는 동시에, 자신이 왜 그 일을 하는지 명백한 목표를 지니고 있어야 한다. (p.109)</li>
<li>지시한 대로만 일하지 마라. 스스로 타오르지 않고 끌려만 다녀서는 아무 일도 제대로 해낼 수 없다. (p.114)</li>
<li>사람이 할 수 있는 최선의 노력을 다한 뒤 이제는 신께 빌며 천명을 기다리는 방법밖에 없다고 자신할 만큼, 당신은 당신이 가진 모든 힘을 쏟아냈는가? (p.140)</li>
<li>내 인생이 앞으로 어떻게 될 것인지 꿰뚫어보는 안목을 갖지 못했기에, 내가 딛고 서 있는 발밑만을 보기로 마음먹은 것이다. (p.163)</li>
<li>자신이 처한 환경을 부정적으로 인식하고 반발과 원망하는 마음만 키워갈 것인지, 아니면 어려운 요구라도 자신을 성장시킬 절호의 기회라고 생각해 적극적으로 받아들일지는 오직 마음가짐에 달려 있다. (p.190)</li>
<li>수많은 사람이 이미 걸어간, 아무것도 남아 있지 않은 평탄한 길을 걷기보다는 힘들어도 새로운 것을 발견할 가능성이 있고 더 큰 성과를 기대할 수 있는 길을 걸어가자 (p.235)</li>
<li>낙관적으로 구상하고, 비관적으로 계획하며, 다시 낙관적으로 실행한다. (p.253)</li>
<li>당신은 어떤 일을 하는가? 그 일을 통해 당신은 무엇이 되길 꿈꾸는가? 당신이 꿈꾸는 일과 삶의 미래는 어떠한 모습을 하고 있는가? (p.266)</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA['명상록'을 읽고]]></title>
    <link>https://www.hyesungoh.xyz/명상록</link>
    <pubDate>2023-06-25</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/명상록</guid>
    <description>
    <![CDATA[명상록]]>
    </description>
    <content:encoded>
      <![CDATA[<p><img src="https://github.com/hyesungoh/hyesungoh.xyz/assets/26461307/098c8e2c-59e2-4e21-a207-6f51fb06ae80" alt="명상록"></p>
<h2 id="읽게-된-계기" class="heading">읽게 된 계기</h2>
<p>책을 알게 된 경로는 즐겨보는 개발 유튜브에서 책 추천을 해주어 알게 되었다.</p>
<p>1세기부터 전해진 고전인 것, 저자인 황제 마르쿠스 아우렐리우스가 내가 좋아하는 철학인 스토아학파인 점이 책의 구매까지 이끌었다.</p>
<p>이에 더해 '남에게 보이고 읽히기 위한 글이 아닌 난관에 부딪혔을 때 스스로 깨우쳐 올바른 길을 찾고자 한, 개인의 치열한 고뇌와 사색의 결과물' 이라는 점이 짧게나마 글을 쓰고 있는 나에게도 도움이 되며</p>
<p>스스로 깨우쳐 올바른 길을 찾고자하는 나에게도 도움이 될 것이라 생각했다.</p>
<h2 id="읽은-후-느낀-점" class="heading">읽은 후 느낀 점</h2>
<p>책을 읽을 때 내 생각이 정리되고, 고민과 걱정에서 따라오는 스트레스가 해소되는 느낌을 받을 수 있었다.</p>
<p>책에서 말하는 '너'는 저자 본인을 뜻하지만, 나에게 다그치는 느낌과 함께 북돋아주는 느낌까지 주었다.</p>
<br />
<p>읽는 기간 동안 개인적으로 스트레스를 많이 받는 환경에 놓여 있었는데, 이 책을 읽는 시간은 스트레스를 정리하고 가치관을 확장할 수 있는 시간이였다고 생각된다.</p>
<p>스토아 철학적으로써의 생각이 스트레스 관리에 도움이 되었고,</p>
<p>내가 중요하게 생각하던 가치가 책에서 말하는 가치와 상충해 가치관적인 고민을 할 수 있게 해주었다.</p>
<br />
<p>책을 통해 나에게 놓인 상황에 따른 내 마인드셋을 조금 더 건강하게 유지할 수 있을 것 같다.</p>
<h2 id="밑줄-친-문장들" class="heading">밑줄 친 문장들</h2>
<ul>
<li>스토아학파의 목표는 '자연과 일치된 삶'으로, 어느 누구에 의해서도, 어떤 일에도 빼앗기지 않는 행복을 얻어내는 힘을 개인에게 부여하는 철학이었다. (p.15)</li>
<li>얼마나 오랫동안 네가 이런 일들을 미루어왔으며, 얼마나 자주 신들이 네게 기회를 주었건만 이를 이용하지 않았는지 상기하라. (p.31)</li>
<li>너 자신이 이미 얼마나 많은 변화를 경험했는지 항상 명심하라. "온 우주는 변화이고, 인생은 의견이다." (p.51)</li>
<li>네 의견을 버려라. 그러면 '피해를 입었다'는 느낌이 사라질 것이다. '피해를 입었다'는 느낌이 사라지면 피해도 사라질 것이다. (p.52)</li>
<li>생각을 바꿀 때는 그것이 옳고 공동체의 이익에 이바지한다는 확신에 근거해야 한다. (p.54)</li>
<li>"이런 일이 나에게 일어나다니, 나야말로 불운하구나!" 천만에! 그렇게 말할 것이 아니라 이렇게 말하라 "나는 이런 일을 당했는데도 고통을 겪지 않았고, 현재의 불운에도 망가지짖 않고 미래의 고통도 두렵지 않으니, 나야말로 행운아로구나!" 그런 일은 누구에게나 일어날 수 있지만, 그런 일을 당하고도 고통을 겪지 않는 것은 누구에게나 주어지는 것이 아니기 때문이다. 그렇다면 어째서 후자를 행운으로 여기지 않고 전자를 불은으로 여기는가? (p.65)</li>
<li>네가 무엇을 지향하든 그것을 사랑하라. (p.72)</li>
<li>주위 환경 때문에 어쩔 수 없이 마음이 어지러워지면 재빨리 네 자신 속으로 되돌아가고, 필요 이상으로 허둥대지 마라. 끊임없이 자신 속으로 되돌아감으로써 너는 마음의 조화를 더 쉽게 얻을 수 있을 것이다. (p.86)</li>
<li>이 얼마나 이상한 행동인가. 사람들은 자신과 더불어 사는 동시대 사람을 칭찬하려고 하지는 않으면서, 자기가 본 적도 없고 보지도 못할 후세 사람에게 칭찬받는 것은 높이 평가한다. 그러나 이는 조상이 너에 관하여 칭찬의 말을 하지 않았다고 슬퍼하는 것과 다를 바 없다. (p.89)</li>
<li>늘 소박하고, 선하고, 순수하고, 진지하고, 가식 없고, 정의를 사랑하고, 신을 두려워하고, 자비롭고, 상냥하고, 맡은 바 의무에 대하여 용감한 사람이 되도록 하라. 철학이 만들려고 했던 그런 사람으로 남도록 노력하라. 신들을 공경하고, 사람들을 구하라. 인생은 짧다. 지상의 삶에서 맺는 유일한 결실은 경건한 성품과 공동체를 위한 행동이다. (p.92)</li>
<li>선원들이 키잡이를 욕하거나 환자들이 의사를 욕한다면, 그들은 누구의 말을 들을 것이며, 키잡이와 의사가 선원의 안전이나 건강을 어떻게 도모할 수 있겠는가? (p.101)</li>
<li>각자의 가치는 자신이 추구하는 것의 가치와 일치한다는 점을 알아야 한다. (p.103)</li>
<li>네가 갖고 있지 않은 것들에 대해 마치 벌써 갖고 있는 양 연연해하지 마라. 오히려 가진 것 중에 가장 값진 것을 골라, 만약 네가 그것을 갖지 못했다면 얼마나 그것을 갈망했을지 생각해보라. (p.109)</li>
<li>판단과 충동과 소망과 혐오는 모두 자기 안에서 생겨나며 어떤 것도 바깥에서 침투하지 못하게 때문이다. (p.128)</li>
<li>일을 할 때는 소처럼 일하지도 말고, 동정이나 찬탄받기를 원하는 자로서도 일하지 마라. 공동체적 이성의 지시대로 움직이고 멈춰 서기만을 원하도록 하라. (p.145)</li>
<li>네가 어떤 사람에게 선행을 베풀었다면 더이상 무엇을 바라는가? 네 본성에 맞는 어떤 행동을 한 것으로 만족하지 못하고 그 대가를 바랄 것인가? (p.156)</li>
<li>너는 공동체의 이익을 위하여 무엇을 행한 적이 있는가? 그렇다면 그로 인하여 덕을 본 것은 너다. 이 점을 항상 염두에 두고, 그 일을 결코 멈추지 마라. (p.177)</li>
<li>고통과 쾌락과 죽음과 명성의 본질을 보라. 누가 자신의 불안에 책임이 있는지 보라. 어느 누구도 남에게 방해받을 수 없으며, 모든 것이 우리의 의견이라는 점을 생각하라. (p.194)</li>
<li>인류는 피와 씨의 공동체가 아니라 정신의 공동체이다. (p.199)</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[다이나믹 듀오]]></title>
    <link>https://www.hyesungoh.xyz/dynamic-duo</link>
    <pubDate>2023-06-23</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/dynamic-duo</guid>
    <description>
    <![CDATA[dynamic-duo]]>
    </description>
    <content:encoded>
      <![CDATA[<p>다이나믹 듀오는 1998년부터 하루종일 음악 얘기를 할 정도로 음악을 좋아했고 2023년 지금까지 하루종일 할 수 있다고 한다</p>
<br />
<p>내 직업으로써의 개발자는 첫 주가 방금 끝났는데, 시작하기 전에 겁이 났다</p>
<p>새로운 환경의 적응, 잘해낼 수 있을지에 대한 의문도 있었지만 그것보다 두려운 것은</p>
<p><code>‘내가 업으로써의 개발을 좋아할 수 있을 지’</code> 였다</p>
<br />
<p>고등학생일 때부터 개발을 했고 매번 즐겁게 했지만 그건 프로의 영역이 아닌 취미의 영역이라 가능했던 건 아닐까 자문하게 되었다</p>
<p>첫 주를 끝낸 지금에서 답을 하자면 <code>‘여전히, 아니 더 재밌다’</code> 이다</p>
<br />
<p>자발적으로 매일 야근하고, 출퇴근에 왕복 세 시간이 소모되지만 아침에 일어날 때 일하고 싶은 기분으로 하루를 시작하고 있다</p>
<p>이에 대한 이유로는 나를 존중하고 능력있는 팀원들, 자유롭고 편한 분위기 등 여러 이유가 작용했겠지만 가장 큰 이유는 개발이 주는 재미이다</p>
<br />
<p>여느 스타트업이 그렇듯 일이 폭포처럼 밀려 오는데, 이를 빠르고 제대로 해결하는 것이 재밌고 주변의 인정과 피드백은 나에게 박차를 가하고 성장시켜준다는 느낌을 준다</p>
<blockquote>
<p>취미로써의 개발은 개발 할 것을 찾느라 힘들었는데, 지금의 개발은 필요한 부분을 찾긴 하지만, 이미 해야될 것들 안에서 찾는 느낌이라 이 과정조차 즐겁게 느껴진다</p>
</blockquote>
<br />
<p>즐겁긴 하지만 삶을 기준으로 본다면, 잘하고 있진 않은 것 같다</p>
<p>평소에 하던 운동도 자주 못했고 동아리, 대외활동 그리고 멘토링 활동까지 기존에 하던 일들에 대한 관심도가 떨어졌다</p>
<br />
<p>주변에 좋은 영향력을 미치고 본인의 삶을 충분히 가꾸며, 무엇보다 일을 여전히 좋아하는 다이나믹 듀오처럼 나이를 먹고싶다</p>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA['인간 실격'을 읽고]]></title>
    <link>https://www.hyesungoh.xyz/인간-실격</link>
    <pubDate>2023-05-04</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/인간-실격</guid>
    <description>
    <![CDATA[인간-실격]]>
    </description>
    <content:encoded>
      <![CDATA[<p><img src="https://user-images.githubusercontent.com/26461307/236445070-d426e259-009f-41d0-99dc-75f455a15a15.jpeg" alt="인간 실격"></p>
<h2 id="읽게-된-계기" class="heading">읽게 된 계기</h2>
<p>평소 고전을 좋아하기에 언젠가는 읽어야겠다고 생각한 책이었다.</p>
<p>많은 우선순위 중에서 지금 읽은 이유는 내가 좋아하는 '무라카미 하루키' 작가가 가장 좋아하는 작가가 이 책의 저자인 '다자이 오사무'인 점이 크게 작용했다.</p>
<h2 id="읽은-후-느낀-점" class="heading">읽은 후 느낀 점</h2>
<p>데카당스 문학은 처음 읽는 것 같은데, 나랑 잘 맞는다고 생각되었다.</p>
<p>그렇게 생각한 이유 중 가장 큰 것은 읽는 게 재미있었다는 점이다.</p>
<p>이야기 자체도 굉장히 흥미로웠지만 수기의 주인공에 내가 대입되어 공감되는 부분도 많아 더욱 재미있게 느껴졌다.</p>
<br />
<p>책을 읽고 난 후에가 더 재미있고 흥미로웠는데, 저자 '다자이 오사무'가 실제로 겪은 충격적인 사건들이 책 곳곳에 녹아져 있다는 것을 알았기 때문이다.</p>
<blockquote>
<p>저자는 4번의 자살 시도를 하였고, 이 책을 마지막으로 5번째 자살 시도에서 성공하고 말았다.</p>
</blockquote>
<p>가장 기억에 남는 점은 인간의 신뢰에 대한 점이다.</p>
<p>신뢰가 죄인 것인지, 죄의 반대말은 '벌'인 것인지 등의 내용이 인간으로서 남기 위해서 '신뢰'가 필요하다는 뜻으로 느껴졌는데 다음에 읽을 때는 어떻게 읽힐지 모르겠어서 기대되는 책이었다.</p>
<br />
<p>분명히 느낀 것이 많은 책인데 내가 느낀 것을 표현하기가 힘들다.</p>
<p>그렇기에 더욱 본인 자신을 '신뢰' 혹은 이해해야 된다고 말하는 것으로까지 느껴진다.</p>
<p>대중적, 문학적, 독창적인 점에서 높게 평가하고 싶고 위에서 말했던 것처럼 내용이 많이 잊혀졌을 때 다시 읽을 내가 기대되는 책이었다.</p>
<h2 id="밑줄-친-문장들" class="heading">밑줄 친 문장들</h2>
<ul>
<li>겁쟁이는 행복마저 두려워하는 법입니다. (p.73)</li>
<li>넙치의 말투는, 아니 세상 모든 사람의 말투는 이런 식으로 까다롭고 어딘가 모호하고, 빠져나갈 구멍을 미리 만들어 놓는 것 같이 미묘하고 복잡한데, 그 무익하다 싶을 정도의 엄중한 경계심과 무수하다 할 정도의 치사한 계산 속에 저는 늘 당황해서 될 대로 되라는 심정으로 광대짓을 하면서 얼렁뚱땅 넘어가거나 아니면 말없이 받아들이고 모든 것을 맡기겠다는 패배자적인 태도를 보이고 마는 것 입니다. (p.93)</li>
<li>미처 다 마시지 못한 한 잔의 압생트 (p.104)</li>
<li>때 묻지 않은 신뢰감이 정녕 죄의 원천인가요. (p.139)</li>
<li>그저 모든 것은 지나갑니다. (p.156)</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA['잠'을 읽고]]></title>
    <link>https://www.hyesungoh.xyz/잠</link>
    <pubDate>2023-04-20</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/잠</guid>
    <description>
    <![CDATA[잠]]>
    </description>
    <content:encoded>
      <![CDATA[<p><img src="https://user-images.githubusercontent.com/26461307/233187422-60197b4c-2d5f-41f2-b003-7d6804a1b355.jpeg" alt="잠"></p>
<h2 id="읽게-된-계기" class="heading">읽게 된 계기</h2>
<p>직전 책을 타이핑하며 읽어서<sup><a href="#user-content-fn-1" id="user-content-fnref-1" data-footnote-ref aria-describedby="footnote-label">1</a></sup> 조금 가볍게, 그리고 책을 몰입해서 후루룩 읽는 감정이 그리워졌다.</p>
<p>그렇게 한 권 어떤 책을 읽으면 좋을까 생각하다 이 책을 찾게 되었다.</p>
<p>짧은 단편 소설이면서, 좋아하는 작가인 무라카미 하루키의 작품 그리고 수면장애를 겪고 있는 나에게는 안성맞춤인 책 같아 읽게 되었다.</p>
<h2 id="읽은-후-느낀-점" class="heading">읽은 후 느낀 점</h2>
<p>흡입력 있는 문체와 함께 흥미로운 주제를 다루는 책이라 생각된다.</p>
<p>내가 보지 못하는 깊은 주제도 숨어있는 것 같은 느낌을 받아 이후에도 여러 번 읽으면 재밌을 것 같다고 생각되었다.</p>
<br />
<p>훌륭한 문학이기도 했지만 작가의 후기가 더 기억에 남는데, 무라카미 하루키가 노르웨이의 숲으로 성공을 거둔 이후 소설을 쓰지 못한 상태였다가 '잠'을 통해 다시 복귀했다는 것이다.</p>
<p>당시에 들뜬 마음에 평소보다 높은 텐션으로 문장들이 이루어져 있다고 하는데, 무엇인가 지금의 나와 비슷한 마음일 것만 같았다.</p>
<p>개발보다 다른 일들을 많이 해야 했던 최근과 다시 재미를 붙여 개발하고 있는 내 코드도 이전보다 높은 텐션으로 쓰이진 않을까 생각되었달까</p>
<h2 id="밑줄-친-문장들" class="heading">밑줄 친 문장들</h2>
<ul>
<li>세월과 함께 생활의 질은 조금씩 변해간다. 매사에 예전처럼 심플하지 않고 우리를 둘러싼 제약은 보다 복잡한 것이 되었다. (p.21)</li>
<li>그 세월, 그리고 기이할 만큼 강했던 그 열정은 과연 내게 어떤 의미를 가진 것이었을까. (p.43)</li>
</ul>
<section data-footnotes class="footnotes"><h2 id="footnote-label" class="sr-only heading">Footnotes</h2>
<ol>
<li id="user-content-fn-1">
<p>점자 입력 봉사 활동으로 인해 타이핑을 하며 읽었다. 자세한 내용은 <a href="https://www.hyesungoh.xyz/%EA%B7%B8%EB%93%A4%EC%9D%98-%EC%83%9D%EA%B0%81%EC%9D%84-%EB%B0%94%EA%BE%B8%EB%8A%94-%EB%B0%A9%EB%B2%95" target="_blank" rel="noopener noreferer">다음 링크</a>에서 확인할 수 있다. <a href="#user-content-fnref-1" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
</ol>
</section>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA['그들의 생각을 바꾸는 방법'을 읽고]]></title>
    <link>https://www.hyesungoh.xyz/그들의-생각을-바꾸는-방법</link>
    <pubDate>2023-04-19</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/그들의-생각을-바꾸는-방법</guid>
    <description>
    <![CDATA[그들의-생각을-바꾸는-방법]]>
    </description>
    <content:encoded>
      <![CDATA[<p><img src="https://user-images.githubusercontent.com/26461307/232847267-64346e5e-d98a-49e9-b4ea-0459834ea7a6.jpeg" alt="그들의 생각을 바꾸는 방법"></p>
<h2 id="읽게-된-계기" class="heading">읽게 된 계기</h2>
<p>나는 심리학을 동경해 항상 배우고 싶었다.</p>
<p>관련 책을 많이 알아보곤 했는데, 좋아하는 유튜브 채널에서 이 책이 소개되어 처음 알게 되었다.</p>
<p>언젠가는 읽어봐야지 정도로 생각하고 있었으나, 갑작스럽게 우선 순위를 높혀 읽게 된 이유는 시각장애인을 위한 점자입력 봉사 때문이였다.</p>
<blockquote>
<p>책과 관련없는 이야기지만, 나는 평소에 키보드를 좋아한다.
'키보드로 타이핑하며 책을 읽는다'는 행위가 나에게 새로운 재미가 될 수 있다는 생각과 더욱 책 내용이 기억에 남지 않을까라는 생각에 봉사 활동을 하게 되었다.</p>
</blockquote>
<p>봉사 활동에서 입력할 책은 2023년 이후에 초판이 출간된 책만 가능하여 기존에 읽고 싶었던 책들을 훑어보다, 이 책이 적합하다 생각해 기존에 읽던 책보다 먼저 읽게 되었다.</p>
<br />
<p>심리학에 관심이 많은 이유라면, 실생활과 굉장히 밀접한 관련이 있다고 생각하기 때문이다.</p>
<p>우리는 항상 다른 사람들과 접촉한다. 이를 더욱 많은 정보들과 함께 할 수 있게 도와주는 기반 지식이 심리학이라고 생각하기 때문이고 이를 통해 더욱 효과적으로 내 의사를 전하고 상대방을 이해할 수 있다고 생각한다.</p>
<p>이런 심리학을 이용해 다른 사람의 생각을 바꾸는, 설득하는 내용을 담고 있기에 이 책이 매력적으로 다가왔다.</p>
<h2 id="읽은-후-느낀-점" class="heading">읽은 후 느낀 점</h2>
<p>모든 일이 그렇듯이, '어떤 무언가만 하면 다른 사람을 설득할 수 있다!'는 내용은 존재하지 않았다.</p>
<p>다만 사람들의 생각을 어떻게 바꿀 수 있는지, 어떤 방법이 효과적인지는 알 수 있게 되었고 관련한 많은 심리학 용어와 효과까지 알게 되어 너무 많은 새로운 것을 접할 수 있었던 책이다.</p>
<br />
<p>책에서 말하는 내용 중 가장 기억에 남는 것은 심리적인 것이 아니라 <code>진화</code> 관점에서 이루어진 연구와 통찰이다.</p>
<p>결국 인간은 사회적인 동물이고, 논증을 거쳐 생각을 바꾸는 것이 생존에 유리했기에 그렇게 진화했고 이를 조상들의 유산이라고 표현한 것이 심히 납득되어 기억에 남는 것 같다.</p>
<br />
<p>내가 이 책에서 바랬던 부분인, '다른 사람을 설득'하는 방법은 '마법같은 비밀의 방법'은 아니지만 설득과 관련한 많은 것을 배울 수 있었다.</p>
<p>그중에서도 '나는 왜 다른 사람을 설득하려는 것인가'라는 말에서 크게 배울 수 있었는데</p>
<p>설득은 결국 <code>공동의 목표</code>를 달성하기 위한 단계임을 인지하고, 상대방에게도 인지시켜야 더욱 효과적으로 의사소통할 수 있다는 점을 통해 생각의 틀을 넓힌 기분을 받았다.</p>
<br />
<p>가려운 곳을 정확이 짚어 긁어주진 못했지만, 다른 많은 곳 그중에서 내가 가려운지도 몰랐던 가려운 곳을 긁어주었던 책이라 생각한다.</p>
<p>앞으로도 심리학 책을 많이 접하면 내 시야가 더 넓어질 수 있을 것이라는 확신을 갖게 되었다.</p>
<h2 id="밑줄-친-문장들" class="heading">밑줄 친 문장들</h2>
<ul>
<li>논증을 생산하고 평가하는 과정을 통해 더 효과적으로 합의에 이르는 집단이 공동의 목표를 더 쉽게 달성했고, 그렇지 않은 집단보다 더 오래 살아남았다는 것이다. (p.16)</li>
<li>설득은 정보나 도덕적 우월함으로 상대방을 이기려는 행위도 아니고 승자와 패자가 갈리는 말싸움도 아니다. 설득은 상대방이 자신의 생각을 더 깊이 들여다보도록, 그리고 자신의 견해와 눈앞의 메시지가 얼마나 일치하고 얼마나 다른지 이해하도록 이끄는 행위다. (p.20)</li>
<li>양쪽 모두 충분히 존중받는다고 느끼면서 서로의 추론 과정을 살펴보고, 자기 자신의 생각에 대해 생각해보며, 서로의 동기를 깊이 들여다보면, 논쟁에서 이기는 것만을 목표로 삼는 어리석음을 피할 수 있다. 대신 우리는 진실에 도달한다는 공동의 목표를 추구할 수 있다. (p.23)</li>
<li>열정을 복돋아주고 불안을 잠재우는 것이 중요함을 깨달았다. 그래서 항상 '무조건적인 환대'를 강조한다. 마치 오랜만에 만난 가족을 대하듯 사심 없는 순수한 관심을 보이면서 그들을 최대한 다정하게 대하는 것이다. (p.61)</li>
<li>뛰어난 논거나 확실한 정보로는 사람들의 마음을 바꿀 수 없습니다. 그들의 마음을 바꾸는 방법은 하나뿐입니다. 그들 '스스로' 마음을 바꾸는 것입니다. 다시 말해 스스로 자신의 생각을 되돌아보고, 전에는 전혀 고려해보지 않던 측면을 생각하는 과정이 필요합니다. 그래야 다른 관점을 받아들이게 됩니다. (p.67)</li>
<li>일관성 편향이란 자신의 현재 견해에 대해 '나는 예전부터 그렇게 생각했다'고 가정하는 경향을 말한다. (p.91)</li>
<li>자신은 외부 자극의 영향을 덜 받는 확고한 태도를 지녔다고 믿으면서 정치인이나 유명인은 위선적이거나 소신이 없다고 여기는 제3자 효과 (p.91)</li>
<li>충분히 안다고 믿는 무언가에 대해 더 깊이 생각해봄으로써 새로운 관점이나 통찰력을 얻을 수 있다. (p.93)</li>
<li>심리학에서 마음 이론은 타인의 정신 상태가 나와 다를 수 있음을 아는 능력을 말한다. 마음 이론이 잘 발달한 사람은 타인의 입장을 상상하고 그들의 관점과 감정을 가늠할 줄 알며, 상대가 나와 다른 경험을 했기 때문에 다른 의견을 가질 수 있음을 이해한다. (p.95)</li>
<li>우리는 모호해 보이는 새로운 정보를 마주치면 자신도 모르게 과거 경험을 토대로 모호함을 해소한다. 하지만 인생 경험이 다른 개인은 서로 매우 다른 방식으로 모호함을 해소할 수 있고 따라서 매우 다른 주관적 현실이 생겨난다. (p.124)</li>
<li>모호함을 제거하는 자신의 방식이 명백히 옳다고 느끼는 이런 인지적 맹점을 나타내는 심리학 용어가 있다. 소박실재론이다. 이는 자신이 특정한 가정이나 해석, 편향, 감각의 한계에 얽매이지 않고 세상을 객관적으로 바라본다고 믿는 경향을 말한다. (중략) 그렇기 때문에 어떤 주제에서든 논쟁의 양쪽 진영이 각자 자신의 견해만이 현실에 토대를 둔 옳은 견해라고 주장한다. (p.132)</li>
<li>과학자인 파스칼은 증거를 갖춘 결론만이 고려할 가치가 있는 결론이라고 믿는다. 자신의 현재 생각이 틀릴 수 있고 자신의 해석은 말 그대로 하나의 해석일 뿐이라는 사실을 인정하는 사람은 현재의 생각을 재고하게 하는 새로운 증거를 만났을 때 마음을 바꾸기가 더 쉽다. (p.137)</li>
<li>일반적으로 사람들은 타인의 머리에서 나온 이유보다 자신이 찾아낸 이유에 더 잘 설득당한다. (p.138)</li>
<li>제공받은 부정적 기사의 비율이 10퍼센트와 20퍼센트 (중략) 긍정적 시각이 새로운 정보가 촉발한 부정적 감정과 만났을 때, 이들의 뇌는 인지적 노력을 쏟아 부조화를 감소시키는 방향으로 새로운 정보를 해석한 것이다. (p.179)</li>
<li>불안의 증가는 학습을 촉진하고, 이로써 개인은 자신의 평가를 더 정확하게 수정하게 된다. (p.180)</li>
<li>내가 속한 집단과 다른 입장을 취할 경우 친구나 광고주, 일자리를 잃거나 공개적인 창피를 당할지도 모른다면, 중립적이고 실증적인 증거라 할지라도 그 증거를 거부하는 것은 매우 이성적인 결정이다. (p.249)</li>
<li>우리는 자신의 가치관에 못 미치는 사람이라고, 또는 스스로 중요하게 여기는 기준에 비춰볼 때 거기에 부합하지 못한다고 느끼면, 자신이 그런 사람이 아니라는 신호를 보내고 싶어 한다. 즉 동료들의 마음에 들기 위해 집단의 믿음을 지지한다는 것을 보여주려 애쓴다. 그러나 자기 가치에 확신이 있는 경우, 반대 증거를 받아들이거나 새로운 관점을 고려하는 것에 대해 위협감을 덜 느낀다. (p.261)</li>
<li>자신의 가설이 옳음을 확인했다고 느끼면 그 가설에 맞지 않는 사례나 증거를 굳이 더 찾지 않는다. 이것이 우리가 지닌 가장 기본적인 인지적 경향인 <code>확증 편향</code>의 핵심이다. (p.271)</li>
<li>특정 정보가 자신이 믿고 싶은 결과를 뒷받침하느냐 아니냐에 따라 해당 정보의 타당성에 대한 신뢰가 달라진다. (p.273)</li>
<li>자신의 형편없는 논증을 타인의 논증인 줄 알고 읽자 결함이 뚜렷이 보인 것이다. (p.284)</li>
<li>의견이 같은 사람들끼리 형성한 집단은 시간이 갈수록 태도가 더 확고해지고 극단적으로 흐르는 경향이 있다. (p.289)</li>
<li>메시지의 신뢰도를 평가할 때 가장 중요한 요인은 정보원의 신뢰도다. (p.311)</li>
<li>메시지를 받아들이려 하지 않는 청자에게 반론을 함께 제시하면 큰 효과를 낼 수 있다. 법정 재판에 관한 연구에 따르면, 피고 측 변호인이 자기 쪽에 불리한 증거를 먼저 언급하면 배심원단이 피고 측 변호인에게 느끼는 신뢰감이 상승한다. (p.312)</li>
<li>내용 반박하기를 통한 설득에서는 사실적 정보만으로 특정 주장에 대응한다. 이는 과학과 의학 등 일반적인 학계에서 주로 사용하는 접근법이다. 그런 환경에서는 해당 분야 및 특정한 전문 집단 내에서 합의된 기준에 비춰볼 때 가장 타당하고 확실한 증거가 있는 결론을 택하는 것을 당연하게 여기므로 학문적 신뢰와 책임감이 중요하기 때문이다. 이 경우 사실적 정보와 근거가 풍부할수록 더 효과적이다. (p.348)</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[디프만 랜딩 페이지 개발기]]></title>
    <link>https://www.hyesungoh.xyz/depromeet-landing-page</link>
    <pubDate>2023-03-17</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/depromeet-landing-page</guid>
    <description>
    <![CDATA[두 기수의 랜딩 페이지를 만들며 경험한 것들을 공유합니다.]]>
    </description>
    <content:encoded>
      <![CDATA[<p><img src="https://user-images.githubusercontent.com/26461307/225900467-d6d59a91-eea3-41a6-b84f-8239cfc1469b.png" alt="디프만 랜딩 페이지"></p>
<p>디프만은 <code>디자이너와 프로그래머가 만났을 때</code>의 줄임말로, 직장인과 대학생을 대상으로 서비스 개발과 성장을 목표로 진행하는 동아리다.</p>
<p>운이 좋게도 11기에 참여할 수 있게 되었고 22년 하반기부터 시작된 <code>12기</code>와 23년도 상반기에 시작될 예정인 <code>13기</code>의 운영진을 맡게 되었다.</p>
<p>운영진으로써 참여하는 이유들 중 웹 개발자와 디자이너 직군에게는 큰 매리트(일 수도 있는)가 하나 있는데, 바로 오늘 동아리의 랜딩 페이지를 리브랜딩하고 개발하는 것이다.</p>
<p>나 또한 개발자로써 사이드 프로젝트 중 가장 많은 사용자를 접할 것이라 생각했기에 기대하며 운영진으로써 참여하였고</p>
<p>두 기수의 랜딩 페이지를 개발하며 겪은 점을 공유하고자 한다.</p>
<h2 id="스캐폴딩" class="heading">스캐폴딩</h2>
<p>12기의 랜딩 페이지를 개발할 때 가장 먼저 고민한 점은 <code>기존의 구조</code>를 따라갈지, 혹은 <code>새로 스캐폴딩</code>할지 였다.</p>
<p>기존의 구조는 그때 당시 접해보지 않았던 앵귤러의 모듈 기반과 비슷한 구조였어서 흥미로웠지만, 결과론적으로 새로 스캐폴딩하는 선택을 하였고 이유는 다음과 같다.</p>
<h3 id="랜딩-페이지의-특성">랜딩 페이지의 특성</h3>
<p>엄청나게 많은 경험이 있지는 않지만, 외주 개발을 하였을 때 상당수가 랜딩 페이지 개발이였다.</p>
<p>그렇기에 비즈니스 로직이 거의 없다시피한 랜딩 페이지에 기존의 구조와 코드 스타일을 따르는 것은 소모되는 리소스에 비해 이점이 없다고 생각되었다.</p>
<br />
<p>또한 리브랜딩이 되어 모든 디자인과 구성이 달라져, 이전의 구조가 이번 기수의 랜딩 페이지에도 적합할 지는 장담할 수 없었다.</p>
<h3 id="마감-기간">마감 기간</h3>
<p>많은 지원자들과의 약속인 모집 기간 일정에 맞추어 개발이 진행해야 되었고,</p>
<p>디자인에 소모되는 일정을 파악하지 못했던 우리에게 주어진 개발 기간은 채 4일이 되지 않았다.</p>
<p>본업으로써 개발을 하는 것이 아닌 모두가 여가 시간을 활용해서 개발을 진행해야 되었기 때문에 굉장히 촉박한 일정이라 생각되었고</p>
<p>이러한 이유로 이전 구조에 맞추어 개발하는 것보다 새롭게, 우리가 편한 방식대로 개발하는 것이 일정을 맞출 수 있는 유일한 방법이라 판단하였다.</p>
<h2 id="유산" class="heading">유산</h2>
<p>새롭게 프로젝트를 구성하지만 <code>서비스 정보</code>는 이전의 프로젝트에서 가져와 사용하였다.</p>
<blockquote>
<p>여기서 말하는 <code>서비스 정보</code>는 이전 기수에서 개발한 서비스들의 이미지와 설명, 개발자명과 같은 정보들이다.</p>
<p>이전 기수가 적지 않으며 연락할 수 있는 채널이 따로 존재하지 않기에 재사용은 피할 수 없는 선택이였다.</p>
</blockquote>
<h3 id="이미지-형식">이미지 형식</h3>
<p>이전 기수의 정보들을 확인하며 이상한 점이 한 개 존재하였는데, 서비스의 로고가 아닌 이미지들도 <code>svg</code> 파일로 관리되고 있었다.</p>
<blockquote>
<p>svg의 경우 화려할 수록 (요소가 많을 수록) 파일의 크기가 커진다.</p>
</blockquote>
<p>확인해 본 결과 이미지의 크기가 메가바이트 단위였고, 그로 인해 이미지 로드에 굉장한 시간이 소모되었다.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/225908912-34b0682d-2491-4b3a-bb7d-710b7689b632.png" alt="11기 프로젝트 페이지 라이트하우스"></p>
<p>물론 이미지 파일이 굉장히 많았지만, 이는 필히 언젠가는 수정해야할 과제라고 생각되어 약 150개의 이미지를 svg에서 png로 변환하였다.</p>
<blockquote>
<p>당시에는 webp와 같은 최신 포맷을 알지 못했다.</p>
</blockquote>
<p><img src="https://user-images.githubusercontent.com/26461307/225909928-6f2abc57-683e-42dd-88b4-bb2981829f9e.png" alt="12기 프로젝트 페이지 라이트하우스"></p>
<p>이를 통해 많은 지표를 개선할 수 있었고, 노가다성이 짙은 작업이였지만 동아리와 동아리에 관심이 있는 많은 사람들에게 기여한 것 같아 기억에 남는다.</p>
<h3 id="정적-사이트">정적 사이트</h3>
<p>이미지를 포함한 서비스들의 정보는 상수로써 관리되고 있었다.</p>
<p>Next.js 환경이였기에 이는 페이지별로 정적으로 생성될 수 있음을 의미하지만 그렇지 않았고, 클라이언트 사이드에서 처리되고 있었다.</p>
<blockquote>
<p>물론 우리와 같이 촉박한 혹은 더 촉박한 일정이셨을 확률이 다분하고</p>
<p>12기 또한 1차 배포 이후에 SSG를 적용했기에 나무랄 생각은 없고 오히려 운영에 고생하셨음을 알기에 감사한 마음이 크다.</p>
</blockquote>
<p>빠른 페이지 로드로 사용자 경험을 증진시키며, 검색 엔진 최적화를 통해 더욱 많은 사람들이 동아리를 접할 수 있음을 이유로 작성된 상수를 이용해 SSG로써 개선하였다.</p>
<blockquote>
<p>관련한 지표를 이미지로 남겨두진 않았지만, TTI를 0.4초, LCP를 1.5초 감소시킬 수 있었다.</p>
</blockquote>
<h2 id="모니터링" class="heading">모니터링</h2>
<p>위에서 언급했듯이 동아리 랜딩 페이지를 개발을 하고 싶었던 이유는 많은 사용자를 접한다는 것이다.</p>
<p>하지만 얼마나 많은 사용자가 접하는 지, 검색 키워드는 무엇인지 알 수 있는 도구들이 부착되어 있지 않았다.</p>
<p>이는 굉장히 많은 지표의 손실과 더불어 '지표가 없는 개선은 나침반없는 항해'라는 말에 공감하는 나에게는 필히 부착이 필요하다고 생각되었다.</p>
<h3 id="사용자-모니터링">사용자 모니터링</h3>
<p>종합적인 사용자 지표 확인을 이유로 <a href="https://analytics.google.com/analytics/web/" target="_blank" rel="noopener noreferer">GA</a>를 부착하였고,</p>
<p>히트맵과 녹화 등 더욱 세부적인 사용자 지표 확인을 이유로 <a href="https://www.hotjar.com/" target="_blank" rel="noopener noreferer">Hotjar</a>를 부착하였다.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/225918518-7ba50d79-f177-49ad-b021-76ff517cf217.png" alt="디프만 hotjar"></p>
<p>부착 이후 쌓인 지표를 사용해 모집 기간 마감 이후 기능 추가를 계획하는 등, 동아리 운영에 기여할 수 있었어서 기억에 남는 경험이 되었다.</p>
<h3 id="서치-콘솔">서치 콘솔</h3>
<p>지금 구글에 '디프만'을 검색하면 가장 위에 랜딩 페이지가 위치한다.</p>
<p>물론 CTR<sup><a href="#user-content-fn-1" id="user-content-fnref-1" data-footnote-ref aria-describedby="footnote-label">1</a></sup>이 높아서 그렇겠지만 이렇게 디프만을 찾는 사람들은 얼마나 있는지,</p>
<p>다른 어떤 검색어로 노출이 되는지, 그 비율의 노출수는 얼마인지 확인할 수 있다면 좋겠다고 생각했다.</p>
<p>그렇기에 <a href="https://support.google.com/webmasters/answer/9128668?hl=ko" target="_blank" rel="noopener noreferer">구글 서치 콘솔</a>에 등록하였다.</p>
<br />
<p>등록은 GA 부착을 선행하였기에 쉽게 할 수 있었지만, 사이트맵이 존재하지 않아 메인이 아닌 많은 페이지들이 검색 엔진에 노출되고 있지 않았다.</p>
<p>이를 해소하고자 Next.js의 SSG로 만든 사이트들의 사이트맵 생성을 자동화해주는 <a href="https://www.npmjs.com/package/next-sitemap" target="_blank" rel="noopener noreferer">next sitemap</a>을 사용해 서치 콘솔에 제출하였다.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/225923482-bf819974-d7f9-4544-bdbe-702d559f0f1a.png" alt="디프만 서치 콘솔"></p>
<p>사실 SSG 사용과 서치 콘솔을 리드한 가장 큰 이유가 위 사진 때문인데,</p>
<p>위 사진처럼 디프만에서 개발된 서비스를 검색했을 때 <code>디프만</code>이 노출되게 하고 싶었다.</p>
<br />
<p>검색 엔진이 늘 그렇듯 즉각적으로 효과를 볼 수 있진 않았지만, 약 반년이 지난 지금은 게재 순위가 1위인 서비스도 있고 이를 통해 노출과 클릭이 되고 있어 뿌듯한 감정이 크다.</p>
<h2 id="인터랙티브" class="heading">인터랙티브</h2>
<p>내가 동아리 랜딩 페이지를 개발하며 가장 넣고 싶었던 것이 <code>인터랙션</code>이다.</p>
<p>인터랙티브함으로써 사용자에게 더욱 큰 인상을 남길 수 있을 것이라 생각하였고, 무엇보다 내가 인터랙티브한 서비스를 좋아하기 때문이다.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/225927090-178d6404-89f2-47d1-ae23-4a7382b64a38.gif" alt="디프만 12기 인터랙션"></p>
<p>다른 사이드 프로젝트에서 경험했듯이, 인터랙션까지 디자인을 받진 않았지만 내가 보기에 디자인과 잘어울리는 방향으로 추가하였고 다행히 디자이너분들에게 긍정적인 피드백을 받을 수 있었다.</p>
<br />
<p>물론 인터랙션을 넣어 지표로써 긍정적인 영향을 미쳤는지는 확인할 수 없지만 더욱 내 마음에 드는 랜딩 페이지를 만들 수 있으면서 인터랙티브 디자이너(?)로써 인정받을 수 있었던 경험이라 기억에 남는다.</p>
<h2 id="스캐폴딩-two" class="heading">스캐폴딩 two</h2>
<p>위 내용까지가 <code>12기</code> 랜딩 페이지를 개발하면서 겪은 경험이고, 지금부터는 그나마 최근인 <code>13기</code> 랜딩 페이지를 개발하며 겪은 경험을 공유하려 한다.</p>
<br />
<p>이번에도 동일하게 새로운 브랜딩으로 개발이 진행되어야 했고 똑같이 <code>스캐폴딩</code>을 할지 고민이 되었다.</p>
<p>결과부터 말하자면 기존 12기의 구조를 선택하게 되었는데 이유는 다음과 같다.</p>
<h3 id="인력과-일반적">인력과 일반적</h3>
<p><code>13기</code> 랜딩 페이지를 개발하는 인력에 나를 포함해 <code>12기</code> 랜딩 페이지를 개발한 운영진이 2명이 있었으며,</p>
<p>다소 일반적이라고 생각되는 구조를 사용했기에 다른 개발자분들께서도 무리가 없을 것이라고 판단하였다.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/225934228-c0d31452-6d21-4096-9106-3d84bd08154e.png" alt="디프만 13기 리뉴얼 시작"></p>
<p>물론 무리는 아니지만, 적응이 힘들 수도 있다고 생각되었기 때문에 리뉴얼 베이스 브랜치를 <a href="https://github.com/depromeet/www.depromeet.com/pull/191" target="_blank" rel="noopener noreferer">드래프트로 띄운 PR</a>에 작업 시에 궁금할 만한 혹은 사용했던 것들을 적음으로써 해소하고자 노력했다.</p>
<h3 id="부분적-재활용">부분적 재활용</h3>
<p>스캐폴딩을 새로하진 않았지만, 랜딩 페이지의 주가 되는 퍼블리싱은 새롭게 작업하였다.</p>
<p>그렇게 한 이유는 랜딩 페이지의 특성상 기능이 있는 컴포넌트는 거의 없으며,</p>
<p>기존에 디자인이 비슷한 컴포넌트가 존재하더라도 수정하는 행위보다 새로 만드는 행위가 리소스가 덜 들것이라고 판단하였기 때문이다.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/225934221-1dc48798-cdff-4b29-88a3-1f69ab8d0221.png" alt="이전 에셋 확인 방법 PR"></p>
<p>물론 아예 삭제하지는 않고,따로 디렉토리를 분리하고 <code>tsconfig</code>, <code>eslint</code> 세팅을 통해 빌드 과정에서 제외시켜 참고할 수 있도록 하였다.</p>
<br />
<p>그렇게 이전의 것을 유지하는게 효과적인 것은 유지하며,</p>
<p>새롭게 만드는 것이 효과적이면 새롭게 만들 수 있도록 환경을 구성했다.(고 믿는다)</p>
<h2 id="성능" class="heading">성능</h2>
<p><img src="https://user-images.githubusercontent.com/26461307/225938276-fe4f5b91-ec89-4c4b-b6d9-c70f8a26368b.png" alt="디프만 12기 지표"></p>
<p><small>12기 홈</small></p>
<p>위의 <code>12기</code> 라이트하우스 지표 또한 만족스럽지 못하다고 생각한 사람들이 많을 것이다.</p>
<p>물론 나 또한 그럤고, 이를 해결하고 싶었다.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/225938458-86ce1282-4902-41fe-9094-6ef344b2fdba.png" alt="디프만 12기 이미지 로드"></p>
<p><small>12기 성능 측정</small></p>
<p>성능 측정을 한 결과 이미지 로드에서 굉장한 시간이 소모되고 있었고 랜딩 페이지 특성상 이미지가 아니면 성능을 잡아먹는 요소도 없었기에 이것만 해결된다면 상당 부분 개선될 것이라 생각하였다.</p>
<br />
<p>개선 방법은 위에서도 언급한 적이 있는 <code>webp</code> 포맷을 사용하는 것이라 생각되었는데,</p>
<p>실제로 피그마에서 동일한 이미지를 내보내기 했을 때 용량 크기가 6배에 가까웠기 때문이다.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/225940328-8ee39432-9e04-4b95-b908-23e3a09c3435.png" alt="스크린샷 2023-03-17 오후 11 46 12"></p>
<p><small>13기 측정 결과</small></p>
<p><img src="https://user-images.githubusercontent.com/26461307/225939745-0329b820-e47c-4bdd-9f38-351742785489.png" alt="스크린샷 2023-03-17 오후 11 39 11"></p>
<p><small>13기 홈</small></p>
<p><img src="https://user-images.githubusercontent.com/26461307/225939728-75d8bcec-2c0d-4dd8-a33c-c8b9ae3bdde5.png" alt="스크린샷 2023-03-17 오후 11 38 34"></p>
<p><small>13기 프로젝트</small></p>
<p>절대적인 크기가 감소했기에 그에 비례하게 요청 응답 시간이 감소했고 여러 방면에서 이전에 몰랐던 것들, 미처 신경을 쓰지 못했던 것들을 적용해 전체적인 지표를 개선할 수 있었다.</p>
<blockquote>
<p>코드로써의 성능 개선을 위해 Next.js의 dynamic import, Framer-motion의 lazyMotion 등을 사용했다.</p>
</blockquote>
<h2 id="인터랙티브-two" class="heading">인터랙티브 two</h2>
<p><code>13기</code> 랜딩 페이지를 확인한 분들은 이전보다 인터랙티브하지 않다고 생각할 것이다.</p>
<p>이것은 현재의 디자인에 어울리지 않으며, 내가 너무 인터랙티브한 것이 촌스럽다는 생각으로 바뀌었기 때문이다.</p>
<blockquote>
<p>트렌드의 영향인지, 과유불급을 깨달은 것인지 정확한 이유는 모르겠다.</p>
</blockquote>
<p><img src="https://user-images.githubusercontent.com/26461307/225945194-2328a2b4-9fc6-4c88-9dda-206f1702a0ca.png" alt="디프만 13기 디자인"></p>
<p>개발 초기에는 <code>12기</code>때 사용했던 화면에 잡힐 때 애니메이션이 재생되는 방식을 사용했으나 개인적으로 <code>13기</code> 디자인에는 안어울리는 방법이라 판단되었다.</p>
<br />
<p>하지만 여전히 인터랙티브한 웹이 되었으면 좋겠다고 생각하여 적용한 것이 배경이 투명한 이미지와 함께 스크롤이 트리거가 되는 애니메이션을 사용하는 것이다.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/225966367-237ee831-15f2-494b-8e49-d2f9ea18331b.gif" alt="디프만 13기 인터랙션"></p>
<p>개인적으로 많이 고민해서 덜어내고, 적용한 인터랙션이라 기억에 남으며</p>
<p>소프트웨어 설계에서 항상 언급하는 중용과 상황에 따라 다른 것을 디자인에서도 체감할 수 있었던 경험이였다.</p>
<h2 id="커스텀-커서" class="heading">커스텀 커서</h2>
<p><code>13기</code> 랜딩 페이지에는 <code>커스텀 커서</code>가 들어가는데,</p>
<p>이 커스텀 커서가 상태에 따라 크기가 변경되어야 하는 요구사항이 있었다.</p>
<br />
<p>처음에는 단순히 css를 이용해 <code>cursor: url()</code>과 같이 사용하며, hover 시에 이미지를 바꿔주는 방법을 생각했으나</p>
<p>매끄럽지 않아 사용자 경험이 저하될 것이라 판단되었다.</p>
<br />
<p>그렇기에 적용한 방법이 기본 커서를 숨기며</p>
<p>마우스 이벤트에 따라 이동하는 컴포넌트를 두고, 전역 상태로써 커서의 상태를 관리하는 것이다.</p>
<p>커서의 상태가 변할 때 transition을 걸어 자연스럽게 커서의 크기를 변경할 수 있었다.</p>
<h3 id="마우스-이동">마우스 이동</h3>
<p>마우스 이벤트에 따라 위치를 바꾸는 것을 어떤 방법으로 할지 고민이 되었는데 방법은 크게 2가지이다.</p>
<ul>
<li>requestAnimationFrame을 사용해 불필요한 렌더링을 줄이지만 state를 사용하는 방법</li>
<li>state 없이 ref의 인라인 스타일을 변경하지만 moust move 이벤트 마다 렌더링이 발생하는 방법</li>
</ul>
<p>결과론적으로 후자의 방법을 선택하였다.</p>
<p>가장 큰 이유가 requsetAnimationFrame에서 mouse position을 알 수 있는 방법이 없기에, state를 사용해야 했고 이는 동일하게 mouse move 이벤트마다 state의 변경 요청이 들어간다는 것이다.</p>
<blockquote>
<p>throttle을 사용할 수도 있었겠지만, 매 프레임이 갱신되기 이전에 throttle이 돌아갈지 확신하지 못했다.</p>
</blockquote>
<p>후자의 방법은 state의 변경 요청 없이 mouse move 이벤트마다 스타일을 바꿔주어 성능상 이점이 있을 것이라 판단했다.</p>
<p><code>무수히 많은 state 변경 요청</code>보다 <code>무수히 많은 리페인트</code>가 성능상 이점이 있을 것이라 판단한 것이다.</p>
<br />
<p>물론 정확하게 확인할 방법이 떠오르지 않기에 확인을 못하여 내 판단이 옳은지 지금도 알지 못한다.</p>
<h3 id="커서의-상태">커서의 상태</h3>
<p>커서의 상태를 다루기 위해 전역 상태가 필요하다고 생각되었고 context api를 적용할 시 clickable(구독하고 있는)한 요소가 많아 불필요한 렌더링이 발생할 것이라 생각되었다.</p>
<p>이를 해소하기 위한 도구로 <code>recoil</code>, <code>zustand</code>, <code>jotai</code>를 고민하였는데 결과부터 말하자면 도입하게 된 것은 <code>jotai</code>이다.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/225953265-902a7cbe-d447-4d1c-a0a8-a155df93ec10.png" alt="jotai 도입 과정"></p>
<p>이미 글이 길어져 피로감을 느끼실 수 있기에 jotai 도입 과정은 이미지와 <a href="https://github.com/depromeet/www.depromeet.com/pull/197" target="_blank" rel="noopener noreferer">PR 주소</a>를 남긴다.</p>
<br />
<p>사실 돌이켜 생각해보면 개발이 편하다는 이유로 도입한 것은 아닐까 의심된다.</p>
<p>랜딩 페이지로써 성능을 저하할 요소가 거의 없고, context api를 사용해 실제로 불필요한 렌더링이 발생하는지 확인을 하지 않았기 때문이다.</p>
<br />
<p>처음 맞닥뜨린 성격의 요구사항이라 확실하지 않은 추측들로 구현되었다.</p>
<p>그렇기에 제일 기억에 남는 경험임과 동시에 가장 공유하고 피드백을 듣고 싶은 경험이다.</p>
<h2 id="마치며" class="heading">마치며</h2>
<p>이 개발기를 통해 가장 전달하고 싶은 점은 엄청나고 숨겨진 개발 방법은 없다는 것이다.</p>
<br />
<p>동아리에 들어가서 직장인과 프로젝트하기 이전, 랜딩 페이지를 만들기 이전에는 많은 사람들이 사용하는 서비스는 숨겨진 엄청난 기술이 있을 것이라 생각했다.</p>
<p>나처럼 생각해 많은 사람들이 흔히 말하는 <code>현업인</code>은 엄청난 실력자들이라 생각하곤 한다.</p>
<p>하지만 모두 닿을 수 있을 정도의 거리에 있는 기술과 방법들을 사용하며 현업인이라고 모두가 엄청난 실력자는 아니라는 것이다.</p>
<p>더욱 닿을 수 있는 거리를 늘리기 위해 항상 내가 모르는 방법과 기술을 찾고 내가 아는 것과 비교하는 것이 중요하다고 감히 조언하고 싶다.</p>
<blockquote>
<p>물론 내가 FANNG 수준의 서비스를 본 적은 없음은 물론, 오픈소스 프로젝트만 본 것이라 단편적인 경향이 농후한 말인 것을 알아주길 바란다.</p>
</blockquote>
<p>마지막으로 많은 사람이 접하고 참여하길 원하는 동아리의 랜딩 페이지를 만듬으로써 내가 만든 것을 다른 사람이 클론 코딩을 하는 경험도 겪을 수 있었는데, 여러 방면으로 감회가 새롭고 따뜻한 경험이였다.</p>
<br />
<p>이외에도 다양한 경험을 할 수 있게 만들어준 동아리에 속할 수 있음에 감사하고 동아리에 참여하는 많은 사람들이 나와 같이 긍정적인 경험으로 남길 바라는 마음이 크다.</p>
<blockquote>
<p>글에서 다룬 디프만 랜딩 페이지는 <a href="https://www.depromeet.com/" target="_blank" rel="noopener noreferer">www.depromeet.com</a>에서 확인할 수 있다. (아마 23년 9월까지는 본인이 만든 것이 사용될 것이다.)</p>
</blockquote>
<section data-footnotes class="footnotes"><h2 id="footnote-label" class="sr-only heading">Footnotes</h2>
<ol>
<li id="user-content-fn-1">
<p>click-through rate의 약자로, 클릭으로 이루어진 노출수의 비율이다. <a href="#user-content-fnref-1" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
</ol>
</section>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[E2E 테스트 시 API mocking이 필요할까?]]></title>
    <link>https://www.hyesungoh.xyz/is-api-mocking-need-for-e2e-test</link>
    <pubDate>2023-03-12</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/is-api-mocking-need-for-e2e-test</guid>
    <description>
    <![CDATA[종단간 테스트에서 API mocking의 필요성에 대한 고민의 결과와 배경을 공유합니다.]]>
    </description>
    <content:encoded>
      <![CDATA[<p><img src="https://user-images.githubusercontent.com/26461307/224543639-cda3e16f-064d-4c1d-8a15-c0e0b8c86531.png" alt="E2E 테스트 시 API mocking이 필요할까? w/ 영감탱"></p>
<p>종단간(이하 E2E) 테스트에서 API mocking이 필요할까? 에 대한 고민의 결과와 배경을 공유합니다.</p>
<h2 id="api-mocking" class="heading">API mocking?</h2>
<p>배경을 설명하기 전에</p>
<p>본문에서 다루는 <code>API mocking</code>은 <a href="https://github.com/mswjs/msw" target="_blank" rel="noopener noreferer">MSW</a>나 <a href="https://docs.cypress.io/api/commands/intercept" target="_blank" rel="noopener noreferer">Cypress의 intercept</a> 등을 이용해 네트워크 리퀘스트를 가로채어 API가 반환하는 값을 사용하는 것이 아닌 클라이언트 개발자 정한 값을 반환하도록 하는 행위를 뜻한다.</p>
<h2 id="배경" class="heading">배경</h2>
<p><a href="https://www.depromeet.com/" target="_blank" rel="noopener noreferer">디프만</a> 과정에서 개발하고, 과정이 끝난 후 약 1년이 지난 지금까지 운영, 개발하고 있는 <a href="https://litt.ly/ygtang" target="_blank" rel="noopener noreferer">영감탱</a> 프로젝트에서 발생한 문제가 고민을 떠올린 배경이다.</p>
<blockquote>
<p>영감탱에는 Cypress를 사용한 E2E 테스트 케이스가 존재한다.</p>
</blockquote>
<h3 id="배경의-배경">배경의 배경</h3>
<p>영감탱을 지속적으로 운영할 수 있었던 이유 중에 하나가 사용자의 관심인데, 우연치 않게 바이럴이 되어 (내 기준에서) 많은 사용자들이 사용하는 것을 우리 모두가 알게 되었다.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/224539732-c8ad868e-8d0c-4e40-9c4b-f9a49549692f.png" alt="영감탱 사용자 지표"></p>
<p>이것과 함께 신년 버프(?)가 도화선이 되어 미뤄두었던 대대적인 개선을 진행하게 되었다.</p>
<p>많은 개선 지점 중의 하나가 프로덕션 환경과 개발 환경의 API 분리였는데, 질문의 배경은 이때 떠오르게 되었다.</p>
<h3 id="api-의존">API 의존</h3>
<p><img src="https://user-images.githubusercontent.com/26461307/224540043-cbac4ba9-0ac0-4623-b3ac-550f1c2bcbb2.png" alt="E2E 테스트 케이스 실패"></p>
<p>API 이중화가 완료된 이후 클라이언트의 CI에서 통과하지 못하는 E2E 테스트 케이스가 생겼다.</p>
<p>확인한 결과 개발 서버가 잠시 내려간 상태여서 발생한 이슈였고</p>
<p>이 지점에서 API mocking을 할까? 라는 생각이 떠올랐다.</p>
<h2 id="장단점" class="heading">장단점</h2>
<p>물론 서버의 의존성을 갖는 것이 부정적이기만 하다면, 그냥 mocking을 하면 된다.</p>
<p>하지만 트레이드오프가 있는 선택이라고 생각되었기에 그 자리에서 떠오른 장단점을 팀원들과 의논해 보았다.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/224540195-7fcb1f70-8a30-4533-be42-07932cf0ddfb.png" alt="영감탱 슬랙 스레드"></p>
<p>팀원들과 의논하고, 여러 가지 검색해 본 결과를 정리하자면 다음과 같다.</p>
<h3 id="api-mocking의-장점">API mocking의 장점</h3>
<ul>
<li><code>서버 상태에 의존하지 않는다.</code></li>
</ul>
<p>이후 단점으로도 기술하겠지만, 장점의 측면만 보자면 의존하지 않아 테스트 케이스의 신뢰도가 전적으로 클라이언트에 있게 되는 것이다.</p>
<p>좋은 테스트 케이스를 판단하는 지표 중 하나가 신뢰도라고 생각되는데, 그 신뢰도가 클라이언트에 집중되어 있으면 테스트 케이스가 통과하지 못하였을 때 확인과 변경에 쉽게 대처할 수 있을 것이라 생각되었다.</p>
<ul>
<li><code>빠르다.</code></li>
</ul>
<p><a href="https://docs.cypress.io/guides/guides/network-requests" target="_blank" rel="noopener noreferer">Cypress 공식 문서</a>에서 소개하는 것처럼 API를 mocking하게 되면 실제 서버의 응답을 기다릴 필요가 없어 테스트 케이스가 더욱 빨리 실행되게 된다.</p>
<ul>
<li><code>데이터베이스가 오염되지 않는다.</code></li>
</ul>
<p>만약 E2E 테스트에서 글을 작성하거나, 삭제하는 등의 데이터베이스 조작이 존재한다면, 테스트가 실행될 때마다 필요 없는 데이터들이 적재되게 된다.</p>
<p>하지만 API mocking 시에는 필요 없는 데이터들이 적재되지 않는다.</p>
<h3 id="api-mocking의-단점">API mocking의 단점</h3>
<ul>
<li><code>서버 상태에 의존하지 않는다.</code></li>
</ul>
<p>장점과 동일하게 단점으로도 작용되며, 가장 큰 단점이라고 생각되었다.</p>
<p>의존하지 않는다는 것을 다른 말로 풀어보자면 <code>'실제 API와 일치한다는 보장이 없다.'</code> 이기 때문이다.</p>
<p>E2E 테스트가 의미하는 최종 사용자의 행위를 테스트한다는 것에 반하는 단점이라 생각되었다.</p>
<ul>
<li><code>변경에 대응할 지점이 늘어난다.</code></li>
</ul>
<p>만약 API 인터페이스에 변경이 생겼다면, 해당 API를 mocking한 코드에도 변경이 필요해진다.</p>
<p>API 인터페이스에 변경이 생겼을 때부터 클라이언트에 변경이 필요해지는 것은 맞지만, 변경에 대응해야 할 지점이 늘어나는 것은 추가적인 리소스의 소모라고 생각되었다.</p>
<ul>
<li><code>상대적으로 빠르지 않고, 데이터베이스가 오염된다.</code></li>
</ul>
<p>위 장점에서 언급한 것과 정확히 반대의 이유이다.</p>
<h2 id="선택" class="heading">선택</h2>
<p>팀원들의 다양한 경험과 의견을 바탕으로 의논한 결과 우리는 <code>mocking을 하지 않기</code>로 결정했다.</p>
<p>선택의 이유는 다음과 같다.</p>
<h3 id="e2e-테스트의-이유">E2E 테스트의 이유</h3>
<p>우리가 E2E 테스트를 사용하는 이유는 '최종 사용자의 행위를 점검한다'라는 것에 있는데, API를 mocking하게 되면 그 이유가 퇴색된다고 판단하였다.</p>
<p>그렇기에 서버 상태에 의존하면서 실제 API를 사용하는 것이 더욱 최종 사용자와 비슷한 행위를 테스트할 수 있는 방법이라 생각되었다.</p>
<h3 id="이중화">이중화</h3>
<p>테스트 환경에서 프로덕션 API를 사용하는 것이 아닌, 개발 API를 사용함으로써</p>
<p>API mocking의 장점으로 꼽았던 '데이터베이스의 오염'이 우리 애플리케이션에서는 필요한 장점이라 생각되지 않았다.</p>
<blockquote>
<p>물론 개발 API를 사용하는 것이 위에서 꼽은 이유에 반하는 선택이라고 생각할 수 있을 것 같다.</p>
<p>하지만 실제 최종 사용자의 행위의 비슷함과 트레이드오프를 고려했을 때 최적의 선택이라고 판단하였다.</p>
</blockquote>
<h3 id="리소스">리소스</h3>
<p>해당 고민의 결과를 반영해야 하는 '영감탱'은 사이드 프로젝트로써,</p>
<p>나를 포함한 모든 개발자, 디자이너분들이 풀타임으로 참여하는 것이 아닌 여가 시간을 활용해서 운영하고 있다.</p>
<p>이런 상황에서 변경에 대응해야 할 지점을 늘려 추가적인 리소스가 소모되는 방향은 지양하는 것이 좋을 것 같다고 의견이 모아졌다.</p>
<h2 id="하지만" class="heading">하지만</h2>
<p>설계, 기술의 도입 등 소프트웨어를 다루는 많은 부분에서 트레이드오프를 고려해야 하듯</p>
<p>API mocking을 도입하지 않는 것이 꼭 좋은 선택은 아니라고 생각된다.</p>
<p>참조한 문서들에서 부분적으로 도입하는 것도 제시하며, 분명히 필요한 상황이 있을 것이라 생각되기 때문에</p>
<p>이 글을 읽는 분들에게 본인의 상황에 맞는 방향을 선택하길 추천하고 싶다.</p>
<h2 id="참조" class="heading">참조</h2>
<ul>
<li><a href="https://stackoverflow.com/questions/71969081/should-i-mock-apis-in-end-to-end-testing" target="_blank" rel="noopener noreferer">Should I mock APIs in end-to-end testing? - stackoverflow</a></li>
<li><a href="https://docs.cypress.io/guides/guides/network-requests" target="_blank" rel="noopener noreferer">Cypress Network Requests</a></li>
</ul>
<h2 id="부록---playwright" class="heading">부록 - Playwright</h2>
<p>다른 사이드 프로젝트인 <a href="https://github.com/depromeet/ahmatda-web" target="_blank" rel="noopener noreferer">아맞다</a>에서 사용하고 있는 <a href="https://playwright.dev/" target="_blank" rel="noopener noreferer">Playwright</a>가 <a href="https://playwright.dev/docs/codegen-intro" target="_blank" rel="noopener noreferer">test generator</a>를 통해 상당한 DX를 제공하고, Cypress에 비해 상당히 빠른 실행 시간을 보여주어 마이그레이션을 고민하고 있었다.</p>
<p>원래는 위 장점들에 비해 Cypress의 장점을 체감하지 못했는데, 이번 고민의 과정에서 돌이켜 생각해 본 결과</p>
<p>다소 무겁긴 하지만 Cypress가 제공하는 CI와 플랫폼이 강력하다는 것을 체감하게 되었다.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/224543228-fd6268ab-9bd6-4dc5-813c-67f7724b2e54.png" alt="cypress 동영상 녹화 기능"></p>
<p>그중에서 테스트 케이스의 실행 동영상을 제공해 주어 시각적으로 어떤 부분이 잘못되었는지 확인할 수 있는 것이 크게 장점으로 생각되었다.</p>
<p>느린 실행 속도는 <a href="https://sorry-cypress.dev/" target="_blank" rel="noopener noreferer">Sorry cypress</a>라는 cypress의 유료 기능을 제공하는 도구가 있어 부분적으로 해결할 수 있을 것이라고도 생각되니 도입 혹은 마이그레이션을 생각하고 있는 분들에게 도움이 되길 바란다.</p>
<h2 id="이후에" class="heading">이후에</h2>
<p>글을 작성한 지 약 한 달이 지난 지금, API 상태에 따라 테스트 케이스가 실패한 것을 배경으로 서버 개발자님과 다시 이야기를 해보았다.</p>
<p><code>버그가 없는데 테스트가 깨진다</code>는 어색한 상황에 대해 어떻게 대처해야 할지 의논해 보았는데,</p>
<p>Mocking을 하는 환경과 하지 않는 환경 두 가지 모두를 테스트하면 좋겠다는 결론이 나왔다.</p>
<br />
<p>develop 브랜치에 합병할 때 클라이언트에서 작업한 내용이 사이드 이펙트를 불러 일으키는지 확인하기 위해 mocking을 하고,</p>
<p>본문에서 언급한 '최종 사용자의 행위를 점검'을 하기 위해 main 브랜치에 합병할 때 실제 API 환경에서 테스트를 하도록 구분하여 수행하는 것이 우리가 바라는 테스트 범위와 테스트의 신뢰도를 높일 수 있다고 판단되었다.</p>
<br />
<p>글을 작성할 때는 두 가지 환경을 분리하여 테스트하는 방법을 생각하지 못했었는데, 이번 의논을 통해 시야가 넓어진 느낌이 들었다.</p>
<p>리소스의 트레이드오프를 고려하지 않는다면 최적이고 최선의 방법이라고 생각된다.</p>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA['해커와 화가'를 읽고]]></title>
    <link>https://www.hyesungoh.xyz/해커와-화가</link>
    <pubDate>2023-03-08</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/해커와-화가</guid>
    <description>
    <![CDATA[해커와-화가]]>
    </description>
    <content:encoded>
      <![CDATA[<p><img src="https://user-images.githubusercontent.com/26461307/223711509-2a34a98e-4b04-4af3-a6d9-4bd086398a4e.jpeg" alt="해커와 화가"></p>
<h2 id="읽게-된-계기" class="heading">읽게 된 계기</h2>
<p>주변 지인에게 많이 추천을 받았다.</p>
<p>추천을 받은 이후 책을 읽기까지에 두 가지 요소가 크게 작용하였는데</p>
<p>하나는 와이 콤비네이터의 설립자가 쓴 책이라는 것,</p>
<p>다른 하나는 작가인 '폴 그레이엄'이 실제로 화가이자 해커(책에서 말하는 개발자)인 것이다.</p>
<p>화가와 해커의 공통점과 어떻게 이야기를 풀어나가는 지 궁금했다.</p>
<h2 id="읽은-후-느낀-점" class="heading">읽은 후 느낀 점</h2>
<p>책의 역자가 말한 것처럼 04년도에 쓰인 책이고 미국의 백인이 겪은 환경이라는 기준으로 쓰인 책이라는 인상을 깊게 받을 수 있었다.</p>
<p>그렇기에 공감이 힘든 문단도 여럿 존재하였지만, 나보다 먼저 책에서 말하는 해킹을 한 해커로써 배울 점은 충분히 많았다고 생각한다.</p>
<p>그 중에서 내가 기대했던 '해커'와 '화가'의 공통점으로 프로토타입을 뽑은 점,</p>
<p>작가의 첫 사업인 '비아웹'에 대한 이야기가 기억에 남는다.</p>
<br />
<p>해커로써 보는 눈이 굉장히 예리하다는 생각도 떼어 놓을 수 없었는데</p>
<p>서버에 기반을 둔 어플리케이션이 주류를 이룰 것이라는 것, 미래에 쓰일 언어의 조건 등</p>
<p>개발자로써가 아니라 인간적으로 혜안을 가진 사람이라고 생각되었다.</p>
<br />
<p>이 책을 엄청나게 추천을 한다고 말할 수는 없을 것 같다.</p>
<p>하지만 선대 해커의 경험과 혜안을 체험하고 싶으면서,</p>
<p>프로그래밍 언어를 혹은 라이브러리를 개발, 디자인, 연구하며,</p>
<p>무엇보다 자신의 주관이 뚜렷한 사람을 대상으로는</p>
<p>한 번쯤은 읽어보면 좋을 책이라고 생각이 들었다.</p>
<blockquote>
<p>리스프는 어떤 언어이길래 작가가 이렇게까지 신봉하나 궁금함을 품게 되었다.</p>
</blockquote>
<h2 id="밑줄-친-문장들" class="heading">밑줄 친 문장들</h2>
<ul>
<li>소설가, 화가, 그리고 건축가의 작업이 그런 것처럼 프로그램이란 전체 모습을 미리 알 수 있는 것이 아니라 작성해 나가면서 이해하게 되는 존재다. (p.46)</li>
<li>프로그램은 오직 사람이 읽기 위해서 작성되어야 한다. 컴퓨터가 그것을 실행하는 것은 부차적인 일이다. (p.59)</li>
<li>유행에 처음 발을 담그는 얼리어댑터는 야망에 의해서 움직인다. 자기가 정말 멋지다고 생각하는 사람들은 자신이 평범한 군중과 차별화되기를 원한다. (p.76)</li>
<li>사실 어떤 조직의 건강함을 측정하는 방법은 부정적인 생각이 허용되는 수준이라고 봐도 좋다. (p.88)</li>
<li>불복종이라는 것은 훌륭한 프로그래머를 만들어 내는 특성의 부산물이다. (p.92)</li>
<li>사람들이 자기가 원하는 것을 말하고 실천할 수 있는 사회에서는 가장 효율적인 해결책이 영향력 있는 사람이 내놓은 해결책을 누르고 선택될 수 있다. (p.97)</li>
<li>어떤 글을 쓸 때, 실제로 쓴 내용의 반 이상은 글을 쓰는 동안에 생각해 낸 것이라는 사실을 깨달은 적이 있는가? 소프트웨어도 이와 똑같다. 어떤 생강을 구현하기 위해서 일하는 동안 더 많은 생각이 떠오르는 것이다. 그래서 어떤 생각을 창고에 넣어 둔다는 것은 그 생각의 구현을 연기한다는 문제뿐만이 아니라 그것을 구현하는 동안 떠올렸을지도 모르는 수많은 좋은 생각 역시 창고에 넣어 둔다는 문제도 만들어 낸다. (p.118)</li>
<li>부자가 되기 위해서는 두 가지를 갖춘 환경에 있어야 한다. 두 가지란 바로 정당한 평가와 영향력이다. (p.161)</li>
<li>힘이 넘치는 사람은 자신이 배의 속도에 눈에 띄는 영향을 줄 수 있다는 생각에 고무되어 힘껏 노를 저을 것이다. (p.164)</li>
<li>밖에서 달리기를 하는 것과 집에 앉아서 TV를 보는 것 사이에서 선택해야 한다면 나가서 달리기를 해라. 두 개의 선택이 있고 그중 하나가 더 어려운 경우에 상대적으로 쉬운 것이 선택지로 떠오르는 이유는 대개 게으름 때문이다. (p.179)</li>
<li>형태는 기능을 따른다. (p.223)</li>
<li>단순히 레오나르도의 유전적 재능을 타고나는 것은, 피렌체가 아니라 밀라노에서 태어나는 불행을 극복하지 못한다. (p.232)</li>
<li>위대한 작품을 만드는 방법은 바로 자기 자신만의 미적 취향과 그것을 만족하게 할 수 있는 능력에 달려 있는 것이다. (p.234)</li>
<li>기계의 시간이 아니라, 프로그래머의 시간을 낭비하는 것이 진짜 비효율성이다. (p.258)</li>
<li>벤처 투자자나 잠정적 구매자를 기쁘게 할 목적으로 제품을 만들지 말아야 한다. 오직 사용자를 기쁘게 만들기 위해서 제품을 만들어야 한다. 사용자를 얻게 되면 나머지는 저절로 따라온다. (p.302)</li>
<li>당신이 어떤 도구를 만들면, 사람들은 그 도구를 당신이 애당초 의도하지 않았던 방향으로 사용하기 마련이다. (p.321)</li>
<li>"가장 좋은 글쓰기는 다시 쓰는 것이다." - E. B. 화이트 (p.332)</li>
<li>문제를 해결할 가능성에 대해서는 낙관해야 하지만, 당신이 그 시점까지 개발한 해결책의 가치에 대해서는 끊임없이 회의를 해야 하는 것이다. (p.332)</li>
<li>화가가 작품을 완성하는 경우는 없다. 단지 그는 작업을 멈출 뿐이다. (p.346)</li>
<li>디자인이라는 것은 결국 언제나 사람들을 위한 것이다. 하지만 사용자만 사람인 것은 아니다. 디자이너도 사람이다. (p.346)</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA['소프트웨어 장인'을 읽고]]></title>
    <link>https://www.hyesungoh.xyz/소프트웨어-장인</link>
    <pubDate>2023-02-23</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/소프트웨어-장인</guid>
    <description>
    <![CDATA[소프트웨어-장인]]>
    </description>
    <content:encoded>
      <![CDATA[<p><img src="https://user-images.githubusercontent.com/26461307/220707412-e909b925-657c-4d9e-bae2-e346da2d239b.jpeg" alt="소프트웨어 장인"></p>
<h2 id="읽게-된-계기" class="heading">읽게 된 계기</h2>
<p>나에게 책을 읽는 것을 추천한 책에서 말하는 한 '장인'은 책을 읽는 것을 추천하는 여러 이유 중 하나로</p>
<p>이미 많은 경험을 쌓은 개발자의 이야기를 통해 내가 겪을 시행착오를 줄이고, 보다 넓은 시야를 가질 수 있다고 하였다.</p>
<p>나도 시행착오를 줄이고 보다 넓은 시야를 가지고, 무엇보다 책의 제목에서 말하고 있는 '소프트웨어 장인'이 되고 싶었기에 이 책을 읽게 되었다.</p>
<br />
<p>구체적인 이유도 있는데, '면접'에 대한 것이다.</p>
<p>면접자로써도 분명 필요하겠지만, 내가 참여하고 있는 커뮤니티의 운영진으로써 면접관으로 들어갈 일이 얼마 남지 않았다.</p>
<p>커뮤니티가 필요로 하는 지원자를 효과적으로 찾고 싶고, 보다 좋은 면접 경험을 만들고 싶다.</p>
<p>책의 목차 중 면접에 관한 것이 존재해 기존 우선순위보다 높혀 읽게 되었다.</p>
<h2 id="읽은-후-느낀-점" class="heading">읽은 후 느낀 점</h2>
<p>결론부터 이야기하자면, 나는 이 책을 매우 추천한다.</p>
<p>책에서 이야기하는 많은 사례들을 통해 내가 원했던 간접 경험들과 넓은 시야를 가질 수 있었던 것은 물론</p>
<p>'소프트웨어 장인정신', 즉 프로페셔널리즘에 대해서 생각할 수 있게 되었고 많이 배울 수 있었다.</p>
<p>책을 읽기 전에는 고려하지 못했을 것들을 고려할 수 있게 되었다.</p>
<br />
<p>개발자라는 직업을 대하는 태도부터, 면접관 그리고 면접자로서의 태도 무엇보다 평소의 나를 꼬집는듯한 이야기들은 나를 많은 방향으로 성장시켰음을 의심치 않는다.</p>
<p>책을 읽고 꼬집히는 부분이 많은 만큼</p>
<p>지금까지 내가 가지고 있던 생각과 열정이 다른 사람에 의해 먼저 정의되고, 통념되고 있었다는 것을 알게 되었다.</p>
<p>이를 통해 나의 것들을 조금 더 포장해서 말할 수 있는 것은 물론, 추가적인 가치들을 얹을 수 있게 되었다.</p>
<br />
<p>위에서 이야기했듯이 나는 이 책을 매우 추천한다.</p>
<p>하지만 이제 막 개발을 시작한 도제(수습생)들에게는 추천하진 않는다.</p>
<p>책에서 이야기하는 개념들에 공감이 되기 힘들다고 생각하기 때문인데, 그에 반해 경험이 쌓인 개발자라면 꼭 한 번 읽어보았으면 좋겠다고 생각한다.</p>
<p>나에게도 더 많은 경험을 쌓은 후 다시 읽어보면 또 다르게 배울 점이 많을 것이라 생각되는 책이다.</p>
<blockquote>
<p>책을 읽는 도중에 남긴 이야기는 <a href="https://diary.hyesungoh.xyz/posts/about-good-book" target="_blank" rel="noopener noreferer">다음 링크</a>에서 확인할 수 있다.</p>
</blockquote>
<h2 id="밑줄-친-문장들" class="heading">밑줄 친 문장들</h2>
<ul>
<li>일을 하는 것도 중요하지만 그에 못지 않게, 일을 어떻게 하느냐도 중요합니다 (p.11)</li>
<li>매일 코드를 작성하는 일은 행복이었다. 그때 이후로, 아침에 눈을 뜰 때마다 오늘 할 일이 하고 싶어 기대되는 일만 하기로 스스로와 약속했다. (p.31)</li>
<li>코드를 잘 작성하는 것은 소프트웨어 프로페셔널이 가져야 할 최소한의 요건이다. 그에 더해 오늘날에는 테스트, 분석, 비즈니스에 대한 이해, 커뮤니케이션 능력, 보다 외향적인 성격을 소프트웨어 프로페셔널에게 요구한다. (p.41)</li>
<li>소프트웨어 장인정신은 소프트웨어 개발의 프로페셔널리즘에 대한 것이다. (p.58)</li>
<li>애플리케이션이 진화하려면 개발자들이 애플리케이션을 수정하는 일을 부담스러워해서는 안 된다. 테스트 주도 개발, 단순한 디자인, 비즈니스 용어로 표현된 코드는, 코드를 건강하고 잘 만들어진 상태로 유지하는 최선의 방법이다. (p.69)</li>
<li>소프트웨어 장인정신의 중심에는 멘토링과 공유가 있다. 소프트웨어 장인은 항상 열정적으로 자기발전을 추구한다. 이보다 더 큰 임무가 있다. 다음 세대의 장인을 준비시킬 책임이 있다. (p.71)</li>
<li>오래 전에 작성했던 코드를 지금에 와서도 고칠 부분이 없어 보인다면, 그것은 그동안 배운 것이 없다는 뜻이다. (p.77)</li>
<li>상사에게 대항할 수 없다는 불편함과 전체 상황 자체에 대한 증오 말고도 그렇게 무책임하게 밀고 나간 또 다른 원인이 우리 마음 속에 있었다. 마음 깊은 곳에서는 스스로가 얼마나 잘났는지 내보이고 싶었던 것이다. 그 일을 제대로 해내는 것이 어렵다는 것을 알았지만, 영웅이 될 수 있을 거라는 작은 가능성에 매달렸다. (p.113)</li>
<li>정직하지 못하고 불투명하면 회사 전체에 피해를 입힐 수 있다. 프로페셔널리즘은 나 자신과 팀 동료들 그리고 관리자들과 고객들에게 정직함을 의미한다. (중략) 다툼을 피하지 말고 부딪혀서 어려운 결정을 내릴 수 있어야 한다. (p.116)</li>
<li>문제를 숨기지 않고 드러내는 태도는 모두가 하나의 팀으로서 공동의 목표를 위해 일하고 있다는 징표이기 때문이다. (p.122)</li>
<li>실행 관례의 도입 자체를 관리자나 팀 구성원들에게 설득하려 하지 말고 현재 일하는 방식과 비교해서 그것이 가져올 이익에 집중을 해야 한다. 빠른 피드백 루프, 요구사항과 비용에 대한 더 나은 이해, 지식 공유, 줄어드는 버그, 전체적으로 자동화되고 릴리즈가 빨라지는 일들이 기술적 실행 관례를 도입함으로써 얻을 수 있는 가치들이다. (p.153)</li>
<li>항상 우리가 무엇을 하고 있고 그것을 왜 하고 있는지 질문해야 한다. 지금 하는 방법보다 더 나은 다른 방법이 없는가? 우리가 선택한 실행 관례가 우리 프로젝트에 적합한가? 그 실행 관례의 가치는 무엇인가? 무언가 다른 것을 시도해 볼 시점인가? (p.162)</li>
<li>어디로 가고 있는지 모르고 있다면, 결국 가고 싶지 않은 곳으로 간다. (p.168)</li>
<li>(인재 채용 중) 지속적으로 배우고 혁신하고 효율적인 실행 관례를 도입하고, 프로젝트의 성과와 코드의 품질에 주의를 기울이고, 문제를 풀기 위해 스스로 협력하고, 무엇이든 더 나은 방법을 추구한다면 ... (p.178)</li>
<li>나는 항상 새로운 것을 시도하고, 배우고, 지식을 공유하고, 커뮤니티 활동에 적극적인 사람을 원했다. (p.194)</li>
<li>사람들에게 새로운 절차나 새로운 실행 관례를 강제한다고 조직을 변화시킬 수 없으며 우리는 배움의 문화를 만들어 내야 한다. 사람들 스스로 모든 것을 더 나아지게 하고 싶어하는 동기를 부여할 수 있어야 한다. (p.244)</li>
<li>잘 작성된 코드는 단순하고, 작고, 테스트 가능하며 이해하기 쉽다. 그리고 가장 중요한 부분으로 코드가 해야 할 일을 해낸다. 코드는 버그와 고통의 근원이다. 더 적게 작성할수록 더 좋다. (p.301)</li>
<li>실용주의가 없는 장인정신은 장인정신이 아니다. 장인이 가장 중요하게 초점을 맞추는 것은 고객의 만족이다. 품질은 물론이고 시간과 비용도 고객 만족을 위한 구성요소다. 고객에게 가치를 전달할 수 없다면 잘 작성된 코드라고 할 수 없다. (p.306)</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA['그리스인 조르바'를 읽고]]></title>
    <link>https://www.hyesungoh.xyz/그리스인-조르바</link>
    <pubDate>2023-02-16</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/그리스인-조르바</guid>
    <description>
    <![CDATA[그리스인-조르바]]>
    </description>
    <content:encoded>
      <![CDATA[<p><img src="https://user-images.githubusercontent.com/26461307/219360261-0dd39445-fcee-459c-a82f-99a60a0f01f2.jpeg" alt="그리스인 조르바"></p>
<h2 id="읽게-된-계기" class="heading">읽게 된 계기</h2>
<p>미디어로 접한 많은 사람들이 '그리스인 조르바'를 인생 책으로 꼽았다.</p>
<p>그렇게 꼽은 많은 사람들이 '조르바'가 되기를 희망했다.</p>
<p>도대체 '조르바'는 어떤 사람이기에 많은 사람들이 닮고 싶어하는 지 궁금했다.</p>
<br />
<p>거기에 더해 나는 이전에도 고전은 전해지는 데에 이유가 있다고 생각해, 고전을 읽는 것을 좋아라한다.</p>
<p>전역 이후에는 처음 읽는 고전이였지만, 그렇기 때문에 더 기대되고 궁금증을 참을 수 없었다.</p>
<h2 id="읽은-후-느낀-점" class="heading">읽은 후 느낀 점</h2>
<p>많은 사람들이 '조르바'를 닮고 싶어하는 이유를 공감할 수 있게 되었다.</p>
<p>나 또한 '조르바'에게 닮고 싶은 부분이 있게 되었지만, 나는 '조르바'가 되고 싶은 마음보다는 나의 '조르바'를 만나고 싶은 마음이 더 큰 것 같다.</p>
<blockquote>
<p>이 책에서 묘사된 조르바는 저자 '니코스 카잔차키스'가 실제로 만난 인물이라 한다.</p>
</blockquote>
<br />
<p>내가 닮고 싶은 부분이라면 크게 두가지가 기억에 남는다.</p>
<p>사물을 처음 본 것처럼 대하는 것, 감정에 솔직한 것</p>
<p>나는 내 성격이 무디다고 생각하는데 (물론 장점도 있지만) 더럿 여러 부분에서 조금 더 예민하게 받아 들이면 책에서 말하는 자유와 행복을 영위할 수 있지 않을까 생각되었다.</p>
<p>나를 감고 있는 이성이라는 끈을 아예 잘라 자유를 찾을 수는 없을 것 같지만 잠깐이라도 자르고 그대로 받아들이는 시간이 있다면 책의 '나'처럼 조르바를 간접적으로나마 만난 경험을 할 수 있지 않을까 생각된다.</p>
<h2 id="밑줄-친-문장들" class="heading">밑줄 친 문장들</h2>
<ul>
<li>인간의 지각 능력이란 조잡하고 불확실한 법이다. 그래서 영혼은 아무것도 분명하고 확실하게는 예견할 수 없다. (p.13)</li>
<li>얼마나 사랑하면 손도끼를 들어 내려치고 아픔을 참을 수 있는 것일까 (p.29)</li>
<li>다른 정열, 보다 고상한 정열에 사로잡히기 위해 쏟아 왔던 정열을 버리는 것, 그러나 그것 역시 일종의 노예근성이 아닐까? 이상이나 종족이나 하느님을 위해 자기를 희생시키는 것은? 따르는 전형이 고상하면 고상할수록 우리가 묶이는 노예의 사슬이 길어지는 것은 아닐까? 그리고 우리는 좀 더 넓은 경기장에서 찧고 까불다가 그 사슬을 벗어나 보지도 못하고 죽는 것은 아닐까? 그렇다면, 우리가 자유라고 부르는 것은 무엇일까? (p.39)</li>
<li>사람을 부릴 줄 아는 사람은 책임감도 있는 법이라고 나는 생각했다. (p.74)</li>
<li>우리에게 버릇 들게 된 것들, 예사로 보아 넘기는 사실들도 조르바 앞에서는 무서운 수수께끼로 떠오른다. (p.77)</li>
<li>그러나 내가 조르바를 믿는 건, 내가 아는 것 중에서 아직 내 마음대로 할 수 있는 게 조르바뿐이기 때문이오. (p.82)</li>
<li>많은 사람은 자기보다 높은 곳에서 혹은 낮은 곳에서 복을 구한다. 그러나 복은 살마과 같은 높이에 있다. (p.134)</li>
<li>위대한 스승리아면 자기를 능가하는 제자를 만드는 것보다 더 즐거운 일은 없을 것이네. (p.136)</li>
<li>진정한 행복이란 이런 것인가, 야망이 없으면서도 세상의 야망은 다 품은 듯이 말처럼 뼈가 휘도록 일하는 것 ... 사람들에게서 멀리 떠나, 사람을 필요로 하지 않되 사람을 사랑하며 사는 것 ... (p.175)</li>
<li>어린아이처럼 그는 모든 사물과 생소하게 만난다. 그는 영원히 놀라고, 왜, 어째서 하고 캐묻는다. 만사가 그에게는 기적으로 온다. (p.223)</li>
<li>그와 함께 있으면 일은 포도주가 되고 여자가 되고 노래가 되어 인부들을 취하게 했다. 그의 손에서 대지는 생명을 되찾았고 돌과 석탄과 나무와 인부들은 그의 리듬으로 빨려 들어갔다. (p.262)</li>
<li>인생의 신비를 사는 사람들에게는 시간이 없고, 시간이 있는 사람들은 살 줄을 몰라요. (p.315)</li>
<li>믿음이 있습니까? 그럼 낡은 문설주에서 떼어 낸 나뭇조각도 성물이 될 수 있습니다. 믿음이 없나요? 그럼 거룩한 십자가도 그런 사람에겐 문설주나 다름이 없습니다. (p.321)</li>
<li>나는 조르바라는 사내가 부러웠다. 그는 살과 피로 싸우고 죽이고 입을 맞추면서 내가 펜과 잉크로 배우려던 것들을 고스란히 살아온 것이었다. 내가 고독속에서 의자에 눌어붙어 풀어 보려고 하던 문제를 이 사나이는 칼 한 자루로 산속의 맑은 대기를 마시며 풀어 버린 것이었다. (p.329)</li>
<li>일과 술과 사람에 자신을 던져 넣고, 하느님과 악마를 두려워하지 말지어다. 그것이 젊음이란 것이다. (p.341)</li>
<li>나는 조르바의 슬픔을 부러워하며 이런 생각을 했다. 그는 피가 덥고 뼈가 단단한 사나이. 슬플 때는 진짜 눈물이 뺨을 흐르게 했다. 기쁠 때면 형이상학의 채로 거르느라고 그 기쁨을 잡치는 법이 없었다. (p.359)</li>
<li>모든 것이 어긋났을 떄, 자신의 영혼을 시험대 위에 올려 놓고 그 인내와 용기를 시험해 보는 것은 얼마나 즐거운 일인가. (p.417)</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA['하버드 새벽 4시 반'을 읽고]]></title>
    <link>https://www.hyesungoh.xyz/하버드-새벽-4시-반</link>
    <pubDate>2023-02-08</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/하버드-새벽-4시-반</guid>
    <description>
    <![CDATA[하버드-새벽-4시-반]]>
    </description>
    <content:encoded>
      <![CDATA[<p><img src="https://user-images.githubusercontent.com/26461307/217572851-8c11a4e1-5b20-4d35-ac62-e78190153e77.jpeg" alt="하버드 새벽 4시 반"></p>
<h2 id="읽게-된-계기" class="heading">읽게 된 계기</h2>
<p>책을 읽자는 목표를 세운 이후에 주변 지인들에게 '인생 책'은 무엇인지 물어보곤 했다.</p>
<p>가까운 지인 중 한 명은 이 책을 읽고 인생이 바뀌었다고 말을 해주었고</p>
<p>평소에 명문 대학에 진학한 사람들을 동경<sup><a href="#user-content-fn-1" id="user-content-fnref-1" data-footnote-ref aria-describedby="footnote-label">1</a></sup>하는 나에게 '하버드'라는 이름은 흥미를 불러일으키기에 충분했다.</p>
<h2 id="읽은-후-느낀-점" class="heading">읽은 후 느낀 점</h2>
<p>이 책은 계속하여 '성공'을 위한 이야기를 하고 있다.</p>
<p>나는 사람마다 '성공'의 정의가 다를 것이라 생각하지만, 책에서 말하는 성공은 굉장히 좁은 의미의 성공인 것처럼 느껴졌다.</p>
<p>이에 따라 성공의 방법들을 굉장히 일반화된 모습으로 강력히 추천한다.</p>
<p>그리고 하버드 교수 혹은 출신이 말한 이야기, 사례가 많이 등장하는데 납득이 되고 공감이 되는 이야기도 많은 반면에 설득이 될 만큼의 구체적으로 이야기는 하지 못하고 있다고 생각이 들기도 하였다.</p>
<br />
<p>그렇지만 다른 사람들이 이 책을 추천하냐고 물어본다면 나는 한 번쯤은 읽어볼 만하다고 이야기할 것 같다.</p>
<p>그 이유는 내 가치관과 굉장히 흡사한 이야기를 하고 있었기 때문이다.</p>
<p>성공을 위해서는 열심히 해야 하며, 당장 행동해야 하며, 모험심이 있어야 하는 등의 이야기가 내 가치관과 매우 흡사해 공감이 가고 더 큰 자극을 불러 넣어주었다고 생각한다.</p>
<p>내 가치관과 흡사하며 책이 말하고 싶은 큰 주제들이 이중적이라고 생각될 때가 있기도 하였는데 (예를 들자면 '행동력'과 '신중함')</p>
<p>나에게는 그 사이에 적절한 중간을 잘 찾아야 된다고 말하는 것 같아 내 가치관에 부족한 점을 얹어주는 느낌이었다.</p>
<h2 id="밑줄-친-문장들" class="heading">밑줄 친 문장들</h2>
<ul>
<li>남들과 비슷한 시간 동안 일하고 공부하고, 비슷한 크기의 노력을 기울인다면 그에 대한 결과 또한 비슷할 수 밖에 없다. (p.16)</li>
<li>성공은 결코 게으른 자의 문을 두드리지 않는다. (p.23)</li>
<li>"게으름은 마치 철에 녹이 스는 것처럼 우리의 몸을 망가뜨린다. 자주 사용하는 열쇠는 언제나 반짝거리기 마련이다." - 프랭클린 루스벨트 (p.38)</li>
<li>끊임없이 발전하는 사람들의 공통점은 자기가 다른 사람에 비해 무엇이 부족한지를 늘 반성한다는 점이다. (p.44)</li>
<li>파도를 만나보지 못한 배는 없다. 인생이라는 바다에도 역시 온전하기만 했던 배는 없다. (p.78)</li>
<li>내가 삶을 대하는 태도와 삶이 나를 대하는 태도는 같을 수밖에 없다. (p.98)</li>
<li>행동하지 않으면 얻는 것도 없다는 사실을 반드시 기억해야 한다. 첫 걸음을 딛지 않으면 절대 도착점까지 갈 수 없다. (p.116)</li>
<li>오늘과 지금만이 모든 일을 시작할 가장 좋은 시기라는 점을 기억해야 한다. (p.208)</li>
<li>"나는 나의 일을 사랑하고, 그래서 오랫동안 일하는 것이 즐겁다" - 빌 게이츠 (p.220)</li>
<li>생각은 자유롭게 하되, 생각을 표현할 때는 신중하고 조심해야 한다. (p.225)</li>
<li>보통은 서투르고 엉성한 사람들이 지나치게 빠르게 행동하는데, 이는 시간이 부족하다고 생각하는 데다 자신도 모르는 사이 여러 번 생각하는 과정을 대수롭지 않게 여기기 때문이다. 그렇기 때문에 바쁠수록 실수를 저지르기 쉽다. (p.236)</li>
<li>스스로 엄격할수록 삶은 당신에게 관용을 베풀고, 스스로에게 관대할수록 삶은 각박해진다. 늘 자기 자신에게 엄격하게 대하라. (p.254)</li>
<li>노력하기에 앞서, 먼저 내가 무엇을 하고 싶은지를 명확히 해두어야 한다. (p.275)</li>
<li>모험을 하지 않는 것이 가장 위험하다. (p.286)</li>
</ul>
<section data-footnotes class="footnotes"><h2 id="footnote-label" class="sr-only heading">Footnotes</h2>
<ol>
<li id="user-content-fn-1">
<p>내가 하지 못한 노력을 통해 성공한 사람들이라고 생각하여 동경하곤 한다. <a href="#user-content-fnref-1" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
</ol>
</section>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA['코어 자바스크립트'를 읽고]]></title>
    <link>https://www.hyesungoh.xyz/코어-자바스크립트</link>
    <pubDate>2023-02-05</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/코어-자바스크립트</guid>
    <description>
    <![CDATA[코어-자바스크립트]]>
    </description>
    <content:encoded>
      <![CDATA[<p>책에 대해 정리한 내용들은 <a href="https://github.com/hyesungoh/learningWhatIWant/tree/master/Books/Core-JavaScript" target="_blank" rel="noopener noreferer">깃허브</a>에서 확인할 수 있다.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/216817172-3e208e44-1659-4f95-bb43-7959ae43687b.png" alt="코어 자바스크립트"></p>
<h2 id="읽게-된-계기" class="heading">읽게 된 계기</h2>
<p>저자인 정재남 님은 이전에 진행했던 활동에서 멘토링을 한시간 가량 받은 적이 있다.</p>
<p>그 때의 경험이 좋았기 때문에 이 책에 관심이 생긴 것도 있지만, 주변에서의 많은 추천이 더욱 크게 작용했다.</p>
<p>많이 추천하는만큼 좋은 책일 것이라 판단했고, 내가 모르는 부분을 배울 수 있을 책이라는 확신이 들었다.</p>
<h2 id="읽은-후-느낀-점" class="heading">읽은 후 느낀 점</h2>
<p>내가 모르는 부분을 배울 수 있을 것이라는 확신은 틀리지 않았으며</p>
<p>무엇보다 좋았던 점은 무엇을 모르는 지도 알 수 있게 되었던 것이였다.</p>
<p>어렴풋이나마 알고 있었던 개념인 자바스크립트의 this와 클로저에 대해 더욱 명료하게 알 수 있었고</p>
<p>모르는 지 조차 모르고 있던 데이터 타입과 실행 컨텍스트의 내용들 또한 많이 알 수 있었다.</p>
<br />
<p>내가 책을 읽는, 더 읽으려 노력하는 이유 중 하나가</p>
<p>모르는 것을 찾아서 배우는 것이 포함되면서, 내가 모르는 지 조차도 몰랐던 것을 깨달으며 알 수 있다는 것인데</p>
<p>이 책은 그 이유에 부합하는 경험을 주었다.</p>
<br />
<p>또한 이 책은 내가 처음으로 다른 사람들과 스터디하고 있는 책인데,</p>
<p>이전에는 책을 통한 스터디가 피상적일 것 같으며, 언제까지 꼭 읽어야하는 강압성이 스트레스로 작용할 것 같아 진행하지 않았다.</p>
<p>그럼에도 불구하고 스터디를 개최하고 진행하고 있는 이유는</p>
<p>이 책을 추천한 지인을 비롯하여 내가 닮고 싶은 많은 사람들이 긍정적인 경험을 하였기 때문이다.</p>
<p>나도 경험이 없는 영역이라 내 생각은 잘못될 가능성이 매우 높다고 생각이 들었으며, 한 번 해보고 경험이 좋지 않으면 다시 꺼리면 되는 것이라는 마음가짐으로 경험에 목적을 두고 시작하였다.</p>
<p>아직 스터디가 끝나지는 않았지만, 많은 사람들이 진행하고 좋게 생각하는 데에는 이유가 있다고 생각이 들었다.</p>
<p>일반적으로 이야기하는 장점인 스터디를 통해 다른 사람들의 생각을 알 수 있는 것은 예상하였지만,</p>
<p>내가 좋다고 느낀 점은 내가 이 책을 읽고 난 후에 이야기를 나눔으로써 한 번 더 혹은 그 이상 읽은 것 같은 효과를 낼 수 있다고 느껴졌기 때문이다.</p>
<p>투자하는 시간 대비 나에게 남는 것이 많은 활동이라는 느낌이 강하다.</p>
<p>아무튼 다시 책 이야기로 돌아와서, 나를 포함해 많은 스터디원들이 처음 책 스터디를 경험하고 있는데</p>
<p>모두 큰 어려움 없이 참여하고 흥미롭게 이야기를 나눌 수 있는 점을 보았을 때</p>
<p>스터디하기 좋은 책이라고 또한 말할 수 있을 것 같다.</p>
<br />
<h2 id="스터디를-마치고" class="heading">스터디를 마치고</h2>
<p>책을 완독하고 약 1주일이 지난 2월 13일에 스터디가 끝났다.</p>
<p>마무리를 하고 나니 내가 스터디의 장점이라고 생각했던 점들이 더욱 확고하게 생각되었고</p>
<p>스터디 회고를 하는 과정에서도 많은 스터디원들이 공감해주어 다행이라고 생각되었다.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/218755235-67e4d716-54b3-4d48-9c15-b2ebce5cb5d1.png" alt="스터디 회고"></p>
<p>스터디 경험이 좋았기 때문에, 앞으로 스터디를 더욱 효과적으로 할 수 있는 방법을 찾기 위해 회고를 진행하였는데</p>
<p>지속되면 좋은 점과 함께 도입해 보면 좋을 방법들을 많이 나눌 수 있어서 개인적으로 효과적인 회고였다고 생각된다.</p>
<p>하지만 내가 스터디를 개설하고 주도하는 입장에서 쓰라린 의견도 들을 수 있었는데</p>
<p>'개발'이라는 것을 방금 접한 스터디원을 배려하지 못한 것, 스터디 모집 시 일정에 대한 공지가 미흡했던 점들이 기억에 남는다.</p>
<p>앞으로 개설하고, 참여할 스터디에서는 다양한 방면으로 개선하고 검증을 거쳐 효과적인 스터디를 진행하고 싶다.</p>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA['여행의 기술'을 읽고]]></title>
    <link>https://www.hyesungoh.xyz/여행의-기술</link>
    <pubDate>2023-01-29</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/여행의-기술</guid>
    <description>
    <![CDATA[여행의-기술]]>
    </description>
    <content:encoded>
      <![CDATA[<p><img src="https://user-images.githubusercontent.com/26461307/215312915-e9cac57e-f18f-4f8c-aca0-3719330617db.jpeg" alt="여행의 기술"></p>
<h2 id="읽게-된-계기" class="heading">읽게 된 계기</h2>
<p>국토대장정 회고에서 밝힌 것처럼 나는 <a href="https://ryan-han.com/" target="_blank" rel="noopener noreferer">한정수 님의 블로그</a>를 자주 보곤 한다.</p>
<p>이 책 또한 위 블로그를 통해 알 수 있었고, 여행을 좋아하며 인생이라는 여행을 더 잘하기 위해서 고민을 하고 싶었기에 읽게 되었다.</p>
<h2 id="읽은-후-느낀-점" class="heading">읽은 후 느낀 점</h2>
<p>책의 첫 인상은 매우 예민하면서 염세주의적이란 느낌이였다.</p>
<blockquote>
<p>'알랭 드 보통'의 책은 처음이였는데, 저자의 특징이라고도 한다.</p>
</blockquote>
<p>나는 여행을 포함해 모든 과정에 무디다는 감정을 어렴풋이 알고 있었는데, 책을 읽으며 이렇게도 예민하게 사는 사람은 어떤 생각과 행동을 하는 지 알게 되었다.</p>
<p>단순히 알게 되는 것에서 벗어나 내가 무관심하던 것에 대하던 것에 대하여 앞으로 어떻게 다루는 것이 인생이란 여행을 잘 다룰 수 있는 기술일 지 고민을 불러일으킨다.</p>
<br />
<p>책은 저자의 경험과 함께 저자가 읽은 책의 내용들을 교차하며 이야기하고 있는데, 공감과 이해를 불러 일으키기에 좋은 방법이라 생각되었고 동시에 매우 어려운 방법이라고 생각되었다.</p>
<p>관련해 역자는 '책을 들고 다닌 여행의 이야기'라고 표현했는데, 십분 공감 되었다.</p>
<br />
<p>많은 목차 중에서 기억에 남는 목차가 있다면 '미술'에 관한 프로방스와 빈센트 반 고흐 이야기이다.</p>
<p>5년 전의 유럽 여행에서 많은 미술 작품을 볼 수 있었는데, 이 경험을 통해 나는 어떤 것을 나에게 남겼는 지 생각하게 되며</p>
<p>앞으로는 어떻게 보면 되는 지 방법을 어렴풋이 알 수 있었다.</p>
<p>그리고 프로방스라는 지역에 대한 흥미도 얻을 수 있었다.</p>
<h2 id="밑줄-친-문장들" class="heading">밑줄 친 문장들</h2>
<ul>
<li>행복을 찾는 일이 우리의 삶을 지배한다면, 여행은 그 일의 역동성(그 열의에서부터 역설에 이르기까지)을 그 어떤 활동보다 풍부하게 드러내준다. (p.17)</li>
<li>실제 경험에서는 우리가 어디에서나 볼 수 있는 것 때문에 정작 우리가 보러 간 것은 희석되고 만다. (p.41)</li>
<li>본질적인 고립과 침묵과 외로움이 일반적인 사회의 엄격함, 차가운 금욕, 이기적인 편안함에 맞서서 자연과 공동체의 운반자가 된다. (p.84)</li>
<li>우리가 외국에서 이국적이라고 생각하는 것은 우리가 고향에서 갈망했으나 얻지 못한 것일 수도 있는 것이다. (p.102)</li>
<li>내가 알게 되는 모든 사실은 다른 사람들의 관심보다는 나에게 개인적인 유익을 준다는 점에 의해서 정당화되어야했다. 나의 발견은 나에게 생기를 주어야 했다. 그 발견들이 어떤 면에서는 "삶을 고양한다"는 것의 입증되어야 했다. (p.146)</li>
<li>홈볼트의 흥분은 세상을 향해 물어볼 올바른 질문을 가지는 일이 얼마나 중요한지 증언해준다. 그것이 있느냐 없느냐에 따라서 파리를 보았을 때 약이 올라 파리채를 휘두를 수도 있고 산을 달려 내려가 '식물 지리론'을 쓰기 시작할 수도 있다. (p.158)</li>
<li>어쩌면 오직 한 가지 입장만을 고수하고 사는 것이 불행의 시작이기 때문인지도 모른다. (p.193)</li>
<li>우리의 삶에는 시간의 점이 있다. 이 선명하게 두드러지는 점에는 재생의 힘이 있어 이 힘으로 우리를 파고들어 우리가 높이 있을 때는 더 높이 오를 수 있게 하며 떨어졌을 때는 다시 일으켜세운다. (p.198)</li>
<li>우리의 의지가 도전을 받고 우리의 소망이 좌절되는 일은 드물지 않다. 따라서 숭고한 풍경은 우리를 우리의 못남으로 안내하는 것이 아니라, 우리가 그 익숙한 못남을 새롭고 좀 더 도움이 되는 방식으로 생각하도록 해준다. (p.215)</li>
<li>숭고한 장소들은 부드럽게 우리를 다독여 한계를 인정하게 한다. (p.228)</li>
<li>반 고흐의 그림들 너머에서 사이프러스를 계속 볼 수 있는 것이다. (p.265)</li>
<li>눈 앞에 놓인 것을 우리의 손으로 재창조하는 과정에서 우리는 아름다움을 느슨하게 관찰하는 데서부터 자연스럽게 발전하여 그 구성요소들에 대한 깊은 이해를 얻게 되고, 따라서 그것에 대한 좀더 확고한 기억을 가지게 된다. (p.279)</li>
<li>우리에게 중요한 가치나 분위기를 구현하고 있기 때문에 아름답다는 것이다. (p.295)</li>
<li>"인간의 불행의 유일한 원인은 자신의 방에 고요히 머무는 방법을 모른다는 것이다" (p.304)</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA['함께 자라기'를 읽고]]></title>
    <link>https://www.hyesungoh.xyz/함께-자라기</link>
    <pubDate>2023-01-21</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/함께-자라기</guid>
    <description>
    <![CDATA[함께-자라기]]>
    </description>
    <content:encoded>
      <![CDATA[<p><img src="https://user-images.githubusercontent.com/26461307/213847663-23be3b5a-408c-413d-b745-268ba5fab192.jpeg" alt="함께 자라기"></p>
<h2 id="읽게-된-계기" class="heading">읽게 된 계기</h2>
<p>많은 사람들의 추천이 있었음을 부정할 수는 없다.</p>
<p>추천을 기준으로 '나에 대한 성장'이라는 키워드로 많은 것을 배울 수 있을 것이라는 판단이 있었다.</p>
<p>교내 동아리와 외부 동아리에서 사람들을 이끄는 역할을 맡고 있는데 책 제목이 말하고 있는 '함께 자라는' 경험을 어떻게 만들 수 있는 지 궁금했다.</p>
<h2 id="읽은-후-느낀-점" class="heading">읽은 후 느낀 점</h2>
<p>추천해 주는 사람도 많았지만 당연한 이야기를 하는 책이라는 평도 심심치 않게 들었는데 나에게는 이 당연한 이야기들이 당연하지 않게 다가오기도 했고, 필요하기도 했었다고 생각한다.</p>
<p>대부분이 그렇듯 무의식적으로 혼자 공부하고 개발하는 것을 편해하고 선호하고 있었는데, 함께 학습하는 방법도 찾고 시도해보면 좋겠다고 생각되었다.</p>
<p>책은 결과만 들으면 당연하게 느낄 수 있는 이야기<sup><a href="#user-content-fn-1" id="user-content-fnref-1" data-footnote-ref aria-describedby="footnote-label">1</a></sup>들을 구체적인 사례와 실험들을 기반으로 이야기하고 있는데, 시사하고 있는 바 자체로도 의미있지만 공감이 되며 흥미있는 이야기들로 구성되어 있어 쉽게 그리고 빠르게 읽혔다.</p>
<p>지금 운영하고 있는 활동들, 진행하고 있는 여러 프로젝트 팀들, 앞으로 겪을 여러 경험 그리고 이전에 겪었던 경험들에서 더 많은 것을 배울 수 있게 만들어 준 책이라고 생각하며,</p>
<p>'자라기'와 '함께'라는 키워드로 고민해 본 사람이라면 읽어보는 것이 좋을 책이라고 감히 판단한다.</p>
<h2 id="밑줄-친-문장들" class="heading">밑줄 친 문장들</h2>
<ul>
<li>학습의 본의는 야생 학습에 더 가깝다고 생각을 하고, 현실 세계에서는 야생 학습이 더 많이 필요하다고 봅니다. (p.12)</li>
<li>(채용 성과 상관성 이야기 중) 작업 샘플 테스트가 0.54, 아이큐 같은 지능 테스트가 0.51, 구조화된 인터뷰가 0.51 이었다. 특별히 구조화된 행동중심적 인터뷰인 구조화된 인터뷰를 강력히 권한다. (p.19, 23)</li>
<li>피드백을 짧은 주기로 얻는 것, 그리고 실수를 교정할 기회가 있는 것 (p.28)</li>
<li>우리가 더 잘하는 것을 더 잘하게 될수록 우리는 더 잘하는 걸 더 잘 그리고 더 빨리 하게 될 것이다. (p.34)</li>
<li>자신이 올해 몇 권을 읽었다고 자랑하지 말고, 내가 그 지식을 얼마나 어떻게 활용하는지 반성하라 (p.39)</li>
<li>꾸준한 반복으로 달인이 되려면 적어도 '실력을 개선하는 동기'가 있어야 하고, '구체적인 피드백을 적절한 시기'에 받아야 한다. 단순히 반복만 한다고 달인이 될 수 없다. (p.55)</li>
<li>타당성을 높이려면 변수를 제한하고 실험을 하면서 규칙성과 인과관계를 찾으려는 노력을 하면 된다. 피드백을 높이려면 동료나 상사, 고객에게서 혹은 내가 개발하는 프로그램에서 직접 피드백을 적극적으로 구하면 된다. (p.59)</li>
<li>뛰어난 선수는 자기 기량보다 어려운 기술을 연마하지만 그렇지 못한 선수는 이미 잘하는 걸 더 연습한다. (p.64)</li>
<li>자기가 지금 어떤 상태인지 살피는 '알아차림(mindfulness)'이 꼭 필요하다. (p.73)</li>
<li>실수 관리 문화에서는 실수가 나쁜 결과를 내기 전에 빨리 회복하도록 돕고, 실수를 공개하고, 실수에 대해 서로 이야기하고 거기에서 배우는 분위기가 생긴다. (p.91)</li>
<li>'내가 이 문제를 해결할 때 어떤 과정을 거치는가'를 생각하며 자신의 머릿속을 관찰하고, 질문을 던지고 분석하는 것으로 선생 입장에서 메타인지를 높이는 노력을 할 수 있다. (p.96)</li>
<li>초보 개발자에게 해줄 조언을 적어볼 때, 뛰어난 개발자들은 약 70%가 동료와의 협력을 언급하는 반면, 실력이 그저 그런 개발자들은 20%도 안 되는 사람들만이 협력을 언급했다. (p.102)</li>
<li>품질 전문가 제럴드 와인버그는 소프트웨어 개발을 잘 관리하려면 세 가지 근본적인 능력이 필요하다고 했다. (p.115)
<ul>
<li>복잡한 상황을 이해하는 능력으로, 프로젝트를 계획한 다음 관찰하고 행동하여 계획에 맞게 프로젝트가 진행되게 하거나 계획을 바꿀 수 있어야 한다.</li>
<li>관찰하는 능력으로, 무엇이 벌어지고 있는지를 관찰하고, 효과적인 적응 행동을 하기 위해 자신이 관찰한 것이 어떤 의미인지 이해할 수 있어야 한다.</li>
<li>행동하는 능력으로, 어려운 대인 상황에서 우리가 심지어 혼란스럽거나 화가 나거나 아니면 무서워서 도망쳐 숨어버리고 싶을 때에도 적절하게 행동할 수 있어야 한다.</li>
</ul>
</li>
<li>소프트웨어 공학의 전체 역사는 추상화 수준을 높이는 것으로 특징 지을 수 있다. - 그래디 부치 (p.126)</li>
<li>복수 공유(각자 여러 개의 디자인을 만들고 모두 공유한 경우) 시 신뢰가 유의미하게 증가했다. (p.132)</li>
<li>내가 만약 다른 곳에서 더 나은 일을 구하려고 이 회사를 떠날 생각이 있다면 나는 그에 대해 내 관리자랑 이야기를 나눌 것인가 (p.168)</li>
<li>파킨슨의 법칙, 교수가 숙제 기한을 일주일 늘려줬을 때 학생들이 숙제를 하는 데 걸리는 시간도 일주일 늘어나는 현상 (p.187)</li>
<li>두려워도 중요하다면 시도해봐야 하지 않겠는가. (p.205)</li>
<li>현명한 전략은 정해진 수순을 따르는 것이 아니라 곁에 있는 사람들과 함께 주변을 탐색하고 조금 나아가고 확인하고를 반복하면서 우리의 현 맥락에 맞는 좋은 전략들을 스스로 만들어 나가는 것이 아닐까 한다. (p.218)</li>
</ul>
<blockquote>
<p>목차별로 정리하며 읽는 것보다 밑줄을 치고 완독 후에 정리하는 것이 읽는 과정이 더 재밌다. 그리고 리마인드를 통해 더 기억에 잘 남을 거 같은 느낌이다. 계속 시도해 봐도 좋을 방법이라고 생각된다.</p>
</blockquote>
<section data-footnotes class="footnotes"><h2 id="footnote-label" class="sr-only heading">Footnotes</h2>
<ol>
<li id="user-content-fn-1">
<p>성장의 중요성이 짙은 개발자 문화 속에서 살고 있어 이렇게 느끼는 경우가 많은 것 같다. <a href="#user-content-fnref-1" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
</ol>
</section>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA['이펙티브 타입스크립트'를 읽고]]></title>
    <link>https://www.hyesungoh.xyz/이펙티브-타입스크립트</link>
    <pubDate>2023-01-19</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/이펙티브-타입스크립트</guid>
    <description>
    <![CDATA[이펙티브-타입스크립트]]>
    </description>
    <content:encoded>
      <![CDATA[<p>책에 대해 정리한 내용들은 <a href="https://github.com/hyesungoh/learningWhatIWant/tree/master/Books/Effective-TypeScript#effective-typescript" target="_blank" rel="noopener noreferer">깃허브</a>에서 확인할 수 있다.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/213199804-0b2ebbe6-d6cd-4428-b6bc-8635ee978f7e.jpeg" alt="이펙티브 타입스크립트"></p>
<p>23년 한 해에 12권 책 읽기 목표를 세운 이후 처음으로 다 읽은 책이다.</p>
<p>이전에 야금야금 읽고 있었는데, 목표가 세워지고 읽고 싶은 책들이 많아져 속도를 내서 읽을 수 있었다.</p>
<p>결과론적으로 올 해를 시작하는 책으로 좋았다고 생각한다.</p>
<p>책으로 공부하는 것에 대한 필요성을 느낀지 얼마 되지 않은 나에게 이 책은 '이런 것도 몰랐지?'라고 물어봐 주는 역할을 톡톡히 해 주었다.</p>
<h2 id="읽게-된-계기" class="heading">읽게 된 계기</h2>
<p>나는 타입스크립트를 처음 다루기 시작했을 때 책이나 공식 문서보다는 오픈 소스를 많이 보며 감을 익혔다.</p>
<p>오픈 소스를 보며 모르는 문법은 공식 문서에서 찾아보는 방법으로 익히며 사용해 왔는데, 내가 어렴풋이 알면서 다루는 문법이 많다고 생각되었다.</p>
<p>그리고 무엇보다 타입스크립트라는 도구를 잘 다루고 싶었다.</p>
<p>거기에 더해 실천으로 옮길 수 있는 아이템들로 나누어져 있는 형태라, 지금의 내가 읽으면 좋을 것 같다고 생각하였다.</p>
<h2 id="읽은-후-느낀-점" class="heading">읽은 후 느낀 점</h2>
<p>이름은 모르고 문법만 알던 것들(태그된 유니온 등), 동작 방식을 대강 알고 있던 것들(제너릭 제한 등) 그리고 전혀 몰랐던 것들(구조적 타이핑, 타입 시스템 동작 원리)을 알 수 있게 되었다.</p>
<p>서론에서 언급했듯이 이 책을 통해 '모르는 걸 찾아서 공부하는 것이 아니라, 내가 이런 것도 몰랐구나' 라고 깨달을 수 있었다.</p>
<p>학습과 성장에서 메타인지가 중요하다고 익히 들었고 공감하고 있는데, 책을 통해서는 메타인지를 더욱 쉽게 그리고 대신해주는 것 같다는 느낌을 받았다.</p>
<p>앞으로도 더욱 많은 책을 읽고 인간적으로 성장하고 싶다.</p>
<blockquote>
<p>이 책은 아이템이 잘게 나누어져 있어 정리하기 편했지만, 다른 일반적인 책들은 목차별로 정리하면서 읽는 것이 내가 지속가능한 방법인 지에 대한 의구심이 든다.</p>
<p>다음 책은 밑줄을 치며 읽고 완독 후에 리마인드하며 정리하는 방식으로 읽어보아야 겠다.</p>
</blockquote>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[국토대장정 회고]]></title>
    <link>https://www.hyesungoh.xyz/walking-across-the-country</link>
    <pubDate>2023-01-05</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/walking-across-the-country</guid>
    <description>
    <![CDATA[걸어서 수원에서 부산까지의 14박 15일]]>
    </description>
    <content:encoded>
      <![CDATA[<p><img src="https://user-images.githubusercontent.com/26461307/211029851-5fe0067a-7d6f-4f5a-9304-b6fce9bea3e9.jpeg" alt="국토대장정 깃발"></p>
<p>거주지인 수원에서 부산 광안리 해수욕장까지 14박 15일간 국토대장정을 다녀왔다.</p>
<h2 id="계기" class="heading">계기</h2>
<p>간다고 했을 때 주변의 반응 그리고 걸으면서 만나는 분들은 항상 이런 말을 묻곤 했다.</p>
<blockquote>
<p>왜 가시는거에요?</p>
</blockquote>
<p>솔직히 말하자면 처음 가야겠다고 생각했을 때 별다른 이유는 없었다.</p>
<p>그냥 내가 여행을 좋아할 뿐</p>
<h3 id="여행">여행</h3>
<p>싫어하는 사람이 있겠느냐만, 나는 여행을 좋아한다.</p>
<p>고등학교 때 같은 방 기숙사 친구들끼리 방학마다 여행을 가곤 했고</p>
<p>졸업을 하고서는 같이 일본을 갔다왔다.</p>
<p>입대하기 전에는 갑자기 유럽에 가고 싶어서, 휴학계를 내고 반년동안 알바를 해 돈을 모아 31일 동안 배낭 여행을 갔다 오기도 했다.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/211029910-8795a303-3e2e-4db7-b0f7-2ebbef4c8086.jpeg" alt="유럽 여행 사진"></p>
<p>그래서 국토대장정도 여러 도시들을 걸어서 여행하는, 처음으로 혼자 여행해보는 경험 정도로 생각해 <del>다소 급작스럽게</del> 가기로 마음을 먹었다.</p>
<h3 id="출발하고-바뀐-목적">출발하고 바뀐 목적</h3>
<p>준비를 마치고 처음 걷는 날 '그냥 여행' 보다는 많은 것을 남기고 싶다는 생각을 하게 되었다.</p>
<p>일단 다른 여행처럼 휴식에 가깝지 않았고 <code>도전</code>에 가까웠기 때문에 이 경험으로 더 많은 것을 남기고 싶었기 때문인데</p>
<p>그렇게 걸으면서 생각한 국토대장정의 목적은 다음과 같다.</p>
<h2 id="나와의-대화" class="heading">나와의 대화</h2>
<p>나는 <a href="https://ryan-han.com/" target="_blank" rel="noopener noreferer">한정수 님의 글</a>을 좋아해 가끔 읽곤 하는데, 거기서 <code>나와의 대화</code>라는 것을 보고 머리를 한 대 맞은 것 같았다.</p>
<p>'나는 지금까지 나와 대화한 시간이 있었나?' 싶었다.</p>
<p>인간적으로 '그냥 남들이 좋아하니까' 내가 좋아하지 않았나 싶은 부분들과 개발자라는 직업을 갖는 것에 대해 '그냥 지금까지 해온 거니까', '밥벌이로 할 수 있는 기술 중에 제일 잘하는 거니까'로 생각하지 않았나 싶었다.</p>
<p>그래서 길고 긴 도로<sup><a href="#user-content-fn-1" id="user-content-fnref-1" data-footnote-ref aria-describedby="footnote-label">1</a></sup>에서 <code>나외의 대화</code>를 많이 하고, 그 중에서 <code>내가 무엇을 좋아하고 싫어하는 지</code> 만큼은 알아가자고 다짐했다.</p>
<h2 id="걷는-것은-쉽지-않다" class="heading">걷는 것은 쉽지 않다</h2>
<p>나는 평소에 약속 시간에 일찍 도착했다면 버스 정류장 한 두개 정도는 먼저 내려서 걷기도 하고</p>
<p>막차가 끊기는 (그나마 가까운 지역인) 상황에서는 걸어서 집에 가기도 했을 정도로</p>
<p>걷는 것에 부담이 없었고, 과정을 즐거워했다.</p>
<p>그래서 국토대장정을 가기로 했을 때 걱정이 크진 않았다.</p>
<p>그렇게 첫 날을 매우 쉽게 걸었고 앞으로도 쉬울 줄 알았다.</p>
<p>근데 그건 크나큰 오산이였다. (첫 날 도착지는 오산이였다)</p>
<h3 id="피로의-누적">피로의 누적</h3>
<p>첫 날 21km, 그 다음 날도 21km로 똑같이 힘들 줄 알았는데 나는 피로가 누적된다는 것을 간과하고 있었다.</p>
<p>몸은 더 무겁게 느껴져 속도가 더뎌지고 쉬는 시간까지의 텀이 짧아졌다.</p>
<h3 id="걷는-길의-중요성">걷는 길의 중요성</h3>
<p>내가 좋아하곤 했던 길은 안전했다.</p>
<p>근데 국토대장정에서 걷는 길의 90%는 안전과는 거리가 멀었다.</p>
<p><strong>1. 눈이 쌓여 있었다.</strong></p>
<p>국토대장정을 떠나기 전 주에 눈이 3번 왔었다.</p>
<p>많이 녹길 바랬지만 녹다가 얼은 눈이 대부분이였고, 걷다가 눈이 오고 비가 오는 날도 있었기에</p>
<p>미끄러워 위험하고 추위에 노출되었다.</p>
<p><strong>2. 차도</strong></p>
<p>국토대장정에서 가장 스트레스를 받은 점인데, 걷는 길이 대부분 차도의 갓길이였던 것이다.</p>
<p>갓길이 조금 넓으면 다행인데 50%의 길은 어깨와 차가 10cm 간격도 안되는 거리를 스쳐갔다.</p>
<p>거기에 더해 국도로 다니는 대부분의 차는 트럭 혹은 덤프 트럭과 같은 대형 차종이였다.</p>
<p>거기에 또 더해 갓길에는 쌓인 눈이 많아 잘못하고 넘어지면 ... 상상하기 싫었다.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/211030039-dcedd72c-aace-44a0-ad62-c466ba475df4.jpeg" alt="그나마 걸을 만 했던 길"></p>
<h2 id="동료" class="heading">동료</h2>
<p>그렇게 손에 식은 땀이 나는 상황을 견뎌가며 3일차까지 걸었을 때 동료가 생겼다.</p>
<p>고등학교 때 같이 여행다니던 친구였는데, 대구를 목표로 합류하게 되었다.</p>
<p>지금 돌이켜 생각해 보면 이 친구가 3일차에 수혈? 되지 않았다면 끝까지 걸을 수 있었을까 싶다.</p>
<h3 id="마의-3일차">마의 3일차</h3>
<p>국토대장정을 하는 사람들 중 가장 많이 포기한다는 일차가 3일차라고 한다.</p>
<p>군대에서 이등병에서 일병으로 진급할 때 정도로 생각되어 가장 많이 포기하는듯 싶은데, 나도 이 동료가 없었으면 포기하고 싶은 마음이 생겼을 지도 모르겠다.</p>
<p>몸은 피곤하고 앞으로는 더 힘든 길이 남았으니 그런 생각이 들 법도 했는데, 동료가 생겨 다시금 즐거운 마음으로 걸을 수 있었다.</p>
<h2 id="부상" class="heading">부상</h2>
<p>나는 평소에 운동을 게을리하지 않았기 때문에 (유산소는 안했지만) 걷는 것을 통해 부상을 입을 줄 상상도 못했는데</p>
<p>이번에도 내 예상은 처참히 빗나갔었다.</p>
<h3 id="염증">염증</h3>
<p>5일차에 거의 다 도착해서 걸을 때 발등이 아파왔고, 단순 근육통이라 생각해 파스를 붙이고 잣는데</p>
<p>자고 일어나서도 아파왔다.</p>
<p>먼저 국토대장정을 해본 지인이 말씀해 주시길 아프면 바로 병원에 가서 진압을 해야한다 해주셨고, 나도 동의해 아침에 여는 병원에 갔었는데</p>
<p>염증이 생긴 것 같다는 진단을 받을 수 있었다.</p>
<p>진통제와 함께 약을 처방 받고 전기 침과 물리치료를 받으니 일부 호전되긴 했었어서 마저 그리고 계속 걸었다.</p>
<h3 id="근육-파열">근육 파열</h3>
<p>몸이 적응한다는 7일차 이후로는 걷는 게 부담이 안될 줄 알았는데 9일차에 도착해서는 도저히 걷기 힘들 정도의 통증이 따라왔다.</p>
<p>5일차와 비슷하게 염증인가 싶어 한의원에서 침 맞으면 괜찮겠지 싶어 병원에 갔으나</p>
<p>상상도 못한 가자미근 파열 진단을 받았다.</p>
<p>의사 선생님께서 말씀하시길 근육이 파열되어 일반적으로는 한 달 동안 휴식을 취하라고 했을텐데 국토대장정은 끝내야되니 할 수 있는 것은 다 해주겠다고 하셨다.</p>
<p>그렇게 봉침도 맞고 그냥 침도 맞고 부항 뜨고, 물리치료도 받고 ...</p>
<p>어떻게 걷는 지, 어디를 어떻게 마사지하면 좋은 지 자세히 알려주셔서 참 감사했다.</p>
<p>피드백?을 적극 수용하고 근육 테이핑도 하니 통증이 줄어들긴 해서 마저 그리고 계속 걸었다.</p>
<h3 id="트럭에-스침">트럭에 스침</h3>
<p>물리적 부상은 아니지만 심리적인 부상이랄까</p>
<p>10일차에 트럭에 스쳤다.</p>
<p>조금 떨어져서 스친 것도 아니고 내 옷을 치고 지나갔다.</p>
<p>내 몸 혹은 가방을 치고 간 게 아니라 다치진 않아 참 다행이였는데 무서웠다.</p>
<p>이후에 좁은 갓길로 걸을 때 손에 식은 땀이 나곤 했고 상당한 스트레스를 동반했다.</p>
<h2 id="걸으면서-따뜻했던-점" class="heading">걸으면서 따뜻했던 점</h2>
<p>안좋고 힘든 일을 주절 주절 적어 봤지만 사실 좋은 일이 더 기억에 남는다.</p>
<h3 id="풍경">풍경</h3>
<p>차도를 가장 많이 걷긴 했지만, 해가 뜨고 있는 멋진 시골길, 탁 트인 강가, 눈이 쌓여 계절감이 풍부한 길 등</p>
<p>걸어야 볼 수 있는 좋은 풍경들을 많이 볼 수 있었다.</p>
<p>그리고 낙동강과 밀양강 부근에는 자전거 도로가 잘 깔려 있어서 차에 대한 걱정 없이</p>
<p>마음 편히 풍경을 즐기며 걸을 수 있었어서 기분이 좋았다.</p>
<blockquote>
<p>걸으면서 좋았다고 생각한 풍경에는 사진을 찍곤 했는데 돌이켜보니 대부분 물가 사진이였다.</p>
<p>'내가 왜 물가를 좋아할까' 또한 생각해 보았는데</p>
<p>내 유년시절 9년간 살았던 집 앞에는 작은 개천이 흘렀는데 그 영향이 크지 않을까 생각 되었다.</p>
</blockquote>
<p><img src="https://user-images.githubusercontent.com/26461307/211030140-479f9358-812b-429d-8a52-1fa1e82a69e2.jpeg" alt="금강"></p>
<h3 id="응원해주는-사람들">응원해주는 사람들</h3>
<p>내 개인적인 도전이자 여행에 공감하고 응원해주시는 분들이 굉장히 많았다.</p>
<p>지나가다 내 깃발을 보고 힘내라고 해주시는 분들도 있었고,</p>
<p>식당에서 서비스를 주시는 사장님들,</p>
<p>걸으면서 먹으라고 빵을 주셨던 교회 집사님,</p>
<p>응원과 함께 기프티콘을 보내주셨던 지인들 그리고</p>
<p>각 지역마다 만나며 식사를 대접해 주셨던 지인들</p>
<p>참 고마운 사람이 많았다.</p>
<p>솔직히 포기하고 싶고 힘들었던 순간들이 많았지만 내가 할 수 있는 최대한의 보답은 완주하는 것이라는 생각에 절대 포기할 수 없었다.</p>
<p>근데 내가 부상?을 입었다는 것을 알면 건강이 먼저라고 하실 분들이였기 때문에 아픈 티를 낼 수도 없었다.</p>
<blockquote>
<p>아픈데도 이렇게 하고 있어요 !! 라고 티 내고 싶은 마음이 컷는데 좀 찌질해보일까 이제야 마음 편히 적어본다.</p>
</blockquote>
<h2 id="도착" class="heading">도착</h2>
<p>그렇게 15일 동안 약 420km를 걸어서 부산 광안리 해수욕장에 도착했다.</p>
<p>도착하기 전에는 바다를 보면 감정이 벅차올라 눈물이 나올까 걱정했는데, 그 정도로 벅차오르진 않았다.</p>
<p>그래도 표지판에 부산이 보였을 때, 광안리 해수욕장이 보였을 때는 엔돌핀이 솓구치는 느낌을 경험했는데, 일례로 마지막 2시간은 안쉬고 계속 걸었고 차만 없으면 뛰고 싶다는 느낌까지 받았다.</p>
<p>원래는 도착해서 부산에서 며칠 놀다 갈려 했으나 동료가 떠난 대구 이후부터 혼자 숙박업소에서 자서 그런지 몸과 마음이 허하다는 감정을 깊게 느껴 당일에 저녁까지 먹고 집으로 가는 기차에 몸을 실었다.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/211030203-99cb9b9e-f106-4cb1-b3e7-ad882ca3d06c.jpeg" alt="부산 도착"></p>
<h2 id="목적" class="heading">목적</h2>
<p>출발 이후에 정한 국토대장정의 목적인 <code>나와의 대화</code>는 많이 할 수 있었고</p>
<p>대화를 통해 알고자 했던 <code>나</code>도 조금이나마 정리해 볼 수 있었고 정리한 내용은 아래와 같다.</p>
<h3 id="성취감">성취감</h3>
<p>나는 성취감과 성취감을 위한 과정을 좋아한다.</p>
<p>정확히는 성취감에 대한 기대가 과정의 고통을 이긴다.</p>
<p>나는 여느 남자아이처럼 게임을 좋아하곤 했는데, 익히 CD 게임이라 말하는 콘솔 게임을 좋아했다.</p>
<p>그 게임에는 트로피라는 게임 외적으로 계정에 종속되는 보상 체계가 존재하는데, 이것을 위해 반복적이고 재미없는 시간을 수 없이 보냈었다.</p>
<p>그런 과정이 더욱 값지고 높은 효과?의 성취감을 만들어준다는 것을 알기 때문이였을까</p>
<hr>
<p>지금은 게임을 하지 않고, 파워리프팅이라는 운동을 취미삼아 하고 있는데 이것도 성취감 때문이다.</p>
<p>처음 운동(웨이트)을 시작했을 때는 재활 운동이 목적이였고, 이후에는 일반적인 보디빌딩식 운동을 했었다. (물론 돼지이지만)</p>
<p>고통스러운 과정을 견디다 어느날 성취감을 느끼는 보디빌딩식 운동도 재미가 있었지만, 우연히 접한 무거운 무게를 딱 하나 들어올리는 파워리프팅이란 장르는 더 강하고 즉각적인 성취감을 느낄 수 있게 해 주었다.</p>
<p>내가 개발을, 그 중에서 클라이언트 개발을 하는 이유도 이 경험과 비슷하지 않을까 생각되었다.</p>
<h3 id="나는-왜-개발하는가">나는 왜 개발하는가</h3>
<p>내가 성취감을 좋아하는 것은 알게 되었고, 이에 따라 나한테 궁금한 점이 왜 개발자를 직업으로 삼을려 하는 것이다.</p>
<p>이전에는 막연하게 아래처럼 생각해 왔는데 더 자세히 알고 싶었다.</p>
<ul>
<li>그냥 계속 해왔던 거니까</li>
<li>내가 할 수 있는 일 중에 제일 잘하는 거고, 내가 직업을 구하기 제일 쉬운 길이라 생각돼서</li>
<li>보수가 좋아서, 근무 환경이 좋은 편이라서</li>
</ul>
<p>고민을 시작할 때 내가 왜 처음 개발을 시작하게 되었는 지를 돌이켜 보았고 '제일 중요한 점을 잊고 있었구나'라고 생각되었다.</p>
<p>처음 시작한 게임 개발은 다른 사람을 재밌게 하기 위해, 무엇보다 내가 만드는 과정이 재밌었기 때문이였다.</p>
<p>개발은 과정에서 성취감이 즉각적으로 느껴져 내가 재미를 느끼고 좋아한다. 그래서 업으로 삼고 싶어 하는 것이였다.</p>
<p>물론 막연하게 생각했던 점들도 아예 고려가 안되는 것은 아니지만, 내가 생각해낸 원초적인 이유는 내가 재미있기 때문이다.</p>
<h3 id="멋">멋</h3>
<p>나는 항상 멋있는 사람이 되고 싶었고 지금도 그렇다.</p>
<p>그렇다면 내가 생각하는 멋있는 사람은 누구인가?</p>
<p>이에 대한 대답은 내가 그리고 모두들 꺼려하는, 어려워하는 일을 해내는 사람이다.</p>
<p>누군가 해야하는 힘들고 어려운 일을 먼저 자진해서, 성공적으로 해내고 별 일 아니였다는 듯이 대하는 사람,</p>
<p>남에게 도움이되는 사람, 그런 사람을 나는 멋있는 사람이라 생각하고 그렇게 되고 싶다.</p>
<p>그런 과정에서 성취감 또한 느껴져 그런 사람의 가면을 쓰고 지금까지 살아오지 않았나 싶다.</p>
<h3 id="싫어하는-것">싫어하는 것</h3>
<p>내가 좋아하고, 되고 싶은 사람 다음에 들었던 생각은 '내가 어떤 상황을 싫어하는가'였다.</p>
<p>높은 다리를 건널 때 이에 대한 대답을 할 수 있었다.</p>
<p>나는 미래에 대한 걱정에서 오는 스트레스를 싫어한다.</p>
<p>걱정이 많은 편이라 생각되고 (물론 걱정이 많아서 미리 대처할 수 있다는 장점도 있지만) 그 중에서는 필요하지 않은 스트레스가 많았던 것 같다.</p>
<p><code>실행력</code>이라는 말을 내 장점으로 언급하곤 했을만큼 빠르게 일을 해치우곤 했는데 이게 스트레스에 대한 방어심리 때문이 아니였나 생각되었고 나쁘지 않은 방법이라 생각한다.</p>
<p>근데 걱정이라는 것이 지금 당장 통제할 수 있는 것이 있고, 아닌 것이 있을텐데 나는 내가 지금 통제할 수 있는 생각과 행동에 집중하기로 했다.</p>
<p>그렇다면 내가 싫어하는 통제할 수 없는 걱정에서 오는 스트레스를 줄일 수 있지 않을까? 라는 생각을 높은 다리에서 손에 땀을 쥐며 생각하게 되었다.</p>
<blockquote>
<p>나는 약간의 고소공포증이 있다.</p>
</blockquote>
<h3 id="그리고">그리고</h3>
<p>이 외에 걸으면서 떠올랐던 생각, 나에 대한 질문이 많았고 이걸 잊어버리는 것이 당연하다 생각되어 메모장에 적어 놓았는데</p>
<p>손이 시려워 그런지 너무 간단히 정리했던 것 같다.</p>
<p>다듬어지지 않은 것들을 기술하며 느끼고 배웠던 것을 마무리한다.</p>
<ul>
<li>가끔은 쉬어 갈 필요도 있다.
<ul>
<li>회복을 위해</li>
<li>놓치는 광경과 순간을 위해</li>
</ul>
</li>
<li>길이 위험하면 돌아갈 줄 알아야 한다.</li>
<li>자주적으로 생각할 줄 알아야 한다.</li>
<li>도전하는 용기보다 포기하는 용기가 더 크다.</li>
</ul>
<h2 id="마치며" class="heading">마치며</h2>
<p>길 끝에 다다르면 인생이 바뀔만한 자신감, 가슴이 벅차올라 눈물이 흐르는 감정같은 금은보화를 얻을 줄 알았지만 막상 그런 것들은 부산에 없었다.</p>
<p>하지만 가는 길에서 너무 좋은 사람들을 만나고, 응원을 받을 수 있었고,</p>
<p>나와 깊게 대화해보는 경험을 통해 나를 더 잘알 수 있게 되고,</p>
<p>하루하루 힘든 몸을 이겨내 도착했다는 감정들이 쌓여서 만들어진 자신감 그리고 추억을 얻을 수 있게 됐다.</p>
<p>마지막으로 이 글을 보는 분들이 만약 부산에 가고 싶은데 걸어갈까? 라고 생각한다면 비행기 혹은 KTX를 이용하는 것을 추천한다. 하지만 끝 없을 것만 같은 길을 걷고 싶고, 본인을 더 잘알고 싶다면 국토대장정은 할 만하다고 말해주고 싶다.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/211030295-fd8dd271-c1e5-4b59-bfd6-a70045e47d6d.jpeg" alt="국토대장정 끝"></p>
<blockquote>
<p>걸으면서 하루 하루 적었던 날 것 그대로의 내용은 <a href="https://diary.hyesungoh.xyz/posts/22-12-19" target="_blank" rel="noopener noreferer">다음 링크</a>에서 확인할 수 있다.</p>
</blockquote>
<section data-footnotes class="footnotes"><h2 id="footnote-label" class="sr-only heading">Footnotes</h2>
<ol>
<li id="user-content-fn-1">
<p>국토대장정은 차도를 많이 걷는다. <a href="#user-content-fnref-1" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
</ol>
</section>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[2022년 회고]]></title>
    <link>https://www.hyesungoh.xyz/2022-review</link>
    <pubDate>2022-12-31</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/2022-review</guid>
    <description>
    <![CDATA[2022-review]]>
    </description>
    <content:encoded>
      <![CDATA[<p>저는 개인적으로 1년을 뒤돌아보는 회고에 대하여 회의적이였어요.</p>
<p>하지만 다른 사람들의 회고를 읽어보면서 건강한 자극도 느낄 수 있었고, 글로써 정리하며 일년을 뒤돌아 보면 놓치고 있던 감정들을 찾을 수 있을 거 같은 생각이 들었어요. 이처럼 다른 사람들이 쓰는 이유가 있구나 생각이 되어 2022년을 되돌아 보고자 해요.</p>
<h2 id="comet-land" class="heading">Comet-land</h2>
<p><img src="https://user-images.githubusercontent.com/26461307/207400105-dcbba794-602e-4088-b324-c138c113cc9a.png" alt="comet-land"></p>
<p>올해 초에는 '블로그와 이력서를 같은 스타일로 관리할 수 있는 오픈소스 템플릿'인 <a href="https://github.com/hyesungoh/comet-land" target="_blank" rel="noopener noreferer">Comet-land</a>를 개발했어요.</p>
<p>가열되고 있는 개발자 취직 시장에서 블로그와 이력서를 같은 스타일로 관리하고 싶은 니즈가 있을 것이라 생각해서 개발하게 되었고 무엇보다 내 자신이 쓰고 싶었어요.</p>
<p>내가 쓰고 싶은, 쓸 서비스였기 때문에 다른 걸 개발할 때보다 더 재밌게 개발할 수 있었던 거 같아요.</p>
<p>이 경험을 통해 앞으로 구직 활동을 할 때, 내가 쓰고 있는 혹은 쓰고 싶은 도메인을 다루는 회사에 가면 재미있을 것 같다는 생각을 깊게 할 수 있었어요.</p>
<h3 id="따뜻했던-점">따뜻했던 점</h3>
<p><img src="https://user-images.githubusercontent.com/26461307/207401052-7870742c-4a79-4353-ab6e-ea0e1a8437db.png" alt="comet land github star"></p>
<p>적극적으로 홍보한 것에 비해서도 상상 이상의 반응을 받을 수 있었어요.</p>
<p>깃허브 스타도 많이 눌리고, 적극적으로 사용해 주시는 분들도 계시는 것을 보며 보람을 느꼈고 거기에 더해 기여까지 해주신 분이 계셔서 따뜻했던 일이라고 기억에 남아요.</p>
<p>이런 따뜻함을 다른 분들도 알아봐 주셨는지 면접을 볼 때 대부분의 질문이 comet-land 프로젝트에서 나왔는데요.</p>
<p>다른 분들과 비교했을 때 조금 더 궁금함을 만들어 낼 수 있는 경험이 되었던 것 같아 더 따뜻함을 느낄 수 있었어요.</p>
<h3 id="아쉬운-점">아쉬운 점</h3>
<p>제가 확인할 수 있었던 사용자분들은 대부분 블로그 테마만 사용하고 계셨어요.</p>
<p>이에 더해 제가 직접 이력서로써도 사용하고 있어서 느끼는 부분 이지만, 이력서로써는 시장성이 부족하다고 느끼게 되었어요.</p>
<blockquote>
<p>조금 더 긴 글과 정보들을 녹일 수 있는 형태가 되면 좋을 것 같다고 생각해요.</p>
</blockquote>
<p>그리고 계획하고 있었던 기능들을 개발하지 못한 것이 아쉬워요.</p>
<p>학업과 여러 활동을 병행하며 바빠서 하지 못했다는 변명을 해보지만, 사실 시간을 내고 할려는 마음이 더 강했으면 할 수 있었던 것을 제 자신이 제일 잘 알기 때문에 더 아쉬운 것 같아요.</p>
<p>많은 활동들이 정리되는 내년에는 의존성 업데이트도 진행하며, 이력서 구조 변경 등 다양한 기능을 개발해 보고 싶어요.</p>
<blockquote>
<p>혹은 완전히 새로운, 분리되는 블로그와 이력서 템플릿을 개발하고 싶은데 아직 자세한 계획은 세워두지 않았어요.</p>
</blockquote>
<h2 id="소프트웨어-마에스트로-expert" class="heading">소프트웨어 마에스트로 Expert</h2>
<p>2021년, 작년은 <a href="http://localhost:3000/wavy0-Intro" target="_blank" rel="noopener noreferer">소프트웨어 마에스트로</a> (이하 소마) 활동으로 보냈다고 해도 과언이 아닌데요.</p>
<p>소마와의 인연이 아직 끊기지 않았는지 Expert라는 이름으로 올해 연수생들에게 도움이 되는 역할에 선발될 수 있었어요.</p>
<p>올해 처음 시행하는 제도이다 보니, 처음에는 어떻게 진행하면 좋을지 감을 잡기 힘들었지만 계속 진행하다보니 서로에게 도움이 되는 시간을 만들 수 있었다고 생각해요.</p>
<h3 id="처음">처음</h3>
<p>처음 모든 expert들이 만나 공지를 듣는 시간이 있었는데, 학생 신분이신 분을 찾을 수가 없었어요.</p>
<p>대부분 사회 초년생 혹은 창업자분들이셨는데, 연수생의 시선으로 봤을 때 expert '오혜성'은 다른 expert에 비해 경쟁력이 떨어지는 사람처럼 보일까 걱정이 되었어요.</p>
<blockquote>
<p>사실 떨어지긴 하지만요.</p>
</blockquote>
<p>거기에 더해 expert와 연수생 팀 매칭은 연수생이 결정권을 가지고 있는데, 한 팀도 선택하지 않으면 어떡하지라는 걱정을 떨칠 수가 없었어요.</p>
<p>하지만 이번에도 운이 도왔는지 저에게 바라는 점이 명확한 두 팀과 매칭되었었어요.</p>
<h3 id="따뜻하지만-아쉬운-점">따뜻하지만 아쉬운 점</h3>
<p>한 팀은 프론트엔드 분야를 개발하며 궁금한 점을 물어보길 원했고, 다른 한 팀은 제가 소마 과정에서 개발한 프로젝트와 상당히 비슷한 주제를 가지고 어떤 경험을 겪었는 지를 궁금해 했어요.</p>
<p>소마 과정을 진행하며 아는 만큼, 도와줄 수 있는 만큼 내가 겪었던 길을 지름길로 보내고 싶었던 마음이 컷어요.</p>
<p>이런 마음이 닿았는지 소마 과정이 마무리될 때, 두 팀에게 따뜻한 인사를 받을 수 있었어요.</p>
<p>물론 예의상하는 말일 수도 있겠지만 저는 큰 따뜻함과 보람을 느낄 수 있었고 내가 더 시간을 투자해서 도와줄 수 있진 않았을까 반성도 하게 되었어요.</p>
<p>부족한 저이지만 "엑스퍼트님"이라는 호칭으로 불러준 두 팀에게 감사의 인사를 전하며, 저에게 소마라는 과정이 많이 도움이 되었고 재밌었던 만큼 두 팀 모두 도움이 되었고 재밌었길 바라는 마음이에요.</p>
<h2 id="gdsc" class="heading">GDSC</h2>
<p>GDSC는 <code>Google Developer Student Clubs</code>의 약자인데요.</p>
<p>구글에서 선발한 학교 대표(lead)가 주축이 되어 활동을 이끌어가는 동아리 개념이에요.</p>
<p>올해 한국에서는 32개의 대학교 Lead가 선발되었고 운이 좋게도 그 안에 제가 들어갈 수 있었어요.</p>
<h3 id="활동-목표">활동 목표</h3>
<p>GDSC Lead로써 지원하면서 가장 바랬던 부분은 사실 'Google의 이름을 등에 업고 교내 최고의 개발 커뮤니티를 구성'하는 것이였어요.</p>
<p>물론 Google에서 진행하는 활동에 참여하는 것, 활동을 개최하는 것, 다른 Lead들과 네트워킹하는 것, 모두 귀중한 경험이지만 가장 가깝게 느끼고 있는 교내의 문제를 해결하고 싶었어요.</p>
<p>아주 많이 작은 학교이지만 그 안에서도 개발자를 희망하는 학생들 무리가 파편화되어 있다는 느낌을 받았어요.</p>
<p>이런 무리를 한 곳에 모아 학습과 정보의 선순환을 일으키고 싶었어요.</p>
<h3 id="현재는">현재는</h3>
<p>뜻에 공감하는 학우분들이 운영진으로써 지원해 주셨고, 모집 기간에 적극적으로 홍보한 덕에 교내에서 인원수가 가장 많은 커뮤니티가 될 수 있었어요.</p>
<p>관리가 가능한 최대 인원을 기준으로 잡고 모집을 하였기 때문에 함께하지 못한 분들이 있는 것이 아쉬움으로 남지만 내년에는 더 많은 분들과 함께할 수 있을 것 같다는 느낌을 받고 있어요.</p>
<p>아직 학습과 정보의 선순환보다는 함께하는 분들에게 '이론과 실전의 격차를 줄이는 것'에 초점을 맞춰 진행하고 있지만, 앞으로 진행할 해커톤, 프로젝트와 같은 많은 활동들이 기대가 돼요.</p>
<p>동아리원끼리 친하게 지내는 모습만으로도 보람이 되지만 만족하지 않고 더 좋은 성과를 낼 수 있도록 노력이 필요한 거 같다고 느끼는 요즘이에요.</p>
<h2 id="오픈소스" class="heading">오픈소스</h2>
<p>21년 말부터 오픈소스 프로젝트가 얼마나 좋은 교보재인지 깨달을 수 있었어요.</p>
<p>막연하게 대단하다고만 생각하던 프로젝트도 내가 타이핑하는 알파벳들로 이루어진 것을 피부로 느끼며 자신감을 얻을 때도 있는가하며, 어떤 문제를 특정하고 그것을 해결하기 위한 도구를 만드는 것에 경외심이 들 때도 있었어요.</p>
<blockquote>
<p>문제를 해결하기 위해 '잘 만든 것'에서도 대단함을 느끼지만, '문제를 찾는 것'에 더 대단함을 느꼈던 것 같아요.</p>
</blockquote>
<p>이런 흐름에 참여하고 싶은 마음이 강해 올해는 여러 프로젝트에 기여를 했지만, 결과론적으로 봤을 때 누구나 할 수 있는 것을 한 것 같다는 느낌을 받았어요.</p>
<p>기술적으로 문제를 해결하기 보다는 간단한 코드 몇조각을 작성하거나, 문서의 오타를 수정하거나, 내가 아닌 누구라도 할 수 있었던 일들을 한 것 같은 느낌을 받은 올해였어요.</p>
<p>물론 이런 경험이 부정적인 경험은 아니지만, 내년에는 누구라도 할 수 있는 기여보다는 노력을 한 사람만 할 수 있는 기여를 해보고 싶어요.</p>
<h2 id="디프만" class="heading">디프만</h2>
<p>작년은 소마 과정으로 이루어져 있다면, 올해는 디프만 이라는 단체로 이루어져 있다고 해도 과언이 아닌데요.</p>
<blockquote>
<p>사실 회고를 쓰게된 것도 디프만에서 선한 영향력을 끼치시는 분 덕분이에요.</p>
</blockquote>
<p>올해 상반기에 '11기'로 활동을 하였고, 하반기부터 내년 1월까지 '12기 운영진'으로 활동할 예정이기 때문이에요.</p>
<h3 id="11기">11기</h3>
<p>처음 지원했을 때는 '회사에서 일하고 있는 개발자분들과 프로젝트를 통해 많이 배우고 싶다'라는 감정이 제일 컷어요.</p>
<p>하지만 프로젝트를 진행하며 제가 바랬던 성장도 이루었지만, 다른 관점의 성장을 더 많이 이룬 것 같아요.</p>
<p>제가 바랬던 성장은 단순히 코드를 잘짜는 행위였지만 여러 좋은 사람들과 이야기를 나누고 하나의 목표를 달성하고자 하는 과정에서 '코드를 잘짜는 행위'보다 <code>코드를 짜는 사람에 대한 성장</code>을 더 많이 이룰 수 있다고 생각해요.</p>
<blockquote>
<p>물론 지금도 부족하고 그때는 더 부족했기에 코드에 대한 식견도 넓힐 수 있었어요.</p>
</blockquote>
<p>결국 사람이 내 코드를 보기 때문에, 더 읽기 좋은 방법은 무엇인지 한 번 더 고민하게 되고</p>
<p>이해를 돕기 위해 PR은 어떻게 더 잘 작성할 수 있을지, diff가 너무 큰 거는 아닌지, 내가 작업한 것에 피드백하기 쉬운 분위기는 어떻게 만들 수 있을지, 지원했을 때 하길 바라던 고민과는 다른 방향이라고 생각되었지만 절대 하기 싫은 고민은 아니였어요.</p>
<p>오히려 아래에서 다룰 <code>같이 일하고 싶은 사람</code>은 누구인가를 더 생각할 수 있게 되는 계기였다고 생각해요.</p>
<blockquote>
<p>너무 간단하고 누구나 아는 이야기이지만 <code>결국에 코드를 읽고 작성하는 것은 사람</code>인 것을 더 깨닫게 되었달까요.</p>
</blockquote>
<p><img src="https://user-images.githubusercontent.com/26461307/208601157-35ca9a33-0248-4f19-9212-bc20bd956587.jpeg" alt="11기 대상"></p>
<p>저를 포함한 팀원들의 노력에 많은 분들이 공감을 하셨는지 좋은 결과도 얻을 수 있었어요.</p>
<p><code>영감탱</code>이라는 서비스는 지금도 유지보수, 운영하고 있는데 뜻을 같이 하는 사람들을 만나 이런 경험을 할 수 있었던 것에 감사함을 느껴요.</p>
<h2 id="12기-그리고-운영진" class="heading">12기 그리고 운영진</h2>
<p>사실 디프만이라는 단체에 운영진으로 참여하게 된 것은 좋았던 경험을 한 번 더 참여하고 싶지만 더 참여하기 쉬운 방법이라 생각되기 때문과 디프만 웹사이트를 만드는 과정에 참여하고 싶었기 때문이에요.</p>
<p>결과론적으로 두 목표 모두 이룰 수 있었지만 이외에도 좋은 경험들을 할 수 있었어요.</p>
<h3 id="디프만-웹사이트">디프만 웹사이트</h3>
<img width="1440" alt="디프만 웹사이트" src="https://user-images.githubusercontent.com/26461307/208602186-aeea5e62-0a49-4518-ab09-ec6d7d6f7ec4.png">
<p>디프만 웹사이트를 개발하고 싶었던 이유 중 하나는 사용자가 일정량 확보가 되어 있었기 때문이에요.</p>
<p>지금까지 개발했던 어플리케이션들 보다 확실하게 많은 사람들에게 보여질 것이라 생각했고 실제로 그랬어요.</p>
<p>덕분에 구글 서치 콘솔에서 지금까지와는 다른 지표를 확인할 수 있었고, 어떻게 하면 더욱 많은 사람들이 접할 수 있을까 더 고민해 볼 수 있었어요.</p>
<p>개발하며 힘들었던 점이라고 한다면 기간이 짧았단 것인데, 함께하는 다른 운영진분들과 해커톤 같은 느낌으로 할 수 있었어서 그래도 재미있게 할 수 있었던 거 같아요.</p>
<p>다음 기수에서 사용될 것 같지는 않지만 지금까지도 좋은 경험이라고 생각되어 아쉽진 않아요.</p>
<h3 id="평가">평가</h3>
<p>웹 프론트엔드 분야의 운영진으로써 지원자분들의 서류를 평가하고 면접관으로써 참여했는데요.</p>
<p>처음에는 내가 이 사람들을 평가할 자격이 있는지 회의감이 들었었어요.</p>
<blockquote>
<p>저를 포함한 많은 사람들이 지원과 면접 과정에서 희비가 갈리고, 많은 것이 걸려 있다는 것을 알아 부담이 되어 그럤던 것 같아요.</p>
</blockquote>
<p>이내 회의감과 부담감보다는 내가 보았던 좋은 경험들의 면접들을 복기하며 어떻게하면 지원자분들에게 좋은 면접 경험을 드릴 수 있을 지 고민 했었어요.</p>
<p>현실적으로 모든 지원자분들과 함께 할 수는 없고, 내가 드릴 수 있는 최선은 무엇인가 생각해 봤을 때 탈락하였지만 많은 걸 배울 수 있었던 면접들이 생각이 낫기 때문이에요.</p>
<p>면접관으로써 참여했던 때보다 조금의 면접을 더 경험해본 지금에 와서 생각을 해봤을 때 좋은 경험을 드렸던 것인지는 불투명 하지만, 최선을 다했다고 생각이 되고 이런 고민을 할 수 있었던 것에 감사함을 느껴요.</p>
<h3 id="12기-활동">12기 활동</h3>
<p>영감탱에 이어 12기에는 <code>아맞다</code>라는 서비스를 개발하고 있는데요.</p>
<p>어떻게 된 일인지 제가 프론트엔드 파트 리더(사실상 서기)와 PM(사실상 회의 진행자)를 맡게 되었어요.</p>
<p>열 명의 사람들의 기간이 나에게 달린 것 같아 항상 조바심을 느끼는 몸이 되어버렸지만, 모든 분들이 잘 참여해 주시고 의견도 편하게 말할 수 있는 분위기를 조성할 수 있었던 것 같아 다행이라고 생각해요.</p>
<p>글을 작성하는 지금 최종 발표까지 한 달도 안남은 시점인데 과정 끝까지 그리고 그 이후에도 좋은 경험을 할 수 있길 바라고 있어요.</p>
<h2 id="같이-일하고-싶은-사람" class="heading">같이 일하고 싶은 사람</h2>
<p>디프만 과정에서 가장 많이 생각하게된 부분인데요.</p>
<p>사실 이전에는 같이 일하고 싶은 사람은 단순히 "개발을 잘하는 사람" 이라고 답 했을 거 같아요.</p>
<p>근데 다양한 사람들, 그 중에서 회사에서 근무하시는 분들과 함께 서비스를 운영해 보니 '나는 어떤 사람과 같이 일하고 싶은 걸까?' 고민해 보았어요.</p>
<p>고민의 결과부터 적어보자면 아래와 같아요.</p>
<ul>
<li>일을 믿고 맡길 수 있는 사람</li>
<li>빠르게 실천하고 과정을 공유하는 사람</li>
<li>편하게 의사소통 할 수 있는 분위기에 조력하는 사람</li>
</ul>
<h3 id="일을-믿고-맡길-수-있는-사람">일을 믿고 맡길 수 있는 사람</h3>
<p>한 에피소드에서 느꼈던 부분인데요.</p>
<p>제가 당장 처리할 수 없을 때, 서비스에 hotfix 급 이슈가 발생 했었어요.</p>
<p>이 때 팀원 한 분이 본인이 처리하겠다고 메신저로 남겨주셨는데, 이전까지의 행실이라 해야할지 태도라 해야할지 아무튼 그 분의 이미지 때문에 걱정이 되지 않았어요.</p>
<blockquote>
<p>'그 분이라면 금방 그리고 정확하게 해결하실 거야' 라고 생각이 들었달까요</p>
</blockquote>
<p>이런 생각을 하게 되고 그 분의 입버릇처럼 '든든'하다 생각되었고 나는 이런 사람과 같이 일하고 싶고 나도 이런 사람이 되고 싶다고 생각되었어요.</p>
<h3 id="빠르게-실천하고-과정을-공유하는-사람">빠르게 실천하고 과정을 공유하는 사람</h3>
<p>저는 성격이 급해 할 일이 있을 때 미루어 두는 것을 잘 못하는 데요.</p>
<p>이런 성격에 기반해서 '타이밍을 기다린다거나 일을 신중히 처리하는 사람' 보다 '빠르게 실천해 보고 시행착오를 겪는 사람'과 시너지가 맞는다고 생각이 되었어요.</p>
<p>그리고 과정을 공유하는 것은 현재 취직을 하기 전인 상태이기 때문에 '성장'이라는 키워드를 중요하게 생각하고 있고</p>
<p>동일한 과정을 이후에 팀원이 겪는다면 더욱 빨리 그리고 효과적으로 해결할 수 있는 방법은 공유라고 생각했기 때문이에요.</p>
<h3 id="편하게-의사소통-할-수-있는-분위기에-조력하는-사람">편하게 의사소통 할 수 있는 분위기에 조력하는 사람</h3>
<p>누구나 말을 꺼낼 수 있는 환경은 '더욱 근거있는 가설을 세울 가능성과 비례'할 수 있으며 '더욱 효과적인 의사소통에 도움'이 된다고 생각했기 때문이에요.</p>
<p>사용자의 행동은 예측할 수 없고, 사용자와 만드는 사람들은 물론 다르지만 한 명이라도 많은 의견을 거치고 가설을 세운다면 더욱 다양한 사람의 행동에 부합한 가설을 세울 가능성이 높아 진다고 생각했어요.</p>
<blockquote>
<p>다양한 가설을 세우는 과정에서 나와 다른 생각의 가설을 듣고, 내 가설 근거에 반대되는 의견을 들었을 때 더욱 효과적으로 우선순위가 정해졌던 것 같아요.</p>
</blockquote>
<p>'더욱 효과적인 의사소통'이란 말은 굉장히 추상적이지만 제가 생각했던 그리고 많이 겪었던 일화로 설명할 수 있을 것 같아요.</p>
<blockquote>
<p>A: foo는 foo 맞나요?</p>
<p>B: (잘 못들었거나 이해하지 못했음) 어.. 맞아요</p>
</blockquote>
<p>이렇게 상대방의 말을 얼렁뚱땅 넘어가게 된다면 이후에 다시 한 번 의사소통을 거쳐야될 확률이 높고 이는 대부분 비동기적인 방법으로 거쳐지게 될 것이라 생각해요.</p>
<p>그럼 추가적인 리소스가 발생함과 더불어 소통에 걸리는 시간 때문에 병목이 생길 수도 있다고 생각이 되었어요.</p>
<p>위 예와 같은 상황에 '저는 이렇게 이해했는데 맞을까요?'라고 물어보기 위해서는 개개인의 태도도 중요하겠지만 의사소통의 분위기도 중요하다고 생각이 되었기 때문에</p>
<p>더 능률적으로 일하기 위해 좋은 분위기에 도움이 되는 사람과 같이 일하고 싶다고 생각되었어요.</p>
<h2 id="반성" class="heading">반성</h2>
<h3 id="책">책</h3>
<p>가장 크게 후회하는 점은 <code>책을 통해 많이 배우지 못한 것</code> 이에요.</p>
<p>책을 통해서 다른 사람이 먼저 고민했던 내용을 알 수 있고</p>
<p>아티클로 접하는 것보다 더 정제되어 있고, 신빙성이 높은 자료라 판단하여 항상 책을 통해 배우고자 했었어요.</p>
<p>근데 2022년을 돌이켜보면 읽은 책은 두 권이 전부이고</p>
<p>그것도 습관화해서 읽었다기 보다는 의식적으로 읽었던 것 같아요.</p>
<p>2023년에는 책을 읽는 습관을 들이고 싶고, 개발에 한정된 것이 아닌 다양한 분야의 책을 접하고 읽고 싶어요.</p>
<h3 id="최선과-방향">최선과 방향</h3>
<p>돌이켜보면 항상 열심히는 해왔으나 그것이 최선인지, 옳은 방향인지는 모르겠어요.</p>
<p>내가 생각하는 옳은 방향을 알 수 있는 객관화가 부족했던 것 같고</p>
<p>실천했던 행동에서 더 열심히 할 수 있지 않았나 하는 생각이 들어 반성하게 되는 것 같아요.</p>
<h2 id="2023년-목표" class="heading">2023년 목표</h2>
<p>많은 일들을 겪고 이전보다 인간적으로 더 성장할 수 있었던 한 해였던 것 같아요.</p>
<p>다음 해는 방향성 있는 노력으로 개발자로써, 인간적으로써 더욱 성장할 수 있도록 목표를 나열해보며 회고를 마치고자해요.</p>
<p>내년 말에는 모든 목표를 이룬 모습으로 이 회고를 읽는 내가 되길</p>
<ul>
<li>국토대장정 완주하기</li>
<li>12권 이상의 책 읽기</li>
<li>졸업하기전에 취직하기</li>
<li>내가 재밌어하는 토이 프로젝트 1개 이상 만들기</li>
<li>내가 목표하는 것이 무엇인지 고민하고 방향성 있는 노력하기</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[Next.js CI 단계에서 번들 사이즈 확인하기]]></title>
    <link>https://www.hyesungoh.xyz/check-bundle-size-with-github-actions</link>
    <pubDate>2022-10-02</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/check-bundle-size-with-github-actions</guid>
    <description>
    <![CDATA[Github actions를 이용해 PR 코멘트와 이슈에서 route 별 번들 사이즈를 확인하는 법을 공유합니다.]]>
    </description>
    <content:encoded>
      <![CDATA[<p><img src="https://user-images.githubusercontent.com/26461307/193455442-df639e3e-9153-4513-80c7-80743d1a7811.png" alt="Next.js CI 단계에서 번들 사이즈 확인하기"></p>
<p>Next.js 환경에서 각 Route 별 번들 사이즈를 Github PR 코멘트, 이슈에서 확인할 수 있는 방법을 공유합니다.</p>
<h2 id="번들-사이즈란" class="heading">번들 사이즈란?</h2>
<p>우리가 만든 서비스의 번들 사이즈를 확인하기 전에, 번들 사이즈는 무엇일까요?</p>
<p>우리가 만든 서비스가 더욱 빠르고, 원활하게 사용자가 사용할 수 있게 하기 위한 지표 중 하나로써 <code>자바스크립트 코드의 크기</code>를 뜻해요.</p>
<blockquote>
<p>즉 코드의 크기(용량)가 작을수록 사용자가 다운로드받아야 할 용량이 줄어들어 빠르게 실행될 수 있는 것이에요.</p>
</blockquote>
<p>물론 성능을 논할 때 번들 사이즈 외에도 중요한 것은 많이 있어요. 관련해 더욱 알아보고 싶으신 분들은 <a href="https://yceffort.kr/2021/02/javascript-performance-bundle-size" target="_blank" rel="noopener noreferer">yceffort님의 글</a>을 추천해 드려요.</p>
<h2 id="번들-사이즈를-확인하는-방법" class="heading">번들 사이즈를 확인하는 방법</h2>
<p>Webpack을 사용하는 환경에서는 <a href="https://github.com/webpack-contrib/webpack-bundle-analyzer" target="_blank" rel="noopener noreferer">webpack-bundle-analyzer</a>를 사용해 번들 사이즈를 확인할 수 있어요.</p>
<p>그리고 Next.js 환경에서는 webpack-bundle-analyzer를 이용한 <a href="https://www.npmjs.com/package/@next/bundle-analyzer" target="_blank" rel="noopener noreferer">@next/bundle-analyzer</a>를 사용해 번들 사이즈를 확인할 수 있어요.</p>
<p><img src="https://cloud.githubusercontent.com/assets/302213/20628702/93f72404-b338-11e6-92d4-9a365550a701.gif" alt="bundle analyzer"></p>
<p><small> 출처 : <a href="https://github.com/josselinbuils/next-bundle-analyzer" target="_blank" rel="noopener noreferer">https://github.com/josselinbuils/next-bundle-analyzer</a> </small></p>
<p>위 방법을 이용해 모든 청크들을 어떤 모듈들로 구성되어 있는지 확인할 수 있어요.</p>
<p>자세히 보기 위해서는 좋은 방법이지만, 따로 커맨드로 실행해서 브라우저에서 확인해야 한다는 점이 번거로울 수도 있다고 생각되었어요.</p>
<h2 id="ci-단계에서-확인하기" class="heading">CI 단계에서 확인하기</h2>
<p>이런 번거로움을 Pull request 시에 번들 사이즈가 얼마나 달라졌으며, 현재 main 브랜치의 번들 사이즈가 얼마인지 Github의 Issue로 보여주는 방법으로 덜어주는 Github actions 도구가 있는데요.</p>
<p>이름은 <a href="https://github.com/transferwise/actions-next-bundle-analyzer" target="_blank" rel="noopener noreferer">actions-next-bundle-analyzer</a>에요.</p>
<p>Next.js 환경의 build 결과물을 통해 <code>next-bundle-analyzer</code>를 사용해 계산한 값을 아래와 같이 보여줘요.</p>
<h4 id="pull-request에서">Pull request에서</h4>
<p><img src="https://user-images.githubusercontent.com/614392/123790589-69872e80-d8d6-11eb-9dec-0686e0bba760.png" alt="actions-next-bundle-analyzer PR"></p>
<h4 id="issue에서-base-branch-값">Issue에서 (base branch 값)</h4>
<p><img src="https://user-images.githubusercontent.com/52004409/156007377-3e6bbb4c-f721-4b42-a363-4559b2ea55df.png" alt="actions-next-bundle-analyzer Issue"></p>
<h2 id="적용하는-방법" class="heading">적용하는 방법</h2>
<p>Github actions를 이용해 간단히 적용할 수 있고, 방법은 아래와 같아요.</p>
<pre class="language-yml"><code class="language-yml code-highlight"><span class="code-line"><span class="token key atrule">name</span><span class="token punctuation">:</span> CI
</span><span class="code-line">
</span><span class="code-line"><span class="token key atrule">on</span><span class="token punctuation">:</span>
</span><span class="code-line">  <span class="token key atrule">push</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token key atrule">branches</span><span class="token punctuation">:</span>
</span><span class="code-line">      <span class="token punctuation">-</span> main
</span><span class="code-line">  <span class="token key atrule">pull_request</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token key atrule">brances</span><span class="token punctuation">:</span>
</span><span class="code-line">      <span class="token punctuation">-</span> main
</span><span class="code-line">      <span class="token punctuation">-</span> something
</span><span class="code-line">
</span><span class="code-line"><span class="token key atrule">jobs</span><span class="token punctuation">:</span>
</span><span class="code-line">  <span class="token key atrule">run-bundle-analysis</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest
</span><span class="code-line">    <span class="token key atrule">steps</span><span class="token punctuation">:</span>
</span><span class="code-line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout
</span><span class="code-line">        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2
</span><span class="code-line">
</span><span class="code-line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Install dependencies
</span><span class="code-line">        <span class="token key atrule">run</span><span class="token punctuation">:</span> yarn
</span><span class="code-line">
</span><span class="code-line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Build
</span><span class="code-line">        <span class="token key atrule">run</span><span class="token punctuation">:</span> yarn build
</span><span class="code-line">
</span><span class="code-line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Analyze bundle sizes
</span><span class="code-line">        <span class="token key atrule">uses</span><span class="token punctuation">:</span> transferwise/actions<span class="token punctuation">-</span>next<span class="token punctuation">-</span>bundle<span class="token punctuation">-</span>analyzer@master
</span><span class="code-line">        <span class="token key atrule">with</span><span class="token punctuation">:</span>
</span><span class="code-line">          <span class="token key atrule">workflow-id</span><span class="token punctuation">:</span> CI.yml
</span><span class="code-line">          <span class="token key atrule">base-branch</span><span class="token punctuation">:</span> main
</span><span class="code-line">        <span class="token key atrule">env</span><span class="token punctuation">:</span>
</span><span class="code-line">          <span class="token key atrule">GITHUB_TOKEN</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.GITHUB_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span>
</span></code></pre>
<p>dependency 파일들과 build 결과물을 캐싱하여 다른 job 들의 속도를 높일 수 있겠지만, 가장 간단한 형태는 위의 모습이 될 거 같아요.</p>
<p>기본적인 작성 방법은 <a href="https://docs.github.com/en/actions" target="_blank" rel="noopener noreferer">Github의 공식 문서</a>를 확인해 주시는 것이 더욱 정확할 것이라 생각해, <code>actions-next-bundle-analyzer</code> 작성 부분을 설명드리며 글을 마쳐보려 해요.</p>
<pre class="language-yml"><code class="language-yml code-highlight"><span class="code-line"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Analyze bundle sizes
</span><span class="code-line">  <span class="token key atrule">uses</span><span class="token punctuation">:</span> transferwise/actions<span class="token punctuation">-</span>next<span class="token punctuation">-</span>bundle<span class="token punctuation">-</span>analyzer@master
</span><span class="code-line">  <span class="token key atrule">with</span><span class="token punctuation">:</span>
</span><span class="code-line highlight-line">    <span class="token key atrule">workflow-id</span><span class="token punctuation">:</span> CI.yml
</span><span class="code-line">    <span class="token key atrule">base-branch</span><span class="token punctuation">:</span> main
</span><span class="code-line">  <span class="token key atrule">env</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token key atrule">GITHUB_TOKEN</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.GITHUB_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span>
</span></code></pre>
<p>작성하는 workflow의 파일명을 작성해 주시면 돼요.</p>
<pre class="language-yml"><code class="language-yml code-highlight"><span class="code-line"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Analyze bundle sizes
</span><span class="code-line">  <span class="token key atrule">uses</span><span class="token punctuation">:</span> transferwise/actions<span class="token punctuation">-</span>next<span class="token punctuation">-</span>bundle<span class="token punctuation">-</span>analyzer@master
</span><span class="code-line">  <span class="token key atrule">with</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token key atrule">workflow-id</span><span class="token punctuation">:</span> CI.yml
</span><span class="code-line highlight-line">    <span class="token key atrule">base-branch</span><span class="token punctuation">:</span> main
</span><span class="code-line">  <span class="token key atrule">env</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token key atrule">GITHUB_TOKEN</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.GITHUB_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span>
</span></code></pre>
<p>optional 값으로써, base branch 이름을 적어주시면 돼요. default 값은 master예요.</p>
<pre class="language-yml"><code class="language-yml code-highlight"><span class="code-line"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Analyze bundle sizes
</span><span class="code-line">  <span class="token key atrule">uses</span><span class="token punctuation">:</span> transferwise/actions<span class="token punctuation">-</span>next<span class="token punctuation">-</span>bundle<span class="token punctuation">-</span>analyzer@master
</span><span class="code-line">  <span class="token key atrule">with</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token key atrule">workflow-id</span><span class="token punctuation">:</span> CI.yml
</span><span class="code-line">    <span class="token key atrule">base-branch</span><span class="token punctuation">:</span> main
</span><span class="code-line highlight-line">  <span class="token key atrule">env</span><span class="token punctuation">:</span>
</span><span class="code-line highlight-line">    <span class="token key atrule">GITHUB_TOKEN</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.GITHUB_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span>
</span></code></pre>
<p>Github PR에 코멘트를 남기고, Issue를 생성하기 위한 Token을 전달하는 과정으로 따로 <code>Github Secrets</code>에 값을 작성해 주시지 않아도 돼요.</p>
<p>추가적으로 사용하지 않은 옵션이 하나 더 있는데요.</p>
<pre class="language-yml"><code class="language-yml code-highlight"><span class="code-line"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Analyze bundle sizes
</span><span class="code-line">  <span class="token key atrule">uses</span><span class="token punctuation">:</span> transferwise/actions<span class="token punctuation">-</span>next<span class="token punctuation">-</span>bundle<span class="token punctuation">-</span>analyzer@master
</span><span class="code-line">  <span class="token key atrule">with</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token key atrule">workflow-id</span><span class="token punctuation">:</span> CI.yml
</span><span class="code-line">    <span class="token key atrule">base-branch</span><span class="token punctuation">:</span> main
</span><span class="code-line highlight-line">    <span class="token key atrule">working-directory</span><span class="token punctuation">:</span> /packages/something
</span><span class="code-line">  <span class="token key atrule">env</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token key atrule">GITHUB_TOKEN</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.GITHUB_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span>
</span></code></pre>
<p>빌드 결과물을 찾을 위치를 지정하는 옵션이에요. 기본값은 <code>cwd</code>로써 모노레포와 같은 환경에서 사용할 수 있을 것 같은 옵션이에요.</p>
<h2 id="마치며" class="heading">마치며</h2>
<p>위 도구를 적용해 Route 별 번들 사이즈를 간편하게 확인할 수 있었고, Dynamic import를 한 부분도 따로 알려주어 추가적인 인사이트를 얻을 수 있게 되었어요.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/193453180-9734e05d-d7ba-4236-9ad3-4b19c7c8e245.png" alt="적용 결과물"></p>
<p>번들 사이즈가 지나치게 큰 Route는 없는지 간단하게 확인 후 <code>bundle-analyzer</code>를 이용해 자세히 확인하는 방법 등을 통해 번들 사이즈 다이어트에 다들 성공하시기 바라는 마음으로 글을 맞춰보도록 할게요.</p>
<p>읽어주셔서 감사합니다.</p>
<blockquote>
<p>저는 <a href="https://github.com/kooku0" target="_blank" rel="noopener noreferer">kooku</a> 님의 적용 사례를 보고 해당 도구를 알게 되었어요. 많은 인사이트를 주신 kooku 님에게 감사 인사드려요!</p>
</blockquote>
<h2 id="부록-라이브러리-번들-사이즈-확인하기" class="heading">부록, 라이브러리 번들 사이즈 확인하기</h2>
<p>번들 사이즈에 많은 영향을 끼치는 것이 라이브러리의 크기인데요.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/193454231-0cc9f673-9c4a-43c9-917a-6db7f0cec140.png" alt="bundlephobia"></p>
<p><a href="https://bundlephobia.com/" target="_blank" rel="noopener noreferer">bundlephobia</a>에서 라이브러리 이름과 버전에 따른 번들 사이즈를 확인할 수 있으니 라이브러리 선택의 지표 중 하나로 사용하실 수 있어요.</p>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[그래서 자바스크립트는 어떻게 쓰레기를 수거하나요?]]></title>
    <link>https://www.hyesungoh.xyz/how-to-collect-garbage-in-js</link>
    <pubDate>2022-08-26</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/how-to-collect-garbage-in-js</guid>
    <description>
    <![CDATA[자바스크립트(V8)는 어떻게 메모리를 관리하고 있는지 공유합니다.]]>
    </description>
    <content:encoded>
      <![CDATA[<p><img src="https://user-images.githubusercontent.com/26461307/186742188-520a8f7b-15a8-4805-85a9-95444049fcc9.png" alt="그래서 자바스크립트는 어떻게 쓰레기를 수거하나요"></p>
<p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Memory_Management" target="_blank" rel="noopener noreferer">MDN의 '자바스크립트의 메모리 관리'</a>를 읽어보면 자바스크립트가 어떤 알고리즘으로 메모리를 관리하고 있는지에 대해 알 수 있습니다.</p>
<p>이를 조금 더 자세히 알고 싶다는 궁금증에 시작해, 구글의 자바스크립트 엔진 <code>V8</code>은 어떻게 메모리를 관리하고 있는지 알아본 내용을 공유합니다.</p>
<h2 id="자바스크립트의-가비지-콜렉션" class="heading">자바스크립트의 가비지 콜렉션</h2>
<blockquote>
<p>위 MDN 문서를 읽어보신 분은 skip하셔도 좋은 내용이에요.</p>
</blockquote>
<p>C 언어와 같은 저수준 언어는 개발자가 의도적으로 메모리 해제를 할 수 있어요.
하지만, 자바스크립트의 경우 메모리 할당부터 해제(가비지 콜렉션)까지 자동으로 관리를 하고 있는데요.</p>
<p>간단한 메모리의 Life cycle은 다음과 같아요.</p>
<ol>
<li>메모리가 필요할 때 할당</li>
<li>할당된 메모리를 사용</li>
<li><strong>더 이상 필요하지 않으면 해제</strong></li>
</ol>
<p>여기서 중요한 부분이 <strong>더 이상 필요하지 않을 때를 판별하는 방법</strong>입니다.</p>
<p>위에서 언급했던 것처럼 저수준 언어는 메모리의 필요성을 개발자가 직접 결정하지만, 자바스크립트와 같은 고수준의 언어들은 <strong>가비지 콜렉션(GC)</strong>라는 자동 메모리 관리 방법을 사용해요.</p>
<blockquote>
<p>그렇다고 가비지 콜렉션이 무조건적으로 좋은 방법은 아니에요. 왜냐하면 어떤 메모리의 필요성에 대해 판단하는 것은 <a href="https://en.wikipedia.org/wiki/Decidability_%28logic%29" target="_blank" rel="noopener noreferer">비결정적</a>인 문제이기 때문이에요.</p>
</blockquote>
<h3 id="reference-counting-가비지-콜렉션">Reference counting 가비지 콜렉션</h3>
<p>Reference counting(참조 세기) 알고리즘은 <strong>더 이상 필요 없는 오브젝트</strong>를 <strong>어떤 다른 오브젝트도 참조하지 않는 오브젝트</strong>라고 정의하는 알고리즘이에요.</p>
<p>즉, A라는 오브젝트를 참조하는 다른 오브젝트가 하나도 없을 경우 <strong>가비지</strong>로 판단해 수집(메모리 해제)해요.</p>
<h4 id="reference-counting의-한계">Reference counting의 한계</h4>
<p>Reference counting 알고리즘은 적절한 해결 방법이라고 생각되지만, 사실 한계가 존재해요.</p>
<pre class="language-js"><code class="language-js code-highlight"><span class="code-line"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  a<span class="token punctuation">.</span><span class="token property-access">bar</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>
</span><span class="code-line">  b<span class="token punctuation">.</span><span class="token property-access">baz</span> <span class="token operator">=</span> a<span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword control-flow">return</span> <span class="token string">'clear'</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>위 경우에서 함수 호출이 완료되면 <code>a</code>와 <code>b</code> 객체는 스코프를 벗어나기 때문에 불필요한, 그러니까 회수되어야 하는 메모리가 됩니다.</p>
<p>하지만 두 객체가 서로를 참조하고 있기 때문에, Reference counting 알고리즘은 둘 다 가비지 컬렉션의 대상으로 판단하지 못해 메모리 누수의 원인이 됩니다.</p>
<blockquote>
<p>실제로 IE 6과 7의 경우 DOM 오브젝트에 대해 Reference counting 알고리즘으로 가비지 콜렉션을 수행했었어요. 자세한 예제는 <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Memory_Management#%EC%B0%B8%EC%A1%B0-%EC%84%B8%EA%B8%B0reference-counting_%EA%B0%80%EB%B9%84%EC%A7%80_%EC%BD%9C%EB%A0%89%EC%85%98" target="_blank" rel="noopener noreferer">MDN 게시물</a>을 참고하시면 좋을 거 같아요.</p>
</blockquote>
<h3 id="mark-and-sweep-알고리즘">Mark and sweep 알고리즘</h3>
<p>Mark and sweep(표시하고 쓸기) 알고리즘의 경우 <strong>닿을 수 없는 오브젝트</strong>를 <strong>더 이상 필요 없는 오브젝트</strong>로 정의하는 알고리즘이에요.</p>
<p>이 알고리즘의 동작 방법은 다음과 같아요.</p>
<ol>
<li><code>roots</code>라는 오브젝트의 집합을 가지고 있어요.</li>
<li>주기적으로 가비지 콜렉터는 roots부터 roots가 참조하는 오브젝트, roots가 참조하는 오브젝트가 참조하는 오브젝트들 ... 을 닿을 수 있는 오브젝트로 판단해요.</li>
<li>닿을 수 있는 오브젝트가 아닌 <strong>닿을 수 없는 오브젝트</strong>에 대해 가비지 콜렉션을 수행해요.</li>
</ol>
<p>이 알고리즘은 Reference counting 알고리즘보다 효율적인데,
Reference counting이 판단하는 <strong>참조되지 않는 오브젝트</strong>는 모두 Mark and sweep이 판단하는 <strong>닿을 수 없는 오브젝트</strong>이지만
<strong>닿을 수 없는 오브젝트</strong>가 모두 <strong>참조되지 않는 오브젝트</strong>는 아니기 때문이에요.</p>
<p>위에서 설명했던 순환 참조로 풀어서 설명하자면 다음과 같아요.</p>
<pre class="language-diff"><code class="language-diff code-highlight"><span class="code-line">function foo() {
</span><span class="code-line"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> var a = {};
</span></span></span><span class="code-line"><span class="token unchanged"><span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line"> var b = {};
</span></span></span><span class="code-line"><span class="token unchanged"><span class="token line"></span></span>
</span><span class="code-line"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> a.bar = b;
</span></span></span><span class="code-line"><span class="token unchanged"><span class="token line"></span><span class="token prefix unchanged"> </span><span class="token line"> b.baz = a;
</span></span></span><span class="code-line"><span class="token unchanged"><span class="token line"></span></span>
</span><span class="code-line"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> return 'clear';
</span></span></span><span class="code-line"><span class="token unchanged"><span class="token line"></span></span>}
</span><span class="code-line">
</span><span class="code-line deleted"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">// a와 b는 Reference counting 알고리즘에서 참조되는 오브젝트
</span></span></span><span class="code-line inserted"><span class="token deleted-sign deleted"><span class="token line"></span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">// 하지만 Mark and sweep 알고리즘에서 닿을 수 없는 오브젝트
</span></span></span></code></pre>
<h2 id="이게-끝" class="heading">이게 끝?</h2>
<blockquote>
<p>서론에서 언급한 MDN 문서를 읽으신 분들은 여기부터 읽어보시면 돼요.</p>
</blockquote>
<p>많은 분들이 어떤 알고리즘을 사용하는지는 알게 되었으나, 수박의 겉을 핥은 수준이라고 생각되어 더욱 자세히 알아보고 싶으실 거 같아요.</p>
<p>저 또한 더욱 궁금함이 생겨 가장 대중적으로 사용되고 있는 자바스크립트 엔진 <code>V8</code>은 어떻게 가비지 콜렉션을 하고 있는지 검색해 보았어요.</p>
<p>제가 검색해 알게 되고 공부한 내용을 공유드릴게요.</p>
<h2 id="메모리-구조" class="heading">메모리 구조</h2>
<p>우선 "어떻게 메모리를 해제하나" 알기 위해서는 "어떤 메모리가 있나"를 알아야 될 것 같아요.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/186716665-01f8d21b-df60-4522-b159-c6e7ae6a9d9c.png" alt="v8메모리구조"></p>
<small>
출처 : https://deepu.tech/memory-management-in-v8/
</small>
<p>가장 크게 구분을 하자면 <code>stack</code>과 <code>heap</code>으로 나뉠 수 있어요.</p>
<h3 id="stack">Stack</h3>
<p>흔히 <code>호출 스택</code>으로 불리는 stack 형태의 메모리로써, 정적 값을 저장하며 기본적으로 프로그램 상에서 어디에 있는지를 기록해요.</p>
<p>만약 함수를 실행한다면, 해당 함수를 호출 스택의 최상단에 위치하고 함수가 종료될 때 (반환할 때) 해당 함수를 호출 스택에서 제거해요.</p>
<p>이에 대한 설명은 <a href="https://joshua1988.github.io/web-development/translation/javascript/how-js-works-inside-engine/" target="_blank" rel="noopener noreferer">캡틴판교님께서 그림과 함께 설명해 주신 아티클</a>을 참고해 보시면 좋을 거 같아요.</p>
<p>추가적으로 정적인 변수의 경우도 호출 스택에 저장되는데, 다음 예시를 보시면 이해가 빠르실 거예요.</p>
<pre class="language-js"><code class="language-js code-highlight"><span class="code-line"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token string">'string'</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// 호출 스택</span>
</span><span class="code-line">a <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">[</span>메모리 주소<span class="token operator">:</span> aaaa<span class="token punctuation">,</span> <span class="token literal-property property">값</span><span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">]</span>
</span><span class="code-line">b <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">[</span>메모리 주소<span class="token operator">:</span> bbbb<span class="token punctuation">,</span> <span class="token literal-property property">값</span><span class="token operator">:</span> <span class="token string">'string'</span><span class="token punctuation">]</span>
</span><span class="code-line">c <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">[</span>메모리 주소<span class="token operator">:</span> cccc<span class="token punctuation">,</span> <span class="token literal-property property">값</span><span class="token operator">:</span> zzzz<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// 힙</span>
</span><span class="code-line"><span class="token punctuation">[</span>메모리 주소<span class="token operator">:</span> zzzz<span class="token punctuation">,</span> <span class="token literal-property property">값</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</span></code></pre>
<p>즉 숫자와 문자열 같은 정적 값의 경우 호출 스택의 순서대로 추가되고, <strong>객체 값은 힙 메모리에 저장되며 힙 메모리의 주소를 스택에 푸시</strong>되는 것을 알 수 있어요.</p>
<p>이것이 일반적으로 스택과 힙이 작업을 나누는 방식이라고 하며, 더욱 자세히 알고 싶으신 분들은 다음 자료를 확인해 보시면 좋을 거 같아요. <a href="https://speakerdeck.com/deepu105/v8-memory-usage-stack-and-heap" target="_blank" rel="noopener noreferer">V8 Memory usage</a></p>
<h3 id="heap">Heap</h3>
<p>호출 스택의 경우 메모리의 해제가 반환과 함께 이루어지기 때문에 일반적으로 가비지 콜렉터가 필요하지 않아요.</p>
<p>하지만 힙의 경우 동적 데이터를 저장하고, 데이터를 서로 참조할 수 있기 때문에 가비지 콜렉터가 필요하고, 동작하는 방식이 위 MDN 문서에서 알 수 있었던 Mark and sweep 알고리즘이에요.</p>
<p>이제 어떤 메모리에 가비지 콜렉터가 필요한지 알게 되었고, 언제 더욱 자세히 어떻게 가비지 콜렉터가 동작하는지 알아볼 수 있게 되었어요.</p>
<h2 id="v8의-가비지-콜렉터" class="heading">V8의 가비지 콜렉터</h2>
<p><img src="https://user-images.githubusercontent.com/26461307/186722466-e0c04b55-1064-4028-a0e9-ec131d8ddf06.png" alt="v8-orinoco"></p>
<p>V8은 <code>Orinoco</code>라는 이름의 가비지 콜렉터를 사용하고, <code>major</code> 가비지 콜렉터와 <code>minor</code> 가비지 콜렉터로 나뉘어 있어요.</p>
<h2 id="major-가비지-콜렉터" class="heading">Major 가비지 콜렉터</h2>
<p>V8의 Major 가비지 콜렉터는 위에서 설명한 Mark and sweep 알고리즘으로 동작하며, <strong>모든 오브젝트</strong>의 참조를 따라가며 표시해요.</p>
<p>이때 Mark and sweep 알고리즘의 동작을 <code>마킹 (Mark)</code>, <code>스위핑 (Sweep)</code>, <code>적용 (Compact+Update)</code>으로 나누었을 때 모든 동작을 메인 스레드에서 동작하게 되면 상당히 오랜 기간 동안 가비지 콜렉팅에 시간이 소요되어 다른 동작이 상당 시간 실행되지 않을 수도 있어요.</p>
<p><img src="https://v8.dev/_img/trash-talk/01.svg" alt="v8 major GC main thread"></p>
<small>
출처 : https://v8.dev/blog/trash-talk
</small>
<p>이렇게 싱글 스레드 언어인 자바스크립트에서, 가비지 콜렉션을 위해 메인 스레드를 독점하지 않기 위해 <code>Orinoco</code>는 3가지 방법을 가지고 있어요.</p>
<p>이는 <code>병렬 (Parallel)</code>, <code>증분 (Incremental)</code>, <code>동시성 (Concurrent)</code>이며 자세한 설명은 <a href="https://v8.dev/blog/trash-talk#orinoco" target="_blank" rel="noopener noreferer">다음 링크</a>에서 확인하실 수 있고, 여기에서는 이중 사용하는 방법에 대해서만 다뤄볼게요.</p>
<h2 id="그래서-major-가비지-콜렉터는" class="heading">그래서 Major 가비지 콜렉터는</h2>
<p>Major 가비지 콜렉터는 힙이 동적으로 계산된 제한에 가까워지면 시작되면 위에서 언급한 3가지 방법 중 동시성을 이용해 <code>마킹</code>하는 것으로 시작해요.</p>
<p><code>마킹</code>은 메인 스레드가 다른 일을 처리하는 동안 전적으로 백그라운드에서 발생하고, <code>마킹</code>이 끝나거나 동적 할당 제한에 도달할 시 메인 스레드에서 메모리를 해제(<code>적용</code>)하고, 이때 메인 스레드의 작업이 일시 중지돼요.</p>
<p>자세히는 메모리 해제만을 하는 것이 아닌, 다시 스캔하여 오브젝트를 확인도 하며 동시에 병렬적으로 <code>스위핑</code> 한다고 해요.</p>
<p>아래 이미지를 함께 보시면 이해에 도움이 되실 거 같아요.</p>
<p><img src="https://v8.dev/_img/trash-talk/09.svg" alt="v8 major gc"></p>
<small>
출처 : https://v8.dev/blog/trash-talk
</small>
<h2 id="minor-가비지-콜렉터" class="heading">Minor 가비지 콜렉터</h2>
<p>위의 메모리 구조 이미지를 다시 보면, 단순히 이름만 보고서는 유추가 힘든 부분이 있을 거에요.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/186716665-01f8d21b-df60-4522-b159-c6e7ae6a9d9c.png" alt="v8메모리구조"></p>
<p>설명드리고자 한 부분은 <code>New space(Young generation)</code>과 <code>Old space(Old generation)</code>이예요.</p>
<p>이는 가비지 콜렉션의 <code>세대적 가설</code>을 적용하기 위해 힙 메모리의 영역을 분리해둔 것이에요.</p>
<h2 id="세대적-가설" class="heading">세대적 가설</h2>
<p>세대적 가설이란 V8, 자바스크립트뿐만 아니라 대부분의 고수준 언어에서 적용되는 개념으로써,</p>
<p><strong>해제될 메모리의 대부분은 할당된 지 얼마 되지 않은 메모리인 것을 의미해요.</strong></p>
<p>V8에서는 이 가설을 적용하기 위해 설계되었으며, 가비지 콜렉션에서 살아남은 오브젝트를 복사해 <code>Old space(Old generation)</code>로 이동하도록 동작하고 있어요.</p>
<blockquote>
<p>객체를 복사하는 것은 비용이 많이 드는 것을 사실이나, 세대적 가설에 따르면 가비지 콜렉션에서 살아남는 객체는 극히 일부에 불과하다고 해요.</p>
</blockquote>
<h2 id="그래서-minor-가비지-콜렉터는" class="heading">그래서 Minor 가비지 콜렉터는</h2>
<p>Minor 가비지 콜렉터(Scavenger라고도 표현)는 세대적 가설을 기반으로 <code>New space(Young generation)</code> 영역에서만 가비지 콜렉션을 실행해요.</p>
<p>이때도 Mark and sweep 알고리즘을 사용하며, 살아남은 오브젝트들을 복사하기 위해 메모리를 <code>To-Space</code>, <code>From-Space</code>라는 이름으로 절반씩 나누어 사용하는데요. 절반으로 나눈 이유는 최악의 경우 모든 객체를 복사해야 하기 때문이에요.</p>
<p>살아남은 오브젝트를 <code>To-Space</code>로 옮긴 후 <code>From-Space</code>를 비우고 역할을 반전시켜 사용해요.</p>
<blockquote>
<p>해제된 메모리로 남겨진 간격을 제거하기 위해 To-Space로 옮겨지는 오브젝트들은 연속적인 메모리에 이동해요.</p>
</blockquote>
<p>이후 두 번째 가비지 콜렉션에서 살아남은 오브젝트들을 <code>Old space(Old generation)</code>로 이동시키고, 마지막으로 이동 전의 오브젝트를 참조하는 포인터를 이동된 새 메모리 주소를 가리키도록 업데이트하며 Minor 가비지 콜렉터가 동작해요.</p>
<blockquote>
<p>Minor 가비지 콜렉터의 <code>마킹</code>, <code>비우기</code>, <code>포인터 업데이트</code>는 개별 단계가 아니라 <a href="https://ko.wikipedia.org/wiki/%EB%A9%94%EB%AA%A8%EB%A6%AC_%EC%9D%B8%ED%84%B0%EB%A6%AC%EB%B9%99" target="_blank" rel="noopener noreferer">인터리브</a> 방식으로 동작해요.</p>
</blockquote>
<h3 id="현실-세계의-minor-가비지-콜렉터">현실 세계의 Minor 가비지 콜렉터</h3>
<p>Minor 가비지 콜렉터는 <code>Orinoco</code>의 <code>병렬</code> 기능을 통해 작업을 분산해요.</p>
<p>병렬적으로 동작하기 때문에 다른 스레드가 동일한 오브젝트를 발견하고 이동을 시도했을 수도 있는데요.</p>
<p>이는 이동의 성공 여부와 상관없이 포인터를 업데이트하고, 다른 스레드가 포인터를 찾을 때 업데이트할 수 있도록 전달 포인터를 남기며 살아남은 오브젝트의 빠른 할당을 위해 Minor 가비지 콜렉터는 TLAB(Thread Local Allocation Buffers)를 사용해요.</p>
<p><img src="https://v8.dev/_img/trash-talk/08.svg" alt="v8 minor GC"></p>
<small>
출처 : https://v8.dev/blog/trash-talk
</small>
<h2 id="idle-time-가비지-콜렉션" class="heading">Idle time 가비지 콜렉션</h2>
<p>가비지 콜렉터를 직접 호출할 수 없지만, V8의 경우 사용자가 가비지 콜렉션을 트리거 할 수 있는 데, 이것이 <code>Idle time(여유 시간) 가비지 콜렉션</code>이예요.</p>
<p>Idle time 가비지 콜렉션은 여유 시간에 가비지 콜렉션을 할 수 있도록 하는 것인데,</p>
<p>예로 Chrome의 경우 애니메이션의 각 프레임을 렌더링 하는 중에 작업이 일찍 완료되면 가비지 콜렉션을 하는 형식이에요.</p>
<p><img src="https://v8.dev/_img/trash-talk/10.svg" alt="idle time GC"></p>
<small>
출처 : https://v8.dev/blog/trash-talk
</small>
<blockquote>
<p>Idle time 가비지 콜렉션을 통해 Gmail의 경우 힙 메모리를 45%까지 줄일 수 있었다고 해요.</p>
</blockquote>
<h2 id="현실-세계에-적용하기" class="heading">현실 세계에 적용하기</h2>
<p>자바스크립트 개발의 대부분이 GC에 대해 생각할 필요가 없지만, 오늘 소개한 내용을 기반으로 메모리 사용량에 유리한 패턴을 생각하는 데 도움이 될 수 있는데요.</p>
<p>주로 참고한 아티클의 작성자분께서는 V8 minor 가비지 콜렉션을 생각하여 상대적으로 비용이 적은, 수명이 짧은 오브젝트를 사용하도록 개발을 하는 방법으로 내부 구현을 이용해 메모리 비용을 절약하는 방식을 적용할 수 있다고 하였으며 이는 많은 고수준 언어에서 통하는 방법이라고 기술하였습니다.</p>
<h2 id="마치며" class="heading">마치며</h2>
<p>MDN에서 소개하고 있는 자바스크립트의 일반적인 가비지 콜렉션 알고리즘부터, V8이 어떻게 가비지 콜렉션을 하고 있는지 알아보았는데요.</p>
<p>이를 설명드리는 과정에서 제 부족한 이해도와 함께 영어 독해 실력이 좋지 않아 이질감이 많이 드실까 걱정입니다. 부디 양해 부탁드리며 잘못된 부분이 있을 시 댓글 부탁드릴게요.</p>
<p>추가적으로 많은 부분 <code>V8</code>의 블로그를 참고했으니, 더욱 자세히 알고 싶으신 분들은 아래 참고 링크 확인을 부탁드리겠습니다. 감사합니다.</p>
<h2 id="참고" class="heading">참고</h2>
<ul>
<li><a href="https://v8.dev/blog/trash-talk#orinoco" target="_blank" rel="noopener noreferer">v8 trash talk</a></li>
<li><a href="https://deepu.tech/memory-management-in-v8/" target="_blank" rel="noopener noreferer">Visualizing memory management in V8 Engine</a></li>
<li><a href="https://dev.to/jennieji/memory-management-in-v8-garbage-collection-and-improvements-18e6" target="_blank" rel="noopener noreferer">Memory management in V8, garbage collection and improvements</a></li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[Webview app에서 이미지 저장 기능 개발기 w/ AWS s3]]></title>
    <link>https://www.hyesungoh.xyz/image-download-at-webview-app-with-s3</link>
    <pubDate>2022-07-24</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/image-download-at-webview-app-with-s3</guid>
    <description>
    <![CDATA[웹뷰 앱에서 이미지 저장 기능을 개발하며 겪은 과정을 공유합니다.]]>
    </description>
    <content:encoded>
      <![CDATA[<p><img src="https://user-images.githubusercontent.com/26461307/182628549-0f261753-7f94-480b-a9e1-0d0b2f3135d3.png" alt="webview app에서 이미지 저장 기능 개발기"></p>
<p>안녕하세요.</p>
<p>Webview 기반의 App 서비스에서 이미지 저장 기능을 개발하며 겪었던 과정들을 공유해, 비슷한 문제로 고생하시고 계시는 분들에게 도움이 되고자 개발기를 적어봅니다.</p>
<h2 id="개발하게된-배경" class="heading">개발하게된 배경</h2>
<p><a href="https://www.depromeet.com/" target="_blank" rel="noopener noreferer">'디프만'</a> 활동에서 개발, 운영하고 있는 <a href="https://www.notion.so/c363eee70970491f84d7d1f47c22e992" target="_blank" rel="noopener noreferer">'영감탱'</a> 서비스에 제목의 기능을 개발하게 되었는데요.</p>
<p>기능 기획의 발단은 다음 사진에서 시작하게 되었어요.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/181039126-0151cbd5-d137-424a-bf4b-b9f131bccbfa.png" alt="hotjar 컨텐츠 보기 히트맵"></p>
<p>recording 기능을 이용한 사용자 행동 파악 및 heat map을 이유로 부착하고 있던 hotjar에서 위 이미지와 같은 지표를 얻게 된 것인데요.</p>
<p>여러 가지 영감을 저장하고 보여주는 서비스이다 보니, 다른 서비스에서 제공하고 있는 <strong>이미지 클릭 시 전체보기가 되며, 저장이 가능한</strong> 행동을 사용자가 예상하고 있는 것으로 파악했어요.</p>
<p>이렇게 작은 근거로 시작한 가설을 배경으로 해당 기능을 개발하기로 하였고 제가 맡게 되었어요.</p>
<h2 id="첫-번째-접근" class="heading">첫 번째 접근</h2>
<p>'영감탱'은 휴대폰 애플리케이션으로써, Next.js로 구성된 Web 애플리케이션을 React-native webview로 서빙하고 있어요.</p>
<p>Webview 프로젝트는 이전에 간단하게 환경 구성만 해본 경험이 전부여서, 첫 번째 접근은 매우 간단하게 생각하고 말았어요.</p>
<p>처음으로 생각한 방법은 <strong>"웹에서 저장이 되면 알아서 되려나?"</strong> 인데요.</p>
<p>큰 리소스가 소모되진 않을 것으로 판단해, 먼저 개발해 본 후 직접 확인을 해보자고 생각했어요.</p>
<h3 id="이미지-다운로드-at-web">이미지 다운로드 at Web</h3>
<p>다운로드해야 될 이미지는 <code>AWS S3</code>의 URL로 제공되고 있었어요. 이를 다운로드하기 위해 S3의 cors 세팅을 해준 후 다음과 같은 순서로 적용해 나갔어요.</p>
<ol>
<li>S3 URL에 <code>fetch</code></li>
<li>fetch된 response(이미지)를 <code>blob화</code></li>
<li>blob화된 이미지를 <code>URL.createObjectURL</code>을 이용해 참조 URL을 만든 후</li>
<li><code>createElement</code>로 생성한 <code>a</code> 태그를 <code>download</code> 옵션과 함께 클릭</li>
<li>저장 완료</li>
</ol>
<p>이전에 비슷하게 구현한 경험이 있어서, 빠르게 구현할 수 있었지만 문제는 어김없이 찾아왔어요.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/181049113-abd68780-826a-4b65-8182-565dec9c7212.png" alt="첫 번째 구현 에러"></p>
<p>문제는 앱 내에서 저장하기 버튼을 눌렀을 때 동작하지 않는 것이었어요.</p>
<p>방향을 잃어 팀원분들에게 도움을 요청했었는데, CORS 에러가 뜬다는 답변을 받게 되었어요.</p>
<p>분명히 <code>AWS S3</code>의 CORS 설정을 하였고, 로컬에서 CORS 에러가 뜨지 않아 의아했는데 문제는 <strong>브라우저</strong>에 있었어요.</p>
<h2 id="aws-s3-cors" class="heading">AWS S3 CORS</h2>
<p><img src="https://user-images.githubusercontent.com/26461307/181049848-be850090-e2dc-4a17-ad9a-43e9bf031c7d.png" alt="AWS S3 CORS 정책"></p>
<p><small>출처: <a href="https://docs.aws.amazon.com/ko_kr/AmazonS3/latest/userguide/cors.html" target="_blank" rel="noopener noreferer">AWS S3 사용 설명서</a></small></p>
<p>AWS S3의 경우 요청 헤더에 <code>Origin</code>이 포함되어 있어야, 응답 헤더에 <code>Access-Control-Allow-Origin</code>을 담아 응답을 해주는데,</p>
<p>제가 사용하는 Firefox 브라우저는 <code>Origin</code>이 요청 헤더에 담기나, 다른 브라우저(Chrome, Safari)의 경우 Origin 담기지 않아 발생한 이슈였어요.</p>
<h2 id="http-origin-header" class="heading">HTTP Origin header</h2>
<p>확인해 본 결과 Chrome에서 <code>Origin</code>이 요청 헤더에 포함되지 않은 이유는 다음과 같아요.</p>
<pre class="language-html"><code class="language-html code-highlight"><span class="code-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>저장할_이미지_URL<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
</span></code></pre>
<p>우선 사용자는 이미 위와 같은 <code>img</code> 태그에서 저장할 이미지를 요청한 경험이 있어요.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/181074343-e11a21f1-de16-4a2a-8f32-ef7793d7b21d.png" alt="이미지 요청 시 no-cors"></p>
<p><small>출처: <a href="https://stackoverflow.com/questions/42239643/when-do-browsers-send-the-origin-header-when-do-browsers-set-the-origin-to-null" target="_blank" rel="noopener noreferer">When do browsers send the Origin header - stackoverflow</a></small></p>
<p><img src="https://user-images.githubusercontent.com/26461307/181082288-92c73ccd-9f78-4dc9-82b7-94f878b9f5d2.png" alt="mdn img crossorigin"></p>
<p><small>출처: <a href="https://developer.mozilla.org/ko/docs/Web/HTML/Element/img#attr-crossorigin" target="_blank" rel="noopener noreferer">MDN HTML img</a></small></p>
<p>이때 이미지, 스타일시트와 같은 미디어 요소들은 <code>no-cors (anonymous)</code> 모드로 동작하고, no-cors로 요청한 값을 <code>Cache-Control</code>에 캐싱해요.</p>
<blockquote>
<p>no-cors 모드에서는 Accept, Accept-Language, Content-Language 등 제한된 헤더만 포함될 수 있으며, 자바스크립트가 결과 응답에 접근할 수 없는 특징을 가지고 있어요. 자세한 정보는 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Request/mode#value" target="_blank" rel="noopener noreferer">다음 MDN 링크</a>를 확인하시면 좋을 것 같아요.</p>
<p>언제 Origin이 서빙되는지는 <a href="https://wiki.mozilla.org/Security/Origin" target="_blank" rel="noopener noreferer">다음 mozilla wiki</a>에서 확인하실 수 있어요.</p>
</blockquote>
<p>그 후에 사용자가 <code>저장 버튼</code>을 누르게 되면 CORS 요청이 들어가게 되는데, <strong>응답 값은 캐싱된 것에서 오기 때문에</strong> CORS 확인에 실패하게 돼요.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/181085291-73ba974b-cc44-4725-a03d-159e709e17ea.png" alt="왜 Firefox는 성공했냐"></p>
<p><small>출처: <a href="https://stackoverflow.com/questions/44800431/caching-effect-on-cors-no-access-control-allow-origin-header-is-present-on-th" target="_blank" rel="noopener noreferer">Caching effect on CORS stackoverflow</a></small></p>
<p>그렇다면 왜 firefox는 요청 헤더에 Origin이 담겼을까요?</p>
<p>이를 확인하기 위해 여러 방면으로 검색을 해보았으나, 관련된 답글은 위 스택오버플로우 게시물 밖에 찾을 수 없었어요.</p>
<p>한 답변에서 크롬은 자격 증명 모드를 캐싱 키의 일부로 사용하고 있다고 해요. 그렇기 때문에 자격 증명이 없는 모드 (제 상황을 예로 들면 저장 버튼을 눌렀을 때) 자격 증명과 함께 보낸 요청과 캐싱이 적중하지 않아야 동작하는 것으로 파악을 했어요.</p>
<p>하지만 Firefox는 Chrome처럼 동작하지 않다고 기술되어 있으니, 유추해보기론 자격 증명 모드를 캐싱 키의 일부로 사용하지 않는 다른 캐싱 로직이 있거나, 자격 증명과 비자격 증명을 따로 구분해 캐싱하는 등의 방법으로 구현되어 있는 것 같아요.</p>
<blockquote>
<p>왜 Firefox는 동작했는지 알고 계시는 분은 댓글 혹은 이메일 부탁드립니다.</p>
</blockquote>
<h3 id="해결-방법">해결 방법</h3>
<p>오래 돌아온 것에 비해 해결 방법은 매우 간단했어요.</p>
<p>문제는 캐싱에 있다는 것을 파악했으니, fetch 시 부분적으로 요청을 보내도록 <code>no-cache</code> 옵션을 사용해 해결할 수 있었어요.</p>
<pre class="language-diff"><code class="language-diff code-highlight"><span class="code-line deleted"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> fetch('URL');
</span></span></span><span class="code-line inserted"><span class="token deleted-sign deleted"><span class="token line"></span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> fetch('URL', {cache: 'no-cache'});
</span></span></span></code></pre>
<p><img src="https://user-images.githubusercontent.com/26461307/181088652-6f180dd1-5b9e-4deb-9829-123fd5ec0361.png" alt="mdn request cache"></p>
<p><small>출처: <a href="https://developer.mozilla.org/en-US/docs/Web/API/Request/cache" target="_blank" rel="noopener noreferer">mdn request cache</a></small></p>
<p><code>cache: default</code>의 경우 <code>fresh</code>한 상태라면 캐싱된 값을 반환하지만, <code>no-cache</code>의 경우 fresh한 상태라도 조건부 요청을 보내기 때문에 문제 해결을 위한 최소 조건을 충족한다고 생각했고,</p>
<p><code>cache: no-store</code>의 경우 캐싱된 값을 확인하지 않고 모든 정보를 요청하기 때문에 <code>no-cache</code>에 비해 송수신되는 데이터의 양이 많아 더욱 빠른 사용자 경험을 제공하는 데에 유리한 것은 <code>no-cache</code> 옵션이라 생각해 적용했어요.</p>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">downloadImage</span><span class="token punctuation">(</span>href<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">const</span> imageResponse <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>href<span class="token punctuation">,</span> <span class="token punctuation">{</span> cache<span class="token operator">:</span> <span class="token string">'no-cache'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">const</span> imageBlob <span class="token operator">=</span> <span class="token keyword">await</span> imageResponse<span class="token punctuation">.</span><span class="token method function property-access">blob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">const</span> imageObjectUrl <span class="token operator">=</span> <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token method function property-access">createObjectURL</span><span class="token punctuation">(</span>imageBlob<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  element<span class="token punctuation">.</span><span class="token property-access">href</span> <span class="token operator">=</span> imageObjectUrl<span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  element<span class="token punctuation">.</span><span class="token property-access">download</span> <span class="token operator">=</span> <span class="token function">getImageNameAndExtension</span><span class="token punctuation">(</span><span class="token punctuation">{</span> href <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  element<span class="token punctuation">.</span><span class="token method function property-access">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token dom variable">window</span><span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token method function property-access">revokeObjectURL</span><span class="token punctuation">(</span>imageObjectUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>위 과정을 거쳐 작성하게된 코드는 위와 같아요.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/181089763-8f156657-e080-43bf-8e72-dfb90ffc3629.jpeg" alt="finish_it"></p>
<p>웹에서는 저장이 잘되어 부푼 마음으로 시뮬레이터로 앱 환경을 확인해 보니 저장이 되고 있지 않았어요.</p>
<p>웹뷰 브라우저에서 저장이 되는 것이 <em>알아서</em> 카메라롤(갤러리)에 저장이 될 생각을 하다니,,,</p>
<h3 id="나만-이런-접근을-한건-아니구나">나만 이런 접근을 한건 아니구나</h3>
<p>웹 애플리케이션에서 작업한 사항이 아쉬움과 동시에 다른 방법이 떠오르지 않아, 여러 가지 방법을 물색하던 중에 React-native-webview repo에서 Closed 됐지만 제 상황의 해결책같이 보이는 PR을 찾을 수 있었어요.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/181093258-0dc2731e-f385-40f5-a44f-97224985a306.png" alt="onBlobFileDownload"></p>
<p><small>출처: <a href="https://github.com/react-native-webview/react-native-webview/pull/1817" target="_blank" rel="noopener noreferer">react-native-webview#1817</a></small></p>
<p>바로 <code>onBlobFileDownload</code>라는 이름의 새로운 api를 추가하는 PR 이였는데요.</p>
<p>변경이 된 코드를 읽어보지 못하는 상태라 나눴던 코멘트만 읽어보니 인터페이스 그리고 지원하는 확장자 등의 기능이 부족해 merge되지 않은 것으로 보였어요.</p>
<p>정확히 fit한 해결 방법은 찾을 수 없었지만, 코멘트 중에 키워드를 찾을 수 있었는데요.</p>
<p>그것은 React-native-webview의 <code>onFileDownload</code> 인터페이스였어요.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/181095030-76361900-3545-451f-80bb-b45c700ec1f0.png" alt="react-native-webview onFileDownload"></p>
<p>파일이 저장될 때 트리거되는 callback을 이용해 저장되는 객체를 카메라롤에 저장되도록만 하면 될 것 같아 빠르게 API를 찾아보았지만, <code>iOS-only</code> 기능이었어요.</p>
<p>'영감탱'의 경우 iOS, AOS 두 플랫폼으로 배포되고 있기 때문에 해결 방법이라는 생각은 들지 않았지만, <strong>'트리거된다'</strong>라는 키워드에서 새로운 방법을 생각해낼 수 있게 되었어요.</p>
<h2 id="두-번째-접근" class="heading">두 번째 접근</h2>
<p>두 번째 구현 방법은 앱 내에서 <code>AWS S3</code> URL로 접근 시 이동하는 것이 아닌, 카메라롤에 해당 URL의 이미지를 저장하는 로직이 <strong>트리거</strong>되게 개발하는 것이에요.</p>
<p>큼지막한 구현 방법은 다음과 같아요.</p>
<h3 id="web에서-useragent-확인해서-로직-분리">Web에서 userAgent 확인해서 로직 분리</h3>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">imageDownload</span><span class="token punctuation">(</span><span class="token punctuation">{</span> href <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token maybe-class-name">Props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token comment">// getMobileDetect는</span>
</span><span class="code-line">  <span class="token comment">// location.userAgent와 정규 표현식을 이용해 값을 반환하는 유틸이예요.</span>
</span><span class="code-line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> isMobile <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getMobileDetect</span><span class="token punctuation">(</span><span class="token dom variable">navigator</span><span class="token punctuation">.</span><span class="token property-access">userAgent</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isMobile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token function">downloadImageWhenMobile</span><span class="token punctuation">(</span><span class="token punctuation">{</span> href <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">return</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function">downloadImageWhenNotMobile</span><span class="token punctuation">(</span><span class="token punctuation">{</span> href <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">function</span> <span class="token function">downloadImageWhenMobile</span><span class="token punctuation">(</span><span class="token punctuation">{</span> href <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token maybe-class-name">Props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  element<span class="token punctuation">.</span><span class="token property-access">href</span> <span class="token operator">=</span> href<span class="token punctuation">;</span>
</span><span class="code-line">  element<span class="token punctuation">.</span><span class="token method function property-access">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">downloadImageWhenNotMobile</span><span class="token punctuation">(</span><span class="token punctuation">{</span> href <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token maybe-class-name">Props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token comment">// 첫 번째 접근에서 구현했던 코드</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>userAgent를 확인해 Web 환경에서는 첫 번째 접근으로 개발했던 유틸이 실행되도록 하고, 모바일 환경일 때는 <code>a</code> 태그의 src attr에 <code>AWS S3</code> url을 직접적으로 사용하도록 개발했어요.</p>
<h3 id="webview-onnavigationstatechange">Webview onNavigationStateChange</h3>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token keyword">const</span> <span class="token function-variable function">handleNavigate</span> <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> <span class="token maybe-class-name">WebViewNavigation</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token property-access">url</span><span class="token punctuation">.</span><span class="token method function property-access">startsWith</span><span class="token punctuation">(</span><span class="token constant">AWS_S3_IMG_BUCKET_URI</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token function">imageDownload</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token spread operator">...</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Webview</span></span> <span class="token attr-name">source</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> uri <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token attr-name">onNavigationStateChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleNavigate<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>
</span></code></pre>
<p>트리거가 되는 행동이 <code>AWS S3 URL</code>을 방문하는 것이니, navigation 상태가 변경될 때 트리거되는 <code>onNavigationStateChange</code>의 callback에 단순히 <code>AWS S3</code>의 URL로 시작하는지 확인하는 조건문을 넣어 이미지 저장 로직이 실행되도록 했어요.</p>
<h3 id="ios-이미지-저장">iOS 이미지 저장</h3>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token keyword">import</span> <span class="token imports"><span class="token maybe-class-name">Cameraroll</span></span> <span class="token keyword">from</span> <span class="token string">'@react-native-community/cameraroll'</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">imageDownload</span><span class="token punctuation">(</span>event<span class="token operator">:</span> <span class="token maybe-class-name">WebViewNavigation</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token maybe-class-name">Cameraroll</span><span class="token punctuation">.</span><span class="token method function property-access">save</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token property-access">url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>iOS의 이미지 저장 로직의 경우 <code>@react-native-community/cameraroll</code>을 이용해 직접적으로 url을 카메라롤에 저장해 iOS 환경에서 이미지를 저장할 수 있었어요.</p>
<h3 id="aos-이미지-저장">AOS 이미지 저장</h3>
<p><img src="https://user-images.githubusercontent.com/26461307/181209640-28808c4b-c51c-412c-9e6f-8ea341d8babf.png" alt="react native cameraroll save spec"></p>
<p>AOS의 경우 <code>Cameraroll</code> 스펙을 읽어보니 로컬 이미지 혹은 비디오 URI 일 때만 저장이 된다고 기술되어 있었어요.</p>
<blockquote>
<p>iOS의경우 모든 이미지 URI가 가능하다고 기술되어 있어, 위와 같이 작성해도 동작했던 것이에요.</p>
</blockquote>
<p>이를 해결하기 위해 위의 웹 애플리케이션에서 동작했던 것과 비슷하게 구현하면 될 것이라 판단하였고, 찾아보니 <code>rn-fetch-blob</code>이라는 라이브러리를 찾을 수 있었어요.</p>
<p><code>rn-fetch-blob</code>은 이를 간단하게 구현하는 데에 더해 AOS에서 저장 시 OS 단의 progress bar, notification을 보여주는 <code>다운로드 매니저</code>, 이미지 응답을 문자열로 변환하는 과정을 거치지 않고 직접 저장하는 기능을 제공하고 있어 fit한 해결 방법을 제공하는 라이브러리라고 생각했어요.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/181214075-7a2ee0e6-33dc-472d-b4f7-9c59d7207b2d.png" alt="rn-fetch-blob download graph"></p>
<p>rn-fetch-blob의 가장 최근의 업데이트가 3년 전이라 도입하는 것이 옳은 선택일지 고민이 되었어요.</p>
<p>하지만 react-native의 설치 지표와 비교를 해보니 많은 수치를 보여주면서, 사용하는 곳이 한정적이라 추후에 걷어낼 일이 있을 때 소모되는 리소스보다 현재 빠르게 기능을 개발하는 것이 리소스가 더욱 적게 소모된다고 판단하여 적용하기로 판단했어요.</p>
<p>그렇게 rn-fetch-blob을 사용하면서, iOS와 AOS 환경 모두 이미지를 다운로드할 수 있도록 개발한 유틸은 다음과 같은 모습이예요.</p>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token keyword">import</span> <span class="token imports"><span class="token maybe-class-name">Cameraroll</span></span> <span class="token keyword">from</span> <span class="token string">'@react-native-community/cameraroll'</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">PermissionsAndroid</span><span class="token punctuation">,</span> <span class="token maybe-class-name">Platform</span> <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">'react-native'</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">import</span> <span class="token imports"><span class="token maybe-class-name">RNFetchBlob</span></span> <span class="token keyword">from</span> <span class="token string">'rn-fetch-blob'</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">hasAndroidPermission</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">const</span> permission <span class="token operator">=</span> <span class="token maybe-class-name">PermissionsAndroid</span><span class="token punctuation">.</span><span class="token constant">PERMISSIONS</span><span class="token punctuation">.</span><span class="token constant">WRITE_EXTERNAL_STORAGE</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">const</span> hasPermission <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token maybe-class-name">PermissionsAndroid</span><span class="token punctuation">.</span><span class="token method function property-access">check</span><span class="token punctuation">(</span>permission<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>hasPermission<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">const</span> status <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token maybe-class-name">PermissionsAndroid</span><span class="token punctuation">.</span><span class="token method function property-access">request</span><span class="token punctuation">(</span>permission<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">return</span> status <span class="token operator">===</span> <span class="token string">'granted'</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">imageDownload</span><span class="token punctuation">(</span>event<span class="token operator">:</span> <span class="token maybe-class-name">WebViewNavigation</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token maybe-class-name">Platform</span><span class="token punctuation">.</span><span class="token constant">OS</span> <span class="token operator">===</span> <span class="token string">'android'</span> <span class="token operator">&#x26;&#x26;</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">hasAndroidPermission</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">return</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line highlight-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token maybe-class-name">Platform</span><span class="token punctuation">.</span><span class="token constant">OS</span> <span class="token operator">===</span> <span class="token string">'android'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line highlight-line">    <span class="token maybe-class-name">RNFetchBlob</span><span class="token punctuation">.</span><span class="token method function property-access">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
</span><span class="code-line highlight-line">      fileCache<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
</span><span class="code-line highlight-line">      addAndroidDownloads<span class="token operator">:</span> <span class="token punctuation">{</span> useDownloadManager<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> notification<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line highlight-line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">fetch</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token property-access">url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line highlight-line">
</span><span class="code-line highlight-line">    <span class="token keyword">return</span><span class="token punctuation">;</span>
</span><span class="code-line highlight-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token maybe-class-name">Cameraroll</span><span class="token punctuation">.</span><span class="token method function property-access">save</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token property-access">url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>AOS의 권한에 대한 확인과 함께 이미지 저장 로직을 수행하였고, 결과는 성공적이었어요!</p>
<h2 id="웹에서-저장-상태-통신" class="heading">웹에서 저장 상태 통신</h2>
<p>이미지 저장은 원활히 동작하지만, 뭔가 사용자 경험이 좋지 않다고 생각이 들었어요.</p>
<p>그 이유는 저장이 성공했는지, 실패했는지 결과를 시각적 알려주지 않고 있기 때문이었어요.</p>
<p>Web 애플리케이션에서 사용하고 있는 Toast 메세지를 띄우면 서비스적으로 통일감 있게 알려줄 수 있다고 판단하였고, 이를 위해서는 App에서 Web으로 저장 상태에 대한 통신이 이루어져야 했어요.</p>
<h3 id="postmessage">postMessage</h3>
<p>구현하기 앞서 구현체의 통일성을 높이기 위해 기존 프로젝트에 사용하고 있던 <code>react-native-webview</code>의 <code>postMessage</code> 구현체를 확인해 보았어요.</p>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line">webViewRef<span class="token punctuation">.</span><span class="token property-access">current</span><span class="token punctuation">.</span><span class="token method function property-access">postMessage</span><span class="token punctuation">(</span>
</span><span class="code-line">  <span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
</span><span class="code-line">    type<span class="token operator">:</span> <span class="token constant">SOME_CONSTANTS_TYPE</span><span class="token punctuation">,</span>
</span><span class="code-line">    data<span class="token operator">:</span> someData<span class="token punctuation">,</span>
</span><span class="code-line">    otherData<span class="token operator">:</span> someMoreData<span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<p>'디프만'이라는 활동 기간이 정해져있는, 빠르게 기능을 개발했어야 했던 상황이라 그런지 사용하는 곳마다 개발자들이 자의적으로 <code>type</code>과 <code>data</code>가 포함되는 것을 인지하면서 구현이 되고 있었어요.</p>
<p>이는 버스 팩터도 높일뿐더러, 안전하게 개발할 수 있는 환경이 아니라고 생각이 되어 리팩토링이 필요하다고 생각이 들었어요.</p>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">WEBVIEW_MESSAGE_TYPE</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'~/constants/common'</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">type</span> <span class="token class-name">WebviewMessageTypeKey</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> <span class="token keyword">typeof</span> <span class="token constant">WEBVIEW_MESSAGE_TYPE</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">interface</span> <span class="token class-name">PostMessageObjectInterface</span> <span class="token punctuation">{</span>
</span><span class="code-line">  type<span class="token operator">:</span> <span class="token keyword">typeof</span> <span class="token constant">WEBVIEW_MESSAGE_TYPE</span><span class="token punctuation">[</span><span class="token maybe-class-name">WebviewMessageTypeKey</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">  data<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getStringPostMessageObject</span><span class="token punctuation">(</span>object<span class="token operator">:</span> <span class="token maybe-class-name">PostMessageObjectInterface</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">return</span> <span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// 사용하는 곳에서는</span>
</span><span class="code-line">webViewRef<span class="token punctuation">.</span><span class="token property-access">current</span><span class="token punctuation">.</span><span class="token method function property-access">postMessage</span><span class="token punctuation">(</span>
</span><span class="code-line">  <span class="token function">getStringPostMessageObject</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
</span><span class="code-line">    type<span class="token operator">:</span> <span class="token constant">WEBVIEW_MESSAGE_TYPE</span><span class="token punctuation">.</span><span class="token constant">SOME_CONSTANTS_TYPE</span><span class="token punctuation">,</span>
</span><span class="code-line">    data<span class="token operator">:</span> someData<span class="token punctuation">,</span>
</span><span class="code-line">    otherData<span class="token operator">:</span> someMoreData<span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<p>이를 위와 같은 구현체를 만들어 개발자가 직접적으로 인지해야 하는 것을 1개로 낮춰보았어요.</p>
<p>개발자가 알아야 하는 것은 <code>postMessage</code>를 사용할 때 위 <code>getStringPostMessageObject</code>를 사용해야 한다는 것이며, 기존 인터페이스가 개발자들의 머리 혹은 Web 애플리케이션에 정의가 되어있었다면 이를 직접적으로 정의해 매번 찾아볼 일이 없도록 했어요.</p>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token maybe-class-name">Cameraroll</span><span class="token punctuation">.</span><span class="token method function property-access">save</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token property-access">url</span><span class="token punctuation">)</span>
</span><span class="code-line">  <span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">const</span> stringMessageObject <span class="token operator">=</span> <span class="token function">getStringPostMessageObject</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
</span><span class="code-line">      type<span class="token operator">:</span> <span class="token constant">WEBVIEW_MESSAGE_TYPE</span><span class="token punctuation">.</span><span class="token constant">SEND_TOAST_MESSAGE</span><span class="token punctuation">,</span>
</span><span class="code-line">      data<span class="token operator">:</span> <span class="token constant">SUCCESS_IMAGE_DOWNLOAD_MESSAGE</span><span class="token punctuation">,</span>
</span><span class="code-line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    webViewRef<span class="token punctuation">.</span><span class="token property-access">current</span><span class="token operator">?.</span><span class="token method function property-access">postMessage</span><span class="token punctuation">(</span>stringMessageObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span><span class="code-line">  <span class="token punctuation">.</span><span class="token method function property-access">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">const</span> stringMessageObject <span class="token operator">=</span> <span class="token function">getStringPostMessageObject</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
</span><span class="code-line">      type<span class="token operator">:</span> <span class="token constant">WEBVIEW_MESSAGE_TYPE</span><span class="token punctuation">.</span><span class="token constant">SEND_TOAST_MESSAGE</span><span class="token punctuation">,</span>
</span><span class="code-line">      data<span class="token operator">:</span> <span class="token constant">FAILED_IMAGE_DOWNLOAD_MESSAGE</span><span class="token punctuation">,</span>
</span><span class="code-line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    webViewRef<span class="token punctuation">.</span><span class="token property-access">current</span><span class="token operator">?.</span><span class="token method function property-access">postMessage</span><span class="token punctuation">(</span>stringMessageObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<p>이를 적용해 Web으로 송신하는 것을 포함한 이미지 저장 유틸은 위와 같이 <code>then</code>, <code>catch</code>를 이용해 간단히 적용할 수 있었어요.</p>
<h3 id="웹에서-수신">웹에서 수신</h3>
<p>Web 애플리케이션에서 수신에 대한 부분은 <code>useAppMessage</code>라는 hook으로 유틸화가 되어 있었어요.</p>
<p>이는 <code>handler</code>를 주입받아 Listening 시작 혹은 중지를 하는 동작을 보이고 있었는데요.</p>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">AppMessageData</span> <span class="token punctuation">{</span>
</span><span class="code-line">  action<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</span><span class="code-line">  data<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">AppMessageArgs</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token function-variable function">handler</span><span class="token operator">:</span> <span class="token punctuation">(</span>type<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> data<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useAppMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> handler <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token maybe-class-name">AppMessageArgs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">const</span> listener <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span>
</span><span class="code-line">    <span class="token punctuation">(</span><span class="token punctuation">{</span> data<span class="token operator">:</span> rawData <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token maybe-class-name">MessageEvent</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token keyword">const</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">parse</span><span class="token punctuation">(</span>rawData<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token maybe-class-name">AppMessageData</span><span class="token punctuation">;</span>
</span><span class="code-line">        <span class="token function">handler</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line">    <span class="token punctuation">[</span>handler<span class="token punctuation">]</span>
</span><span class="code-line">  <span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token comment">// ...</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>그중 type과 data 외의 인터페이스를 받을 수 있도록 확장이 필요해 보였고, 내가 Listening 하고자 하는 type인지 확인하는 로직까지 추상화할 수 있을 것이라 생각했어요.</p>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token keyword">type</span> <span class="token class-name">WebviewMessageTypeKey</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> <span class="token keyword">typeof</span> <span class="token constant">WEBVIEW_MESSAGE_TYPE</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">AppMessageData</span> <span class="token punctuation">{</span>
</span><span class="code-line">  type<span class="token operator">:</span> <span class="token keyword">typeof</span> <span class="token constant">WEBVIEW_MESSAGE_TYPE</span><span class="token punctuation">[</span><span class="token maybe-class-name">WebviewMessageTypeKey</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">  data<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">AppMessageArgs</span> <span class="token punctuation">{</span>
</span><span class="code-line highlight-line">  targetType<span class="token operator">:</span> <span class="token keyword">typeof</span> <span class="token constant">WEBVIEW_MESSAGE_TYPE</span><span class="token punctuation">[</span><span class="token maybe-class-name">WebviewMessageTypeKey</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token function-variable function">handler</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token spread operator">...</span>rest <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token maybe-class-name">AppMessageData</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useAppMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> targetType<span class="token punctuation">,</span> handler <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token maybe-class-name">AppMessageArgs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">const</span> listener <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span>
</span><span class="code-line">    <span class="token punctuation">(</span><span class="token punctuation">{</span> data<span class="token operator">:</span> rawData <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token maybe-class-name">MessageEvent</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token keyword">const</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token spread operator">...</span>rest <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">parse</span><span class="token punctuation">(</span>rawData<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token maybe-class-name">AppMessageData</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line highlight-line">        <span class="token comment">// NOTE: 목표로하는 타입의 postMessage가 아닐 시 반환</span>
</span><span class="code-line highlight-line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>targetType <span class="token operator">!==</span> type<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
</span><span class="code-line">        <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">,</span> data<span class="token punctuation">,</span> rest <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line">    <span class="token punctuation">[</span>handler<span class="token punctuation">,</span> targetType<span class="token punctuation">]</span>
</span><span class="code-line">  <span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token comment">// ...</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>위는 적용한 결과물로써, App에서 적용한 것과 동일한 인터페이스를 사용하면서 Listening 하고자 하는 type인 <code>targetType</code> 인터페이스를 추가해 <code>handler</code>에서 매번 type을 확인하지 않아도 되도록 개발했어요.</p>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token function">useAppMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
</span><span class="code-line">  targetType <span class="token operator">=</span> <span class="token string">'SOME_CONSTANTS_TYPE'</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token function-variable function">handler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token function">fireToast</span><span class="token punctuation">(</span><span class="token punctuation">{</span> content<span class="token operator">:</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<p>위처럼 리팩토링한 <code>useAppMessage</code>를 사용해 저장 상태에 대한 값을 Web에서 Toast 메세지로 보여줄 수 있도록 적용을 마쳤어요.</p>
<blockquote>
<p>사실 '영감탱' 프로젝트에서는 <code>AppMessageListener</code>라는 컴포넌트로 <code>useAppMessage</code> hook이 한 번 더 wrapping이 되어있긴 하나, Life cycle에 대한 접근만 하고 있기 때문에 설명을 드리지 않아도 충분히 이해하실 것이라 생각해요.</p>
</blockquote>
<h2 id="결과물" class="heading">결과물</h2>
<div align="center">
<img src="https://user-images.githubusercontent.com/26461307/181241903-2ffa159c-db36-4790-b6ed-b3f04f298187.gif" alt="" width="50%" />
</div>
<p>위 Gif를 통해 성공적으로 이미지 저장이 완료된 후 Toast 메세지가 발송되고, 휴대폰 카메라롤에 저장이 되는 모습을 확인하실 수 있어요.</p>
<h2 id="마치며" class="heading">마치며</h2>
<p>대단한 기능은 아니지만, HTTP와 fetch 스펙에 대해 더 자세히 알 수 있었고 React-native 환경에서 postMessage를 이용해 Web과 App의 통신을 처음으로 개발해 볼 수 있었던 점에서 재밌었던 경험이라고 생각해요.</p>
<p>다만, 글 재주가 없어 읽으시는 분들에게 피로감을 드렸을까 걱정이네요.</p>
<p>디프만 활동은 끝났지만, 과정 이후에도 열심히 업데이트, 운영해나가고 있으니 영감을 기록하는 것에 관심이 있으신 분들은 아래 영감탱 소개 링크 방문을 부탁드리며 글을 맞춰보겠습니다.</p>
<p>긴 글 읽어주셔서 감사합니다.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/181249281-c8f51502-3dce-4d72-a362-3a813f2831c2.png" alt="Thunbnail"></p>
<ul>
<li><a href="https://gifted-puffin-352.notion.site/c363eee70970491f84d7d1f47c22e992" target="_blank" rel="noopener noreferer">영감탱 서비스 소개</a></li>
<li><a href="https://github.com/depromeet/ygtang-client/pull/474" target="_blank" rel="noopener noreferer">본 글에서 소개했던 내용 PR - Web</a></li>
<li><a href="https://github.com/depromeet/ygtang-app/pull/119" target="_blank" rel="noopener noreferer">본 글에서 소개했던 내용 PR - App</a></li>
<li><a href="https://www.behance.net/gallery/147207859/TANG-Inspiration-Archiving-App" target="_blank" rel="noopener noreferer">영감탱 behance</a></li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[2022 토스 커뮤니티 Frontend Meet-up 후기]]></title>
    <link>https://www.hyesungoh.xyz/2022-toss-community-frontend-meetup</link>
    <pubDate>2022-07-20</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/2022-toss-community-frontend-meetup</guid>
    <description>
    <![CDATA[2022-toss-community-frontend-meetup]]>
    </description>
    <content:encoded>
      <![CDATA[<p><img src="https://user-images.githubusercontent.com/26461307/182628631-aad75a0f-bcf8-4542-b7ad-d6322f2c376f.png" alt="Toss frontend meet-up 후기"></p>
<p><img src="https://user-images.githubusercontent.com/26461307/180000915-6530d81c-b26b-4bfb-96d5-1f1bdd04636d.png" alt="초대 이메일"></p>
<p><a href="https://toss.im/slash-22" target="_blank" rel="noopener noreferer">토스 SLASH22</a>가 끝나고 얼마 안되었을 때, 우연히 이런 이메일을 받을 수 있었어요.</p>
<p>토스 인재풀에 등록한 인원 대상으로 SLASH22 연사분들과 토스에서 근무하시는 프론트엔드 개발자분들과의 온라인 밋업 초대였는데, 밋업을 통해 많은 인사이트를 얻을 수 있을 것이라고 생각함과 동시에 밋업은 처음이라 궁금함에 참여 신청을 하게 되었어요.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/180000545-a4b69e3d-b10b-4ec5-9d96-504966d85532.png" alt="토스 프론트엔드 밋업 슬라이드"></p>
<p>밋업은 온라인으로 진행되었는데, SLASH22의 연사분들 그리고 토스 개발자분들을 포함해 약 60, 70명의 인원이 참여하셨어요.</p>
<p>밋업의 대부분은 사전 Q&#x26;A와 라이브 Q&#x26;A 형태로 진행되었으며, 굉장히 즐거운? 재밌는? 분위기로 진행되었어요.</p>
<p>저와 같은 참여자분들과 토스 개발자분들 모두 자유롭게 채팅으로 소통해주시면서 농담도 주고 받으시고 토스 개발자들간의 문화를 간접적으로나마 체험해 볼 수 있었던 경험이였어요.</p>
<h2 id="qa" class="heading">Q&#x26;A</h2>
<p>기술, 문화에 대한 질문이 대다수였지만 인재풀에 등록된 분들이 초대를 받으셨기 때문인지 주니어에 대한 질문들 또한 많았어요.</p>
<p>그 중 기억에 남는 질문과 답변이 있는데, 주니어로써 부족하다고 생각되는데 어떤 역량을 키우면 좋을지에 대한 질문에
SLASH22의 연사이시자 토스 페이먼츠의 개발자이신 <a href="https://jbee.io/" target="_blank" rel="noopener noreferer">한재엽님</a>께서 "무엇을 모르는 지를 알아야 된다"고 답변을 해주셨어요.</p>
<p>질문과 답변을 많이 간추리긴 했지만, 어떻게 생각하면 당연한 것을 제가 잊고 있었다고 느꼈어요.</p>
<p>그렇게 많은 질문과 답변이 오고가며 밋업에 참여하신 다른 개발자분들께서는 어떤 궁금함을 가지고 계신지 또한 인사이트가 되었어요. 그리고 이에 대해 토스에서 근무하시는 개발자분들께서 어떻게 고민하셨거나, 해결하셨다거나, 문화를 공유해주시는 것을 보며 애사심을 느낄 수 있었어요.</p>
<h2 id="마치며" class="heading">마치며</h2>
<p>밋업은 약 2시간 동안 진행되었는데, 상당히 빨리 지나간 것처럼 느껴졌어요.</p>
<p>질 좋은 질문들과 답변들로 이루어진 시간들이라 그렇게 느껴졌던 것 같고, 생각했던 것보다 자연스럽고 편안한 분위기에서 밋업이 진행된다는 걸 알 수 있었어요.</p>
<p>첫 온라인 밋업은 성공적인 경험이였으니 다음에 기회가 됨다면 오프라인 밋업에도 참여해보고 싶은 생각이 듦과 동시에 나중에는 사내 혹은 단체의 컨퍼런스에 연사로써 서보고 싶다는 생각이 들었어요.</p>
<p>내가 알게된 것을 공유하는 것 그리고 모르거나 궁금한 것을 질문하는 것이 주는 원초적인 감정을 다시 한 번 생각할 수 있었고 이를 통해 새롭게 동기부여 받을 수 있는 시간이였어요.</p>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[create-comet-land] 첫 NPM 패키지 개발기]]></title>
    <link>https://www.hyesungoh.xyz/create-comet-land</link>
    <pubDate>2022-07-04</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/create-comet-land</guid>
    <description>
    <![CDATA[Comet-land 프로젝트 생성을 위한 CLI 앱을 ink와 함께 개발했던 경험을 공유합니다.]]>
    </description>
    <content:encoded>
      <![CDATA[<p><img src="https://user-images.githubusercontent.com/26461307/182628694-58821332-6bfe-4541-8612-8e1f2bec7a71.png" alt="첫 NPM 패키지 개발기"></p>
<p><img src="https://user-images.githubusercontent.com/26461307/174654540-4f2ab425-8d94-40b0-aa0d-89ddd026c1f9.gif" alt="create-comet-land gif"></p>
<p>블로그와 이력서 템플릿인 <a href="https://github.com/hyesungoh/comet-land" target="_blank" rel="noopener noreferer">Comet-land</a>를 가장 쉽게 시작할 수 있는 CLI 앱인 <a href="https://github.com/hyesungoh/create-comet-land" target="_blank" rel="noopener noreferer">create-comet-land</a>를 개발하며 겪은 과정을 공유합니다.</p>
<h2 id="개발하게된-이유" class="heading">개발하게된 이유</h2>
<p>프론트엔드 어플리케이션을 개발해보신 많은 분들이 react 앱을 개발하기 위해 <code>create-react-app</code>을, Next.js 앱을 위해 <code>create-next-app</code>을, 그리고 gatsby 진형의 블로그를 시작하기 위해 gatsby CLI 도구를 이용해보셨을 거라 생각합니다.</p>
<p>제가 개발한 comet-land 또한 전용 CLI 도구를 통해 쉽고 간편하게 시작할 수 있는 환경을 구성하고 싶었습니다.</p>
<p>무엇보다 만드는 건 쉽지만, 다른 사람들이 사용하게 만드는 것이 훨씬 어렵다는 것을 깨달았기 때문에 새로운 사용자에 대한 진입장벽을 최대한 낮추고 싶었습니다.</p>
<blockquote>
<p>Rust 코어팀의 Steve Klabnik의 "프로그래밍 언어를 만드는 건 쉽지만 사람들이 그 언어를 쓰게 만드는 건 훨씬, 훨씬 어렵다"<sup><a href="#user-content-fn-1" id="user-content-fnref-1" data-footnote-ref aria-describedby="footnote-label">1</a></sup>는 말이 실감되었습니다.</p>
</blockquote>
<h2 id="무슨-도구를-이용할까" class="heading">무슨 도구를 이용할까</h2>
<p>CLI 어플리케이션은 <a href="https://github.com/hyesungoh/BOJ_grading_automation" target="_blank" rel="noopener noreferer">Python을 이용해 백준 자동 채점 프로그램</a> 등, 저 자신만을 위해서는 개발해보았지만 다른 사용자를 위해 개발해본 적은 처음이였습니다.</p>
<p>그렇기 때문에 도구를 선택하는 데에도 많은 고민이 있었는데요.
새로 배워보고 싶은 Rust나 Golang으로 개발할까도 고민하였고, 익숙한 Python이나 Nodejs로 빠르게 개발할까도 고민하였습니다.</p>
<p>많은 고민을 한 결과 React 기반의 CLI 어플리케이션 빌드 도구인 <code>Ink</code>를 사용하기로 마음을 먹었고 이유는 다음과 같습니다.</p>
<ol>
<li>동적이고 아름다운 CLI 어플리케이션이 되길 바랬습니다.</li>
<li>유지보수가 용이하길 바랬습니다.</li>
<li>Comet-land와 비슷한 스펙을 가져가 형제 프로젝트간 통일감을 구성하고 싶었습니다.</li>
</ol>
<p>물론 다른 언어 그리고 도구들을 선택해도 유지보수에 용이하게 구성할 수 있으며 아름답게 보일 수도 있겠지만, 가장 빠르고 쉽게 그리고 아름답게 개발하는데 최적의 도구라 생각하여 선택하게 되었습니다.</p>
<p><img src="https://github.com/vadimdemedes/ink-spinner/raw/master/media/demo.gif" alt="ink spinner"></p>
<p><em>출처 : <a href="https://github.com/vadimdemedes/ink-spinner" target="_blank" rel="noopener noreferer">https://github.com/vadimdemedes/ink-spinner</a></em></p>
<p>그 이유 중 하나인 프로젝트가 하나 있는데, <code>ink-spinner</code>란 프로젝트로 위와 같은 로딩 스피너를 단순히 한 개의 리액트 컴포넌트를 사용하면 구현할 수 있는 것에 매료되었습니다.</p>
<h2 id="어떻게-개발할까" class="heading">어떻게 개발할까</h2>
<p>리액트에 관한 경험은 있었지만, Ink에 대한 경험은 전무하였기 때문에 <a href="https://github.com/hyesungoh/learningWhatIWant/tree/master/Ink" target="_blank" rel="noopener noreferer">해당 Repo</a>에서 기본적인 사용 방법을 익힌 후</p>
<p><a href="https://github.com/vadimdemedes/create-ink-app" target="_blank" rel="noopener noreferer"><code>create-ink-app</code></a>을 이용해 타입스크립트 기반으로 프로젝트를 생성하고 타당한 이유가 존재하는 의존성만을 남겨 프로젝트를 스캐폴딩하였습니다.</p>
<blockquote>
<p>제거한 의존성으로 linter 도구인 'xo', Nodejs test를 위한 'ava', Test에서 색상 확인을 위해 사용되는 'chalk'가 있습니다. 제거 후 eslint와 prettier를 사용해 lint 환경을 구성하였으며 간단한 CLI 어플리케이션이기 때문에 테스트 코드가 필요하지 않을 것이라 판단하였습니다.</p>
</blockquote>
<p>프로젝트 스캐폴딩과 출력에 대한 부분은 어렵지 않아, 쉽게 구현할 수 있었지만 가장 고민이 되는 구현부가 2가지 존재하였습니다.</p>
<h3 id="comet-land-생성">Comet-land 생성</h3>
<p>첫 번째로 <code>Comet-land</code> 프로젝트를 어떻게 생성할 지 였습니다.</p>
<p>프로젝트 스캐폴딩에 사용하였던 <code>create-ink-app</code>의 경우, 보일러 플레이트가 프로젝트 안에 존재해 해당 디렉토리를 복사하는 형식으로 구현되어 있었으나 <code>Comet-land</code>의 경우 2개의 어플리케이션을 다루는 하나의 프로젝트라 파일이 많이 존재하고, 앞으로 수정될 부분이 많을 것이라 예상하였기 지속적으로 최신화를 해줘야하기 때문에 적합한 방법이라고 생각되진 않았습니다.</p>
<blockquote>
<p><code>create-comet-land</code>를 모노레포 안에 작성하면 적합할 수 있는 방법이라고 생각되었으나, 이 프로젝트 또한 하나의 오픈소스로써 유지되길 바래 1개의 프로젝트 규모가 커지는 것보다 분리하는 것이 많은 관심과 기여자를 모집할 수 있는 방법이라 생각하였습니다.</p>
</blockquote>
<p>고민한 결과, <strong>많은 파일을 빠르게 내려받을 수 있고</strong>, <strong>지속적으로 최신화가 보장</strong>되는 방법인 <code>git clone</code>을 활용하기로 하였습니다.</p>
<p>조사한 결과 <code>shelljs</code>를 이용해 git 설치 유무를 확인하고 커맨드를 실행할 수 있는 것으로 파악하여 아래와 같은 모습으로 개발할 수 있었습니다.</p>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token keyword">import</span> <span class="token imports">shell</span> <span class="token keyword">from</span> <span class="token string">'shelljs'</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// git 설치 확인</span>
</span><span class="code-line"><span class="token keyword">if</span> <span class="token punctuation">(</span>shell<span class="token punctuation">.</span><span class="token method function property-access">which</span><span class="token punctuation">(</span><span class="token string">'git'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// git clone</span>
</span><span class="code-line">shell<span class="token punctuation">.</span><span class="token method function property-access">exec</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">git clone </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">REPO_URL</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span> silent<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token function">setIsLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<p><em>전체 코드는 <a href="https://github.com/hyesungoh/create-comet-land/tree/main/source" target="_blank" rel="noopener noreferer">다음 링크</a>에서 확인하실 수 있습니다.</em></p>
<h3 id="설정-파일-수정">설정 파일 수정</h3>
<p>마지막으로 고민되는 부분은 clone 이후 <code>설정 파일을 어떻게 수정</code>할 지 였습니다.</p>
<p>사용자에게 블로그 이름, 사용자 이름과 같은 정보를 입력받은 후 프로젝트에 적용하는 방법이 직접 설정 파일을 찾아 수정하는 것에 비해 더욱 편하게 프로젝트를 시작할 수 있을 것이라 판단하여 꼭 구현하고자 했습니다.</p>
<p>또한 이 구현부가 앞으로 유지보수가 가장 많이될 부분이라 생각해, 최대한 확인하고 수정하기 쉽게 구현하고자 했습니다.</p>
<p>고민한 결과, <code>질문</code>, <code>수정되어야 하는 파일 디렉토리</code>, <code>수정되어야 하는 파일의 줄</code> 등으로 이루어져 있는 오브젝트 배열을 이용해 구현하였고 이를 통해 <code>수정되어야 하는 부분들</code>과 <code>수정을 구현하는 부분</code>이 <code>분리</code>되어 유지보수가 쉬운 구조가 되었다고 생각합니다.</p>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token keyword">import</span> <span class="token imports">fs</span> <span class="token keyword">from</span> <span class="token string">'fs'</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">import</span> <span class="token imports"><span class="token maybe-class-name">TextInput</span></span> <span class="token keyword">from</span> <span class="token string">'ink-text-input'</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token spread operator">...</span>
</span><span class="code-line"><span class="token keyword">const</span> configurations<span class="token operator">:</span> <span class="token maybe-class-name">IConfiguration</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
</span><span class="code-line">  <span class="token punctuation">{</span>
</span><span class="code-line">    question<span class="token operator">:</span> <span class="token string">'What is your name?'</span><span class="token punctuation">,</span>
</span><span class="code-line">    description<span class="token operator">:</span> <span class="token string">'it will be display at footer'</span><span class="token punctuation">,</span>
</span><span class="code-line">    directory<span class="token operator">:</span> <span class="token string">'/packages/core/constants/General/index.ts'</span><span class="token punctuation">,</span>
</span><span class="code-line">    line<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
</span><span class="code-line">    <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">export const authorName = '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">';</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token punctuation">{</span>
</span><span class="code-line">    question<span class="token operator">:</span> <span class="token string">'What is your blog name?'</span><span class="token punctuation">,</span>
</span><span class="code-line">    description<span class="token operator">:</span> <span class="token string">'it will be display at blog header'</span><span class="token punctuation">,</span>
</span><span class="code-line">    directory<span class="token operator">:</span> <span class="token string">'/apps/blog/_config/index.json'</span><span class="token punctuation">,</span>
</span><span class="code-line">    line<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
</span><span class="code-line">    <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">  "blogName": "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">",</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token spread operator">...</span>
</span><span class="code-line"><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token spread operator">...</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">function</span> <span class="token function">getReplacedFile</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> filePath<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> line<span class="token punctuation">,</span> callback <span class="token punctuation">}</span> <span class="token operator">=</span> configurations<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">const</span> beforeFile <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token method function property-access">readFileSync</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">split</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    beforeFile<span class="token punctuation">[</span>line <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">callback</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">const</span> replacedFile <span class="token operator">=</span> beforeFile<span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">return</span> replacedFile<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">function</span> <span class="token function">replaceFile</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> directory <span class="token punctuation">}</span> <span class="token operator">=</span> configurations<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">const</span> filePath <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">DIRNAME</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>directory<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">const</span> replacedFile <span class="token operator">=</span> <span class="token function">getReplacedFile</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    fs<span class="token punctuation">.</span><span class="token method function property-access">writeFileSync</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> replacedFile<span class="token punctuation">,</span> <span class="token punctuation">{</span> encoding<span class="token operator">:</span> <span class="token string">'utf-8'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">function</span> <span class="token function">onSubmit</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token function">replaceFile</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token function">clearEachValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token function">setIndex</span><span class="token punctuation">(</span>prev <span class="token arrow operator">=></span> prev <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token spread operator">...</span>
</span><span class="code-line"><span class="token keyword">return</span> <span class="token punctuation">(</span>
</span><span class="code-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">TextInput</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>eachValue<span class="token punctuation">}</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>setEachValue<span class="token punctuation">}</span></span> <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>onSubmit<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>
</span><span class="code-line"><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p><em>전체 코드는 <a href="https://github.com/hyesungoh/create-comet-land/blob/639acce08f8ddc762b3167582fa879450f248111/source/4_Configuration.tsx" target="_blank" rel="noopener noreferer">다음 링크</a>에서 확인하실 수 있습니다.</em></p>
<h2 id="v10x-배포-그리고-자동화" class="heading">v1.0.x 배포 그리고 자동화</h2>
<p><img src="https://user-images.githubusercontent.com/26461307/177161947-852ec9ee-b24d-4e25-b348-1c094b4563f4.png" alt="스크린샷 2022-07-04 오후 10 12 18"></p>
<p>이렇게 고민이 되었던 부분들을 구현한 후에 NPM에 배포하였는데요.</p>
<p>이전에 만들어두었던 NPM 계정이 있어 배포는 어렵지 않았습니다.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/177162445-472b43e4-fea1-4f63-8c90-651e1c8e2e20.png" alt="스크린샷 2022-07-04 오후 10 15 13"></p>
<p>이렇게 첫 번째 NPM 패키지를 배포하고나니 깃허브에 항상 비어있었던 <code>Packages</code> 부분을 채울 수 있지 않을까? 생각하게 되었고, 이를 검색하다보니 자연스럽게 <code>Github actions</code> 공식 문서로 향해있었습니다.</p>
<p>공식 문서를 조금 읽어보니, github에 새로운 release로 trigger되어 배포되는 것도 구축할 수 있는 것을 알게 되었습니다.</p>
<p>이는 앞으로 프로젝트를 유지하는데에 굉장히 편한 기능이 될 것이라 생각됨과 동시에 어려워보이지 않아 금방 구현할 수 있었습니다.</p>
<pre class="language-yml"><code class="language-yml code-highlight"><span class="code-line"><span class="token key atrule">name</span><span class="token punctuation">:</span> Publish Package to npmjs
</span><span class="code-line"><span class="token key atrule">on</span><span class="token punctuation">:</span>
</span><span class="code-line">  <span class="token key atrule">release</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token key atrule">types</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>created<span class="token punctuation">]</span>
</span><span class="code-line"><span class="token key atrule">jobs</span><span class="token punctuation">:</span>
</span><span class="code-line">  <span class="token key atrule">build</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest
</span><span class="code-line">    <span class="token key atrule">steps</span><span class="token punctuation">:</span>
</span><span class="code-line">      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v3
</span><span class="code-line">
</span><span class="code-line">      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v3
</span><span class="code-line">        <span class="token key atrule">with</span><span class="token punctuation">:</span>
</span><span class="code-line">          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">'16.x'</span>
</span><span class="code-line">          <span class="token key atrule">registry-url</span><span class="token punctuation">:</span> <span class="token string">'https://registry.npmjs.org'</span>
</span><span class="code-line">
</span><span class="code-line">      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> npm ci
</span><span class="code-line">
</span><span class="code-line">      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> npm publish
</span><span class="code-line">        <span class="token key atrule">env</span><span class="token punctuation">:</span>
</span><span class="code-line">          <span class="token key atrule">NODE_AUTH_TOKEN</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.NPM_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span>
</span></code></pre>
<h3 id="github-packages">Github packages</h3>
<p>저는 이전까지는 github packages가 단순히 NPM, RubyGems 등의 패키지 매니저에 배포하게 되면 적용되는 뱃지 정도로 알고 있었습니다.</p>
<p>하지만 github actions을 통해 배포해보아도 적용되지 않아 알아보니, 깃허브 repo와 매칭이 되어야하고 이는 사용자 혹은 org의 이름이 앞에 붙어야 되는 것을 알게 되었습니다.</p>
<blockquote>
<p>이를 CD 환경에서 테스트하느라 오랜 시간을 들여 알게 되었습니다 ...</p>
</blockquote>
<p><img src="https://user-images.githubusercontent.com/26461307/177166166-f56c01b0-bce9-4dbd-956c-a57a4391823e.png" alt="스크린샷 2022-07-04 오후 10 37 10"></p>
<p>결국에 github packages로도 성공적으로 배포 할 수 있었지만, 사용자가 입력하기에 <code>npx @hyesungoh/create-comet-land</code>는 <code>npx create-comet-land</code>보다 상대적으로 거부감이 들 것 같아 NPM만을 이용해 배포하는 방법으로 회귀하였습니다.</p>
<h2 id="v11x-빌드-환경-설정" class="heading">v1.1.x, 빌드 환경 설정</h2>
<p>이전 <code>v1.0.x</code>에서는 오직 타입스크립트 컴파일러만을 이용해 빌드되고 있었습니다.</p>
<p>그렇기 때문에 각각 컴파일되는 파일들을 <code>package.json</code>의 <code>files</code>에 작성해야 어플리케이션이 원활히 실행됐었습니다.</p>
<pre class="language-json"><code class="language-json code-highlight"><span class="code-line"><span class="token property">"files"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
</span><span class="code-line">  <span class="token string">"dist/cli.js"</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token string">"dist/App.js"</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token string">"dist/1_Check_Github.js"</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token string">"dist/2_Clone_Project.js"</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token string">"dist/3_Configuration.js"</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token string">"dist/4_More_Information.js"</span>
</span><span class="code-line"><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span></code></pre>
<p>이는 유지보수에 굉장히 안좋은 영향을 끼칠 수 밖에 없다고 판단하여 번들링을 하기로 마음을 먹게 되었습니다.</p>
<p>번들러로써 사용해본 경험이 있는 <code>webpack</code>과 zero configuration을 자랑하는 <code>parcel</code>가 고민되었지만 아래 지표를 참고하여 조금 보수적으로 <code>webpack</code>을 선택하였습니다.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/177167794-afbb16f9-b993-4e70-ba3f-8201967492a9.png" alt="스크린샷 2022-07-04 오후 10 46 42"></p>
<blockquote>
<p>parcel의 경우 도입하게되면 굉장히 편하게 사용할 수 있을 것 같다고 판단하였으나, 조금 더 표준이 되는 기술에 익숙해지는 것이 제 자신에게 투자하는 효용성이 더 높지 않을까 생각한 이유가 제일 클 것 같습니다.</p>
</blockquote>
<h2 id="그러나" class="heading">그러나...</h2>
<p>Webpack을 이용해 빌드 환경을 설정한 후에 배포해보니 아래 이미지와 같은 오류가 반겨줬습니다.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/177170028-21556e75-bfed-4400-93c3-67d0d176f823.png" alt="스크린샷 2022-07-04 오후 8 38 35"></p>
<pre class="language-bash"><code class="language-bash code-highlight"><span class="code-line">line <span class="token number">1</span>: syntax error near unexpected token <span class="token string">'function'</span>
</span><span class="code-line">line <span class="token number">1</span>: <span class="token string">'/******/'</span> <span class="token punctuation">..</span>.
</span></code></pre>
<p>이전에 타입스크립트 컴파일된 결과물은 실행이 잘되었기 때문에, 당연히 webpack의 설정 문제인 줄 알았습니다.</p>
<p>그렇기 때문에 <a href="https://webpack.kr/configuration/output/#outputenvironment" target="_blank" rel="noopener noreferer">빌드 결과물에 ES 기능 제한하는 방법</a>부터 <a href="https://github.com/hyesungoh/learningWhatIWant/issues/10" target="_blank" rel="noopener noreferer">의존성 포함하지 않는 방법</a>등 다양하게 발굴해보았지만 모두 실패하곤 했습니다.</p>
<p>Webpack 설정에는 문제가 없다고 생각한 후 이전 타입스크립트가 컴파일된 결과물과 비교를 해보는 방법으로 문제를 찾아보고자 하였고 <a href="https://github.com/hyesungoh/create-comet-land/blob/094df40223bb9fbf55ef540f04e4c5ea06ff2521/dist/cli.js#L1" target="_blank" rel="noopener noreferer">다음과 같은 줄</a>을 확인할 수 있었습니다.</p>
<pre class="language-js"><code class="language-js code-highlight"><span class="code-line"><span class="token hashbang comment">#!/usr/bin/env node</span>
</span></code></pre>
<p>이를 검색해보니 <a href="https://docs.npmjs.com/cli/v7/configuring-npm/package-json#bin" target="_blank" rel="noopener noreferer">NPM 공식 문서</a>로 연결되었으며, 공식 문서에는 다음과 같이 설명하고 있었습니다.</p>
<pre class="language-text"><code class="language-text code-highlight"><span class="code-line">Please make sure that your file(s) referenced in bin starts with #!/usr/bin/env node,
</span><span class="code-line">otherwise the scripts are started without the node executable!
</span></code></pre>
<p>package.json의 <code>bin</code>이 참조하는 파일은 문제가 되었던 저 구문으로 시작해야 노드 실행환경으로 실행된다고 기술되어 있었습니다.</p>
<p>Webpack을 적용하며 output 파일을 <code>bin</code>에 설정하긴 했으나, 공식 문서를 유심히 확인하지 않은 잘못으로 많은 시간을 들여 배울 수 있었던 경험이였습니다.</p>
<blockquote>
<p>지금 생각해보니 로컬에서 직접 <code>node</code> 명령어를 이용해 빌드된 파일을 실행할 땐 됐었는데, 배포된 패키지만 안된다는 것으로 파악을 할 수 있었을 거 같네요. ㅠ</p>
</blockquote>
<pre class="language-js"><code class="language-js code-highlight"><span class="code-line"><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">module<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token spread operator">...</span>
</span><span class="code-line">  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
</span><span class="code-line">    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>BannerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token literal-property property">banner</span><span class="token operator">:</span> <span class="token string">'#!/usr/bin/env node'</span><span class="token punctuation">,</span>
</span><span class="code-line">      <span class="token literal-property property">raw</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
</span><span class="code-line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token spread operator">...</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span></code></pre>
<p>빌드되는 파일의 최상단에 구문을 추가하는 방법은 간단히 Webpack의 <code>BannerPlugin</code>을 이용해 적용할 수 있었고, 이를 적용하니 원활히 동작하였습니다.</p>
<h2 id="마치며" class="heading">마치며</h2>
<p>처음으로 패키지 매니저에 배포를 해보며 github actions을 조금 더 다채롭게 사용해보고, Webpack, Nodejs 환경 그리고 게시물에 언급하진 않았지만 tsconfig와 살짝 더 친해질 수 있었던 경험이였던 것 같습니다.</p>
<p>공식 문서의 다양한 API들은 확실히 알면 도움이 되는 것을 알고 있었지만, 유심히 읽지 않았던 제 자신을 반성하게 해줄 수 있었던 경험까지 얻을 수 있었어서 더욱 보람찬 개발 기간으로 느껴집니다.</p>
<p>앞으로는 사용자 인터뷰를 통해 추가적으로 CLI에서 설정했으면 좋을 부분, Comet-land에서 더욱 설정을 쉽게할 수 있는 방법등을 찾아 업데이트하는 방식으로 해당 프로젝트를 운영할 것 같습니다.</p>
<p>두서없는 글 읽어주셔서 감사드리며, 프로젝트에 관심이 생기셨으면 아래 링크 확인 부탁드리겠습니다. 감사합니다.</p>
<ul>
<li><a href="https://github.com/hyesungoh/comet-land" target="_blank" rel="noopener noreferer">Comet-land 깃허브</a></li>
<li><a href="https://github.com/hyesungoh/create-comet-land" target="_blank" rel="noopener noreferer">create-comet-land 깃허브</a></li>
<li><a href="https://comet-land-blog.vercel.app/" target="_blank" rel="noopener noreferer">Comet-land 블로그 데모</a></li>
<li><a href="https://comet-land-resume.vercel.app/" target="_blank" rel="noopener noreferer">Comet-land 이력서 데모</a></li>
</ul>
<section data-footnotes class="footnotes"><h2 id="footnote-label" class="sr-only heading">Footnotes</h2>
<ol>
<li id="user-content-fn-1">
<p><a href="https://www.youtube.com/watch?v=dJAEWhR83Ug" target="_blank" rel="noopener noreferer">해당 발표</a>에서 알게 되었으며 <a href="https://steveklabnik.com/writing/the-language-strangeness-budget" target="_blank" rel="noopener noreferer">원문 링크</a>는 다음과 같습니다. <a href="#user-content-fnref-1" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
</ol>
</section>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[Next.js Head 테스트 작성하기 w/ Next.js router mock]]></title>
    <link>https://www.hyesungoh.xyz/test-nextjs-head-with-mocking-router</link>
    <pubDate>2022-06-30</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/test-nextjs-head-with-mocking-router</guid>
    <description>
    <![CDATA[Next.js Head안의 meta 태그들을 테스트했던 경험을 공유합니다.]]>
    </description>
    <content:encoded>
      <![CDATA[<p><img src="https://user-images.githubusercontent.com/26461307/182628713-5064455b-2acf-4062-b4ce-864a0079344b.png" alt="Next.js Head 테스트 작성하기"></p>
<p><code>jest</code>, <code>react-testing-library</code>를 이용해 Next.js Head안의 meta 태그들을 테스트했던 방법을 공유합니다.</p>
<h2 id="문제" class="heading">문제</h2>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token keyword">function</span> <span class="token constant">SEO</span><span class="token punctuation">(</span><span class="token punctuation">{</span> title<span class="token punctuation">,</span> description<span class="token punctuation">,</span> ogImage <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token maybe-class-name">Props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">const</span> <span class="token constant">TITLE</span> <span class="token operator">=</span> title <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> - </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>authorName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>blogName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> - </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>authorName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">const</span> <span class="token constant">DESCRIPTION</span> <span class="token operator">=</span> description <span class="token operator">?</span> description <span class="token operator">:</span> blogDescription<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">const</span> <span class="token constant">URL</span> <span class="token operator">=</span> blogUrl <span class="token operator">+</span> router<span class="token punctuation">.</span><span class="token property-access">asPath</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">const</span> <span class="token constant">IMAGE</span> <span class="token operator">=</span> ogImage <span class="token operator">?</span> ogImage <span class="token operator">:</span> defaultMetaBackground<span class="token punctuation">.</span><span class="token property-access">default</span><span class="token punctuation">.</span><span class="token property-access">src</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">return</span> <span class="token punctuation">(</span>
</span><span class="code-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Head</span></span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>title</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token constant">TITLE</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>title</span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>canonical<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token constant">URL</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token constant">DESCRIPTION</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>meta</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>og:title<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token constant">TITLE</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>meta</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>og:description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token constant">DESCRIPTION</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>meta</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>og:image<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token constant">IMAGE</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>meta</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>og:url<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token constant">URL</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">      </span><span class="token punctuation">{</span><span class="token comment">/* for twitter */</span><span class="token punctuation">}</span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>twitter:title<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token constant">TITLE</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>twitter:description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token constant">DESCRIPTION</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>twitter:image<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token constant">IMAGE</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span><span class="token class-name">Head</span></span><span class="token punctuation">></span></span>
</span><span class="code-line">  <span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>운영중인 <a href="https://github.com/hyesungoh/comet-land" target="_blank" rel="noopener noreferer"><code>comet-land</code></a> 프로젝트에서는 위와 같이 매 페이지마다 달라야하는 meta 태그들을 <code>SEO</code>라는 이름의 컴포넌트로 관리하고 있는데요.</p>
<p>이 컴포넌트를 일반적인 컴포넌트를 테스트하듯 <code>render</code>하고 확인해보면 결과는 아래와 같습니다.</p>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">SEO</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token property-access">head</span><span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token comment">// 0</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>screen<span class="token punctuation">.</span><span class="token method function property-access">debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token comment">// &#x3C;body></span>
</span><span class="code-line">  <span class="token comment">//   &#x3C;div /></span>
</span><span class="code-line">  <span class="token comment">// &#x3C;/body></span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<p>이와 같은 상황에서는 개발자의 의도대로 title, meta 등의 태그가 올바르게 작성되었는지 확인하기 어렵습니다.</p>
<h2 id="mocking-nexthead" class="heading">Mocking 'next/head'</h2>
<p>이를 확인하기 위해서 우선 <code>next/head</code>, 즉 <code>Head</code> 컴포넌트를 mocking 할 수 있습니다.</p>
<blockquote>
<p>mock이란 사전적으로 '거짓된', '가짜의'의 뜻을 갖으며, 테스트 코드를 작성할 때 허위의 구문이나 값으로 대체하는 기법을 뜻합니다.</p>
</blockquote>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">ReactElement</span> <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">jest<span class="token punctuation">.</span><span class="token method function property-access">mock</span><span class="token punctuation">(</span><span class="token string">'next/head'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">return</span> <span class="token punctuation">{</span>
</span><span class="code-line">    __esModule<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
</span><span class="code-line">    <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> children <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> children<span class="token operator">:</span> <span class="token maybe-class-name">ReactElement</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span></span><span class="token punctuation">></span></span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<p>이렇게 children을 반환하도록 mocking 후 screen의 값을 확인해보면 다음과 같은 결과를 확인할 수 있습니다.</p>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">SEO</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token property-access">head</span><span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token comment">// 0</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>screen<span class="token punctuation">.</span><span class="token method function property-access">debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token comment">// &#x3C;body></span>
</span><span class="code-line">  <span class="token comment">//     &#x3C;div></span>
</span><span class="code-line">  <span class="token comment">//       &#x3C;title></span>
</span><span class="code-line">  <span class="token comment">//         Cometin' - hyesungoh</span>
</span><span class="code-line">  <span class="token comment">//       &#x3C;/title></span>
</span><span class="code-line">  <span class="token comment">//       &#x3C;link</span>
</span><span class="code-line">  <span class="token comment">//         href="https://comet-land-blog.vercel.app"</span>
</span><span class="code-line">  <span class="token comment">//         rel="canonical"</span>
</span><span class="code-line">  <span class="token comment">//       /></span>
</span><span class="code-line">  <span class="token comment">//       &#x3C;meta</span>
</span><span class="code-line">  <span class="token comment">//         content="I like to share my knowledge."</span>
</span><span class="code-line">  <span class="token comment">//         name="description"</span>
</span><span class="code-line">  <span class="token comment">//       /></span>
</span><span class="code-line">  <span class="token comment">//       ...</span>
</span><span class="code-line">  <span class="token comment">//     &#x3C;/div></span>
</span><span class="code-line">  <span class="token comment">//   &#x3C;/body></span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<p>실제 사용될 때처럼 document.head에 렌더링되진 않았지만, body에는 정상적으로 태그들이 렌더링된 모습을 확인할 수 있습니다.</p>
<p>이 상황에서도 테스트 코드를 작성할 수도 있지만 보다 실제 사용할 때처럼 테스트를 하기 위해서는 간단히 render되는 container를 바꿔줄 수 있습니다.</p>
<h2 id="render-container-설정" class="heading">render container 설정</h2>
<p><a href="https://testing-library.com/docs/react-testing-library/api/#render-options" target="_blank" rel="noopener noreferer">react-testing-library의 공식 문서</a>에서 확인할 수 있듯이, render 메소드는 container 옵션을 설정할 수 있습니다.</p>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line highlight-line">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">SEO</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span> container<span class="token operator">:</span> <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token property-access">head</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token property-access">head</span><span class="token punctuation">.</span><span class="token property-access">children</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token comment">// 10 (SEO 컴포넌트의 태그 수)</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>screen<span class="token punctuation">.</span><span class="token method function property-access">debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token comment">// &#x3C;body /></span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<p>이처럼 body가 아닌 head에 렌더링하여 실제 사용할 때와 같은 모습으로 렌더링되는 모습을 확인할 수 있습니다.</p>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line highlight-line"><span class="token keyword">function</span> <span class="token function">renderAtHead</span><span class="token punctuation">(</span>element<span class="token operator">:</span> <span class="token maybe-class-name">ReactElement</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line highlight-line">  <span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token punctuation">{</span> container<span class="token operator">:</span> <span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token property-access">head</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line highlight-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'test 1'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token function">renderAtHead</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">SEO</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token comment">// ...</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'test 2'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token function">renderAtHead</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">SEO</span></span> <span class="token attr-name">foo</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>foo<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token comment">// ...</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<p>여기에 더해, 간단한 함수를 만들어 각 테스트 케이스마다 container를 설정하지 않도록 할 수 있습니다.</p>
<h2 id="테스트-방법" class="heading">테스트 방법</h2>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token function">expect</span><span class="token punctuation">(</span><span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token property-access">title</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">toBe</span><span class="token punctuation">(</span><span class="token string">'올바른 타이틀'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<p>title 태그의 값은 위처럼 document에서 직접적으로 접근하여 테스트할 수 있지만,</p>
<p>다른 태그들의 경우 container 값을 수정하여 <code>screen</code>은 <code>body</code> 태그만을 렌더링하고 있기 때문에 <code>getBy*</code>, <code>queryBy*</code>와 같은 screen api를 사용하지 않으면서 각 태그들의 값들을 확인해야하는데요.</p>
<p>Vanilla에 익숙하신 분들은 친숙하실 <code>querySelector</code>를 이용해 테스트할 수 있습니다.</p>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>meta</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>og:title<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>foo<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
</span></code></pre>
<p>예를 들어 위와 같은 오픈 그래프 meta 태그의 content 값을 확인하기 위해서는</p>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'should be foo'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token function">renderAtHead</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">SEO</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token comment">// og:title</span>
</span><span class="code-line highlight-line">  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">querySelector</span><span class="token punctuation">(</span><span class="token string">"meta[property='og:title']"</span><span class="token punctuation">)</span><span class="token operator">?.</span><span class="token method function property-access">getAttribute</span><span class="token punctuation">(</span><span class="token string">'content'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">toBe</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<p>이렇게 meta 태그이면서 property가 'og:title'인 것의 attribute를 확인하는 방법으로 테스트할 수 있습니다.</p>
<blockquote>
<p>lint 설정으로 인해, 테스트 코드 내에서는 querySelector가 에러를 일으킬 수 있습니다. 저는 다른 테스트 코드에서는 querySelector를 사용하지 않으면서 Head를 확인해야하는 상황에서만 <code>testing-library/no-node-access</code> rule을 disable<sup><a href="#user-content-fn-1" id="user-content-fnref-1" data-footnote-ref aria-describedby="footnote-label">1</a></sup>하여 테스트하였습니다.</p>
</blockquote>
<h2 id="route에-따른-태그-확인하기" class="heading">route에 따른 태그 확인하기</h2>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>meta</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>og:url<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token string">'https://some.url'</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>
</span></code></pre>
<p><code>og:url</code>과 같은 각 route path에 따라 달라져야하는 메타 태그들이 존재하는데요.</p>
<p>props로 주입하는 형태가 된다면 테스트하기 용이하겠지만, 저는 컴포넌트 내에서 <code>next/router</code>의 <code>useRouter</code>를 사용하고 있습니다.</p>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> useRouter <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">'next/router'</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">const</span> <span class="token constant">URL</span> <span class="token operator">=</span> <span class="token constant">ROOT_URL</span> <span class="token operator">+</span> router<span class="token punctuation">.</span><span class="token property-access">asPath</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>meta</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>og:url<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token constant">URL</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>
</span></code></pre>
<p>이런 상황에서는 useRouter를 mocking하는 방향으로 테스트를 진행할 수 있습니다.</p>
<h2 id="mocking-userouter" class="heading">mocking useRouter</h2>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token keyword">const</span> mockPath <span class="token operator">=</span> <span class="token string">'/foo'</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">const</span> useRouter <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token method function property-access">spyOn</span><span class="token punctuation">(</span><span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">'next/router'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'useRouter'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">useRouter<span class="token punctuation">.</span><span class="token method function property-access">mockImplementation</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
</span><span class="code-line">  asPath<span class="token operator">:</span> mockPath<span class="token punctuation">,</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<p>위와 같이 jest의 <code>spyOn</code>, <code>mockImplementation</code>를 이용해 useRouter asPath의 반환값을 mocking 할 수 있습니다.</p>
<p>전역으로 선언하여 모든 테스트 케이스에서 mocking한 값을 기준으로 테스트할 수도 있지만, 저는 각 경우들을 테스트하기 위해 아래와 같이 각 테스트 케이스에서 mocking하는 방법으로 작성하였습니다.</p>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">  jest<span class="token punctuation">.</span><span class="token method function property-access">restoreAllMocks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'should URL to be ROOT URL'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token function">renderAtHead</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">SEO</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token comment">// og:url</span>
</span><span class="code-line">  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">querySelector</span><span class="token punctuation">(</span><span class="token string">"meta[property='og:url']"</span><span class="token punctuation">)</span><span class="token operator">?.</span><span class="token method function property-access">getAttribute</span><span class="token punctuation">(</span><span class="token string">'content'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">toBe</span><span class="token punctuation">(</span><span class="token constant">ROOT_URL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'should URL contain router path'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">const</span> mockPath <span class="token operator">=</span> <span class="token string">'/foo'</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">const</span> useRouter <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token method function property-access">spyOn</span><span class="token punctuation">(</span><span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">'next/router'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'useRouter'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  useRouter<span class="token punctuation">.</span><span class="token method function property-access">mockImplementation</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
</span><span class="code-line">    asPath<span class="token operator">:</span> mockPath<span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function">renderAtHead</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">SEO</span></span> <span class="token attr-name">title</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>mockTitle<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token comment">// og:url</span>
</span><span class="code-line">  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token dom variable">document</span><span class="token punctuation">.</span><span class="token method function property-access">querySelector</span><span class="token punctuation">(</span><span class="token string">"meta[property='og:url']"</span><span class="token punctuation">)</span><span class="token operator">?.</span><span class="token method function property-access">getAttribute</span><span class="token punctuation">(</span><span class="token string">'content'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">toBe</span><span class="token punctuation">(</span><span class="token constant">ROOT_URL</span> <span class="token operator">+</span> mockPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<p>언급하지 않았던 아래의 코드를 확인하실 수 있으실텐데요.</p>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">  jest<span class="token punctuation">.</span><span class="token method function property-access">restoreAllMocks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<p>이는 모든 테스트 케이스 이후에 (<code>afterEach</code>), mocking한 값을 원래의 값으로 복원하는 (<code>restoreAllMocks</code>) 구문입니다.</p>
<h2 id="마치며" class="heading">마치며</h2>
<p>이와 같이 <code>next/head</code>, <code>next/router의 useRouter</code>를 mocking하여 head 내부의 태그들의 단위 테스트를 작성해보았는데요.</p>
<p>mocking하며 사용한 메소드들인 <code>jest.mock</code>, <code>jest.spyOn</code>, <code>jest.mockImplementation</code>의 경우 <a href="https://jestjs.io/" target="_blank" rel="noopener noreferer">jest 공식 문서</a>에 자세히 설명되어 있으니 참고하시면 좋을 것 같습니다.</p>
<p>제가 작성한 전체적인 코드는 <a href="https://github.com/hyesungoh/comet-land/blob/24aedf3ebd9ff26700e487493e61906a3f7b5052/apps/blog/src/components/SEO/SEO.test.tsx#L1" target="_blank" rel="noopener noreferer">다음 링크</a>에서 확인하실 수 있으며 긴 글 읽어주셔서 감사드리고 피드백 부탁드리겠습니다. 감사합니다.</p>
<h2 id="참고" class="heading">참고</h2>
<ul>
<li><a href="https://github.com/vercel/next.js/discussions/11060" target="_blank" rel="noopener noreferer">Next.js issue - how to test metadata</a></li>
</ul>
<section data-footnotes class="footnotes"><h2 id="footnote-label" class="sr-only heading">Footnotes</h2>
<ol>
<li id="user-content-fn-1">
<p><a href="https://github.com/hyesungoh/comet-land/blob/24aedf3ebd9ff26700e487493e61906a3f7b5052/apps/blog/src/components/SEO/SEO.test.tsx#L1" target="_blank" rel="noopener noreferer">testing-library/no-node-access rule disable하는 법</a> <a href="#user-content-fnref-1" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
</ol>
</section>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[Comet-land] 2. 겪었던 이슈들과 앞으로]]></title>
    <link>https://www.hyesungoh.xyz/comet-land-2-issue</link>
    <pubDate>2022-04-11</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/comet-land-2-issue</guid>
    <description>
    <![CDATA[프로젝트를 개발하며 겪었던 이슈와 앞으로의 방향 공유하고 회고를 마칩니다.]]>
    </description>
    <content:encoded>
      <![CDATA[<p><img src="https://user-images.githubusercontent.com/26461307/160653172-c56a3b64-dfa9-4708-bf95-fca2fff47964.png" alt="comet-land-resume"></p>
<p>블로그와 이력서를 같은 스타일로 사용할 수 있는, 오픈소스 프로젝트 <a href="https://github.com/hyesungoh/comet-land" target="_blank" rel="noopener noreferer">Comet-land</a>를 개발하면서 겪은 이슈들을 공유합니다.</p>
<h2 id="코드-하이라이트-w-line-highlight" class="heading">코드 하이라이트 w/ line highlight</h2>
<p><a href="https://www.hyesungoh.xyz/comet-land-1-development-log" target="_blank" rel="noopener noreferer">이전 포스트</a>에서 해당 기능에 대한 필요성을 기술하였습니다.</p>
<blockquote>
<p>축약하자면 아래의 code section의 강조하는 줄 표시 기능 (line highlight)를 꼭 구현하고자 했습니다.</p>
</blockquote>
<pre class="language-js"><code class="language-js code-highlight"><span class="code-line highlight-line"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">'comet-land'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">'awesome'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<p>개발에 앞서 <a href="https://prismjs.com/" target="_blank" rel="noopener noreferer">prismjs</a>라는 코드 하이라이터의 <code>line-highlight</code> 기능을 사용할 수 있는 것으로 파악을 하였습니다.</p>
<p>이를 기반으로한 <a href="https://github.com/sergioramos/remark-prism" target="_blank" rel="noopener noreferer">remark-prism</a>를 이용해 서버 사이드에서 마크다운을 파싱할 계획이였으나, 해당 라이브러리는 line-highlight 기능을 지원하지 않았습니다.</p>
<p>그렇기에 해당 remark-prism 라이브러리에 line-highlight 기능을 추가하여 커스텀<sup><a href="#user-content-fn-1" id="user-content-fnref-1" data-footnote-ref aria-describedby="footnote-label">1</a></sup>하였으나 <strong>서버 사이드에서 마크다운을 파싱하는 과정에서 prismjs는 동적으로 pre 태그 값을 계산하여 인라인 스타일로 부여하기 때문에 특정 줄을 찾지 못한다</strong>는 이슈를 확인하였습니다.</p>
<blockquote>
<p>이를 확인하기 위해 <code>prismjs</code>의 코드를 뜯어보고, 의존성으로써 깃헙의 repo를 사용할 수 있다는 것을 알게 되었습니다.</p>
</blockquote>
<p>이를 해결하기 위해 원본이 되는 라이브러리 <code>prismjs</code>를 직접 사용하여 클라이언트 사이드에서 마운트 시, 하이라이트하여 해결할 수 있었지만, <code>remark-prism</code>의 엄청난 bundle size<sup><a href="#user-content-fn-2" id="user-content-fnref-2" data-footnote-ref aria-describedby="footnote-label">2</a></sup>에 더해 동일한 일을 두 번하기 때문에 부적합한 방법이라고 판단하였습니다.</p>
<p>이를 해결하기 위해 많은 서칭을 하였고 <a href="https://github.com/timlrx/rehype-prism-plus" target="_blank" rel="noopener noreferer">rehype-prism-plus</a>라는 라이브러리를 찾을 수 있었습니다.</p>
<p>제가 꼭 구현하고자 했던 기능인 line-highlight를 지원하며 bundle size 또한 <code>remark-prism</code>에 비해 6배 가량 적었습니다.</p>
<p>이에 더해 텍스트 범용 처리와 markdown화에 <code>remark</code>를 사용하는 것이 아닌, <code>unified</code>와 <code>remark-parse</code>를 사용하고 <code>remark-html</code> 대신 <code>remark-rehype</code>와 <code>rehype-stringify</code>를 사용해 gzip 압축 전 기준으로 bundle size를 아래와 같이 줄일 수 있었습니다.</p>
<pre class="language-diff"><code class="language-diff code-highlight"><span class="code-line">변경 전
</span><span class="code-line">remark: 82kb
</span><span class="code-line">remark-html: 48.6kb
</span><span class="code-line">remark-prism: 3.9mb
</span><span class="code-line">prismjs: 18.4kb
</span><span class="code-line deleted"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">총: 4049kb
</span></span></span><span class="code-line"><span class="token deleted-sign deleted"><span class="token line"></span></span>
</span><span class="code-line">변경 후
</span><span class="code-line">unified: 11.6kb
</span><span class="code-line">remark-parse: 53.1kb
</span><span class="code-line">remark-rehype: 14.6kb
</span><span class="code-line">rehype-prism-plus : 629.7kb
</span><span class="code-line">rehype-stringify : 30.6kb
</span><span class="code-line inserted"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">총: 739.6kb
</span></span></span></code></pre>
<p>확인하신 것처럼 bundle size를 약 <strong>5.5배 감소</strong>함과 동시에 목표로 했던 기능을 중복되는 로직없이 구현할 수 있었습니다.</p>
<h2 id="정적-파일-생성" class="heading">정적 파일 생성</h2>
<p>총 3 종류의 정적 파일을 사용자가 관리했어야 했습니다.</p>
<blockquote>
<p><code>KBar 검색을 위한 파일</code>, 각 어플리케이션의 <code>robots.txt</code>와 <code>sitemap.xml</code></p>
</blockquote>
<p>robots.txt의 경우 간단하여 사용자가 직접 작성하기에 무리가 없지만, 검색을 위한 파일과 sitemap의 경우 블로그의 글이 늘어날 수록 추가해줘야하는 번거로움이 있었습니다.</p>
<p>robots.txt 또한 알지 못하는 사용자에게는 번거로울 수 있을 것이라 판단해 위 3 종류의 정적 파일 생성을 자동화하였습니다.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/162629703-7da872f3-1d7f-439d-9850-fc6eebe00b60.png" alt="static file generator"></p>
<p>적용 방식으로는 자동화 스크립트를 작성 후 package.json의 <code>predev</code>, <code>prebuild</code>에 실행 명렁어를 적용해 개발 혹은 빌드 전에 자동으로 실행될 수 있도록 하였습니다.</p>
<ul>
<li>해당 코드는 <a href="https://github.com/hyesungoh/comet-land/blob/main/apps/blog/scripts/generate-static-files.mjs" target="_blank" rel="noopener noreferer">다음 링크</a>에서 확인할 수 있습니다.</li>
</ul>
<h3 id="검색을-위한-파일">검색을 위한 파일</h3>
<p>사실 검색을 위한 파일의 경우 정적 파일을 생성이 꼭 필요하진 않습니다.</p>
<p>KBar의 경우 <code>KBarProvider</code>에 <code>action</code>을 주입하고 주입된 요소가 KBar에 표시되는 방법으로 작동하는데 <code>_app</code>에서는 <code>getStaticProps</code>를 사용하여 파일을 읽고 주입할 수 없기 때문에</p>
<p>모든 하위 page 컴포넌트에서 모든 블로그 글들을 읽어 KBar의 <code>useRegisterActions</code> hook을 이용해서 클라이언트 사이드에서 동적으로 추가할 수도 있었습니다.</p>
<p>당연히 모든 page 컴포넌트에서 불필요하게 모든 블로그 글들을 읽는 것은 빌드 시간을 대폭 저해시키며, DRY하지 않다고 판단하였습니다.</p>
<p>그렇기 때문에 KBar 요소에 필요한 데이터만 포함된 json 형식의 정적 파일을 생성하고, <code>_app</code>의 <code>KBarProvider</code>에 주입하는 방식으로 개발하였습니다.</p>
<p>이에 더해 <code>generateKbarAction</code> 유틸에서 모든 초기 KBar Action에 대한 로직을 처리하는 것이 높은 응집도를 이유로 가독성이 높을 것이라고 판단하여 모듈화 하였습니다.</p>
<h2 id="post-progressbar" class="heading">Post Progressbar</h2>
<p><img src="https://user-images.githubusercontent.com/26461307/162628632-83307217-1095-4fad-b779-c836043f344e.gif" alt="Post Progressbar"></p>
<p>위 이미지처럼 전체 글을 얼마나 읽었는 지 표시하는 Progressbar를 개발하며 겪은 이슈입니다.</p>
<p>첫번째로 간단히 화면의 전체 크기와, 현재 스크롤을 간단히 비율로 계산하여 Styled의 <code>Props</code>로 넘겨주어 transform하는 방법으로 개발하였습니다.</p>
<p>하지만 위처럼 적용하게 될 시 해당 요소의 Css 클래스를 스크롤 이벤트마다 생성하는 것으로 파악하였습니다. Css 클래스가 계속해서 생성될 시 성능 저하를 일으킬 수 있다 판단하며 Inline style을 적용하는 방법으로 우회하였습니다.</p>
<p>이 때 이슈가 발생하였는데, iOS safari 환경에서 <code>-webkit-transform</code>을 추가적으로 선언하지 않아 동작하지 않는 것을 파악하였지만 어떤 이유에선지 -webkit-transform을 작성하여도 동작하지 않았습니다.</p>
<p>이를 해결하기 위해 position 값이 fixed이기 때문에 reflow 리소스가 크지 않다는 판단하에 직접적으로 width 값을 수정하는 방식으로 수정하였습니다.</p>
<ul>
<li>해당 PR은 <a href="https://github.com/hyesungoh/comet-land/pull/7" target="_blank" rel="noopener noreferer">다음 링크</a>에서 확인하실 수 있습니다.</li>
</ul>
<h2 id="replaceall" class="heading">replaceAll</h2>
<p>겪었던 이슈중에 가장 간단하면서 많은 분들이 모르실 수도 있겠다 생각한 이슈입니다.</p>
<p>Date format을 파싱하는데 있어서 <code>따옴표</code>를 없앴어야 했는데, 이를 단순히 <code>replaceAll</code> 메소드를 사용하여 발생한 이슈였습니다.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/162631694-f1e8898b-fd51-4250-bbcf-660f2411b945.png" alt="replace All error log"></p>
<p>에러는 vercel 빌드 타임에서 발생하였었는데, 로컬에서 빌드할 때는 에러가 없이 원활하여 갈피를 잡기 힘들었습니다.</p>
<p>찾아보니 <code>replcaeAll</code>의 경우 기본적인 자바스크립트에서 제공되고 있지 않아서 발생한 이슈였습니다.</p>
<p>기존에 사용하던 replaceAll의 경우 브라우저 혹은 Node.js 버전에 따라 지원해주었기 때문에 사용 가능한 것이였습니다.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/162631949-71d5d7f6-a633-49a8-b815-304ae3205d60.png" alt="replaceAll compatibility"></p>
<blockquote>
<p>15.0 이상의 Node.js 환경에서는 사용할 수 있으나, vercel의 경우 가장 최신의 환경이 14.x 환경이라 발생한 것이였습니다.</p>
</blockquote>
<p>해결 방법으로는 서버 사이드에서 실행되는 replaceAll의 경우 <code>replace</code>와 <code>regex</code>를 이용해 동일한 처리를 해주어 해결할 수 있었습니다.</p>
<h2 id="scroll-restoration" class="heading">Scroll restoration</h2>
<p>직접 블로그를 사용하는 단계에서 발생한 이슈입니다.</p>
<p>블로그 메인에서 스크롤을 내려 어떤 아티클을 본 후, 뒤로가기 하였을 때 스크롤 복구(Scroll restoration)이 되지 않는 이슈였는데요,</p>
<p>이는 사용성에 있어 굉장한 불편함을 주었으며, <a href="https://baymard.com/blog/return-same-place" target="_blank" rel="noopener noreferer">Baymard의 통계</a>에 따르면 87%의 사용자가 뒤로가기 시에 스크롤이 유지되는 것을 기대한다고 하니 꼭 해결해야 되는 문제라고 판단하였습니다.</p>
<h3 id="nextconfigjs--history">next.config.js + history</h3>
<p>첫 접근은 Next.js의 실험적인 기능을 사용하는 것이였습니다.</p>
<pre class="language-js"><code class="language-js code-highlight"><span class="code-line"><span class="token comment">// next.config.js</span>
</span><span class="code-line">module<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token literal-property property">experimental</span><span class="token operator">:</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token literal-property property">scrollRestoration</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></code></pre>
<p>하지만 이는 실험적인 기능인만큼 동작하지 않았으며, <a href="https://github.com/vercel/next.js/issues/20951" target="_blank" rel="noopener noreferer">해당 Next.js의 이슈</a>에서도 아직 버그로써 다뤄지고 있는 내용입니다.</p>
<p>이에 더해 <a href="https://developer.mozilla.org/ko/docs/Web/API/History/scrollRestoration" target="_blank" rel="noopener noreferer">history의 scrollRestoration</a> 스펙을 직접 사용도 해보았지만 동작하지 않았습니다.</p>
<h3 id="route-as-modal">Route as Modal</h3>
<p>많은 방법을 찾아보던 중 해당 <a href="https://medium.com/wantedjobs/next-js-%EB%AC%B4%ED%95%9C-%EC%8A%A4%ED%81%AC%EB%A1%A4-%EC%9D%B4%EC%8A%88%EC%97%90-route-as-modal-%EC%A0%91%EB%AA%A9%EC%8B%9C%ED%82%A4%EA%B8%B0-bf2951550a73" target="_blank" rel="noopener noreferer">원티드 제품 팀블로그의 아티클</a>을 참고하여 <code>Route as Modal</code> 방법을 알 수 있었습니다.</p>
<p>간단히 설명드리자면 <code>next/link</code>의 <code>as</code>를 이용하여 Url은 페이지의 url을 보여주지만, 내부적으로는 Modal로써 띄워주어 뒤로가기를 하여도 Modal만 내려가는 것이기 때문에 스크롤을 복구하지 않아도 되는 로직입니다.</p>
<p>적용 후 문제는 해결하였지만, 다음 부분에서 제 상황에는 적합한 해결 방법은 아니라고 판단하였습니다.</p>
<ul>
<li>프로젝트 구조에 대한 가독성이 떨어지는 것</li>
<li>SSG 환경이기 때문에 <code>pages/index</code>에서 모든 포스트의 본문까지 <code>getStaticProps</code>로 가져오기 때문에 <code>data can reduce performance alert</code> 발생</li>
<li>window와 Modal 두 스크롤 환경에 <code>Page Progressbar</code> 컴포넌트가 대응해야되는 점입니다.</li>
</ul>
<p>원티드 팀의 환경은 어쨌든 서버에 데이터를 요청해야하는 점과 Route as Modal의 생김새와 직접 방문한 as Url의 모습이 다른 점 등에서 적합한 방법이라고 생각되었지만 제가 놓인 상황에서는 프로젝트 구조에 대한 가독성을 떨어트리는 오버스펙이라고 판단되어 다른 방법을 고민해보았습니다.</p>
<h3 id="scrollto">scrollTo</h3>
<p>많이 돌아온 것같지만, 프로젝트 구조를 동일하게 가져가면서 직접적으로 문제를 해결할 수 있는 방법으로 <strong>스크롤된 위치를 기억하고 돌아왔을 때 내리는 방법</strong>을 적용하였습니다.</p>
<p>블로그 메인과 함께 각 카테고리 페이지들도 스크롤 복구가 되어야하기 때문에, <code>next/router</code>의 <code>routeChangeStart</code> 이벤트<sup><a href="#user-content-fn-3" id="user-content-fnref-3" data-footnote-ref aria-describedby="footnote-label">3</a></sup>시에 <strong>url path를 key 값으로 스크롤 값을 session storage에 저장</strong>하여 관리하였습니다.</p>
<p>그리고 <code>routeChangeComplte</code> 이벤트시에 session storage에 저장된 값만큼 <code>scrollTo</code> 메소드를 사용하여 스크롤하였습니다.</p>
<blockquote>
<p>이 때 setTimeout을 사용하여 비동기적으로 scrollTo를 사용해야되는데, Race condition<sup><a href="#user-content-fn-4" id="user-content-fnref-4" data-footnote-ref aria-describedby="footnote-label">4</a></sup>에 따라 DOM 조작이 block 될 수도 있기 때문입니다.</p>
</blockquote>
<ul>
<li>해당 코드는 <a href="https://github.com/hyesungoh/comet-land/blob/main/apps/blog/src/hooks/useScrollRestoration.ts" target="_blank" rel="noopener noreferer">다음 링크</a>에서 확인할 수 있습니다.</li>
</ul>
<h3 id="scrollto-with-infinite-scroll">scrollTo with Infinite scroll</h3>
<p>위 scrollTo 방법은 Infinite scroll이 갱신되기 전까지 원활히 동작하였습니다. 하지만 추가적인 갱신을 요구하는 영역에 도달하였을 때는 원하는 곳까지 내려가지 못하는 모습을 보였습니다.</p>
<p>이 이슈도 위 스크롤 위치를 기억하는 것과 동일하게 <code>next/router</code> 이벤트시에 얼마나 Infinite scroll이 갱신되었는지 저장하고, 돌아왔을 때 스크롤에 필요한 갱신 값만큼 초기 크기를 지정하여 원활히 스크롤될 수 있도록 수정하여 해결하였습니다.</p>
<ul>
<li>해당 코드는 <a href="https://github.com/hyesungoh/comet-land/blob/main/apps/blog/src/hooks/useInfiniteScroll.ts" target="_blank" rel="noopener noreferer">다음 링크</a>에서 확인할 수 있습니다.</li>
</ul>
<h2 id="앞으로" class="heading">앞으로</h2>
<p>기본적으로 생각했었던 기능들은 전부 개발하여, 자잘한 버그 혹은 기능들을 수정하고 테스트 커버리지를 높혀가는 식으로 운영할 계획입니다.</p>
<p>테스트 커버리지가 어느정도 올라간다면 메이저 기능이라고 할 수 있는 것들도 과하지 않는 선에서 추가하여 더욱 많은 환경에 대처할 수 있는 블로그 템플릿이 되길 바라고 있습니다.</p>
<p>생각하고 있는 기능으론 '시리즈', '이전, 다음 포스트', '태그' 정도가 있는데 이를 어떻게 과하지 않고 깔끔하게 적용할 수 있을지 고민을 더욱 해봐야될 것 같습니다.</p>
<h2 id="마치며" class="heading">마치며</h2>
<p>이슈들을 단순히 나열하는 형태로 작성하여 읽으시는데 불편함이 있진 않으셨을까 걱정됩니다.</p>
<p>앞으로 기능과 테스트 코드등을 추가하며 발생할 이슈들도 있겠지만, 해당 이슈들은 Github wiki를 통해 관리할 생각입니다. 아직 많이 부족한 프로젝트이지만, 생각보다 많은 분들이 그것도 해외에서도 관심을 주시고 있어 같이 공유함에 있어서 Github wiki가 접근하기 쉬울 것이라 생각되기 때문입니다.</p>
<p>여기까지 긴 글 읽어주셔서 감사드리고 블로그 혹은 이력서 템플릿에 관심이 가셨다면 아래 링크 방문을 부탁드리겠습니다.</p>
<p>감사합니다.</p>
<ul>
<li><a href="https://github.com/hyesungoh/comet-land" target="_blank" rel="noopener noreferer">Comet-land github</a></li>
<li><a href="https://comet-land-blog.vercel.app/" target="_blank" rel="noopener noreferer">Blog demo</a></li>
<li><a href="https://comet-land-resume.vercel.app/" target="_blank" rel="noopener noreferer">Resume demo</a></li>
</ul>
<section data-footnotes class="footnotes"><h2 id="footnote-label" class="sr-only heading">Footnotes</h2>
<ol>
<li id="user-content-fn-1">
<p>remark-prism을 <a href="https://github.com/hyesungoh/remark-prism" target="_blank" rel="noopener noreferer">커스텀한 Github repo</a> <a href="#user-content-fnref-1" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
<li id="user-content-fn-2">
<p><a href="https://bundlephobia.com/package/remark-prism@1.3.6" target="_blank" rel="noopener noreferer">remark-prism의 bundle 사이즈</a>는 3.9mb이며, gzip 압축 후에도 1mb에 가깝습니다. <a href="#user-content-fnref-2" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
<li id="user-content-fn-3">
<p><a href="https://nextjs.org/docs/api-reference/next/router#routerevents" target="_blank" rel="noopener noreferer">next/router event</a> <a href="#user-content-fnref-3" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
<li id="user-content-fn-4">
<p><a href="https://ko.wikipedia.org/wiki/%EA%B2%BD%EC%9F%81_%EC%83%81%ED%83%9C" target="_blank" rel="noopener noreferer">Race condition 위키</a> <a href="#user-content-fnref-4" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
</ol>
</section>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[Comet-land] 1. 왜 그리고 어떻게 만들까]]></title>
    <link>https://www.hyesungoh.xyz/comet-land-1-development-log</link>
    <pubDate>2022-04-10</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/comet-land-1-development-log</guid>
    <description>
    <![CDATA[왜 개발하게 되었으며 어떻게 개발할지에 대한 고민과 결과를 공유합니다.]]>
    </description>
    <content:encoded>
      <![CDATA[<p><img src="https://user-images.githubusercontent.com/26461307/159371599-95b2acd5-e5eb-482c-9ead-d8f601f034b5.png" alt="comet-land-blog"></p>
<p>블로그와 이력서를 같은 스타일로 사용할 수 있는, 오픈소스 프로젝트 <a href="https://github.com/hyesungoh/comet-land" target="_blank" rel="noopener noreferer">Comet-land</a>를 개발하였습니다.</p>
<p>왜, 어떻게 개발하였는 지 공유하여 앞으로 본인만의 블로그 혹은 이력서를 만드시는 분들에게 도움이 되고자 회고를 기록합니다.</p>
<h2 id="왜-개발하게-되었나" class="heading">왜 개발하게 되었나?</h2>
<p>물론 기존의 블로그도 잘 사용하고 있었습니다.</p>
<blockquote>
<p>제가 필요하다 생각한 기능은 원본 프로젝트에 기여도 해보고, 적절히 커스텀해서 사용하고 있었습니다.</p>
</blockquote>
<p>하지만 전체적으로 다른 스타일의 블로그가 되었으면 좋겠다는 마음과 함께, 취직을 준비함에 앞서 노션과 달리 블로그와 동일한 스타일의 이력서가 있으면 좋을 것 같다고 생각하였습니다.</p>
<p>두 가지 어플리케이션을 공통되는 스타일로 개발하는 문제에 사용해보고 싶었던 Monorepo 기술도 적절한 도구라고 판단되어 새로운 경험을 쌓을 수 있을 것이라 판단되어 저만의 템플릿을 개발하기로 마음 먹었습니다.</p>
<h3 id="오픈소스화">오픈소스화</h3>
<p>기존에 사용했던 블로그 템플릿처럼, 제가 개발한 템플릿 또한 많은 분들께서 사용하고, 새로운 기능을 추가하고, 부족한 부분을 수정하는 등 오픈소스화되었으면 좋겠다 생각하였습니다.</p>
<blockquote>
<p>간단하지만 오픈소스에 기여했던 경험들이 오픈소스에 대한 동경심이 되었던 것 같습니다.</p>
</blockquote>
<p>그렇기 때문에 다른 분들, 즉 사용자가 운영 관리하기 편한 것을 또 하나의 목표로 삼아 개발에 임하였습니다.</p>
<h2 id="어떤-도구를-이용할까" class="heading">어떤 도구를 이용할까?</h2>
<p>개발을 시작하기전에 프로젝트의 스펙을 정하는 데 가장 고민되는 것은 아래 두 사항이였습니다.</p>
<ol>
<li><code>Next.js</code> vs <code>Gatsby</code></li>
<li><code>Turborepo</code> vs <code>Lerna</code></li>
</ol>
<h3 id="nextjs-vs-gatsby">Next.js vs Gatsby</h3>
<p>두 프레임워크를 선정한 이유는 SEO와 사용 간편함을 보장하기 위해 마크다운을 이용해 SSG가 되어야하는 점과 러닝커브와 제가 더욱 배우고싶은 분야인 이유로 React 기반인 것입니다.</p>
<p>결론부터 말씀드리자면 <code>Next.js</code>를 사용하였습니다.</p>
<p>Gatsby의 경우 기존 사용하던 블로그가 Gatsby를 이용해 개발되어 있어 Migrate하기 쉽다는 장점이 있었지만 기술에 대한 투자 대비 효율이 Next.js보다 낮다고 판단하였습니다. 제가 앞으로 커리어를 쌓는데에 있어서 Gatsby에 대한 경험보다 Next.js에 대한 경험이 효용성이 높다고 판단하였기 때문입니다.</p>
<p>추가적으로 두 도구를 비교하면서 많은 블로그 아티클들을 참고하였는데, 제가 기존에 Gatsby 블로그에 대해 불편함으로 인식하고 있었던 빌드 시간 외에 다른 단점들을 알 수 있었습니다.</p>
<p>물론 제가 직접 체감하진 않았지만 확인했던 단점은 다음과 같습니다.</p>
<ul>
<li>정적 사이트를 만들 뿐인데 GraphQl은 너무 무겁다</li>
<li>Gatsby-plugin에 의존적이다</li>
<li>Gatsby 내부의 GraphQl, Webpack 등으로 인해 추상화되어 있어 디버깅이 어렵다</li>
<li>빌드 시간</li>
</ul>
<p><i> <a href="https://yceffort.kr/2020/10/migrate-gatsby-from-nextjs" target="_blank" rel="noopener noreferer">yceffort님 블로그 발췌</a> </i></p>
<p>위 Gatsby의 단점들과 함께 Next.js를 선택했던 이유들을 정리해보자면 다음과 같습니다.</p>
<ul>
<li>투자 대비 효율이 높다</li>
<li>사용해본 경험이 있어 러닝커브가 낮다</li>
<li>Gatsby 대비 사용자가 많아 사용자가 커스터마이징하기 더욱 용이할 것이라고 판단 <sup><a href="#user-content-fn-1" id="user-content-fnref-1" data-footnote-ref aria-describedby="footnote-label">1</a></sup></li>
<li>현재 프로젝트 스펙에 통일감을 준다 (vercel)</li>
<li>Nextra와 같은 도구를 사용할 수도 있었다 (결국 사용하진 않았지만)</li>
</ul>
<p>현재 되돌아보면 <code>Next.js</code>로 개발하기 잘했다는 생각을 하고 있습니다.</p>
<p>Gatsby의 좋은 plugin들 대신 scroll restoration, static file generator 등을 직접 개발해보면서 많은 것을 배웠다고 생각하기 때문입니다.</p>
<p>더불어 기존 블로그 1개를 빌드하는 시간보다 블로그, 이력서 두 어플리케이션을 빌드하는 시간이 빨라져 마음의 안정을 찾을 수 있었습니다.</p>
<h3 id="turborepo-vs-lerna">Turborepo vs Lerna</h3>
<p>두 가지 어플리케이션을 같은 스타일로써 개발함에 있어 공통되는 configuration 파일들이나, 컴포넌트가 많을 것이라 판단하였습니다. 그렇기 때문에 Monorepo를 사용하는 것이 DRY하게 프로젝트를 운영, 개발하는 방법이라고 판단되어 도입하기로 하였고 후보는 보셨던 것과 같이 Truborepo와 Lerna로 추렸습니다.</p>
<blockquote>
<p>Monorepo에 대해 서칭하다 Yarn-berry의 workspace를 이용해 monorepo를 구성할 수 있는 것을 알게 되었습니다. 하지만 의존성이 많지는 않다고 판단해 yarn-berry를 도입하는 것은 오히려 러닝커브를 높힐 수 있으며 오버스펙이 될 것이라는 판단에 후보에 넣지 않았습니다. 관련 링크는 토스 기술 블로그<sup><a href="#user-content-fn-2" id="user-content-fnref-2" data-footnote-ref aria-describedby="footnote-label">2</a></sup>와 kimik님의 아티클<sup><a href="#user-content-fn-3" id="user-content-fnref-3" data-footnote-ref aria-describedby="footnote-label">3</a></sup> 참고하시면 좋을 것 같습니다.</p>
</blockquote>
<p>Monorepo 기술은 사용해본 적이 없지만 서칭을 통해 다음과 같은 장점들을 기록할 수 있었습니다.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/162615844-24d2aa74-766f-458c-a13e-0e629580d2ec.png" alt="monorepo compare"></p>
<p><em>모든 기술 스택을 정함에 있어 노션에 간단히 정리하였습니다</em></p>
<p>물론 Turborepo의 장점들이 체감되진 않았지만 Lerna 대비 빌드 시간을 줄일 수 있는 것은 알 수 있었으며, 공식 문서가 Lerna에 비해 보기 좋게 되어있었으며 깔끔한 Youtube 가이드 영상을 찾을 수 있어서 러닝커브가 더욱 낮을 것이라 판단함에 더해 Vercel 생태계를 좋아하는 개인적인 취향이 더해져 <code>Turborepo</code>를 사용하기로 판단하였습니다.</p>
<p>Turborepo의 장점과, Pipeline에 대한 설명은 다음 링크를 읽어보시면 좋을 것 같습니다.</p>
<ul>
<li><a href="https://turborepo.org/docs#why-turborepo" target="_blank" rel="noopener noreferer">Why turborepo</a></li>
<li><a href="https://turborepo.org/docs/features/pipelines" target="_blank" rel="noopener noreferer">Pipelining package tasks</a></li>
</ul>
<p>도입 후에 되돌아보자면, 상당히 만족스러운 개발자 경험이였습니다.</p>
<pre class="language-bash"><code class="language-bash code-highlight"><span class="code-line">├── apps
</span><span class="code-line">│   ├── blog
</span><span class="code-line">│   └── resume
</span><span class="code-line">└── packages
</span><span class="code-line">    ├── config
</span><span class="code-line">    ├── core
</span><span class="code-line">    └── tsconfig
</span></code></pre>
<p><code>blog</code>와 <code>resume</code> 어플리케이션에서 공용으로 사용하는 컴포넌트는 <code>core</code>에 위치하게 개발하였고 lint, jest 그리고 tsconfig와 같은 설정 파일들은 <code>config</code>, <code>tsconfig</code>에 작성하여 DRY하게 사용할 수 있었습니다.</p>
<p>이에 더해 이쁜 cli부터 직관적이고 어렵지 않은 구조, Vercel을 이용한 간단한 배포, 거기에 닉값하는 빠릿빠릿한 커맨드 처리 시간까지 전체적으로 만족스러운 경험이였다고 말씀드릴 수 있을 것 같습니다.</p>
<p>물론 다른 Monorepo 기술을 사용해보지 않아 객관적인 판단은 어렵겠지만, 다음에도 Monorepo를 사용해야 될 환경이 주어진다면 Turborepo를 강력히 추천해보고 싶을 정도의 경험이였습니다.</p>
<h3 id="markdown-compile">Markdown compile</h3>
<p>마크다운을 컴파일하는 것 또한 경험이 없어 Next.js의 예제와 많은 블로그들의 코드를 뜯어보며 일반적으로 <code>unified</code>, <code>remark</code> 그리고 <code>rehype</code>을 사용하는 것으로 파악하였습니다.</p>
<p>마크다운 컴파일 라이브러리를 선택함에 있어서 가장 우선이 되는 사항은 <strong>code section에서 강조하는 줄 기능</strong>입니다.</p>
<pre class="language-js"><code class="language-js code-highlight"><span class="code-line"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line highlight-line"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<p>바로 위 코드의 2번째 줄에 적용된 기능입니다.</p>
<p>블로그를 운영하며 독자의 이해를 위해 코드를 작성해야되는 경험은 수도 없이 많은데, 이 때 효과적으로 중요한 줄을 알려줄 수 있으면 독자가 이해하기 더욱 쉬울 것이라 생각했기 때문에 <strong>꼭 필요한 기능</strong>으로 정의하였습니다.</p>
<blockquote>
<p>이번 포스트는 어떻게를 다루는 글이니 만큼, 이를 적용하며 겪었던 일들은 다음 포스트에서 더욱 자세히 다뤄보겠습니다.</p>
</blockquote>
<p>결론적으로는 <code>unified</code>를 사용해 텍스트의 범용 처리를, <code>remarkParse</code>를 통해 마크다운으로, <code>remarkRehype</code>를 이용해 HTML로, 마지막으로 <code>rehypeStringify</code>를 사용해 문자열로 컴파일하였습니다.</p>
<p>이 외에 다양한 마크다운 문법을 지원하기 위해 사용한 라이브러리들은 <a href="https://github.com/hyesungoh/comet-land/blob/main/apps/blog/src/libs/markdownToHtml/markdownToHtml.ts" target="_blank" rel="noopener noreferer">다음 파일</a>에서 확인하실 수 있습니다.</p>
<h2 id="어떤-모습으로-보이면-좋을까" class="heading">어떤 모습으로 보이면 좋을까?</h2>
<p>가장 먼저 추구했던 가치는 깔끔함을 기반으로 한 <strong>덜어냄의 미학</strong>입니다.</p>
<p>제가 기존 블로그에 추가되었으면 했던 기능들을 구현하면서 적절히 덜어내어 깔끔하고 직관적이게 보여지길 바랬습니다.</p>
<p>수 많은 블로그와 이력서를 참고하면서 가장 영감이 되었던 프로젝트들은 다음과 같습니다.</p>
<ul>
<li><a href="https://overreacted.io/" target="_blank" rel="noopener noreferer">Overreacted</a></li>
<li><a href="https://hyunseob.github.io/resume/" target="_blank" rel="noopener noreferer">hyunseob.github.io/resume</a></li>
<li><a href="https://gatsby-starter-bee.netlify.app/" target="_blank" rel="noopener noreferer">gatsby-starter-bee</a></li>
<li><a href="https://yceffort.kr/" target="_blank" rel="noopener noreferer">Yceffort</a></li>
<li><a href="https://vallista.kr/" target="_blank" rel="noopener noreferer">vallista-land</a></li>
</ul>
<p>이 중 기존에 사용했던 블로그 템플릿인 <code>gatsby-starter-bee</code>를 제외하고 디자인적으로 가장 많은 영감을 받은 것은 dan의 <code>Overreacted</code>와 이현섭님의 프로젝트입니다.</p>
<p><code>Yceffort</code>님과 <code>Vallista</code>님의 프로젝트에서는 개발적인 관점에 많은 영감을 받았습니다.</p>
<blockquote>
<p>콜드 메일을 보내기에는 많이 쑥스러워 블로그 포스트를 빌어 감사를 전합니다.</p>
</blockquote>
<p>덜어냄의 미학을 유지하면서 다양한 기능을 사용하기 위해 사용한 도구들은 다음과 같습니다.</p>
<h3 id="nextui"><a href="https://nextui.org/" target="_blank" rel="noopener noreferer">NextUI</a></h3>
<p>블로그를 만들고 싶었던 이유가 되는 라이브러리 중 하나입니다.</p>
<p>Next.js 디자인 시스템을 따르고, <a href="https://react-spectrum.adobe.com/react-aria/index.html" target="_blank" rel="noopener noreferer">React Aria</a> 기반 <a href="https://vuesax.com/" target="_blank" rel="noopener noreferer">Vuesax</a>에서 영감을 얻은 UI 라이브러리로써, 제가 추구하던 <strong>덜어냄의 미학</strong>을 가장 이쁘게 표현할 수 있을 것 같은 UI 라이브러리였습니다.</p>
<p>물론 모든 스타일링을 제가 할 수도 있었겠지만, 가장 빠르고 이쁘게 할 수 있는 방법은 UI 라이브러리를 사용하는 것이라 판단되어 사용하였습니다.</p>
<h3 id="kbar"><a href="https://kbar.vercel.app/" target="_blank" rel="noopener noreferer">KBar</a></h3>
<p>위 NextUI와 더불어 블로그를 만들고 싶었던 이유가 되는 라이브러리 중 하나입니다.</p>
<p><code>Cmd + k</code> 입력으로 간단히 메뉴를 토글할 수 있고, 여러 서비스에서 사용하는 모습을 통해 제가 느낀 사용자 경험이 매우 좋았어서 항상 도입해보고 싶었던 라이브러리입니다.</p>
<p>블로그의 카테고리 이동, 검색과 이력서의 연락처 확인을 위해 사용하였으며 이를 통해 화면을 더욱 깔끔히 유지할 수 있어서 제가 지키고자 했던 <strong>덜어냄의 미학</strong>을 지킬 수 있었다고 생각합니다.</p>
<h3 id="emotion">Emotion</h3>
<p>Css-in-JS 도구로 <code>Emotion</code>을 사용하였습니다. 기존의 목표는 Emotion의 <code>css</code>만을 인라인으로 사용하는 것이였으나, NextUI가 <code>Stitches</code> 기반으로 되어있어 충돌이 일어나는 모습을 확인하였습니다.</p>
<p>이 때문에 <code>emotion/styled</code>를 이용해 wrapping하여 사용했는데, 사용자가 커스텀함에 있어서 더욱 많은 사용자를 가지고 있는 Emotion이 이점이 있을 것이라고 생각하였기 때문입니다.</p>
<blockquote>
<p>하지만 지금 돌이켜 생각해보니 어차피 비슷한 css 문법을 사용하는데 이것이 사용자가 편하게 느낄 지점인가 생각이 됩니다. 번들링 사이즈를 줄이기 위해서 stitches로 migrate하는 것 또한 방법이 될 수 있을 것 같습니다.</p>
</blockquote>
<h2 id="이력서" class="heading">이력서</h2>
<p>블로그는 대부분의 개발자분들이 마크다운을 사용해 관리하는 것으로 알고 있어 어렵지 않게 방향을 정해 개발할 수 있었지만</p>
<p>이력서의 경우 노션, 워드 등 사용하시는 도구들이 따로 존재하는 경우가 있는 것으로 파악해 이와 대비해 어떻게하면 Comet-land의 이력서가 이점을 가지고 유연하게 대응할 수 있을까를 중점적으로 고민하였습니다.</p>
<p>마크다운을 이용해 관리하자니 구조적으로 작성하고 사용하기에 불편할 것이라고 판단하여 내린 결론은 <code>json</code>을 이용해 관리하는 방법입니다.</p>
<p>Comet-land의 사용자중 거의 전부는 개발자일 것이라고 판단함과 동시에 어느 분야든 익숙하게 다룰 수 있는 형식은 마크다운 그리고 json이라고 판단하였습니다. 동시에 데이터 오브젝트를 전달하기 위해 개발된 것이기 때문에 가장 적합한 방식으로 판단하였습니다.</p>
<p>이에 더해 각 section 별로 directory를 나눠 사용자가 파악하기 쉽도록 하였으며,</p>
<p><img src="https://user-images.githubusercontent.com/26461307/162624018-d3ea011a-b555-4f56-9390-504a615e2ed5.png" alt="resume interative point"></p>
<p>Github와 일반 링크를 Tooltip으로 나눠 보여주고 Work experience section에서 요소를 Sticky하게 보여주어 읽는 사람으로 하여금 가독성을 보장하면서 과하지 않게 동적으로 보여줄 수 있도록 노력하였습니다.</p>
<h2 id="지속적-통합" class="heading">지속적 통합</h2>
<p>위에도 기술하였듯이 Comet-land는 오픈소스 프로젝트로써 많은 사람들이 사용하고 개선해나갔으면 하는 바램이 있었습니다.</p>
<p>제가 많지는 않지만 기여했던 오픈소스 라이브러리에서는 굉장히 많은 CI 도구들을 이용해 많은 것을 자동화하고 있는 것을 확인하였고 Comet-land 또한 많은 것을 자동화하면 좋겠다고 생각하였습니다.</p>
<blockquote>
<p>이전에도 자동화에 관심이 많았기도 하였으며 PR시 많은 bot들이 댓글을 남겨주는 것이 상당히 멋있어 보였습니다.</p>
</blockquote>
<p>이에 더해 Unit, E2E 테스트까지 작성하여 더욱 안정화된 프로젝트가 됨과 동시에 제가 기존 부족했던 테스트 코드에 대한 부분까지 채울 수 있을 것이라 생각해 CI에서 자동화한 것은 다음과 같습니다.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/162624574-7329a7f5-de9c-4f08-9916-c5e106870d68.gif" alt="CI in comet land"></p>
<p><em><a href="https://github.com/hyesungoh/comet-land/pull/29" target="_blank" rel="noopener noreferer">해당 PR</a></em></p>
<ul>
<li>Lint 확인</li>
<li>Unit test 확인 (Jest)</li>
<li>Codecov 실행 + 댓글</li>
<li>E2E test 확인 (Cypress)</li>
<li>Cypress record + 댓글</li>
<li>LGTM bot (코드리뷰)</li>
<li>Vercel preview</li>
</ul>
<p>아직 테스트 케이스가 많이 부족해 효과가 있진 않지만 커버리지 99%를 목표로 작성하여 프로젝트 안정화와 동시에 개인적으로 테스트 코드에 익숙해지는 것을 바라고 있습니다.</p>
<h2 id="마치며" class="heading">마치며</h2>
<p>제가 직접 사용할 것이기 때문에 조금 더 심혈을 기울여 개발하게 되었던 것 같습니다. 이처럼 Dog-foodin한 서비스를 개발할 때 더욱 재미를 느끼는 제 모습을 알 수 있었던 프로젝트였습니다.</p>
<p>거기에 더해 새로 시도했던 것이 많은만큼 배우고 겪은 것이 많았었다고 말씀드릴 수 있을 것 같습니다.</p>
<p>겪었던 이슈들은 다음 블로그 글에서 다룰 예정이며, Comet-land에 대해 궁금하신 분들은 아래 링크 참고해주시면 감사드릴 것 같습니다.</p>
<p>긴 글 읽어주셔서 감사합니다.</p>
<ul>
<li><a href="https://github.com/hyesungoh/comet-land" target="_blank" rel="noopener noreferer">Comet-land github</a></li>
<li><a href="https://comet-land-blog.vercel.app/" target="_blank" rel="noopener noreferer">Blog demo</a></li>
<li><a href="https://comet-land-resume.vercel.app/" target="_blank" rel="noopener noreferer">Resume demo</a></li>
</ul>
<section data-footnotes class="footnotes"><h2 id="footnote-label" class="sr-only heading">Footnotes</h2>
<ol>
<li id="user-content-fn-1">
<p>22년 4월 기준 Next는 250만 다운로드, Gatsby는 42만 다운로드수를 가지고 있다. <a href="https://www.npmtrends.com/gatsby-vs-next" target="_blank" rel="noopener noreferer">참고 링크</a> <a href="#user-content-fnref-1" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
<li id="user-content-fn-2">
<p><a href="https://toss.tech/article/node-modules-and-yarn-berry" target="_blank" rel="noopener noreferer">node_modules로부터 우리를 구원해 줄 yarn berry</a> <a href="#user-content-fnref-2" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
<li id="user-content-fn-3">
<p><a href="https://minify.tistory.com/40" target="_blank" rel="noopener noreferer">yarn berry로 monorepo 구성하기</a> <a href="#user-content-fnref-3" data-footnote-backref class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
</ol>
</section>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[Comet-land] 0. Intro]]></title>
    <link>https://www.hyesungoh.xyz/comet-land-0-intro</link>
    <pubDate>2022-04-09</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/comet-land-0-intro</guid>
    <description>
    <![CDATA[블로그와 이력서 템플릿 개발기를 공유합니다.]]>
    </description>
    <content:encoded>
      <![CDATA[<p><img src="https://user-images.githubusercontent.com/26461307/159371599-95b2acd5-e5eb-482c-9ead-d8f601f034b5.png" alt="comet-land-blog"></p>
<p>블로그와 이력서를 같은 스타일로 사용할 수 있는, 오픈소스 프로젝트 <a href="https://github.com/hyesungoh/comet-land" target="_blank" rel="noopener noreferer">Comet-land</a>를 개발하였습니다.</p>
<p>Comet-land를 왜 만들게 되었는지부터 어떤 도구를 사용하게 되었는지, 어떤 이슈를 겪었는 지 공유하여 앞으로 본인만의 블로그 혹은 이력서를 만드시는 분들에게 도움이 되고자 회고를 기록합니다.</p>
<h2 id="1-왜-그리고-어떻게-만들까" class="heading">1. <a href="https://www.hyesungoh.xyz/comet-land-1-development-log" target="_blank" rel="noopener noreferer">왜 그리고 어떻게 만들까</a></h2>
<p>왜 개발하게 되었으며 어떻게 개발할지에 대한 고민과 결과를 공유합니다.</p>
<h2 id="2-겪었던-이슈들과-앞으로" class="heading">2. <a href="https://www.hyesungoh.xyz/comet-land-2-issue" target="_blank" rel="noopener noreferer">겪었던 이슈들과 앞으로</a></h2>
<p>프로젝트를 개발하며 겪었던 이슈와 앞으로의 방향 공유하고 회고를 마칩니다.</p>
<h3 id="링크들">링크들</h3>
<ul>
<li><a href="https://github.com/hyesungoh/comet-land" target="_blank" rel="noopener noreferer">Comet-land github</a></li>
<li><a href="https://comet-land-blog.vercel.app/" target="_blank" rel="noopener noreferer">Blog demo</a></li>
<li><a href="https://comet-land-resume.vercel.app/" target="_blank" rel="noopener noreferer">Resume demo</a></li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[TypeScript, 항상 같은 길이인 두 배열 Type 정의하기]]></title>
    <link>https://www.hyesungoh.xyz/typescript-same-length-array-types</link>
    <pubDate>2022-03-09</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/typescript-same-length-array-types</guid>
    <description>
    <![CDATA[Custom hook에서 항상 같은 길이인 두 배열을 받았어야하는 상황을 공유합니다.]]>
    </description>
    <content:encoded>
      <![CDATA[<p><img src="https://user-images.githubusercontent.com/26461307/157260791-b53f48fe-f971-45b0-825c-f04df3bf6c33.png" alt="typescript logo"></p>
<p>TypeScript 환경에서 같은 길이의 배열을 사용해야했던 환경에서, TypeSafe하게 작성하고자 공부한 내용을 공유해보겠습니다.</p>
<h2 id="주어진-상황" class="heading">주어진 상황</h2>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">{</span>
</span><span class="code-line">  aArray<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">  bArray<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">function</span> <span class="token function">useFoo</span><span class="token punctuation">(</span><span class="token punctuation">{</span> aArray<span class="token punctuation">,</span> bArray <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token maybe-class-name">Props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>aArray<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">===</span> bArray<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token comment">// 무조건 같아야하는 상황 !!</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>TypeScript 기반 React 환경에서 custom hook을 개발할 때 맞이한 상황이였습니다.</p>
<p>위 코드와 같이 두 배열을 입력받아야했으며, <strong>항상 두 배열의 길이가 같아야했죠.</strong></p>
<p>길이가 정해져있었다면 Tuple type으로써 간단히 작성할 수 있었겠지만, 정해진 배열의 길이가 없다는 점이 문제였습니다.</p>
<blockquote>
<p>예를 들어 aArray의 길이가 3, bArray의 길이가 2일 때, 런타임 환경 에러가 아닌 개발 환경에서 에러를 띄워야 했습니다.</p>
</blockquote>
<h2 id="해결-과정" class="heading">해결 과정</h2>
<h3 id="아이디어의-출처">아이디어의 출처</h3>
<p>동일한 길이의 배열을 사용하는 custom hook의 경우 framer-motion의 useTransform에서 아이디어를 얻었기 때문에 해당 라이브러리 코드를 최대한 참고하였습니다.</p>
<ul>
<li><a href="https://github.com/framer/motion" target="_blank" rel="noopener noreferer">framer/motion github</a></li>
</ul>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token comment">// framer/motion/packages/framer-motion/src/value/use-transform.ts 발췌</span>
</span><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">InputRange</span> <span class="token operator">=</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">type</span> <span class="token class-name">SingleTransformer<span class="token operator">&#x3C;</span><span class="token constant">I</span><span class="token punctuation">,</span> <span class="token constant">O</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token constant">I</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token constant">O</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">type</span> <span class="token class-name">MultiTransformer<span class="token operator">&#x3C;</span><span class="token constant">I</span><span class="token punctuation">,</span> <span class="token constant">O</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token constant">I</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token constant">O</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// ... 중략</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useTransform</span><span class="token generic class-name"><span class="token operator">&#x3C;</span><span class="token constant">I</span><span class="token punctuation">,</span> <span class="token constant">O</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>
</span><span class="code-line">  value<span class="token operator">:</span> <span class="token maybe-class-name">MotionValue</span><span class="token operator">&#x3C;</span><span class="token builtin">number</span><span class="token operator">></span><span class="token punctuation">,</span>
</span><span class="code-line">  inputRange<span class="token operator">:</span> <span class="token maybe-class-name">InputRange</span><span class="token punctuation">,</span>
</span><span class="code-line">  outputRange<span class="token operator">:</span> <span class="token constant">O</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">  options<span class="token operator">?</span><span class="token operator">:</span> <span class="token maybe-class-name">TransformOptions</span><span class="token operator">&#x3C;</span><span class="token constant">O</span><span class="token operator">></span>
</span><span class="code-line"><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token maybe-class-name">MotionValue</span><span class="token operator">&#x3C;</span><span class="token constant">O</span><span class="token operator">></span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useTransform</span><span class="token generic class-name"><span class="token operator">&#x3C;</span><span class="token constant">I</span><span class="token punctuation">,</span> <span class="token constant">O</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>
</span><span class="code-line">  input<span class="token operator">:</span> <span class="token maybe-class-name">MotionValue</span><span class="token operator">&#x3C;</span><span class="token constant">I</span><span class="token operator">></span><span class="token punctuation">,</span>
</span><span class="code-line">  transformer<span class="token operator">:</span> <span class="token maybe-class-name">SingleTransformer</span><span class="token operator">&#x3C;</span><span class="token constant">I</span><span class="token punctuation">,</span> <span class="token constant">O</span><span class="token operator">></span>
</span><span class="code-line"><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token maybe-class-name">MotionValue</span><span class="token operator">&#x3C;</span><span class="token constant">O</span><span class="token operator">></span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useTransform</span><span class="token generic class-name"><span class="token operator">&#x3C;</span><span class="token constant">I</span><span class="token punctuation">,</span> <span class="token constant">O</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>
</span><span class="code-line">  input<span class="token operator">:</span>
</span><span class="code-line">    <span class="token operator">|</span> <span class="token maybe-class-name">MotionValue</span><span class="token operator">&#x3C;</span><span class="token constant">I</span><span class="token operator">></span>
</span><span class="code-line">    <span class="token operator">|</span> <span class="token maybe-class-name">MotionValue</span><span class="token operator">&#x3C;</span><span class="token builtin">string</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token operator">|</span> <span class="token maybe-class-name">MotionValue</span><span class="token operator">&#x3C;</span><span class="token builtin">number</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token operator">|</span> <span class="token maybe-class-name">MotionValue</span><span class="token operator">&#x3C;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">  inputRangeOrTransformer<span class="token operator">:</span> <span class="token maybe-class-name">InputRange</span> <span class="token operator">|</span> <span class="token maybe-class-name">Transformer</span><span class="token operator">&#x3C;</span><span class="token constant">I</span><span class="token punctuation">,</span> <span class="token constant">O</span><span class="token operator">></span><span class="token punctuation">,</span>
</span><span class="code-line">  outputRange<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">O</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">  options<span class="token operator">?</span><span class="token operator">:</span> <span class="token maybe-class-name">TransformOptions</span><span class="token operator">&#x3C;</span><span class="token constant">O</span><span class="token operator">></span>
</span><span class="code-line"><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token maybe-class-name">MotionValue</span><span class="token operator">&#x3C;</span><span class="token constant">O</span><span class="token operator">></span><span class="token punctuation">;</span>
</span></code></pre>
<p>제가 미쳐 파악하지 못한 부분이 있을 수도 있었지만, 기본적으로 custom hook을 overload하여 선언하고 있었습니다.</p>
<p>일단 제 상황에서는 overload를 통해 custom hook을 선언하는 것은 비생산적인 해결방법이라고 판단하였으며, 같은 길이를 보장하는 코드는 찾지 못하였습니다. <em>물론 제 이해력이 부족해서 이해하지 못하는 것일 수도 있습니다.</em></p>
<p>결론을 말씀드리자면, 아이디어의 출처인 framer-motion에서는 해결 방법을 찾지 못하였고, 더욱 자세히 보고싶으신 분들은 <a href="https://github.com/framer/motion/blob/main/packages/framer-motion/src/value/use-transform.ts" target="_blank" rel="noopener noreferer">발췌 링크</a>를 확인해보시면 좋을 것 같습니다.</p>
<h3 id="도와줘-stackoverflow-">도와줘 Stackoverflow !</h3>
<p>결국 해결 방법을 떠올리지 못하고, Stackoverflow에 질문 글을 올리게 되었고 답변을 달아주신 고마운 분 덕분에 해결할 수 있게 되었습니다.</p>
<p>적용 방법은 다음과 같습니다.</p>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token comment">// Custom Hook</span>
</span><span class="code-line"><span class="token keyword">interface</span> <span class="token class-name">Props<span class="token operator">&#x3C;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span> <span class="token punctuation">{</span>
</span><span class="code-line">  aArray<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token spread operator">...</span><span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">  bArray<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token spread operator">...</span><span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">I</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useFoo</span><span class="token generic class-name"><span class="token operator">&#x3C;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> aArray<span class="token punctuation">,</span> bArray <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token maybe-class-name">Props</span><span class="token operator">&#x3C;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// Component</span>
</span><span class="code-line"><span class="token keyword">function</span> <span class="token function">SomeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token comment">// 👍 Success</span>
</span><span class="code-line">  <span class="token function">useFoo</span><span class="token punctuation">(</span><span class="token punctuation">{</span> aArray<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bArray<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token comment">// 💩 Error with</span>
</span><span class="code-line">  <span class="token comment">// Type '[number, number]' is not assignable to type '[number, number, number]'.</span>
</span><span class="code-line">  <span class="token comment">// Source has 2 element(s) but target requires 3.</span>
</span><span class="code-line">  <span class="token function">useFoo</span><span class="token punctuation">(</span><span class="token punctuation">{</span> aArray<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bArray<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>답변을 달아주신 분께서 사용한 개념들에 대해 정성스럽게 작성해주셔서 정리 및 공유해보겠습니다.</p>
<h3 id="tuple">Tuple</h3>
<p>가장 먼저 알아야할 개념은 <code>tuple</code>입니다.</p>
<p>튜플은 간단히 설명드리자면, 포함된 요소의 수와 위치의 type을 정확히 알고 있는 다른 종류의 Array입니다.</p>
<blockquote>
<p>A tuple type is another sort of Array type that knows exactly how many elements it contains, and exactly which types it contains at specific positions. <a href="https://www.typescriptlang.org/docs/handbook/2/objects.html#tuple-types" target="_blank" rel="noopener noreferer">typescriptlang.org 발췌</a></p>
</blockquote>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">type</span> <span class="token class-name">FirstTuple</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// 💩 Error</span>
</span><span class="code-line"><span class="token keyword">const</span> barArray<span class="token operator">:</span> FirstTuple <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// 👍 Success</span>
</span><span class="code-line"><span class="token keyword">const</span> fooArray<span class="token operator">:</span> FirstTuple <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// const firstFoo: number</span>
</span><span class="code-line"><span class="token keyword">const</span> firstFoo <span class="token operator">=</span> fooArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// const secondFoo: string</span>
</span><span class="code-line"><span class="token keyword">const</span> secondFoo <span class="token operator">=</span> fooArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span></code></pre>
<p>단순히 <code>string[]</code>과 같은 type과 다르게, 수와 위치에 따른 type 값을 정확히 알고 있는 type입니다.</p>
<p>참고하시면 좋을 링크는 다음과 같습니다.</p>
<ul>
<li><a href="https://www.typescriptlang.org/docs/handbook/2/objects.html#tuple-types" target="_blank" rel="noopener noreferer">typescriptlang.org tuple</a></li>
</ul>
<h3 id="mapped-types">Mapped types</h3>
<p><code>mapped type</code>이란 TypeScript 3.1 버전부터 사용 가능한 기능으로써,</p>
<p>JavaScript의 <code>map</code>처럼, 기존 정의되어 있는 타입을 새로운 타입으로 변환하는 문법을 의미합니다.</p>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">type</span> <span class="token class-name">Names</span> <span class="token operator">=</span> <span class="token string">'foo'</span> <span class="token operator">|</span> <span class="token string">'bar'</span> <span class="token operator">|</span> <span class="token string">'hyesung'</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> Names<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">const</span> PersonObject<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>
</span><span class="code-line">  foo<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
</span><span class="code-line">  bar<span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span>
</span><span class="code-line">  hyesung<span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></code></pre>
<p>위처럼 mapped types 방식으로 기존 <code>Names</code> type을 이용해 Names의 이름을 key 값으로 가지고 있으며, number 타입의 value를 가지고 있는 <code>Person</code> type을 선언할 수 있습니다.</p>
<p>이 때 generic을 이용해 타입을 주입하여 더욱 유연하게 사용할 수 있습니다.</p>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">type</span> <span class="token class-name">MapToNumber<span class="token operator">&#x3C;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">type</span> <span class="token class-name">Names</span> <span class="token operator">=</span> <span class="token string">'foo'</span> <span class="token operator">|</span> <span class="token string">'bar'</span> <span class="token operator">|</span> <span class="token string">'hyesung'</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> MapToNumber<span class="token operator">&#x3C;</span>Names<span class="token operator">></span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">const</span> PersonObject<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>
</span><span class="code-line">  foo<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
</span><span class="code-line">  bar<span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span>
</span><span class="code-line">  hyesung<span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></code></pre>
<p>JavaScript의 map 함수와 같이 다양한 방면으로 사용할 수 있는 타입 선언 방법이라고 알고 계시면 좋을 것 같으며, 참고하시면 좋을 링크는 다음과 같습니다.</p>
<ul>
<li><a href="zhttps://joshua1988.github.io/ts/usage/mapped-type.html#%EB%A7%B5%EB%93%9C-%ED%83%80%EC%9E%85-mapped-type-%EC%9D%B4%EB%9E%80">타입스크립트 핸드북 맵드 타입</a></li>
<li><a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-1.html#mapped-types-on-tuples-and-arrays" target="_blank" rel="noopener noreferer">typescriptlang.org Mapped types on tuples and arrays</a></li>
</ul>
<h3 id="variadic-tuple-types">Variadic Tuple Types</h3>
<p>Variadic Tuple Types, 즉 <code>가변 인자 튜플 타입</code>은 제가 놓인 상황의 문제와 상당히 비슷한 문제를 해결하기 위해 TypeScript 4.0 버전부터 사용 가능하게 되었습니다.</p>
<p>공식 문서에서 보여주고 있는 문제 상황은 JavaScript의 concat 함수의 type에 대한 이야기부터 시작합니다.</p>
<pre class="language-js"><code class="language-js code-highlight"><span class="code-line"><span class="token keyword">function</span> <span class="token function">concat</span><span class="token punctuation">(</span><span class="token parameter">arr1<span class="token punctuation">,</span> arr2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword control-flow">return</span> <span class="token punctuation">[</span><span class="token spread operator">...</span>arr1<span class="token punctuation">,</span> <span class="token spread operator">...</span>arr2<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>만약 concat 상황을 overload로써 타입을 지정하자면 다음과 같이 되었을 것이라고 기술되어 있습니다.</p>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">function</span> <span class="token function">concat</span><span class="token punctuation">(</span>arr1<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr2<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">concat</span><span class="token generic class-name"><span class="token operator">&#x3C;</span><span class="token constant">A</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>arr1<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">A</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr2<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">A</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">concat</span><span class="token generic class-name"><span class="token operator">&#x3C;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>arr1<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr2<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">concat</span><span class="token generic class-name"><span class="token operator">&#x3C;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token punctuation">,</span> <span class="token constant">C</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>arr1<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token punctuation">,</span> <span class="token constant">C</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr2<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token punctuation">,</span> <span class="token constant">C</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">concat</span><span class="token generic class-name"><span class="token operator">&#x3C;</span><span class="token constant">A2</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>arr1<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr2<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">A2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">A2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">concat</span><span class="token generic class-name"><span class="token operator">&#x3C;</span><span class="token constant">A1</span><span class="token punctuation">,</span> <span class="token constant">A2</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>arr1<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">A1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr2<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">A2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">A1</span><span class="token punctuation">,</span> <span class="token constant">A2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">concat</span><span class="token generic class-name"><span class="token operator">&#x3C;</span><span class="token constant">A1</span><span class="token punctuation">,</span> <span class="token constant">B1</span><span class="token punctuation">,</span> <span class="token constant">A2</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>arr1<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">A1</span><span class="token punctuation">,</span> <span class="token constant">B1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr2<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">A2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">A1</span><span class="token punctuation">,</span> <span class="token constant">B1</span><span class="token punctuation">,</span> <span class="token constant">A2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token comment">// ... 축약</span>
</span></code></pre>
<p>제가 놓인 상황과 같이 굉장히 비생산적으로 느껴집니다.</p>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">concat</span><span class="token generic class-name"><span class="token operator">&#x3C;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>arr1<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr2<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&#x3C;</span><span class="token constant">T</span> <span class="token operator">|</span> <span class="token constant">U</span><span class="token operator">></span><span class="token punctuation">;</span>
</span></code></pre>
<p>이를 해결하기 위해 단순히 array type으로 선언할 시, 입력 길이나 요소 순서에 대해 어떤 것도 처리하지 않는 것을 문제라고 정의해두었습니다.</p>
<p>그렇기 때문에 typescript 4.0은 타입 추론 개선과 함께 Tuple type 구문의 spread 연산자에 generic을 사용할 수 있는 것을 사용해 해결하였다고 기술되어 있습니다.</p>
<blockquote>
<p>TypeScript 4.0 brings two fundamental changes, along with inference improvements, to make typing these possible. The first change is that spreads in tuple type syntax can now be generic. This means that we can represent higher-order operations on tuples and arrays even when we don’t know the actual types we’re operating over. When generic spreads are instantiated (or, replaced with a real type) in these tuple types, they can produce other sets of array and tuple types. - <a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-0.html" target="_blank" rel="noopener noreferer">typescriptlang.org 발췌</a></p>
</blockquote>
<p>이를 통해 작성된 concat의 type은 다음과 같습니다.</p>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">type</span> <span class="token class-name">Arr</span> <span class="token operator">=</span> <span class="token keyword">readonly</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">concat</span><span class="token generic class-name"><span class="token operator">&#x3C;</span><span class="token constant">T</span> <span class="token keyword">extends</span> Arr<span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> Arr<span class="token operator">></span></span></span><span class="token punctuation">(</span>arr1<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> arr2<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">U</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">,</span> <span class="token operator">...</span>arr2<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>단락의 초반에서 언급하였던 overload 문제를 death by a thousand overloads, 천 개의 오버로드로 인한 죽음이라고 표현한다고 하는데요. 이러한 문제를 extends와 spread 연산자와 같은 익숙한 키워드로 해결해 나가는 것을 배웠다고 말씀드릴 수 있을 것 같습니다.</p>
<p>더불어 tuple의 나머지 요소에 대해 끝뿐만 아니라 어느 곳에서도 발생할 수 있는 것에 완화되었다는 것이 변경점이라고 하는데요. 참고해보실 분들은 아래 공식 문서와 pull request를 확인해보시면 좋을 것 같습니다.</p>
<ul>
<li><a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-0.html#variadic-tuple-types" target="_blank" rel="noopener noreferer">typescriptlang.org Variadic Tuple Types</a></li>
<li><a href="https://github.com/microsoft/TypeScript/pull/39094" target="_blank" rel="noopener noreferer">microsoft/TypeScript Variadic tuple types pull request</a></li>
</ul>
<h2 id="다시-보는-결과물" class="heading">다시 보는 결과물</h2>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">interface</span> <span class="token class-name">Props<span class="token operator">&#x3C;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span> <span class="token punctuation">{</span>
</span><span class="code-line">  aArray<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">  bArray<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">I</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useFoo</span><span class="token generic class-name"><span class="token operator">&#x3C;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> aArray<span class="token punctuation">,</span> bArray <span class="token punctuation">}</span><span class="token operator">:</span> Props<span class="token operator">&#x3C;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">function</span> <span class="token function">FooComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token function">useFoo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
</span><span class="code-line">    aArray<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">    bArray<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 💩 Error</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function">useFoo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
</span><span class="code-line">    aArray<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">    bArray<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 👍 Success</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p><code>bArray: [...{ [I in keyof T]: number }]</code> 부분에 명시적으로 spread 연산자를 이용해 튜플인 것을 기입하여도 되지만, <code>aArray: [...T]</code>에서 spread 연산자를 사용하였다면, 아래 예시와도 같이 사용할 수 있습니다.</p>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">interface</span> <span class="token class-name">Props<span class="token operator">&#x3C;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span> <span class="token punctuation">{</span>
</span><span class="code-line">  aArray<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">  bArray<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">I</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useFoo</span><span class="token generic class-name"><span class="token operator">&#x3C;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> aArray<span class="token punctuation">,</span> bArray <span class="token punctuation">}</span><span class="token operator">:</span> Props<span class="token operator">&#x3C;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">function</span> <span class="token function">FooComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token function">useFoo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
</span><span class="code-line">    aArray<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">    bArray<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 💩 Error</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function">useFoo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
</span><span class="code-line">    aArray<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">    bArray<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 👍 Success</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>제가 보기엔 <code>[...T]</code>에서 타입 추론이 되어 정상 동작하는 것으로 파악되나, 명시적으로 작성하기 위해 spread 연산자를 같이 활용하는 것이 좋아보입니다.</p>
<p>직접 확인하시고 싶으신 분들은 <a href="https://www.typescriptlang.org/play?#code/JYOwLgpgTgZghgYwgAgApQPYAcDOAeAFWQgA9IQATHZOEATwG0BdAPmQG8BYAKGT5oCCUKHDoAuZAwB0MgkwDcPfsgBGQkeMkyp7SQElkoZAGsIdDDGRyJIAK4BbFdGQBfBTxc8eMWyARhgDBBkWxwIADEMDEJiMghKahwwKFAAc2YWAApdOHVRABpVPLpXCXRsfAIWAEoOVy9uHz8AoORIjABhDHssIPiwTNquXn5QiKjspWV+XOFRCQYAcgALRcLFiDXkRYAbRaZ8qemiuc0GAEZCgCYmI9dq+WQAeifkQF4NwEqd5ABRYQwoBp3MbtSYjY6zDQLRZwLaLFSwhD7Q5g6ZqU4LS7IK6FADMBzuLlqL3egFkd5AAZVsCCQOBwHkB3B4oEgsEQKHKuCuMVI5CoNHoGQ4dwh8y0sncKLRkLqDAMRlM5ks1mQdkczhcihRCGKEl0ssMwQVFisTAkKiiOwgtFcms8jMavn8gWCwKiXKIPPifKSKRA6VY2UEp0KUtEpTQmE5hBqdTt3kdLWC7S6PT64CugyFKNdGAzw2OfBFZxWsM26z2+JRylDZ0x2OQeORBeQ2vRkngOzChQ7YVuKMJj2Jnx+fwB9qBYXaebuyiLUJh63h60RlebNYx11xq4LrelDGStgghQPR+QJ77ykJz1ebzJlOpEFpHiAA" target="_blank" rel="noopener noreferer">TypeScript Playground 링크</a>를 확인해주시면 좋을 것 같습니다.</p>
<h2 id="마치며" class="heading">마치며</h2>
<p>제가 겪는 문제 상황에서 검색을 하여도 필요로 하는 답을 찾지 못하여 Stackoverflow에 직접 질문을 올리고 답변을 받아보는 경험을 할 수 있었습니다. <em>제 검색 능력의 부족일 수도 있습니다...</em></p>
<p>정성스런 답변을 받아 많은 것을 공부하고 알아갈 수 있었던 경험이였다고 생각되며, 해당 포스팅을 보고 저와 비슷한 상황을 겪고 있는 분들에게 도움이 되었으면 좋을 것 같은 마음과 함께 글을 마치겠습니다. 긴 글 읽어주셔서 감사합니다.</p>
<h2 id="참고" class="heading">참고</h2>
<ul>
<li><a href="https://stackoverflow.com/questions/71370238/how-to-check-is-interfaces-two-props-length-is-same" target="_blank" rel="noopener noreferer">필자가 질문한 Stackoverflow</a></li>
<li><a href="https://www.typescriptlang.org/" target="_blank" rel="noopener noreferer">typescript lang</a></li>
<li><a href="https://joshua1988.github.io/ts/" target="_blank" rel="noopener noreferer">타입스크립트 핸드북</a></li>
<li><a href="https://github.com/framer/motion" target="_blank" rel="noopener noreferer">framer/motion github</a></li>
<li><a href="https://github.com/microsoft/TypeScript" target="_blank" rel="noopener noreferer">microsoft/TypeScript github</a></li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[bundle-analyzer, gzip으로 Next.js 최적화하기]]></title>
    <link>https://www.hyesungoh.xyz/optimization-with-nextjs</link>
    <pubDate>2022-02-25</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/optimization-with-nextjs</guid>
    <description>
    <![CDATA[현실 다이어트는 매번 실패하니, 서비스 다이어트라도 해보자]]>
    </description>
    <content:encoded>
      <![CDATA[<p>Next.js를 사용해 개발한 교내 동아리 랜딩 페이지를 최적화한 경험을 공유합니다.</p>
<blockquote>
<p>해당 랜딩 페이지는 <a href="https://www.dogvelopers.com" target="_blank" rel="noopener noreferer">다음 링크</a>를 통해 확인하실 수 있습니다!</p>
</blockquote>
<h2 id="들어가기-앞서" class="heading">들어가기 앞서</h2>
<p>Lighthouse 지표와 추천 사항을 기준으로 최적화 작업을 진행하였습니다.</p>
<p>저는 최적화 작업이 익숙하지 않지만, 제가 검색한 결과 최신의, 깔끔하게 정리된 내용이 없어 공유하기로 생각했다는 점 말씀드립니다.</p>
<h2 id="bundle-analyzer-적용하기" class="heading">Bundle-analyzer 적용하기</h2>
<p><img src="https://user-images.githubusercontent.com/26461307/155719898-d59e0146-718f-4244-9957-a00df8f64c95.png" alt="bundle analyzer"></p>
<p><strong>bundle analyzer</strong>를 사용하면 위 사진처럼 빌드 후 각 모듈의 번들링된 사이즈를 확인하실 수 있으며, 이는 번들링 크기를 줄이는 <strong>tree shaking</strong>의 지표로 활용할 수 있습니다.</p>
<h3 id="nextjs에서-적용-방법">Next.js에서 적용 방법</h3>
<pre class="language-bash"><code class="language-bash code-highlight"><span class="code-line"><span class="token function">npm</span> <span class="token function">install</span> @next/bundle-analyzer --save-dev
</span><span class="code-line"><span class="token comment"># or</span>
</span><span class="code-line"><span class="token function">yarn</span> <span class="token function">add</span> @next/bundle-analyzer <span class="token parameter variable">-D</span>
</span></code></pre>
<p>우선 설치를 진행해준 후,</p>
<pre class="language-js"><code class="language-js code-highlight"><span class="code-line"><span class="token comment">// next.config.js</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// 환경변수 ANALYZE가 true일 시에</span>
</span><span class="code-line"><span class="token keyword">const</span> withBundleAnalyzer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@next/bundle-analyzer'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token literal-property property">enabled</span><span class="token operator">:</span> process<span class="token punctuation">.</span><span class="token property-access">env</span><span class="token punctuation">.</span><span class="token constant">ANALYZE</span> <span class="token operator">===</span> <span class="token string">'true'</span><span class="token punctuation">,</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">module<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token function">withBundleAnalyzer</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<p>루트 디렉토리에 위치한 <code>next.config.js</code> 파일에 위 내용과 함께 <code>.env.local</code>, <code>.env</code>와 같은 환경 변수 파일에서 아래 내용을 추가해주시면 적용하실 수 있습니다.</p>
<pre class="language-text"><code class="language-text code-highlight"><span class="code-line">ANALYZER=true
</span></code></pre>
<p>적용 후, Build 해보시면 아래 사진과 같이 <code>analyze</code> 디렉토리에 client, server로 나뉜 html 파일을 확인해보실 수 있으실 겁니다.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/155726038-e44e85ba-bdc2-4e4e-8486-83d72077c8d5.png" alt="analyze image"></p>
<p><a href="https://github.com/vercel/next.js/tree/canary/packages/next-bundle-analyzer" target="_blank" rel="noopener noreferer">Next.js github</a>에서 적용 방법에 대한 문서를 확인하실 수 있으며, <a href="https://www.npmjs.com/package/@next/bundle-analyzer" target="_blank" rel="noopener noreferer">npm 주소는 다음 링크</a>에서 확인하실 수 있습니다.</p>
<h2 id="다른-plugin들과-함께-사용하기" class="heading">다른 Plugin들과 함께 사용하기</h2>
<p>위 문서를 확인하셨다면 아시겠지만, <strong>next-compose-plugins</strong>를 사용하여 다른 plugin들과 함께 <code>next.config.js</code> 파일을 더욱 깔끔히 관리할 수 있습니다.</p>
<pre class="language-bash"><code class="language-bash code-highlight"><span class="code-line"><span class="token function">npm</span> <span class="token function">install</span> next-compose-plugins --save-dev
</span><span class="code-line"><span class="token comment"># or</span>
</span><span class="code-line"><span class="token function">yarn</span> <span class="token function">add</span> next-compose-plugins <span class="token parameter variable">-D</span>
</span></code></pre>
<p>설치 후 다음과 같은 형태로 <code>next.config.js</code> 파일을 작성하실 수 있습니다.</p>
<pre class="language-js"><code class="language-js code-highlight"><span class="code-line"><span class="token comment">// next.config.js</span>
</span><span class="code-line"><span class="token keyword">const</span> withPlugins <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'next-compose-plugins'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">const</span> withBundleAnalyzer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@next/bundle-analyzer'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token literal-property property">enabled</span><span class="token operator">:</span> process<span class="token punctuation">.</span><span class="token property-access">env</span><span class="token punctuation">.</span><span class="token constant">ANALYZE</span> <span class="token operator">===</span> <span class="token string">'true'</span><span class="token punctuation">,</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// 해당 내용은 아래 공식 문서를 참고하시면 좋을 것 같습니다.</span>
</span><span class="code-line"><span class="token comment">// https://nextjs.org/docs/api-reference/next.config.js/introduction</span>
</span><span class="code-line"><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'next'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>NextConfig<span class="token punctuation">}</span></span> */</span>
</span><span class="code-line"><span class="token keyword">const</span> nextConfig <span class="token operator">=</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token literal-property property">reactStrictMode</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">module<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token function">withPlugins</span><span class="token punctuation">(</span>
</span><span class="code-line">  <span class="token punctuation">[</span>
</span><span class="code-line">    withBundleAnalyzer<span class="token punctuation">,</span>
</span><span class="code-line">    withFooPlugin<span class="token punctuation">,</span>
</span><span class="code-line">    <span class="token comment">// 추가적인 Plugin들을 작성해주시면 됩니다.</span>
</span><span class="code-line">  <span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">  nextConfig
</span><span class="code-line"><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<p>보시는 것처럼 저는 sentry plugin이 기존에 작성되어 있었으며, <code>next-compose-plugins</code>를 사용하여 <code>bundle-analyzer</code>와 함께 작성한 모습을 확인하실 수 있습니다.</p>
<p><a href="https://www.npmjs.com/package/next-compose-plugins" target="_blank" rel="noopener noreferer">next-compose-plugins의 npm 주소는 다음 링크</a>에서 확인하실 수 있습니다.</p>
<h2 id="gzip-compress압축하기" class="heading">Gzip compress(압축)하기</h2>
<p>Gzip이란 파일 압축에 쓰이는 응용 소프트웨어로써, HTML, CSS, JS 등을 압축하여 리소스를 받는 시간을 줄여주는 방식으로 성능을 개선할 수 있습니다.</p>
<blockquote>
<p>gzip은 파일 압축에 쓰이는 응용 소프트웨어이다. gzip은 GNU zip의 준말이며, 초기 유닉스 시스템에 쓰이던 압축 프로그램을 대체하기 위한 자유 소프트웨어이다. gzip은 ... <a href="https://ko.wikipedia.org/wiki/Gzip" target="_blank" rel="noopener noreferer">더욱 자세한 내용은 출처 위키피디아</a>를 확인해보시면 좋을 것 같습니다.</p>
</blockquote>
<h3 id="nextjs에서-적용-방법-1">Next.js에서 적용 방법</h3>
<pre class="language-bash"><code class="language-bash code-highlight"><span class="code-line"><span class="token function">npm</span> <span class="token function">install</span> compression-webpack-plugin --save-dev
</span><span class="code-line"><span class="token comment"># or</span>
</span><span class="code-line"><span class="token function">yarn</span> <span class="token function">add</span> compression-webpack-plugin <span class="token parameter variable">-D</span>
</span></code></pre>
<p>설치 후 다음과 같은 형태로 <code>next.config.js</code> 파일을 작성하실 수 있습니다.</p>
<pre class="language-js"><code class="language-js code-highlight"><span class="code-line"><span class="token comment">// next.config.js</span>
</span><span class="code-line"><span class="token keyword">const</span> withPlugins <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'next-compose-plugins'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">const</span> withBundleAnalyzer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@next/bundle-analyzer'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token literal-property property">enabled</span><span class="token operator">:</span> process<span class="token punctuation">.</span><span class="token property-access">env</span><span class="token punctuation">.</span><span class="token constant">ANALYZE</span> <span class="token operator">===</span> <span class="token string">'true'</span><span class="token punctuation">,</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">const</span> <span class="token maybe-class-name">CompressionPlugin</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'compression-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'next'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>NextConfig<span class="token punctuation">}</span></span> */</span>
</span><span class="code-line"><span class="token keyword">const</span> nextConfig <span class="token operator">=</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token literal-property property">reactStrictMode</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token function-variable function">webpack</span><span class="token operator">:</span> <span class="token parameter">config</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    config<span class="token punctuation">.</span><span class="token property-access">plugins</span><span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CompressionPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword control-flow">return</span> config<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">module<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token function">withPlugins</span><span class="token punctuation">(</span>
</span><span class="code-line">  <span class="token punctuation">[</span>
</span><span class="code-line">    <span class="token function">withBundleAnalyzer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token literal-property property">compress</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
</span><span class="code-line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
</span><span class="code-line">    withFooPlugin<span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">  nextConfig
</span><span class="code-line"><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<p>작성하신 후, Build를 해보시면 아래 사진과 같이 <code>gz</code> 확장자의 파일을 확인하실 수 있으실 겁니다.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/155725646-5b2f7f62-b707-4a2d-bfd3-7d41ed3016a7.png" alt="gz image"></p>
<p>해당 Plugin의 자세한 옵션과 사용방법들은 <a href="https://webpack.js.org/plugins/compression-webpack-plugin/" target="_blank" rel="noopener noreferer">Webpack 문서</a>에서 확인하실 수 있습니다.</p>
<h3 id="gzip은-무조건-좋은-것인가">gzip은 무조건 좋은 것인가?</h3>
<ul>
<li>
<p>사용자 측면</p>
<p><img src="https://user-images.githubusercontent.com/26461307/155727003-4a83dbfc-032c-4f9a-9a85-e288e654b2d1.png" alt="gzip brower support"></p>
<p><em>이미지 출처 : <a href="https://caniuse.com/?search=gzip" target="_blank" rel="noopener noreferer">https://caniuse.com/?search=gzip</a></em></p>
<p>보시는 것처럼 대부분의 브라우저가 gzip을 지원하고 있습니다. 하지만 웹프록시, 보안 소프트웨어 등의 문제로 요청 헤더가 깨져서 사용하지 못하는 사용자가 전체 사용자의 15%가 된다고 합니다.</p>
</li>
<li>
<p>성능 향상 측면</p>
<p>Gzip은 많은 경우에서 성능 향상을 야기할 수 있지만, 통상적으로 1~2kb 이하의 파일은 압축하지 않는 것이 좋다고 합니다. 그 이유는 압축해서 얻는 효과보다 압축을 푸는 데 사용되는 리소스, 서버 혹 웹 브라우저의 CPU가 더욱 크기 때문입니다.</p>
<p>또한 이미지, Binary 파일 등은 효과를 볼 수 없다고 합니다.</p>
</li>
</ul>
<p>더욱 자세한 사항은 <a href="http://www.yes24.com/Product/Goods/3768154" target="_blank" rel="noopener noreferer">스티브 사우더스 저의 초고속 웹사이트 구축 서적</a>과 함께 <a href="https://vnthf.github.io/blog/Front-Gzip%EC%97%90-%EA%B4%80%ED%95%98%EC%97%AC/" target="_blank" rel="noopener noreferer">해당 블로그 아티클</a>에서 확인하시면 좋을 것 같습니다.</p>
<h2 id="before-and-after" class="heading">Before and After</h2>
<p>제 경우에는 랜딩 페이지로써 bundle analyzer를 통해 확인한 결과 사용한 라이브러리 중 Tree shaking을 필요로하진 않은 것 같다는 판단하에 gzip 압축만을 진행하였습니다.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/155728696-956d82e4-1f15-4237-9ec1-6e55b12775b7.png" alt="before"></p>
<p><em>적용 전</em></p>
<p><img src="https://user-images.githubusercontent.com/26461307/155728708-7d603c42-2772-4ab6-9506-f529e9d5a1c8.png" alt="after"></p>
<p><em>적용 후</em></p>
<p>상호 작용까지의 시간을 가르키는 TTI 지표가 0.3초, 페이지의 메인 콘텐츠(가장 큰 콘텐츠)가 표시되는 시점인 LCP 지표가 0.5초 단축된 것을 확인할 수 있었습니다.</p>
<blockquote>
<p>동일한 환경, 네트워크에서 확인하였으나 Lighthouse 지표는 절대적이지 않습니다.</p>
</blockquote>
<h2 id="마치며" class="heading">마치며</h2>
<p>최적화 작업은 익숙하지 않지만, 신선하고 재밌었던 경험이였습니다.</p>
<p>웹 서비스의 성능은 사용자 경험, 유추와 직접적으로 관계가 있다고 생각하기 때문에 항상 도전의식이 있는 영역이였는데, 부족하게나마 성능을 개선하고 lighthouse를 통해 시각적으로 확인할 수 있어 더욱 재밌게 느껴졌던 것 같습니다.</p>
<p>앞으로는 더욱 다양한 방법으로 성능 개선을 해보고 싶은 마음이 들었으며, 저와 같이 익숙하지 않은 분들에게 도움이 되길 바라며 글을 마치도록 하겠습니다. 감사합니다.</p>
<blockquote>
<p>성능 개선에 관심이 있으신 분들은 <a href="https://toss.im/slash-21/sessions/3-2" target="_blank" rel="noopener noreferer">Bundle Diet라는 주제의 Toss SLASH 21 세션</a>을 꼭 들어보시길 추천드립니다.</p>
</blockquote>
<h2 id="참고" class="heading">참고</h2>
<ul>
<li><a href="https://www.npmjs.com/package/@next/bundle-analyzer" target="_blank" rel="noopener noreferer">@next/bundle-analyzer</a></li>
<li><a href="https://www.npmjs.com/package/next-compose-plugins" target="_blank" rel="noopener noreferer">next-compose-plugins</a></li>
<li><a href="https://webpack.js.org/plugins/compression-webpack-plugin/" target="_blank" rel="noopener noreferer">compressionWebpackPlugin</a></li>
<li><a href="https://caniuse.com/?search=gzip" target="_blank" rel="noopener noreferer">caniuse - gzip</a></li>
<li><a href="https://vnthf.github.io/blog/Front-Gzip%EC%97%90-%EA%B4%80%ED%95%98%EC%97%AC/" target="_blank" rel="noopener noreferer">gzip에 관하여</a></li>
<li><a href="https://darrengwon.tistory.com/833" target="_blank" rel="noopener noreferer">Next 배포를 위한 준비</a></li>
<li><a href="https://drhot552.github.io/web/Bundle.js%ED%8C%8C%EC%9D%BC-%EC%84%B1%EB%8A%A5%EA%B0%9C%EC%84%A0%ED%95%98%EA%B8%B0/#" target="_blank" rel="noopener noreferer">Webpack Bundle.js 파일 성능개선</a></li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA['FECONF 2021 왜 나는 React를 사랑하는가' 정리]]></title>
    <link>https://www.hyesungoh.xyz/feconf2021WhyILoveReact</link>
    <pubDate>2022-02-19</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/feconf2021WhyILoveReact</guid>
    <description>
    <![CDATA[feconf2021WhyILoveReact]]>
    </description>
    <content:encoded>
      <![CDATA[<p><em>본 게시물은 안희종 님이 발표하신 <a href="https://www.youtube.com/watch?v=dJAEWhR83Ug" target="_blank" rel="noopener noreferer">FE CONF 2021의 '왜 나는 React를 사랑하는가'</a>를 듣고 정리한 내용입니다.</em></p>
<p><img src="https://user-images.githubusercontent.com/26461307/154068327-be828984-6634-4bca-919d-029e3f254eb8.jpg" alt="feconf 2021"></p>
<p><em>이미지 출처 : <a href="https://www.facebook.com/feconf.kr/" target="_blank" rel="noopener noreferer">FEConf 페이스북</a></em></p>
<h2 id="클리어한-멘탈-모델-작고-단단한-코어" class="heading">클리어한 멘탈 모델, 작고 단단한 코어</h2>
<p>리액트는 프로그래밍 언어와 닮은 점이 많다.</p>
<p>Reconciler는 리액트 코드를 해석하고 실행하는 역할, 즉 엔진(컴파일러)의 역할을 한다.</p>
<p>프로그래밍 언어가 컴파일러를 통해 기계가 이해할 수 있는 어셈블리어로 컴파일되는데, 리액트가 프로그래밍을 프로그래밍 언어에 비유했을 때 어셈블리어는 <strong>호스트 환경</strong>에 따라 달라지게 된다.</p>
<h3 id="learn-once-write-anywhere">Learn Once, Write Anywhere</h3>
<ul>
<li>HTML : react-dom</li>
<li>iOS, Android : react-native</li>
<li>터미널 : ink</li>
<li>Three.js : react-three-fiber</li>
<li>JSON : react-test-renderer</li>
</ul>
<p>다른 호스트 환경에서 동일한 React API(문법)을 사용할 수 있다.</p>
<blockquote>
<p>React API? props, hooks, ...</p>
</blockquote>
<h3 id="명확한-문제-및-목표-정의">명확한 문제 및 목표 정의</h3>
<p>만약 React가 <strong>웹만을</strong> 위한 UI 라이브러리였다면?</p>
<p>위 커스텀 렌더러가 존재하지 않을 수도 있고 한 번 배워서 모든 곳에 쓸 수 있는 장점 또한 존재하지 않을 수 있다.</p>
<h3 id="virtual-dom은-너무-느려">Virtual DOM은 너무 느려</h3>
<p>리액트의 여러 경쟁 라이브러리들이 언급하는 리액트의 단점이다.</p>
<p>리액트가 웹만을 위한 라이브러리라면 단점으로 취급될 수 있지만, 코어 로직이 웹 환경과 직접적으로 연관되어 있지 않는 것이 리액트의 의도적인 결정이기 때문에 리액트의 목표와는 핀트가 벗어난 비판이다.</p>
<blockquote>
<p>Virtual DOM과 관련하여 내가 쓴 글과는 다른 관점으로 해당 단점을 상쇄하고 있는데, 리액트가 정의한 해결방법에 더욱 근접히 다가가 도출해낼 수 있던 관점이라고 생각됩니다. 제 게시물은 <a href="https://www.hyesungoh.xyz/React/whyVirtualDom/" target="_blank" rel="noopener noreferer">다음 링크</a>에서 확인하실 수 있습니다.</p>
</blockquote>
<h2 id="꾸준히-성장하는-거대한-커뮤니티" class="heading">꾸준히 성장하는 거대한 커뮤니티</h2>
<p><strong>낯섦 예산의 현명한 소비</strong></p>
<p><em>The language strangeness budget</em></p>
<blockquote>
<p>프로그래밍 언어를 만드는 건 쉽지만 사람들이 그 언어를 쓰게 만드는 건 훨씬, 훨씬 어렵다. 당신의 언어에 새롭고, 재미있고, 흥분되는 기능이 얼마나 많이 포함되어 있는지 인지하고, 그 수를 세심하게 고려해야 합니다. - Rust 코어팀의 Steve Klabnik</p>
</blockquote>
<p><a href="https://steveklabnik.com/writing/the-language-strangeness-budget" target="_blank" rel="noopener noreferer">해당 문단 발췌 링크</a></p>
<p>어떤 기술을 선택하는 것도 예산을 지불하는 것일텐데, 가치가 비용보다 크며 전체 예산이 소모되는 전체 비용보다 큰 경우에만 예산을 지불, 즉 기술을 선택하게 된다.</p>
<p>리액트와 비슷한 문제를 해결하기 위해 새로운 언어를 개발한 사례가 Elm, ReScript 등이 있었다.</p>
<p>하지만 React와 비교하였을 때 큰 성공은 거두지 못했는데 이는 React가 프로그래밍 언어가 아닌, 라이브러리의 형태를 띄고 있는 부분이 크게 작용했다고 생각한다.</p>
<p>만약 React가 언어였을 시</p>
<ul>
<li>부족한 리소스, 텅 빈 Stack Overflow</li>
<li>새로운 패키지 매니저</li>
<li>적은 유저 풀</li>
<li>JSX</li>
<li>컴포넌트 기반 개발</li>
<li>선언적 렌더링</li>
</ul>
<p>등의 난관이 있었을 텐데 라이브러리의 형태를 통해</p>
<ul>
<li>JSX</li>
<li>컴포넌트 기반 개발</li>
<li>선언적 렌더링</li>
</ul>
<p>생태계 측면의 난관을 없앤 위 세가지 문법적 요소와 동작에서의 새로운 멘탈 모델에 집중 할 수 있었다.</p>
<h2 id="도전적인-과제-우아한-해결책" class="heading">도전적인 과제, 우아한 해결책</h2>
<p><strong>답안지 훔쳐보기</strong></p>
<p>환원을 통해 문제를 해결할 수 있다.</p>
<blockquote>
<p>환원이란? 새로운 문제 A가 생겼을 때, 이러이러한 면에서 답안지가 존재하는 문제 B를 참고하여 해결하는 것</p>
</blockquote>
<h3 id="리액트에서의-환원">리액트에서의 환원</h3>
<h4 id="context">Context</h4>
<p>필요 : 컴포넌트가 트리 저 위쪽에 정의된 무언가로부터 값을 꺼내올 수단</p>
<p>환원 : 참조 시점에 둘러싼 환경을 기준으로 평가되는 변수</p>
<p>답안지 : 프로그래밍 언어의 동적 스코핑</p>
<blockquote>
<p><a href="https://overreacted.io/react-as-a-ui-runtime/" target="_blank" rel="noopener noreferer">Dan Abramov의 블로그</a>에는 해당 내용이 기재되어 있음</p>
</blockquote>
<h4 id="fiber">Fiber</h4>
<p>필요 : JS의 싱글 스레드 호나경에서 느린 컴포넌트가 우선순위 높은 업데이트를 막아 생기는 반응성 저해를 방지할 수단</p>
<p>환원 : 하나의 실행 주체로 우선순위가 다른 여러 작업이 동시에 잘 실행되게 만드는 일</p>
<p>답안지 : 운영체제의 스케쥴링</p>
<h4 id="hooks">Hooks</h4>
<p>필요 : 함수 컴포넌트의 제약을 제거하고 상태 로직의 응집성, 재사용성을 개선</p>
<p>환원 : 특정 효과(상태, 라이프사이클 이펙트)의 처리를 React에게 위임할 수단을 찾아야 함</p>
<p>답안지 : 대수적 효과</p>
<blockquote>
<p>대수적 효과는 <a href="https://overreacted.io/ko/algebraic-effects-for-the-rest-of-us/" target="_blank" rel="noopener noreferer">Dan Abramov의 블로그</a>에 자세히 기술되어 있습니다. 제가 이해한 대수적 효과를 짧게 적어보자면 '무엇'을 하는지에만 집중하는 코드를 작성할 수 있으며, '어떻게'는 나중에 명시하면 되는 방법입니다.</p>
</blockquote>
<h4 id="suspense">Suspense</h4>
<p>필요 : 비동기로 불러와야 하는 리소스를 선언적으로 정의</p>
<p>환원 : 특정 효과의 처리를 React에게 위임할 수단을 찾아야 함</p>
<p>답안지 : 대수적 효과</p>
<h2 id="적용-사례" class="heading">적용 사례</h2>
<p>Flex 팀에서는 리모트 레이어를 개선하고 싶었다.</p>
<h3 id="문제">문제</h3>
<ol>
<li>
<p>호출 함수에서 다양한 작성 방법이 모두 달랐다.</p>
<p>ex) query parameter를 문자열 보관 vs axios request config를 통해 전달</p>
</li>
<li>
<p>SWR의 Key를 유니크하게 관리하는 것이 온전히 개발자에게 맡겨진 일이라 적용하는 방식이 모두 달랐다.</p>
</li>
</ol>
<p>해당 문제를 <strong>리모트 리소스 정의, SWR 키 생성 방식이 사용처 별로 제각각이다</strong>로 정의하였으면 <strong>컨벤션을 마련</strong>하는 방법으로 해결할 수 있었겠지만,</p>
<p>리모트 리소스 정의, SWR 키 생성 방식을 <strong>개발자가 수동으로 반복하고 있다</strong>로 정의하여 이를 <strong>자동화</strong>하는 방법으로 해결하기 위해 접근할 수 있었다.</p>
<h3 id="낯섦-예산의-현명한-소비">낯섦 예산의 현명한 소비</h3>
<p>개발하는 방식을 한번에 바꾸려 했다면, 각자의 우선순위에 의해 부담스러워 오히려 도입이 늦어질 수 있다고 판단하여 작은 부분부터 나눠 도입하였다.</p>
<ol>
<li>리모트 리소스 정의 방식 일원화</li>
<li>리모트 리소스를 사용할 수 있는 리모트 훅 생성</li>
<li>1단계의 수동으로 생성했던 리소스를 스펙으로부터 자동 생성하는 방법</li>
</ol>
<h3 id="답안지-훔쳐보기">답안지 훔쳐보기</h3>
<ul>
<li>리모트 식별자로부터 자동 생성된 키를 사용하는 것은 SWR의 useRequest에서 힌트를 얻을 수 있었다.</li>
<li>리모트 레이어 전체를 Hook에서 생성할 수 있다는 것을 GraphQL code generator를 통해 알 수 있었다.</li>
<li>openapi-generator 프로젝트를 통해 실험적 도입 경험과 FEConf 도입 사례를 통해 자신감을 얻었다.</li>
</ul>
<h2 id="정리" class="heading">정리</h2>
<p>리액트를 사랑하는 이유</p>
<ul>
<li>많은 이유가 있지만 프로그래밍 언어를 닮았다는 지점으로 모아진다.</li>
<li>클리어한 멘탈 모델과 한 번 배워 모든 곳에 쓸 수 있는 점을 통해 <strong>명확한 문제 정의 및 목표 정의</strong>를 배울 수 있었다.</li>
<li>꾸준히 성장하는 거대한 커뮤니티를 통해 <strong>낯섦 예산의 현명한 소비</strong>를 배울 수 있었다.</li>
<li>도전적인 과제와 우아한 해결책을 통해 <strong>답안지 훔쳐보기</strong>를 배울 수 있었다.</li>
</ul>
<h2 id="내-정리" class="heading">내 정리</h2>
<p>해당 발표를 통해 <strong>대수적 효과</strong>를 얕게나마 이해할 수 있는 계기가 되었습니다.</p>
<blockquote>
<p>지금까지 이해한 바로는 <a href="https://toss.im/slash-21/sessions/3-3" target="_blank" rel="noopener noreferer">Toss SLASH 21 클린 코드 세션</a>에서 다루었던 추상화와 선언적 프로그래밍과 같은 곳을 짚고 있는 것 같습니다.</p>
</blockquote>
<p>위에서도 기술하였지만 Virtual DOM에 대한 시각이 리액트가 정의한 해결 방법에 더욱 깊게 다가갔을 때 다른 시각에서 상쇄될 수 있다는 것이 더욱 제 시야를 넓혀줄 수 있었습니다.</p>
<p>처음 해당 발표를 들으면서 예상했던 내용은 React를 사용한 개발 방법에 대한 내용이였으나, 소프트웨어 개발의 전반적으로 적용되는 개념들을 React의 사례로 들으면서 이해할 수 있음과 동시에 현업에서 적용 사례를 들을 수 있어서 알찬 발표였다고 생각됩니다.</p>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-여행경로 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-여행경로-Javascript</link>
    <pubDate>2022-02-17</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-여행경로-Javascript</guid>
    <description>
    <![CDATA[프로그래머스-여행경로-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>항공권 정보가 담긴 2차원 배열을 이용해 모든 공항을 방문하면서 알파벳 순서가 앞서는 경로를 출력하는 문제. 재귀적으로 현재 위치, 남은 티켓들, 현재까지 온 경로들을 이용해 출발할 수 있는 경로들로부터 호출하여 풀었다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">function</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token parameter">tickets</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">const</span> answer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">function</span> <span class="token constant">DFS</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword module">from</span><span class="token punctuation">,</span> remainTickets<span class="token punctuation">,</span> path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">const</span> updatedPath <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token spread operator">...</span>path<span class="token punctuation">,</span> <span class="token keyword module">from</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>remainTickets<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      answer<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>updatedPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>
</span><span class="code-line">      remainTickets<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">ticket<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>ticket<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword module">from</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">const</span> to <span class="token operator">=</span> ticket<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">        <span class="token keyword">const</span> nextRemainTickets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token spread operator">...</span>remainTickets<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">        nextRemainTickets<span class="token punctuation">.</span><span class="token method function property-access">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">        <span class="token constant">DFS</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> nextRemainTickets<span class="token punctuation">,</span> updatedPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token constant">DFS</span><span class="token punctuation">(</span><span class="token string">'ICN'</span><span class="token punctuation">,</span> tickets<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword control-flow">return</span> answer<span class="token punctuation">.</span><span class="token method function property-access">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[Toss SLASH 21 - 실무에서 바로 쓰는 Frontend Clean Code 정리]]></title>
    <link>https://www.hyesungoh.xyz/tossSlash21CleanCode</link>
    <pubDate>2022-02-17</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/tossSlash21CleanCode</guid>
    <description>
    <![CDATA[tossSlash21CleanCode]]>
    </description>
    <content:encoded>
      <![CDATA[<p><img src="https://user-images.githubusercontent.com/26461307/116906670-878c3600-ac7b-11eb-8e5a-7779faf5b884.png" alt="toss slash 21"></p>
<p>토스 SLASH 21의 <code>실무에서 바로 쓰는 Frontend Clean Code</code>라는 주제로 진유림님이 발표하신 내용을 정리한 내용입니다.</p>
<p><a href="https://toss.im/slash-21" target="_blank" rel="noopener noreferer">토스 SLASH 21 주소</a></p>
<h2 id="실무에서-클린-코드의-의의" class="heading">실무에서 클린 코드의 의의</h2>
<p><code>유지보수 시간의 단축</code></p>
<p>코드 리뷰, 디버깅 시 소모되는 시간이 적어 유지보수가 용이하다.</p>
<h2 id="안일한-코드-추가의-함정" class="heading">안일한 코드 추가의 함정</h2>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Foo</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handleQuestionSubmit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">const</span> 약관동의여부 <span class="token operator">=</span> <span class="token keyword control-flow">await</span> <span class="token function">약관동의_받아오기</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>약관동의여부<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token keyword control-flow">await</span> <span class="token function">약관동의_팝업열기</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token keyword control-flow">await</span> <span class="token function">질문전송</span><span class="token punctuation">(</span>questionValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'질문이 등록되었어요.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>
</span><span class="code-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>main</span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>form</span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>textarea</span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>어떤 내용이 궁금한가요?<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Button</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleQuestionSubmit<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">질문하기</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>form</span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>main</span><span class="token punctuation">></span></span>
</span><span class="code-line">  <span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>만약 위 상태에서 연결 전문가에 대한 팝업을 추가하는 기능을 개발하게 될 시</p>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Foo</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>popupOpened<span class="token punctuation">,</span> setPopupOpened<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 팝업 상태</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handleQuestionSubmit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">const</span> 연결전문가 <span class="token operator">=</span> <span class="token keyword control-flow">await</span> <span class="token function">연결전문가_받아오기</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 연결 중인 전문가가 있으면 팝업 띄우기</span>
</span><span class="code-line">    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>연결전문가 <span class="token operator">!==</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token function">setPopupOpened</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token keyword">const</span> 약관동의여부 <span class="token operator">=</span> <span class="token keyword control-flow">await</span> <span class="token function">약관동의_받아오기</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>약관동의여부<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token keyword control-flow">await</span> <span class="token function">약관동의_팝업열기</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      <span class="token punctuation">}</span>
</span><span class="code-line">      <span class="token keyword control-flow">await</span> <span class="token function">질문전송</span><span class="token punctuation">(</span>questionValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'질문이 등록되었어요.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handleMyExpertQuestionSubmit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword control-flow">await</span> <span class="token function">연결전문가_질문선송</span><span class="token punctuation">(</span>questionValue<span class="token punctuation">,</span> 연결전문가<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>연결전문가<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">에게 질문이 등록되었어요.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>
</span><span class="code-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>main</span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>form</span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>textarea</span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>어떤 내용이 궁금한가요?<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Button</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleQuestionSubmit<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">질문하기</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>form</span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">      </span><span class="token punctuation">{</span>popupOpened <span class="token operator">&#x26;&#x26;</span> <span class="token operator">&#x3C;</span>연결전문가팝업 onSubmit<span class="token operator">=</span><span class="token punctuation">{</span>handleMyExpertQuestionSubmit<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">}</span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>main</span><span class="token punctuation">></span></span>
</span><span class="code-line">  <span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>이는 타당하다고 생각되지만 나쁜 코드인데 이유는 다음과 같다.</p>
<ul>
<li>하나의 목적인 코드가 흩뿌려져 있다.</li>
<li>하나의 함수가 여러 가지 일을 하고 있다.</li>
<li>함수의 세부 구현 단계가 제각각이다.</li>
</ul>
<p>이를 리팩토링 하자면 다음과 같다.</p>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Foo</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">const</span> 연결전문가 <span class="token operator">=</span> <span class="token function">useFetch</span><span class="token punctuation">(</span>연결전문가_받아오기<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token comment">// 새로운 전문가에게 질문하는 로직만</span>
</span><span class="code-line">  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handleNewExpertQuestionSubmit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword control-flow">await</span> <span class="token function">질문전송</span><span class="token punctuation">(</span>questionValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'질문이 등록되었어요.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token comment">// 연결중인 전문가에게 질문하는 로직만</span>
</span><span class="code-line">  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handleMyExpertQuestionSubmit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword control-flow">await</span> <span class="token function">연결전문가_질문선송</span><span class="token punctuation">(</span>questionValue<span class="token punctuation">,</span> 연결전문가<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>연결전문가<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">에게 질문이 등록되었어요.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token comment">// 함수 하나에서 하나의 일만 하도록 쪼갰다</span>
</span><span class="code-line">  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">openPopupToNotAgreedUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">const</span> 약관동의 <span class="token operator">=</span> <span class="token keyword control-flow">await</span> <span class="token function">약관동의_받아오기</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>약관동의<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token keyword control-flow">await</span> <span class="token function">약관동의_팝업열기</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>
</span><span class="code-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>main</span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>form</span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>textarea</span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>어떤 내용이 궁금한가요?<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">        </span><span class="token punctuation">{</span>연결전문가<span class="token punctuation">.</span><span class="token property-access">connected</span> <span class="token operator">?</span> <span class="token punctuation">(</span>
</span><span class="code-line">          <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">PopupTriggerButton</span></span> <span class="token attr-name">popup</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token operator">&#x3C;</span>연결전문가팝업 onButtonSubmit<span class="token operator">=</span><span class="token punctuation">{</span>handleMyExpertQuestionSubmit<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">            질문하기
</span></span><span class="code-line"><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span><span class="token class-name">PopupTriggerButton</span></span><span class="token punctuation">></span></span>
</span><span class="code-line">        <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>
</span><span class="code-line">          <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Button</span></span>
</span></span><span class="code-line"><span class="token tag">            <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span></span></span><span class="code-line"><span class="token tag"><span class="token script language-javascript">              <span class="token keyword control-flow">await</span> <span class="token function">openPopupToNotAgreedUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span></span><span class="code-line"><span class="token tag"><span class="token script language-javascript">              <span class="token keyword control-flow">await</span> <span class="token function">handleMyExpertQuestionSubmit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span></span><span class="code-line"><span class="token tag"><span class="token script language-javascript">            <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
</span></span><span class="code-line"><span class="token tag">          <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span>
</span><span class="code-line">        <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>form</span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>main</span><span class="token punctuation">></span></span>
</span><span class="code-line">  <span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>클린한 코드는 짧은 코드가 아닌, 원하는 로직을 빠르게 찾을 수 있는 코드이다.</p>
<h2 id="원하는-로직을-빠르게-찾으려면" class="heading">원하는 로직을 빠르게 찾으려면?</h2>
<h3 id="하나의-목적을-가진-코드가-흩뿌려져-있을-때-응집도를-높여야-한다">하나의 목적을 가진 코드가 흩뿌려져 있을 때, <strong>응집도</strong>를 높여야 한다.</h3>
<p>응집도를 높힐려 Custom hook에 위임을 할 수 있지만 중요한 정보가 Custom hook에 가려져 읽기 어려워진다.</p>
<blockquote>
<p>Custom hook의 대표적인 안티패턴</p>
</blockquote>
<p>그러면 무엇을 뭉쳐두어야 할까? -> 당장 몰라도 되는 디테일</p>
<p><strong>선언적 프로그래밍</strong>을 통해 해결할 수 있다.</p>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Popup</span></span> <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>질문전송<span class="token punctuation">}</span></span> <span class="token attr-name">onSuccess</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>홈으로이동<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>
</span></code></pre>
<p>선언적 프로그래밍 :</p>
<ul>
<li>'무엇'을 하는 함수인지 빠르게 이해가능</li>
<li>세부 구현을 안쪽에 뭉쳐두어 신경 쓸 필요가 없다.</li>
<li>'무엇'만 바꿔 쉽게 재사용할 수 있다.</li>
</ul>
<blockquote>
<p>이의 반대는 명령형 프로그래밍</p>
</blockquote>
<h3 id="함수가-여러-가지-일을-하고-있을-때-단일책임-원칙에-의거하여-쪼개줘야-한다">함수가 여러 가지 일을 하고 있을 때, <strong>단일책임</strong> 원칙에 의거하여 쪼개줘야 한다.</h3>
<p>중요 포인트가 모두 담겨 있지 않은 함수명은 위험하다.</p>
<blockquote>
<p>이는 코드에 대한 신뢰 하락으로 이어진다.</p>
</blockquote>
<p>이를 통해 중요 포인트를 기준으로 함수를 분리하여 적재적소에 사용할 수 있다.</p>
<p>함수가 아닌 리액트 컴포넌트에도 적용을 할 수 있는데,</p>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token comment">// 💩</span>
</span><span class="code-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span></span></span><span class="code-line"><span class="token tag"><span class="token script language-javascript">    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"제출 버튼 클릭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span></span><span class="code-line"><span class="token tag"><span class="token script language-javascript">    <span class="token keyword control-flow">await</span> <span class="token function">openConfirm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span></span><span class="code-line"><span class="token tag"><span class="token script language-javascript"><span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span></code></pre>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token comment">// 👍</span>
</span><span class="code-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">LogClick</span></span> <span class="token attr-name">message</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>제출 버튼 클릭<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>openConfirm<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span><span class="token class-name">LogClick</span></span><span class="token punctuation">></span></span>
</span></code></pre>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token comment">// 👍</span>
</span><span class="code-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">IntersectionArea</span></span> <span class="token attr-name">onImpression</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token function">fetchFoo</span><span class="token punctuation">(</span>nextPage<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">더 보기</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span><span class="token class-name">IntersectionArea</span></span><span class="token punctuation">></span></span>
</span></code></pre>
<p>위 방법처럼 컴포넌트를 감싸는 방식으로 리팩토링 할 수 있다.</p>
<blockquote>
<p>추가적으로 한글 변수명으로 더욱 읽기 좋은 코드를 만들 수 있다.</p>
</blockquote>
<h3 id="함수의-세부구현-단계가-제각각일-때-추상화-단계를-조정해-핵심-개념을-필요한-만큼만-노출해야-한다">함수의 세부구현 단계가 제각각일 때. <strong>추상화</strong> 단계를 조정해 핵심 개념을 필요한 만큼만 노출해야 한다.</h3>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token comment">// 💩</span>
</span><span class="code-line"><span class="token comment">// 팝업 코드 제로부터 구현</span>
</span><span class="code-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>팝업스타일<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>button</span>
</span></span><span class="code-line"><span class="token tag">    <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span></span></span><span class="code-line"><span class="token tag"><span class="token script language-javascript">      <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword control-flow">await</span> <span class="token function">회원가입</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span></span><span class="code-line"><span class="token tag"><span class="token script language-javascript">      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token property-access">success</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span></span></span><span class="code-line"><span class="token tag"><span class="token script language-javascript">        <span class="token function">프로필로이동</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span></span><span class="code-line"><span class="token tag"><span class="token script language-javascript">      <span class="token punctuation">}</span>
</span></span></span><span class="code-line"><span class="token tag"><span class="token script language-javascript">    <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
</span></span><span class="code-line"><span class="token tag">  <span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">    전송
</span></span><span class="code-line"><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span>
</span></code></pre>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token comment">// 👍</span>
</span><span class="code-line"><span class="token comment">// 중요 개념만 남기고 추상화</span>
</span><span class="code-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Popup</span></span> <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>회원가입<span class="token punctuation">}</span></span> <span class="token attr-name">onSuccess</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>프로필로이동<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span></code></pre>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token comment">// 💩</span>
</span><span class="code-line"><span class="token comment">// 설계사 라벨을 얻는 코드 세부 구현</span>
</span><span class="code-line"><span class="token keyword">const</span> planner <span class="token operator">=</span> <span class="token keyword control-flow">await</span> <span class="token function">fetchPlanner</span><span class="token punctuation">(</span>plannerId<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">const</span> label <span class="token operator">=</span> planner<span class="token punctuation">.</span><span class="token property-access">new</span> <span class="token operator">?</span> <span class="token string">'새로운 상담사'</span> <span class="token operator">:</span> <span class="token string">'연결중인 상담사'</span><span class="token punctuation">;</span>
</span></code></pre>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token comment">// 👍</span>
</span><span class="code-line"><span class="token comment">// 중요 개념을 함수 이름에 담아 추상화</span>
</span><span class="code-line"><span class="token keyword">const</span> label <span class="token operator">=</span> <span class="token keyword control-flow">await</span> <span class="token function">getPlannerLabel</span><span class="token punctuation">(</span>plannerId<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<p>얼마나 추상화시킬지에 정답은 없고, 상황에 따라 필요한 만큼 추상화하면 된다.</p>
<p>하지만 <strong>추상화 수준이 섞여 있으면</strong> 코드 파악이 어려워진다.</p>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token comment">// 💩</span>
</span><span class="code-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Title</span></span><span class="token punctuation">></span></span><span class="token plain-text">별점을 매겨주세요</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span><span class="token class-name">Title</span></span><span class="token punctuation">></span></span> <span class="token comment">// 높은 추상화</span>
</span><span class="code-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text"> // 낮은 추상화
</span></span><span class="code-line"><span class="token plain-text">    </span><span class="token punctuation">{</span><span class="token constant">STARS</span><span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">STARS</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span>
</span><span class="code-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Reviews</span></span> <span class="token punctuation">/></span></span> <span class="token comment">// 높은 추상화</span>
</span><span class="code-line"><span class="token punctuation">{</span>rating <span class="token operator">!==</span> <span class="token number">0</span> <span class="token operator">&#x26;&#x26;</span> <span class="token punctuation">(</span> <span class="token comment">// 중간 추상화</span>
</span><span class="code-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Agreement</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Button</span></span> <span class="token attr-name">rating</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>rating<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span></span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">)}
</span></span></code></pre>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token comment">// 👍</span>
</span><span class="code-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Title</span></span><span class="token punctuation">></span></span><span class="token plain-text">별점을 매겨주세요</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span><span class="token class-name">Title</span></span><span class="token punctuation">></span></span>
</span><span class="code-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Stars</span></span> <span class="token punctuation">/></span></span>
</span><span class="code-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Reviews</span></span> <span class="token punctuation">/></span></span>
</span><span class="code-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">AgreementButton</span></span> <span class="token attr-name">show</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>rating <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>
</span></code></pre>
<blockquote>
<p>전체적인 코드가 어느정도 구체적으로 작성되어 있는 지 파악이 어려워 코드를 읽는 사고가 널뛰게 되기 때문이다.</p>
</blockquote>
<h2 id="액션-아이템" class="heading">액션 아이템</h2>
<p><strong>1. 담대하게 기존 코드 수정하기</strong></p>
<p>두려워하지 말고 기존 코드를 수정하자.</p>
<p><strong>2. 큰 그림 보는 연습하기</strong></p>
<p>기능 추가 자체는 클린해도, 전체적으로는 어지러울 수 있다.</p>
<p><strong>3. 팀과 함께 공감대 형성하기</strong></p>
<p>코드에 정답은 없으므로 명시적으로 이야기를 하는 시간이 필요하다.</p>
<p><strong>4. 문서로 적어보기</strong></p>
<p>향후 어떤 점에서 위험할 수 있는지, 어떻게 개선할 수 있는 지 글로 적어보자.</p>
<h2 id="마치며" class="heading">마치며</h2>
<p>저번에 정리한 <code>우아하게 비동기 처리하기</code> 세션보다 더욱 이해와 공감이 되었습니다.</p>
<blockquote>
<p>약 8개월이란 시간동안 시야가 넓어졌다고 믿고 싶습니다.</p>
</blockquote>
<p>그 중에서 Custom hooks를 통해 응집도를 높혔지만, 중요 정보들을 숨겨두었던 안티패턴이 내가 많이 져질렀던 일이라고 생각되어 더욱 선언적 프로그래밍을 통해 해결해 나가보아야겠다고 생각하였습니다.</p>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-완주하지-못한-선수 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-완주하지-못한-선수-Javascript</link>
    <pubDate>2022-02-15</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-완주하지-못한-선수-Javascript</guid>
    <description>
    <![CDATA[프로그래머스-완주하지-못한-선수-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>참가 선수 배열과 완주한 선수 배열이 주어졌을 때 완주하지 못한 선수 문자열을 반환하는 문제. 첫 번째 풀이는 한 사람만이 완주하지 못한 조건을 이용해 정렬하여 같은 인덱스 값으로 비교하였을 때 다른 것을 정답으로써 풀었으나 파이썬과는 달리 효율성 테스트에서 통과하지 못하였다. 다음 풀이는 오브젝트를 이용해 완주하지 못한 선수를 확인하여 풀었다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token comment">// function solution(participant, completion) {</span>
</span><span class="code-line"><span class="token comment">//   for (let i = 0; i &#x3C; participant.length; i++) {</span>
</span><span class="code-line"><span class="token comment">//     participant.sort();</span>
</span><span class="code-line"><span class="token comment">//     completion.sort();</span>
</span><span class="code-line"><span class="token comment">//     if (participant[i] !== completion[i]) return participant[i];</span>
</span><span class="code-line"><span class="token comment">//   }</span>
</span><span class="code-line"><span class="token comment">// }</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">function</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token parameter">participant<span class="token punctuation">,</span> completion</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">const</span> completionObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> comp <span class="token keyword">of</span> completion<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>completionObj<span class="token punctuation">[</span>comp<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      completionObj<span class="token punctuation">[</span>comp<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>
</span><span class="code-line">      completionObj<span class="token punctuation">[</span>comp<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> participantPerson <span class="token keyword">of</span> participant<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>
</span><span class="code-line">      <span class="token keyword">typeof</span> completionObj<span class="token punctuation">[</span>participantPerson<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"undefined"</span> <span class="token operator">||</span>
</span><span class="code-line">      completionObj<span class="token punctuation">[</span>participantPerson<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span>
</span><span class="code-line">    <span class="token punctuation">)</span>
</span><span class="code-line">      <span class="token keyword control-flow">return</span> participantPerson<span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    completionObj<span class="token punctuation">[</span>participantPerson<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA['FECONF 2021 컴포넌트, 다시 생각하기' 정리]]></title>
    <link>https://www.hyesungoh.xyz/feconf2021RethinkingComponent</link>
    <pubDate>2022-02-15</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/feconf2021RethinkingComponent</guid>
    <description>
    <![CDATA[feconf2021RethinkingComponent]]>
    </description>
    <content:encoded>
      <![CDATA[<p><em>본 게시물은 원지혁 님이 발표하신 <a href="https://www.youtube.com/watch?v=HYgKBvLr49c" target="_blank" rel="noopener noreferer">FE CONF 2021의 '컴포넌트, 다시 생각하기'</a>를 듣고 정리한 내용입니다.</em></p>
<p><img src="https://user-images.githubusercontent.com/26461307/154068327-be828984-6634-4bca-919d-029e3f254eb8.jpg" alt="feconf 2021"></p>
<p><em>이미지 출처 : <a href="https://www.facebook.com/feconf.kr/" target="_blank" rel="noopener noreferer">FEConf 페이스북</a></em></p>
<h2 id="의존성" class="heading">의존성</h2>
<p><code>케이크</code>를 만드려면 <code>밀가루, 설탕, 계란</code>이 필요하다</p>
<p>-> <code>케이크</code>의 의존성 : <code>밀가루, 설탕, 계란</code></p>
<hr>
<p><code>React Component</code>의 의존성: 스타일, 로직, 전역 상태, 리모트 데이터 스키마</p>
<blockquote>
<p>리모트 데이터 스키마 : API 서버에서 내려주는 데이터의 모양</p>
</blockquote>
<h2 id="숨은-의존성" class="heading">숨은 의존성</h2>
<p>케이크에 딸기를 얹으려면 딸기뿐 아니라 <code>생크림</code>이 필요하다</p>
<p>-> 딸기 케이크의 숨은 의존성 : <code>생크림</code></p>
<hr>
<p>React Component에 정보를 추가하려면 정보뿐 아니라 <code>루트 컴포넌트와 현재 컴포넌트 사이의 수 많은 컴포넌트들</code>이 변경되어야 한다.</p>
<h2 id="비슷한-관심사라면-가까운-곳에-keep-locality" class="heading">비슷한 관심사라면 가까운 곳에, Keep Locality</h2>
<p>비슷한 관심사라면 같은 파일 안에 두거나 바로 옆에 두는 것이 좋다.</p>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Foo</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token function">useFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword control-flow">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">StyledDiv</span></span><span class="token punctuation">></span></span><span class="token plain-text"> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span><span class="token class-name">StyledDiv</span></span><span class="token punctuation">></span></span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">function</span> <span class="token function">useFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 로직</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">const</span> <span class="token maybe-class-name">StyledDiv</span> <span class="token operator">=</span> styled<span class="token punctuation">.</span><span class="token property-access">div</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span> <span class="token comment">// 스타일</span>
</span></code></pre>
<hr>
<p>Props를 통해 ID만 받고, 스키마는 전역 상태에서 받아 의존성을 느슨하게 할 수 있다.</p>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">{</span>
</span><span class="code-line">  id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token maybe-class-name">Props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">const</span> article <span class="token operator">=</span> <span class="token function">useArticle</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>article<span class="token punctuation">.</span><span class="token property-access">title</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<h2 id="데이터를-id-기반으로-정리하기-abstraction-by-normalization" class="heading">데이터를 ID 기반으로 정리하기, Abstraction by Normalization</h2>
<pre class="language-json"><code class="language-json code-highlight"><span class="code-line"><span class="token punctuation">{</span>
</span><span class="code-line">    id<span class="token operator">:</span> '<span class="token number">123</span>'
</span><span class="code-line">    user<span class="token operator">:</span> <span class="token punctuation">{</span>
</span><span class="code-line">        name<span class="token operator">:</span> 'foo'
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>위 데이터를 id로 쉽게 접근할 수 있도록 아래처럼 바꾸는 작업을 정규화 (Normalization)이라 함</p>
<pre class="language-json"><code class="language-json code-highlight"><span class="code-line"><span class="token punctuation">{</span>
</span><span class="code-line">    '<span class="token number">123</span>'<span class="token operator">:</span> <span class="token punctuation">{</span>
</span><span class="code-line">        id<span class="token operator">:</span> '<span class="token number">123</span>'
</span><span class="code-line">        user<span class="token operator">:</span> <span class="token punctuation">{</span>
</span><span class="code-line">            name<span class="token operator">:</span> 'foo'
</span><span class="code-line">        <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<blockquote>
<p>추천 라이브러리 : normalizr</p>
</blockquote>
<h4 id="global-id">Global ID</h4>
<p>보통 모델명과 ID를 string concat해서 사용</p>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token maybe-class-name">Props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">const</span> article <span class="token operator">=</span> <span class="token function">useArticle</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>article<span class="token punctuation">.</span><span class="token property-access">title</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p><code>article</code>을 사용한다는 것도 컴포넌트 밖에서 주입받고 있는 모습</p>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token maybe-class-name">Props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">const</span> article <span class="token operator">=</span> <span class="token function">useNode</span><span class="token punctuation">(</span><span class="token punctuation">{</span>on<span class="token operator">:</span> <span class="token string">'Article'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> props<span class="token operator">:</span> <span class="token punctuation">{</span>id<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>article<span class="token punctuation">.</span><span class="token property-access">title</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>사용할 모델을 컴포넌트 내부에 함께두는 모습</p>
<h4 id="goi">GOI</h4>
<p>Global ID를 이용해 데이터를 가져올 수 있는 API 서버</p>
<p>이를 이용하면 refetch 로직을 쉽게 구현할 수 있게됨</p>
<h2 id="의존한다면-그대로-드러내기-make-explicit" class="heading">의존한다면 그대로 드러내기, Make Explicit</h2>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">{</span>
</span><span class="code-line">    userName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</span><span class="code-line">    userNickname<span class="token operator">:</span> <span class="token builtin">string</span><span class="token operator">:</span>
</span><span class="code-line">    userImageUrl<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>위는 의존성을 들어낸 것 같지만 아래와 같이 User와 Image 모델 사이의 관계 정보를 나타낼 수 있다.</p>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">{</span>
</span><span class="code-line">  user<span class="token operator">:</span> <span class="token punctuation">{</span>
</span><span class="code-line">    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</span><span class="code-line">    nickname<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</span><span class="code-line">    image<span class="token operator">:</span> <span class="token punctuation">{</span>
</span><span class="code-line">      url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>훨씬 직관적인 모습이지만 한 컴포넌트에서 여러 모델의 정보를 표현하는 것은</p>
<p><strong>관심사의 분리가 제대로 안되어있다는 신호</strong>이기도 하다.</p>
<h2 id="재사용" class="heading">재사용</h2>
<p>재사용은 개발할때 편리하기 위한 것이 아닌, 변경할 때 편리하기 위한</p>
<p>즉, 유지보수가 쉬운 방법으로 재사용할 수 있다.</p>
<blockquote>
<p>컴포넌트의 변화는 리모트 데이터 스키마 변화 방향에 따라 바뀐다.</p>
</blockquote>
<h2 id="모델-기준으로-컴포넌트-분리하기-separating-components-by-model" class="heading">모델 기준으로 컴포넌트 분리하기, Separating Components by Model</h2>
<p>우리의 제품은 끊임없이 변화하면서 일관적인 경험을 주어야한다.</p>
<p>변화는 대부분 모델을 기준으로 일어나기 때문이 이를 인식하고 변화 방향성을 고려할 수 있다.</p>
<p><code>같은 모델을 의존하는 컴포넌트 : 재사용</code></p>
<p><code>다른 모델을 의존하는 컴포넌트 : 분리</code></p>
<h2 id="정리" class="heading">정리</h2>
<ul>
<li>비슷한 관심사라면 가까운 곳에</li>
<li>데이터를 ID 기반으로 정리하기</li>
<li>의존한다면 그대로 드러내기</li>
<li>모델 기준으로 컴포넌트 분리하기</li>
</ul>
<blockquote>
<p>관점이 기술보다 중요하다.</p>
</blockquote>
<p>스스로의 코드 설계를 더 깊게, 다르게 바라보기</p>
<p>기술 도입이 성공하기 위해선 유저 경험에 이르기까지 영향을 미칠 수 있어야 한다.</p>
<h2 id="내-정리" class="heading">내 정리</h2>
<p>기존 컴포넌트를 바라보는 시각을 많이 넓혀줄 수 있었던 발표였다.</p>
<p>그 중 모델을 기준으로 컴포넌트의 재사용과 분리를 판단하는 것은 상당히 정답에 가까운 것처럼 들렸으며 앞으로 도입해볼 방향으로 생각되었다.</p>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA['코딩을 지탱하는 기술'을 읽고]]></title>
    <link>https://www.hyesungoh.xyz/코딩을지탱하는기술</link>
    <pubDate>2022-02-14</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/코딩을지탱하는기술</guid>
    <description>
    <![CDATA[코딩을지탱하는기술]]>
    </description>
    <content:encoded>
      <![CDATA[<div align=center>
<img alt="코딩을 지탱하는 기술" src="https://user-images.githubusercontent.com/26461307/153852426-6b01d476-633e-4c45-bdf8-379e3a225473.jpg" width=200>
</div>
<p>니시오 히로카즈 저의 '코딩을 지탱하는 기술'을 읽고 느낀점을 공유합니다.</p>
<p>책에 대헤 기억하고 싶었던 내용들은 <a href="https://github.com/hyesungoh/learningWhatIWant/tree/master/Books/%EC%BD%94%EB%94%A9%EC%9D%84%EC%A7%80%ED%83%B1%ED%95%98%EB%8A%94%EA%B8%B0%EC%88%A0" target="_blank" rel="noopener noreferer">제 깃허브</a>에 정리해두었습니다.</p>
<h2 id="읽게-된-계기" class="heading">읽게 된 계기</h2>
<p>프로젝트를 진행하면서 프로덕트를 개발하면서 공부하는 내용들은 프레임워크 사용법, 라이브러리 사용법 등 개인적으로 low-level 기술이라고 생각되지 않았습니다.</p>
<p>현재 프론트엔드 개발자로써 개발을 진행하면서 언어의 스펙이나 전체적인 개발 생태계에 대해서 깊게 탐구해 본 적이 없었으며 해당 갈증을 해소하고자 찾던 책이 바로 '코딩을 지탱하는 기술' 이였습니다.</p>
<blockquote>
<p>현 시점에서는 웹 프론트엔드 영역이 활발하지만, 해당 기술에만 전문성을 띄게 될 시 빠르게 변하는 트렌드에 따라가지 못할 수도 있고 low-level에 대해 깊지는 않지만 빠르게 배울 수 있는 초석을 다져주면 제 강점이 될 수 있다는 생각에 갈증이 생겼던 것 같습니다.</p>
</blockquote>
<h4 id="왜에-대한-의문점">왜?에 대한 의문점</h4>
<p>다양한 프레임워크, 라이브러리등을 익히는 과정에 대부분의 공식문서에는 해당 기술이 <strong>어떤 문제점을 해소하고자 했는 지</strong>, 즉 왜 만들어졌는 지를 기술하고 있었습니다.</p>
<p>이를 통해 다양한 언어에서 일반화되어 쓰이고 있는 개념들 (변수, 배열 등)은 무슨 문제점에서 언제 만들어졌는 지에 대한 궁금증이 생겼습니다.</p>
<p>해당 의문점을 해결해줄 수 있는 책이 '코딩을 지탱하는 기술'이라고 판단되어 읽게 되었습니다.</p>
<h2 id="읽은-후-느낀-점" class="heading">읽은 후 느낀 점</h2>
<p>전체적으로 읽게된 이유를 해소할 수 있는 경험이였습니다.</p>
<p>다소 두께가 얇은 책이여서 금방 읽을 수 있을 것 같았는데 각 목차마다 다양한 언어의 코드로써 상황을 설명해주고 어떤 접근 방법으로 해결하게 되었는지와 함께 상황에 따라 정답은 다를 수 있는 것을 알려주기 때문에 이해하면서 읽을려다보니 오래 걸렸던 것 같습니다.</p>
<p>책에서 중점적으로 다루고 있는 언어와 언어 스펙의 개발 이유와 더불어 마지막 목차에서는 저자가 전하고 싶은 여러 말이 있었는 데 그 중에서 가장 기억에 남는 것은 다음과 같습니다.</p>
<blockquote>
<p>어떻게 만들까에 주력하기 쉽지만 무엇을 만들까, 왜 만들까를 잊어서는 안된다. 어떻게 만드는 지는 수단에 불과하다.</p>
</blockquote>
<p>나는 개발자로써 프로젝트를 진행하며 위를 알고 있음에도 망각하여 어떻게 만들까에 집중하여 개발했던 것 같습니다.</p>
<h2 id="마치며" class="heading">마치며</h2>
<p>개인적으로 다양한 부분에서 의욕이 떨어지던 시기에 책을 읽게 되어 몰랐던 것을 알게되면서 흥미가 생겨 다시 열심히 공부할 의지가 생길 수 있었던 경험이였습니다.</p>
<p>앞으로도 많게는 아니지만 지속적으로 책을 읽어가면 좋을 것 같아 다양한 책을 계속 읽어가볼려 합니다.</p>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[i18next를 사용해 React 다국어 지원하게 만들기 w/ TypeScript]]></title>
    <link>https://www.hyesungoh.xyz/reactI18nWithTs</link>
    <pubDate>2022-01-21</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/reactI18nWithTs</guid>
    <description>
    <![CDATA[Type Safe하게 다국어 지원 서비스를 개발한 경험을 공유합니다.]]>
    </description>
    <content:encoded>
      <![CDATA[<p><img src="https://user-images.githubusercontent.com/26461307/148644476-0b439a11-f709-468c-b7cc-92ba4cde0c19.png" alt="i18next"></p>
<p><a href="https://ko.reactjs.org/languages" target="_blank" rel="noopener noreferer">React 공식문서</a>나 <a href="https://www.apple.com/choose-country-region/" target="_blank" rel="noopener noreferer">Apple</a> 등의 다양한 웹 서비스에서 다국어를 지원하고 있습니다.</p>
<p>React 환경에서 다국어를 지원하는 서비스를 개발하며, TypeScript로 TypeSafe하게 개발하고자 노력한 경험을 공유하고자 합니다.</p>
<h2 id="설치" class="heading">설치</h2>
<pre class="language-bash"><code class="language-bash code-highlight"><span class="code-line"><span class="token function">yarn</span> <span class="token function">add</span> i18next react-18next
</span><span class="code-line"><span class="token comment"># or npm install</span>
</span></code></pre>
<p>React 생태계에서 다국어를 지원을 위한 라이브러리는 크게 <code>react-i18next</code>와, <code>react-intl</code>로 나누어지는 것으로 확인하였습니다.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/150501899-0296e1e6-6024-4405-a9a4-059c3f8222a1.png" alt="스크린샷 2022-01-21 오후 6 25 54"></p>
<p>위 이미지에서 확인할 수 있듯이 저는 둘 중 사용자가 더욱 많으며, 번들 사이즈가 작은 <strong>react-i18next</strong>를 선택하여 개발하였습니다.</p>
<h2 id="기본-적용" class="heading">기본 적용</h2>
<p>저는 다국어를 위한 처리를 <strong>i18n</strong> 디렉토리를 만들어 관리하였습니다.</p>
<pre class="language-bash"><code class="language-bash code-highlight"><span class="code-line">src
</span><span class="code-line">├── components
</span><span class="code-line">├── hooks
</span><span class="code-line">├── i18n
</span><span class="code-line">│   ├── index.ts
</span><span class="code-line">│   ├── react-i18next.d.ts
</span><span class="code-line">│   └── translation
</span><span class="code-line">│       ├── en-US.json
</span><span class="code-line">│       ├── es-ES.json
</span><span class="code-line">│       └── ko-KR.json
</span><span class="code-line"><span class="token comment"># ...</span>
</span></code></pre>
<p>우선 <code>i18n/index.ts</code>에는 다음과 같이 개발하였습니다.</p>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token comment">// src/i18n/index.ts</span>
</span><span class="code-line"><span class="token keyword">import</span> <span class="token imports">i18n</span> <span class="token keyword">from</span> <span class="token string">'i18next'</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> initReactI18next <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">'react-i18next'</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">import</span> <span class="token imports">ko_KR</span> <span class="token keyword">from</span> <span class="token string">'i18n/translation/ko-KR.json'</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">import</span> <span class="token imports">en_US</span> <span class="token keyword">from</span> <span class="token string">'i18n/translation/en-US.json'</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">import</span> <span class="token imports">es_ES</span> <span class="token keyword">from</span> <span class="token string">'i18n/translation/es-ES.json'</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">const</span> resources <span class="token operator">=</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token string-property property">'en-US'</span><span class="token operator">:</span> <span class="token punctuation">{</span>
</span><span class="code-line">    translation<span class="token operator">:</span> en_US<span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token string-property property">'ko-KR'</span><span class="token operator">:</span> <span class="token punctuation">{</span>
</span><span class="code-line">    translation<span class="token operator">:</span> ko_KR<span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token string-property property">'es-ES'</span><span class="token operator">:</span> <span class="token punctuation">{</span>
</span><span class="code-line">    translation<span class="token operator">:</span> es_ES<span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">i18n<span class="token punctuation">.</span><span class="token method function property-access">use</span><span class="token punctuation">(</span>initReactI18next<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
</span><span class="code-line">  resources<span class="token punctuation">,</span>
</span><span class="code-line">  lng<span class="token operator">:</span> <span class="token string">'en-US'</span><span class="token punctuation">,</span> <span class="token comment">// 기본 언어</span>
</span><span class="code-line">  fallbackLng<span class="token operator">:</span> <span class="token string">'en-US'</span><span class="token punctuation">,</span> <span class="token comment">// fallback 언어</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">default</span> i18n<span class="token punctuation">;</span>
</span></code></pre>
<p>디렉토리에서도 확인하셨듯이 <code>i18n/translation</code> 폴더에서는 각기 다른 텍스트들이 다음과 같은 형태로 작성되어 있는 파일입니다.</p>
<pre class="language-json"><code class="language-json code-highlight"><span class="code-line"><span class="token comment">// src/i18n/translation/en-US.json</span>
</span><span class="code-line"><span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token property">"main-header-title"</span><span class="token operator">:</span> <span class="token string">"TITLE"</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token property">"main-header-dsc"</span><span class="token operator">:</span> <span class="token string">"hello world"</span>
</span><span class="code-line">  <span class="token comment">// ...</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<pre class="language-json"><code class="language-json code-highlight"><span class="code-line"><span class="token comment">// src/i18n/translation/ko-KR.json</span>
</span><span class="code-line"><span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token property">"main-header-title"</span><span class="token operator">:</span> <span class="token string">"타이틀"</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token property">"main-header-dsc"</span><span class="token operator">:</span> <span class="token string">"안녕 세계"</span>
</span><span class="code-line">  <span class="token comment">// ...</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>이렇게 i18n을 작성하신 후, 최상위 컴포넌트에 Provider 적용을 하면 기본 적용은 끝나게 됩니다.</p>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token comment">// src/index.tsx</span>
</span><span class="code-line"><span class="token keyword">import</span> <span class="token imports"><span class="token maybe-class-name">ReactDOM</span></span> <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">I18nextProvider</span> <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">'react-i18next'</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">import</span> <span class="token imports">i18n</span> <span class="token keyword">from</span> <span class="token string">'i18n'</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token maybe-class-name">ReactDOM</span><span class="token punctuation">.</span><span class="token method function property-access">render</span><span class="token punctuation">(</span>
</span><span class="code-line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">I18nextProvider</span></span> <span class="token attr-name">i18n</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>i18n<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">SomeComponent</span></span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span><span class="token class-name">I18nextProvider</span></span><span class="token punctuation">></span></span><span class="token plain-text">,
</span></span><span class="code-line"><span class="token plain-text">  document.getElementById('root')
</span></span><span class="code-line"><span class="token plain-text">);
</span></span></code></pre>
<h2 id="기본-사용" class="heading">기본 사용</h2>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> useTranslation <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">'react-i18next'</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">function</span> <span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> t <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useTranslation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token function">t</span><span class="token punctuation">(</span><span class="token string">'main-header-title'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>위와 같이 react-i18next의 <code>useTranslation</code> hook을 이용해 간단히 현재 언어의 텍스트를 렌더링 할 수 있습니다.</p>
<h3 id="언어-변경">언어 변경</h3>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> useTranslation <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">'react-i18next'</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">function</span> <span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> t<span class="token punctuation">,</span> i18n <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useTranslation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">function</span> <span class="token function">onClickEng</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    i18n<span class="token punctuation">.</span><span class="token method function property-access">changeLanguage</span><span class="token punctuation">(</span><span class="token string">'en-US'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">return</span> <span class="token punctuation">(</span>
</span><span class="code-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token function">t</span><span class="token punctuation">(</span><span class="token string">'main-header-title'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>onClickEng<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">set eng</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span>
</span><span class="code-line">  <span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>언어 변경 또한 useTranslation hook을 이용하여 간단하게 구현할 수 있습니다.</p>
<p>제세한 내용은 <a href="https://react.i18next.com/" target="_blank" rel="noopener noreferer">공식문서</a>에 정리되어 있으니 확인하시면 좋을 것 같습니다.</p>
<h2 id="typesafe하게-사용하기" class="heading">TypeSafe하게 사용하기</h2>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token function">t</span><span class="token punctuation">(</span><span class="token string">'main-header-title'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>p</span><span class="token punctuation">></span></span>
</span></code></pre>
<p>많은 텍스트들을 json 파일에 기록하여 사용할 때, 하나씩 key 값을 확인해가며 개발하기에는 생산성과 안정성이 떨어진다고 판단하였습니다.</p>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token comment">// src/i18n/react-i18next.d.ts</span>
</span><span class="code-line"><span class="token keyword">import</span> <span class="token string">'react-i18next'</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">import</span> enUS <span class="token keyword">from</span> <span class="token string">'i18n/translation/en-US.json'</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">'react-i18next'</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">interface</span> <span class="token class-name">CustomTypeOptions</span> <span class="token punctuation">{</span>
</span><span class="code-line">    resources<span class="token operator">:</span> <span class="token keyword">typeof</span> enUS<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>그렇기 때문에 react-18next module을 json 파일의 type을 이용해 declare 하였습니다.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/150509554-d5d673a2-cd23-47cf-9d9a-9a27f194a407.png" alt="auto"></p>
<p>이를 통해 자동 완성 기능과 함께</p>
<p><img src="https://user-images.githubusercontent.com/26461307/150509568-13daac12-3211-43fd-9dd8-6b383a44dd4f.png" alt="error"></p>
<p>작성하지 않은 key를 사용하였을 때 error를 뱉는 모습을 확인할 수 있었습니다.</p>
<h2 id="마치며" class="heading">마치며</h2>
<p>TypeScript 환경에서 작성된 한글 게시물이 많이 없어 도움이 되었으면 하는 마음에 게시물로 작성해보았습니다.</p>
<p>추가적으로 <a href="https://github.com/i18next/i18next-browser-languageDetector" target="_blank" rel="noopener noreferer">브라우저의 언어를 감지</a>하여 적용, <a href="https://github.com/i18next/i18next-localStorage-cache" target="_blank" rel="noopener noreferer">로컬 스토리지를 이용해 캐싱</a>하는 플러그인 등 다양한 도구들이 있으니 확인 후 적용하시면 보다 좋은 경험을 하실 것이라고 생각됩니다.</p>
<p>부족한 게시물 읽어주셔서 감사드리며 부족한 사항이 있을 시 댓글 부탁드리겠습니다.</p>
<h2 id="참고" class="heading">참고</h2>
<ul>
<li><a href="https://react.i18next.com/latest/typescript" target="_blank" rel="noopener noreferer">공식문서 typescript 섹션</a></li>
<li><a href="https://medium.com/geekculture/strong-typed-i18n-in-react-c43281de720c" target="_blank" rel="noopener noreferer">Strong typed I18N in react</a></li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-네트워크 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-네트워크-Javascript</link>
    <pubDate>2022-01-19</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-네트워크-Javascript</guid>
    <description>
    <![CDATA[프로그래머스-네트워크-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>컴퓨터의 수와 컴퓨터들이 연결되어 있는 지 여부를 나타내는 배열이 주어질 때 연결된 그룹 (네트워크)기 몇 개인지 반환하는 문제. 방문했던 컴퓨터들을 확인하기 위한 isVisit 배열을 만들어 관리하였으며, 전체 네트워크의 수를 확인해야하기 때문에 n까지 반복문을 돌고 방문하지 않은 컴퓨터들에 대해 bfs 연산을 통해 방문처리를 하여 풀었다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">function</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> computers</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">let</span> network <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">const</span> isVisit <span class="token operator">=</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">fill</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&#x3C;</span> n<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>isVisit<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword control-flow">continue</span><span class="token punctuation">;</span>
</span><span class="code-line">    
</span><span class="code-line">    network <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line">    queue<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token keyword">const</span> currentNode <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token method function property-access">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>isVisit<span class="token punctuation">[</span>currentNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword control-flow">continue</span><span class="token punctuation">;</span>
</span><span class="code-line">      isVisit<span class="token punctuation">[</span>currentNode<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">      <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> nextComputer <span class="token keyword">in</span> computers<span class="token punctuation">[</span>currentNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>isVisit<span class="token punctuation">[</span>nextComputer<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword control-flow">continue</span><span class="token punctuation">;</span>
</span><span class="code-line">        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>computers<span class="token punctuation">[</span>currentNode<span class="token punctuation">]</span><span class="token punctuation">[</span>nextComputer<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword control-flow">continue</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">        queue<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>nextComputer<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">  <span class="token keyword control-flow">return</span> network<span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-구명보트 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-구명보트-Javascript</link>
    <pubDate>2022-01-18</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-구명보트-Javascript</guid>
    <description>
    <![CDATA[프로그래머스-구명보트-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>사람들의 몸무게와 구명보트에 탈 수 있는 제한 무게가 주어진 후 최대 두명이서 탈 수 있을 때 최소한의 구명보트 수를 구하는 문제. 첫 번째 접근은 최대 두명인 조건을 읽지 못해 무게 제한만을 고려하여 풀었으나, 이내 확인하고 정렬하여 최대 무게와 최소 무게의 사람을 비교하여 탈 수 있을 때 다음 사람으로 이동, 탈 수 없을 때 최대 무게인 사람만 수정하여 풀었다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">function</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token parameter">people<span class="token punctuation">,</span> limit</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">let</span> answer <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</span><span class="code-line">  
</span><span class="code-line">    people<span class="token punctuation">.</span><span class="token method function property-access">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">let</span> end <span class="token operator">=</span> people<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line">  
</span><span class="code-line">    <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>start <span class="token operator">&#x3C;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token operator">++</span>answer<span class="token punctuation">;</span>
</span><span class="code-line">      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>people<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">+</span> people<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">&#x3C;=</span> limit<span class="token punctuation">)</span> <span class="token operator">++</span>start<span class="token punctuation">;</span>
</span><span class="code-line">      <span class="token operator">--</span>end<span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">  
</span><span class="code-line">    <span class="token keyword control-flow">return</span> answer<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">  
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-위장 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-위장-Javascript</link>
    <pubDate>2022-01-15</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-위장-Javascript</guid>
    <description>
    <![CDATA[프로그래머스-위장-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>[옷 이름, 옷 카테고리]로 이루어진 배열이 주어지며 최소한 한 개의 옷을 입어야할 때 입을 수 있는 다른 옷의 조합의 수를 반환하는 문제. Object를 이용해 해당 카테고리에 존재하는 수를 계산한 후 약수의 수를 계산하여 풀었다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">function</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token parameter">clothes</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">const</span> graph <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> cloth <span class="token keyword">of</span> clothes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">const</span> <span class="token punctuation">[</span>_<span class="token punctuation">,</span> category<span class="token punctuation">]</span> <span class="token operator">=</span> cloth<span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>category <span class="token keyword">in</span> graph<span class="token punctuation">)</span> graph<span class="token punctuation">[</span>category<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword control-flow">else</span> graph<span class="token punctuation">[</span>category<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">let</span> answer <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> graph<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    answer <span class="token operator">*=</span> graph<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">  <span class="token keyword control-flow">return</span> answer <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[WAVY] 4. 겪었던 이슈들]]></title>
    <link>https://www.hyesungoh.xyz/wavy4-issue</link>
    <pubDate>2022-01-12</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/wavy4-issue</guid>
    <description>
    <![CDATA[서비스를 기획, 개발하며 겪었던 이슈들을 공유합니다.]]>
    </description>
    <content:encoded>
      <![CDATA[<p><img src="https://user-images.githubusercontent.com/26461307/148641874-cdb4f826-a5da-43d6-a5fd-3e879dcaa2f4.png" alt="wavy_full_logo"></p>
<p>지난 회고에서는 개발 스택을 어떻게 구성할 지, 기억에 남는 구현은 무엇인지를 회고하였습니다.</p>
<p>이번 회차에서는 프로젝트를 진행하며 겪었던 이슈들과 해결 방법, 더욱 좋은 방법은 있었는 지 회고해보도록 하겠습니다.</p>
<h2 id="학습용-동영상에-대한-저작권" class="heading">학습용 동영상에 대한 저작권</h2>
<blockquote>
<p>저희 팀은 사용자들이 선택하여 따라출 동영상을 저희는 "학습용 동영상"으로 명칭을 통일하였습니다.</p>
</blockquote>
<p>사용자가 춤을 선택하고 해당 춤을 보고 따라추는 서비스이니 만큼 해당 음악, 안무, 동영상에 대한 저작권 문제가 가장 큰 이슈였습니다.</p>
<h3 id="플랫폼-방향">플랫폼 방향</h3>
<p>첫 번째 접근은 <strong>사용자를 두 분류로 나누는 것</strong>이였습니다.</p>
<p>선생님 회원은 자신의 춤을 업로드 할 수 있고, 자신의 춤을 보고 따라 춘 횟수에 따라 리워드를 제공 받고</p>
<p>일반 회원은 업로드된 춤들을 선택하여 따라출 수 있는 하나의 플랫폼으로써 기획이 되었습니다.</p>
<p>이로써 하나의 플랫폼, 생태계를 구성하는 방법으로 기획을 해보았으나 여러가지 현실적인 문제에 부딪혔습니다.</p>
<p>첫 번째이자 가장 큰 문제점은 사용자 유입이였습니다.</p>
<p>플랫폼 서비스의 특성상 제공 유저가 확보되지 않는 한, 사용 유저가 소비할 컨텐츠가 없게 됩니다.</p>
<p>추가적으로 소프트웨어 마에스트로 과정 상 성과 발표를 진행해야 했는데, 플랫폼에 사용자가 없게 될 시 너무 큰 리스크가 존재하다는 것 이였습니다.</p>
<blockquote>
<p>직접적으로 선생님 회원을 유입하는 방법도 있었지만, 프로젝트 지원비를 신청하고 승인이 난 후, 결제하며 회의록까지 작성해야하는 과정이 리소스 과소비로 판단되었습니다.</p>
</blockquote>
<p>두 번째 문제점은 선생님 회원의 리워드입니다.</p>
<p>리워드는 크게 금전적인 것과 플랫폼 내 뱃지와 같은 보상 시스템을 만드는 것으로 아이디어가 도출되었습니다.</p>
<p>금전적인 리워드는 선생님 유저의 참여도를 높힐 수 있는 확실한 방법이라고 판단되었지만, 서비스의 지속을 위해서는 비즈니스 모델을 구축해야하는 점과 사업자, 세금 등 법적인 측면에서 지식이 전무하여 진행하기 어렵다고 판단되었습니다.</p>
<p>플랫폼 내 뱃지와 같은 보상 시스템을 만드는 방법은 참여도는 금전적인 리워드보다 떨어질 수 있지만, 법적인 측면에서 고려할 것이 없다는 장점을 가지고 있었습니다. 하지만 리워드에 대한 기획을 추가적으로 해야하는 것이 단점이라고 판단되었습니다.</p>
<hr>
<p>앞으로 기술할 이슈들에도 포함되는 것이지만, 저희는 이러한 문제를 겪을 때마다</p>
<p>팀이 결성됐을 때 적어 놓은 팀 목표를 같이 읽으며 저희에게 최선의 선택이 무엇인지 고민하였습니다.</p>
<p>저작권 문제를 해결하고자 하는 플랫폼 서비스 방향은 개발 외적으로 소모되는 리소스가 굉장히 많다는 이유로 저희의 팀 목표인 프로젝트를 즐기자에 부합하지 않는 것으로 판단되어 진행하지 않았습니다.</p>
<p>그래서 저희 Wavy는 Youtube 동영상을 embed하는 방법으로 저작권 문제를 해결하였습니다.</p>
<h3 id="youtube-embed">Youtube embed</h3>
<p>Youtube에 embed 옵션을 허용한 동영상들을 사이트내에 Youtube 플레이어로 embed하여 모든 저작권에 대한 문제를 Youtube에 위임하였습니다.</p>
<p>이를 통해 금전적인 이득을 취한다면 위법이 되지만, 서비스내 비즈니스 모델이 존재하지 않아 위법이 되지 않는 다는 판단을 하였습니다.</p>
<blockquote>
<p>이를 증명하기 위해 Youtube 약관을 정독하였습니다 ..</p>
</blockquote>
<p><img src="https://user-images.githubusercontent.com/26461307/140163003-00b4cc90-82e9-45e7-849e-24929dfab220.gif" alt="wavy main"></p>
<p>해당 방법으로 기획을 확립한 후, 가장 먼저 다가온 문제점은 개발자가 수작업으로 동영상을 선택해 데이터베이스에 추가해야하는 것이였습니다.</p>
<p>서비스 초반에는 다양한 영상을 검색하며 1차원적으로 문제를 해결했지만 Youtube embed를 통해 새로 생긴 장점인 <strong>엄청나게 많은 동영상이 존재한다는 것</strong>을 활용하여 문제점을 돌파하였습니다.</p>
<p>embed 옵션을 허용한 동영상 중 Youtube 링크만 있으면 모든 영상이 서비스내에서 소비될 수 있기 때문에, 사용자가 원하는 링크를 입력하고 따라할 수 있는 서비스를 제작하였고 이를 <strong>Google Analytics 이벤트</strong>를 걸어두어 소비자가 원하는 춤은 무엇인지에 대한 지표로 활용하여 추가적인 컨텐츠 확보에 대한 문제를 해결하였습니다.</p>
<h2 id="디자이너의-부재-및-아웃소싱" class="heading">디자이너의 부재 및 아웃소싱</h2>
<p>저희는 개발자 3인으로 이루어진 팀으로써 서비스를 개발하였습니다.</p>
<p>당연히 디자이너가 필요하게 되었고 이를 아웃소싱을 통해 해결하고자 하였습니다.</p>
<p>그렇기에 여러 업체와 컨택하며 가장 후기가 좋고 규모가 큰 업체와 진행하였습니다.</p>
<h3 id="아웃소싱-불발">아웃소싱 불발</h3>
<p>하지만 업체에서 보내주신 시안이 저희가 원하는 방향과 많이 달랐으며, 비싼 가격에 비해 퀄리티가 만족스럽지 않았습니다.</p>
<p>더불어 업체의 일방적인 의사소통 방법에 저희는 저희 의견을 온전히 전달 할 수 없었습니다.</p>
<p>문제점이 쌓인 후 의사소통하는 과정에서 팀원이 부적절한 단어를 의도치않게 사용하여 서로의 감정이 격양되는 상태까지 되었습니다.</p>
<p>서로 사과하며 격양된 분위기는 갈아 앉혔지만 멘토님과 팀원들간 많은 회의를 거쳐 해당 업체와 진행하지 않는 방향으로 결정하게 되었습니다.</p>
<p>기획 단계에서 일정이 많이 소모되어 다소 리스키한 선택이였지만, 해당 업체와 계속 진행할시 팀 목표인 프로젝트를 즐기는 것을 장담할 수 없는 결과물과 분위기여서 계약을 중지하였습니다.</p>
<h3 id="새로운-개인-디자이너">새로운 개인 디자이너</h3>
<p>앞선 경험을 통해 저희가 원하는 디자이너에 대해 정리할 수 있게 되었습니다.</p>
<p>디자인 실력도 중요하지만, 저희가 우선적으로 보았던 가치는 의사소통이 원할한 디자이너였습니다.</p>
<p>그렇기 때문에 이번에는 기업이 아닌 디자이너 개인에게 컨택을 하게 되었고 계약전 의사소통이 얼마나 원활한지를 지표로 활용하여 계약하게 되었습니다.</p>
<p>저희 팀에서 저는 디자인을 포함한 광고 동영상등 아웃소싱에 대한 전담을 하였기 때문에 제가 주로 디자이너분과 소통하였습니다.</p>
<p>계약한 디자이너분은 피그마를 이용하여 작업 하셨고, 저는 간단하게나마 피그마를 사용한 경험이 있어서 굉장히 수월하게 의사소통을 할 수 있었습니다.</p>
<h3 id="배운-점">배운 점</h3>
<p>위 과정을 통해 다양한 것을 배웠지만 가장 깊게 깨달은 것은 의사소통의 중요성이였습니다.</p>
<p>계약이 불발된 디자인 업체에게 보다 집요하게 회의를 요청하여 저희의 의사를 정확하게 전달하였으면 문제점이 적었을 것이라 생각되었고,</p>
<p>개인 디자이너분과 협업하며 피그마를 통해 의사소통을 하는 과정에서 역시 말보다 시각적인 결과물로 소통을 하는 것이 더욱 정확하다고 생각하였습니다.</p>
<p>이때문에 다양한 디자이너와 원활하게 의사소통을 하기 위해서는 디자인적인 지식과 다양한 도구를 다룰 수 있는 것이 강점이 된다고 생각하여, 제가 간단하게나마 다룰 수 있게 노력한 photoshop, Xd, Figma 등의 도구에 투자한 시간이 아깝지 않다고 생각되었습니다.</p>
<h2 id="마치며" class="heading">마치며</h2>
<p>가장 오랜 기간 진행한, 가장 규모가 큰 프로젝트 "Wavy"에 대한 회고를 이만 마칠려합니다.</p>
<p>멘토님들을 통해 보다 현업에서 어떤 고민들을 하는지, 어떻게 환경을 구성하는 지등 제가 알고 싶었던 부분들을 배울 수 있는 프로젝트이자 과정이라 굉장히 애착이 가는 프로젝트라고 말씀드릴 수 있을 것 같습니다.</p>
<p>유사도 비교를 위한 머신러닝 인스턴스를 유지하는 데 비용적인 문제로 운영을 중지하여 아쉽지만, 진행하며 성장한 제 모습과 이 회고를 비롯해 다른 남겨놓은 자료들로 만족할 수 있을 것 같습니다.</p>
<p>해당 자료들 링크와 함께 약 1년의 시간동안 같은 목표를 가지고 함께해준 팀원들에게 감사 인사를 전하며 "Wavy" 회고를 맞치도록 하겠습니다.</p>
<p>긴 글 읽어주셔서 감사합니다.</p>
<ul>
<li><a href="https://github.com/EO2-WAVY/WavyFrontend" target="_blank" rel="noopener noreferer">Web Client 깃허브</a></li>
<li><a href="https://www.youtube.com/watch?v=MYtoSIxjS7Y" target="_blank" rel="noopener noreferer">시연 영상</a></li>
<li><a href="https://drive.google.com/file/d/1AAZCyyrcsokhkVQlJFc6zzLnKSMQpR3D/view?usp=sharing" target="_blank" rel="noopener noreferer">홍보 동영상</a></li>
</ul>
<br/>
<p><img src="https://user-images.githubusercontent.com/26461307/149136852-a926397d-9261-48d7-a40d-5b6f57aea67e.jpeg" alt="단체사진"></p>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[WAVY] 3. 나는 어떻게 만들까?]]></title>
    <link>https://www.hyesungoh.xyz/wavy3-howI</link>
    <pubDate>2022-01-10</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/wavy3-howI</guid>
    <description>
    <![CDATA[프론트엔드 개발자로써, 어떻게 개발할지에 대한 고민과 과정을 공유합니다.]]>
    </description>
    <content:encoded>
      <![CDATA[<p><img src="https://user-images.githubusercontent.com/26461307/148641874-cdb4f826-a5da-43d6-a5fd-3e879dcaa2f4.png" alt="wavy_full_logo"></p>
<p>지난 회고에서는 어떻게 협업할 것인지에 대해 기술하였습니다.</p>
<p>이번에는 웹 프론트엔드 개발을 혼자 담당한 제가 개발적으로 어떻게 접근하였는 지 기술해보겠습니다.</p>
<h2 id="react-not-nextjs" class="heading">React, not Next.js</h2>
<p>다양한 서비스에서 SSR을 통한 SEO, 지원되는 기능(image optimization, router)등을 이유로 Next.js 프레임워크를 사용하는 것은 알고 있었습니다.</p>
<p>하지만 저는 Wavy 프로젝트를 개발하며 Next.js를 사용하지 않았으며 이유는 다음과 같습니다.</p>
<ul>
<li>부족한 이해도</li>
<li>촉박한 개발 기간</li>
<li>새로운 기능 및 라이브러리의 우선 순위</li>
<li>SEO 필요성 결여</li>
</ul>
<p>검증을 위해 프로토타이핑에 시간을 투자하게 되었고, 이 때문에 큰 규모의 어플리케이션을 Next.js를 배우며 개발하기에 시간상 적합하지 않다고 판단되었습니다.</p>
<blockquote>
<p>지금은 Next.js 환경을 열심히 공부하고 있습니다 ..</p>
</blockquote>
<p>또한 Suspense, Recoil, Framer-motion과 같은 이전에 사용해보지 못한 기능 및 라이브러리가 Next.js보다 우선순위가 높았습니다.</p>
<p>마지막으로 저희는 프로젝트를 개발하며 많은 사용자가 있으면 당연히 좋겠지만, 목표는 일단 개발의 재미와 함께 무사히 소프트웨어 마에스트로 과정을 수료하는 것이였기 때문에 SEO를 고려하지 않아도 된다고 판단되었습니다. 이러한 이유들로 하여금 최종적으로 Next.js가 아닌 CRA를 기반으로 한 React 프로젝트로써 개발하게 되었습니다.</p>
<h2 id="global-state-management" class="heading">Global State Management</h2>
<p>결론부터 기술하자면 Redux가 아닌 <strong>Recoil</strong>을 도입, 사용하였습니다.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/148733126-21175898-1ea3-44fd-8b07-1ca788f7347a.png" alt="reduxvsrecoil"></p>
<p>사용 유저와 서비스의 차이도 엄청나고 정식 1.0대 릴리즈도 아니지만 다음과 같은 이유에서 Recoil을 도입하였습니다.</p>
<ul>
<li>Actions, Reducer 등의 부재를 통해 짧아지는 코드로 인해 읽기 쉬워진다</li>
<li>Hook과 같은 형태로써 사용하고 배우기 쉽다</li>
<li>redux-thunk, redux-saga의 부족한 이해도 및 SWR</li>
<li>Facebook 개발</li>
</ul>
<p>수정이 필요하거나, 추가적인 전역 상태가 필요할 때 상대적으로 작성할 코드의 양에 이점이 있으며,
사용하는 방법도 Hook과 같은 형태로써 간단하고 직관적으로 사용할 수 있는 점이 상당한 장점이라고 생각되었습니다.</p>
<p>추가적으로 Facebook이 개발한 React와 Recoil 인만큼, 앞으로 지향하는 방향과 호환성 측면에서 상당 부분 일치할 것이라고 판단되어 배우는 데 투자해도 아깝지 않을 것이라 생각되었습니다.</p>
<p>이러한 이유에 더불어 아래 기술할 SWR에 대한 부분, Redux 비동기 라이브러리에 대한 이해도 부족을 이유로 Redux가 아닌 Recoil을 전역 상태 관리 라이브러리로 선택하게 되었습니다.</p>
<h2 id="data-fetching" class="heading">Data fetching</h2>
<p>내장된 캐시를 통해 요청 중복 제거, 자동화된 재검증, 간단한 Mutation 등을 이유로 Data fetching 라이브러리를 도입할 계획이였습니다.</p>
<blockquote>
<p>가장 큰 이유로써 저희 서비스는 "BTS", "블랙핑크" 등의 태그 별로 나누어져 Infinity Scroll이 적용되는 기획이였습니다. 이는 다른 태그 방문 후 재방문이 일어날 확률이 매우 높다고 가설을 세웠고, 이에 대한 사용자 경험을 최적화하기 위함입니다.</p>
</blockquote>
<p>결론적으로 Wavy에 도입한 것은 React-query가 아닌 <strong>SWR</strong> 이였습니다.</p>
<p>기존에 React-query를 간단하게나마 사용한 경험이 있지만, SWR을 도입한 이유는 Vercel 때문이였습니다.</p>
<p><a href="https://github.com/tannerlinsley" target="_blank" rel="noopener noreferer">Tanner Linsley</a>의 오픈 소스 프로젝트인 React-query와 Next.js에 더불어 turborepo, vercel, svelte의 rich haris 영입 등 엄청난 영향력을 끼치고 있는 vercel의 SWR을 단순히 비교하였을 때</p>
<p>저는 SWR이 더욱 배우고 사용해볼 가치가 있다고 판단되어 사용하였습니다.</p>
<blockquote>
<p>또한 React-query의 경우 key 값을 별도로 지정해야되는 것에 비해 SWR의 경우 API endpoint를 key 값으로 사용하는 점이 global하게 mutate가 일어나지 않는 저희 환경에서는 보다 개발 리소스를 줄이는 방법이라 생각하였습니다.</p>
</blockquote>
<h2 id="styling" class="heading">Styling</h2>
<p>CSS in JS 라이브러리는 Emotion과 Styled-components를 고민하였습니다.</p>
<p>결론적으로는 <strong>Styled-components</strong>를 사용하였으며, 이유로는 Emotion과 달리 다양하게 사용해보았기 때문이 가장 컷습니다.</p>
<p>Next.js와 같이 촉박한 개발기간에서 다른 새로 도입하는 라이브러리에 비해 우선순위가 밀렸다고 표현할 수 있을 것 같습니다.</p>
<hr>
<p>저는 Wavy가 매우 Interactive한, 화려한 서비스가 되었으면 좋겠다고 생각되었습니다.</p>
<p>이를 위해서는 애니메이션이 필수라고 생각되었고 주의깊게 보고 있었던 <strong>Framer-motion</strong>을 도입하는 계기가 되었습니다.</p>
<p>내부 디자이너가 없는 환경이며, 아웃소싱을 통해 구한 디자이너분은 Figma를 통해 결과물만을 전달받는 상황이라 전적으로 제 느낌과 감으로 애니메이션을 넣어야하는 상황이여서 Framer는 사용하지 않고 라이브러리로써만 사용하였습니다.</p>
<p>전에 사용한 경험이 있는 react-transition-group 라이브러리에 비해 사용법이 매우 간단하고 Styled-components와도 호환성이 좋아 매우 좋았던 경험이라고 생각됩니다.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/140171096-c2b7442c-262b-4f74-9350-2e733fee3de9.gif" alt="dance"></p>
<p>다양한 곳에서 사용되었지만, 특히 Notification에서 사용하였던 방법이 기억에 남습니다.</p>
<p>컴포넌트 NotificationWrapper에서 전역으로 선언된 notifications를 리스트 렌더링하며, 각 객체들은 framer-motion의 layout 기능을 이용해 자연스럽게 추가, 삭제되는 모습이 만족스러웠습니다.</p>
<p>추가와 삭제에 해당하는 로직도 useNotification hook에 위임하여 개발해, 다음에도 사용하고 싶은 구조라고 생각합니다.</p>
<blockquote>
<p>해당 코드는 <a href="https://github.com/hyesungoh/WavyFrontend/blob/master/src/components/Common/Notification/NotificationWrapper.tsx" target="_blank" rel="noopener noreferer">다음 링크</a>에서 확인할 수 있습니다.</p>
</blockquote>
<h2 id="deploy" class="heading">Deploy</h2>
<p>전에 하였던 프로젝트들은 github pages, netlify, heroku 등 무료 플랜을 주로 사용하였습니다.</p>
<p>하지만 프로젝트 지원비와 함께 AWS 계정 발급을 해주는 소프트웨어 마에스트로 과정에 힘입어 Wavy는 <strong>AWS S3</strong>를 통한 정적 호스팅과 <strong>CloudFront</strong>를 사용해 CDN에 태우는 경험을 하였습니다.</p>
<p>추가적으로 배포 자동화를 <strong>Github actions</strong>를 구성하여 진행하였습니다.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/148760528-09d82ed5-bba4-409b-8fd9-63527fd8e517.png" alt="스크린샷 2022-01-10 오후 8 42 14"></p>
<blockquote>
<p>Github marketplace에 등록해두었지만, 단순히 제 코드를 적어둔 것이라 오픈소스화는 대대적인 개편이 필요한 상태입니다 ..</p>
</blockquote>
<p>Production 배포에 더해, Gitlab flow에서 말하는 <code>pre-production</code> 브랜치 역할의, test 브랜치 또한 같은 환경으로 배포 및 자동화 개발을 하여 팀원들의 QA가 통과된 후에 병합할 수 있는 환경을 구성하였습니다.</p>
<p>소프트웨어 마에스트로 과정 전에는 배포의 이중화는 생각치도 못하였지만, 멘토님의 조언에 따라 구성을 해보니 확실히 하는 게 좋은 환경이라고 생각되었습니다.</p>
<p>이유는 이미 배포 자동화가 되었으면 들이는 리소스가 매우 적으며, 개발자가 생각치 못한 에러를 QA팀 혹은 팀원들이 검수하여 서비스에 적용한다는 것이 위험도를 많이 낮추는 과정이라고 생각되었기 때문입니다.</p>
<p>이에 더불어 Unit, E2E 테스트와 같은 테스트 코드가 더해진다면 더욱 위험도를 낮출 수 있었겠지만 테스트 코드에 대한 이해도 부족과 적용하기에 촉박하였기 때문에 Wavy에는 테스트 코드를 작성하지 못하였습니다.</p>
<blockquote>
<p>여담으로 현재 진행하는 사이드 프로젝트에서는 Cypress를 통한 E2E 테스트를 진행중인데 상당히 개발자 경험이 좋아, 앞으로 진행할 프로젝트에는 추가할 것 같습니다.</p>
</blockquote>
<h2 id="monitoring" class="heading">Monitoring</h2>
<p>이전에는 경험했던 모니터링 도구는 google search console이 유일했습니다.</p>
<p>과정 후반부에 멘토님께서 Sentry라는 도구를 알려주셨으며, 기간이 매우 부족해도 Google Analytics만은 부착하라는 조언을 해주셨습니다.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/148762841-2fe5a9c7-d4fc-4995-abc3-07f745c91885.png" alt="96명-6일새벽"></p>
<p>이를 적극 반영하여 사용자 모니터링을 위해 Google Analytics를 react-ga 라이브러리를 사용하여 간단히 부착할 수 있었고</p>
<p>pageview에 대한 로직을 <a href="https://github.com/hyesungoh/WavyFrontend/blob/master/src/hooks/Common/useGa.ts" target="_blank" rel="noopener noreferer">hook</a>에 위임, event에 대한 로직을 각각 로직들에 부착하여 지표를 얻을 수 있었습니다.</p>
<blockquote>
<p>지인과 교내 오픈 카카오톡을 통해 홍보하여 제 기준 매우 많은 사용자가 접속하여 신기했던 경험이였습니다.</p>
</blockquote>
<p><img src="https://user-images.githubusercontent.com/26461307/148763449-6baaaf41-45b6-4b0c-b4eb-c21c181f159b.png" alt="sentry"></p>
<p>에러 모니터링을 위한 도구인 Sentry도 공식문서를 참고하여 부착할 수 있었습니다.</p>
<p>처음으로 사용해본 도구여서 100% 활용 했다고 말씀은 못드리겠지만, 어떤 환경에서 어떤 오류에 쳐했는 지 알려주는 기능은 서비스 운영에 매우 큰 도움을 주었습니다.</p>
<p>가장 많이 오류 알림이 뜬 부분은 비동기적으로 호출한 데이터의 상태에 대한 것이였습니다. Loading 핸들링을 하였지만, 부족했던 부분들을 많이 찾을 수 있었고 이를 더욱 깔끔한 방향으로 핸들링하기 위해 <strong>Suspense</strong>를 도입하였습니다.</p>
<p>Suspense와 함께 ErrorBoundary를 도입하여 에러와 로딩에 대한 핸들링을 위임하였던 경험을 쌓을 수 있었으며 <a href="https://jbee.io/react/error-declarative-handling-1/" target="_blank" rel="noopener noreferer">해당 게시물</a>을 많이 참고하여 개발하였습니다.</p>
<h2 id="기억에-남는-구현---웹캠-녹화" class="heading">기억에 남는 구현 - 웹캠 녹화</h2>
<p><img src="https://user-images.githubusercontent.com/26461307/140171317-597d9b01-03ba-4c4d-90b1-7a45f9b37669.gif" alt="녹화"></p>
<p>앞써 게시했던 포스팅에서 사용자의 춤을 실시간으로 분석하는 것이 아닌, 서버에서 분석하는 방향으로 비즈니스 로직을 수정하였다고 기술했었습니다.</p>
<p>이를 위해 사용자 웹캠 영상을 녹화 후, 다 췄을 때 서버에 송신하는 과정이 필요했습니다.</p>
<p>추가적으로 사용자가 보고 따라추는 유투브 영상이 버퍼링에 걸리게 될 시, 녹화를 일시중지 후 버퍼링이 끝날 때 재개하는 로직 또한 필요하였습니다.</p>
<hr>
<p><code>MediaRecorder</code> 객체와 함께 react-webcam 라이브러리의 webcam.stream 객체를 사용하여 녹화를 구현하였고 녹화 시작, 중지, 재개, 중단등의 로직을 hook에 위임하여 개발하였습니다.</p>
<blockquote>
<p>해당 코드는 <a href="https://github.com/hyesungoh/WavyFrontend/blob/master/src/hooks/Dance/useCapture.ts" target="_blank" rel="noopener noreferer">다음 링크</a>에서 확인할 수 있습니다.</p>
</blockquote>
<p>다음 포스팅에 기술할 저작권 이슈때문에 Youtube 영상을 Embed하는 방식으로 영상을 배치하였고 이를 위해 <strong>React-player</strong> 라이브러리를 사용했습니다.</p>
<p>다행히도, React-player 라이브러리에는 버퍼링과 버퍼링 종료에 대한 핸들링을 할 수 있는 메소드가 존재하였고 이를 위 hook에서 구현한 메소드를 적재적소에 사용하여 구현할 수 있었습니다.</p>
<blockquote>
<p>firefox 브라우저는 mp4 녹화를 지원하지만, chrome 브라우저는 webm 형태로만 지원하여 webm 형태로 송신 후 서버단에서 인공지능 모델에 넣기 위해 ffmpeg을 이용해 mp4 형태로 변환했던 이슈도 기억에 남습니다.</p>
</blockquote>
<h2 id="기억에-남는-구현---동영상-컨트롤러" class="heading">기억에 남는 구현 - 동영상 컨트롤러</h2>
<p><img src="https://user-images.githubusercontent.com/26461307/140172018-1a760c56-bef8-442d-bc47-47b2e2c408c2.gif" alt="분석"></p>
<p>서비스의 <code>분석하기</code> 화면에서는 Youtube embed 영상과 녹화된 사용자 영상을 한 개의 컨트롤러로 동작할 수 있어야 했습니다.</p>
<p><code>연습하기</code> 화면에서는 1가지의 동영상만을 조작하는 환경이였는데, 한 페이지 덕분에 한 개의 컴포넌트를 추가적으로 만드는 것보다 재사용할 수 있는 방향으로 개발하고 싶었습니다.</p>
<p>이를 위해 Recoil atom을 <strong>callback ref</strong> 형태로 사용하였습니다.</p>
<blockquote>
<p><a href="https://www.hyesungoh.xyz/usisngIntersectionObserverMyWay/#%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95" target="_blank" rel="noopener noreferer">callback ref에 대한 본인의 게시물 링크</a></p>
</blockquote>
<p>덕분에 하나의 컨트롤러에서 callback ref 값에 따라 조작을 할 수 있었습니다.</p>
<hr>
<p>추가적으로 동영상 컨트롤러 드래그 기능을 구현하는 것이였습니다.</p>
<p>시점 이동의 경우 사이즈 화면과 동영상 총 길이, 클릭된 x 좌표를 통해 간단히 구현할 수 있었지만, 드래그는 다른 문제였습니다.</p>
<p>일단 드래그 이벤트가 호출될 시 매번 계산과 시점 이동을 하게 될 시, 브라우저 리소스와 Youtube 영상에 대한 네트워크 리소스가 많이 드는 것을 확인할 수 있었습니다.</p>
<p>이를 최적화하기 위해 throttle을 사용해 연산과 동작의 횟수를 줄이고, mouse up과 down에 대한 상태를 state로써 관리하여 이벤트 버블링때문에 발생하는 필요하지 않는 연산을 방지하였습니다.</p>
<blockquote>
<p>해당 코드는 <a href="https://github.com/hyesungoh/WavyFrontend/blob/master/src/components/Common/Dance/Controller/ControllerProgressbar.tsx" target="_blank" rel="noopener noreferer">다음 링크</a>에서 확인할 수 있습니다.</p>
</blockquote>
<h2 id="마치며" class="heading">마치며</h2>
<p>제가 진행했던 프로젝트 중에 가장 규모가 큰 프로젝트여서 더욱 기억에 남는 것이 많지만 이미 너무 나열한 느낌이 날까 걱정입니다.</p>
<p>다양한 새로운 경험들과 많은 문제들을 해결해나가며 배운 것 또한 가장 많은 프로젝트라고 말씀드릴 수 있을 것 같은데요.</p>
<p>현실적인 문제 많이 부딪혀 <em>(머신러닝 인스턴스 비용 ...)</em> 운영은 더이상 하지 못하게 되었지만, 앞으로 많이 배우고 많은 사용자들을 만족시킬 수 있는 서비스를 개발해보고 싶다는 생각이 들게 해주었던 고마운 프로젝트라고 생각됩니다.</p>
<p>이번 글은 여기서 마무리하며 마지막으로 겪었던 이슈들을 소개시켜드리고 프로젝트 회고를 끝마칠까 합니다.</p>
<p>긴 글 읽어주셔서 감사합니다.</p>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[WAVY] 2. 우리는 어떻게 만들까?]]></title>
    <link>https://www.hyesungoh.xyz/wavy2-howWe</link>
    <pubDate>2022-01-09</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/wavy2-howWe</guid>
    <description>
    <![CDATA[서비스를 어떻게 협업하며 만들지에 대한 경험을 공유합니다.]]>
    </description>
    <content:encoded>
      <![CDATA[<p><img src="https://user-images.githubusercontent.com/26461307/148641874-cdb4f826-a5da-43d6-a5fd-3e879dcaa2f4.png" alt="wavy_full_logo"></p>
<p>지난 회고에서 <strong>무엇을 만들지</strong>에 대해 어떻게 정하게 되었으며, 기술과 환경적인 검증을 위해 <strong>프로토타이핑</strong>을 하여 세부적인 기획을 할 수 있었다는 것을 기술하였습니다.</p>
<p>이번 회고에서는 <strong>어떻게</strong> 팀원들과 의사소통을 하며 프로젝트를 진행하였는 지 기술해보겠습니다.</p>
<h2 id="협업-도구" class="heading">협업 도구</h2>
<img width="1033" alt="notion" src="https://user-images.githubusercontent.com/26461307/148671530-4920cac3-4e98-43ee-a7e3-c7a6cdb85a10.png">
<p>의사소통을 위한 도구를 선정하는 기준은</p>
<ul>
<li>팀원 모두 손쉽게 사용할 수 있거나, 사용해봤으며</li>
<li>캘린더, 칸반보드, 메모장의 기능을 한 곳에서 관리할 수 있으면서</li>
<li>무료 플랜인 것</li>
</ul>
<p>이였습니다.</p>
<p><em>많은 도구를 써보진 않아서 그럴 지 모르지만</em> 이에 적합한 것은 Notion 밖에 없다고 의견이 통일되어</p>
<p>캘린더 기능을 통해 개인, 소프트웨어 마에스트로 및 팀 일정 관리, 날짜별로 나누어 회의록 작성, 개발 분야별로 나누어 사용 스택 및 환경을 공유하였습니다.</p>
<img width="926" alt="캘린더" src="https://user-images.githubusercontent.com/26461307/148671708-20ac3144-d810-45f7-9aa7-9e10fccb11bd.png">
<p><em>무적의 캘린더</em></p>
<img width="767" alt="fe-dp" src="https://user-images.githubusercontent.com/26461307/148671709-7fa6f8e1-1710-470d-b857-ba1aef6b8efd.png">
<p><em>프론트엔드 디렉토리 패턴 설계서</em></p>
<h2 id="일정-관리" class="heading">일정 관리</h2>
<p><em>저는 소프트웨어 마에스트로 과정 전에는 에자일이란 단어를 들어본 적이 없습니다</em></p>
<p>협업 경험이 많으신 팀원분께서 에자일 방법론을 설명해주셨고, 다양한 멘토님들이 에자일 방법론에 대해 설명해주셨습니다.</p>
<p>제가 생각한 에자일 방법론의 가장 중요한 키워드는 비즈니스의 변화의 쫓아가기 위한 방법이였습니다.</p>
<blockquote>
<p>소비자의 니즈는 정확히 예측할 수 없기에, 지속적으로 검증하는 방법으로 이해하였습니다.</p>
</blockquote>
<p>하지만 저희의 상황은 다음과 같았습니다.</p>
<ul>
<li>기술, 환경적 검증을 위한 프로토타이핑을 하였기 때문에 다소 촉박한 시간</li>
<li>중간 발표, 최종 발표, 멘토링 등 프로젝트 개발외에 투자할 시간 존재</li>
<li>새로 사용해보는 개발 스택 다수 존재</li>
</ul>
<p>위 상황에서 빠르게 MVP를 개발하고, 사용자 경험을 추적한 후 업데이트하는 방식은 다소 리스크가 큰 방법이라고 판단하였습니다.</p>
<p>그렇기 때문에 일정 관리 측면에서만 에자일 방법론의 개념을 일부 도입하는 방식으로 일정을 관리하였습니다.</p>
<h3 id="스프린트">스프린트</h3>
<p>가장 크게 도입한 것이 <strong>스프린트</strong> 개념입니다.</p>
<blockquote>
<p>Sprint: 육상 경기·수영 경기·스피드 스케이트 등의 단거리 레이스. 또는, 단거리를 전력(全力)으로 행하는 질주(疾走)나 역영(力泳)</p>
</blockquote>
<p>저희는 3주를 한 스프린트로 계획하였으며 스프린트 시작 시 해당 스프린트에 수행할 태스크들을 수립하고</p>
<p>스프린트가 종료될 시 멘토님과 함께 회고하는 시간을 가졌습니다.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/148727945-f300ac99-be5e-4e0f-9fe6-69b9e58e30b8.png" alt="회고"></p>
<h3 id="아쉬운-점과-느낀-점">아쉬운 점과 느낀 점</h3>
<p>수 많은 프로젝트가 그렇듯이, 저희 프로젝트도 초반에는 잘지켜지다가 개발 기간이 촉박해진 후반에는 스프린트 태스크 등록, 회고를 소홀히 하였습니다.</p>
<p>그 이유가 무엇인지 생각해보았을 때, 제가 생각한 이유는 다음과 같습니다.</p>
<ul>
<li>스프린트 외의 일정 관리가 존재</li>
<li>회고에 대해 멘토님에게 의존했던 경향</li>
<li>서로에 대한 믿음 ?</li>
</ul>
<p><img src="https://user-images.githubusercontent.com/26461307/148728574-cd821b76-cefe-4097-8627-0df129139f93.png" alt="todo"></p>
<p><img src="https://user-images.githubusercontent.com/26461307/148728579-404c42d5-df3d-435c-8d07-b597fb92d837.png" alt="daytodo"></p>
<p>저희는 평일, 주말할 것 없이 일정을 공유해 매일 회의를 하였습니다.</p>
<p>그리고 매일 해야할 태스크를 노션 메인화면에 체크리스트로 기록해두어 하나씩 해쳐나갔습니다.</p>
<p>이 때문에 스프린트 태스크 등록 및 수행이 무의미하게 느껴졌던 것 같습니다.</p>
<p>해야할 일을 체크리스트로 기록해두는 것은 협업 경험이 좋아 앞으로도 사용하고 싶은 방법이지만, 개인적으로 개발해야되는 것은 스프린트에 위임하여 수행하면 더욱 좋지 않았을까 생각되었습니다.</p>
<hr>
<p>회고를 진행할 시 항상 멘토님과 같이 하다보니, 멘토님 없이는 회고를 안하게 되었던 것 같습니다.</p>
<p>후반에는 강의 형태의 멘토링이 많아져 저희 팀의 회고를 맡아주실 시간이 부재되었고, 더불어 저희가 회고를 통해 얻는 협업의 경험이 체감되지 않아 진행하지 않았던 것 같습니다.</p>
<p>이는 회고의 방식을 수정하는 방법을 적용하면 좋을 것 같다고 생각되었으며, 그 방법으로는 <strong>KPT 방법론</strong>이 있다고 생각되었습니다.</p>
<blockquote>
<p>KPT 방법론과 함께 회고에 대한 좋은 글은 <a href="https://jbee.io/essay/about_retrospective" target="_blank" rel="noopener noreferer">다음 링크</a>를 참고해보시면 좋을 것 같습니다.</p>
</blockquote>
<hr>
<p>앞써 기술했던 것처럼, 저희 팀은 거의 매일을 함께 하였습니다. 이 때문에 매일 서로가 작업중인 것, 지금 겪고 있는 문제를 공유할 수 있었고</p>
<p>이는 회고를 통해 얻는 이점이 상쇄되는 데 큰 역할을 하였다고 생각되었습니다.</p>
<p>공동으로 해결해야할 문제가 많은 과정을 함께 하다보니 거의 매일 의논하게 되었지만, 회사나 사이드 프로젝트처럼 개인의 일을 공유할 시간이 따로 존재하지 않는 과정이라면 회고의 이점을 다시 체감할 수 있다고 생각되었고 현재 진행하는 사이드 프로젝트에서는 체감하고 있습니다.</p>
<h2 id="마치며" class="heading">마치며</h2>
<p>저는 한 프로젝트에서 Keep, Problem, Try가 있듯이 사람에게도 KPT를 적용할 수 있다고 느끼고 있습니다.</p>
<p>전 프로젝트에서 잘해서 유지하고 싶은 점, 문제가 되어서 수정하고 싶은 점, 더욱 좋다고 생각되어 시도해보고 싶은 점을 다음에 진행하게 되는 프로젝트에 적용하는 것 인데요.</p>
<blockquote>
<p>당연한 말일 수도 있습니다 ..</p>
</blockquote>
<p>Wavy는 이전에 진행했던 프로젝트에 비해 규모도 크며 체계적으로 일정관리를 했던 프로젝트여서 더욱 많은 점을 배우고 느꼈던 것 같습니다.</p>
<p>다음에는 개발적으로 어떻게 하였는 지, 겪었던 이슈와 해결했던 방법에 대해 기술하며 프로젝트 회고를 마칠 것 같습니다.</p>
<p>긴 글 읽어주셔서 감사합니다.</p>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[WAVY] 1. 무슨 서비스를 만들까?]]></title>
    <link>https://www.hyesungoh.xyz/wavy1-what</link>
    <pubDate>2022-01-08</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/wavy1-what</guid>
    <description>
    <![CDATA[어떤 서비스를 만들지, 기획에 대한 과정을 공유합니다.]]>
    </description>
    <content:encoded>
      <![CDATA[<p><img src="https://user-images.githubusercontent.com/26461307/148641874-cdb4f826-a5da-43d6-a5fd-3e879dcaa2f4.png" alt="wavy_full_logo"></p>
<p>소프트웨어 마에스트로 과정은 최대 3인이 한 팀으로 약 6개월간 서비스를 제작하게 됩니다.</p>
<p>저희 팀은 3인 팀으로써, 다른 팀에 비해 비교적 늦게 팀이 결성되었고 이에 따라 서비스 기획에 상당한 시간이 소모되었습니다.</p>
<p>기획에 앞서서 저희 팀은 소프트웨어 마에스트로 과정에서 어떤 결과를 얻고 싶은 지 먼저 의논한 후에 해당 목표에 적합한 아이디어를 생각해보는 방법을 택하였습니다.</p>
<h2 id="팀-목표" class="heading">팀 목표</h2>
<p><img src="https://user-images.githubusercontent.com/26461307/148641996-52c35a77-fefe-4ec3-83ff-ab2009e3f77b.png" alt="team_goal"></p>
<p>사진에서 볼 수 있듯이 저희는 소프트웨어 마에스트로 과정에서 창업, 인증 등을 목표로 삼지 않았습니다.</p>
<p>그 이유로는 창업을 통해 얻는 것에 대한 motivation의 부재와</p>
<p>소프트웨어 마에스트로 과정의 상위 10%에게 부여되는 인증 혜택은 물론 되면 좋지만, 인증을 쫓자니 과정에서 받을 스트레스와 순수히 개발을 즐길 수 없을 것 같았기 때문입니다.</p>
<blockquote>
<p>더하여 팀원 모두 학업과 병행하였기 때문에, 시간적 여유가 다른 팀에 비해 부족했던 것도 있습니다.</p>
</blockquote>
<p>그래서 저희 팀이 제일 중요하게 생각한 목표는 <strong>프로젝트를 즐기자</strong> 입니다.</p>
<p>팀원 모두 개발이 재밌어서 시작하게 되었으며, 앞으로도 재밌길 바랬기 때문입니다.</p>
<p>다른 목표로는 <strong>가치있는 결과물을 만드는 것</strong>이였습니다.</p>
<p>이유는 학생 신분에서 프로젝트에 사용될 수 있는 금액이 지원되는 것, 팀원에게 부족한 부분을 메꿔주실 멘토님들이 계시다는 것을 십시일반 활용하기 위해서 입니다.</p>
<h2 id="wavy" class="heading">WAVY</h2>
<p>위 목표에 부합하는 아이디어를 브레인스토밍을 통해 여러가지 뱉던 중, 팀원 중 한 분이 춤을 배우기 위해 겪었던 문제점을 공유해주셨습니다.</p>
<blockquote>
<p>여러 매체에서 BTS의 춤들이 너무 멋져보이기도 했고, 맨날 앉아만 있으니 활동적인 취미를 가지기 위해 춤을 배우고 싶었다.
하지만 댄스 학원에 등록하자니 금액적인 부담이 되었고, 유투브를 통해 혼자 따라해볼려니 내 모습을 볼 수 없으면서, 성취감 등의 부재로 경험이 좋지 않았다.</p>
</blockquote>
<p>춤에 대한 관심도의 상승은 방송 '스트리트 우먼 파이터'와 함께 동영상 기반 SNS '틱톡', '인스타그램 릴스', '유투브 숏츠'를 통해 체감하고 있던 저희 팀원은 이 문제점을 해결하는 아이디어면 좋을 것 같다고 생각하게 되었습니다.</p>
<p>어떻게하면 해당 문제점을 해결하면서, 과정이 재미있고, 가치있는 결과물을 만들 수 있는 지 수차례 논의한 결과</p>
<p><strong>인공지능이 내가 춘 춤에서 어디가 잘못되는 지 알려주는</strong> 킬링 서비스를 생각하게 되었습니다.</p>
<blockquote>
<p>논의를 겪으며 댄스 강사와 매칭 서비스, 커뮤니티 서비스 등 다양하고 좋은 아이디어가 있었지만 소프트웨어 마에스트로 과정에서 기획에 대한 심사에 "기술적 도전"이란 평가 항목이 있고 AI를 다루실 수 있는 팀원이 있어 해당 킬링 서비스가 채택되었습니다.</p>
</blockquote>
<h2 id="prototyping" class="heading">Prototyping</h2>
<p>해당 서비스의 구체화 중 첫 번째로 접근한 방법은 <strong>사용자가 실시간으로 춤을 추는 동안, 틀린 부분을 알려주는 것</strong> 입니다.</p>
<p>내가 추는 춤과 따라출 춤을 동시에 확인하기 위해서는 큰 화면이 필요하며 경쟁 서비스들이 모바일 앱 환경에서만 존재하는 것을 이유로 웹 서비스로 정하게 되었지만,</p>
<p>따라출 춤은 미리 머신러닝을 통해 데이터화 해둔다하여도, 실시간으로 따라추는 사용자의 춤을 비교하는 것이 현재의 웹 환경에서 가능한지, 원활한 사용자 경험을 주는 지 <strong>의문</strong>이 생겼습니다.</p>
<p>이를 해결하기 위해 멘토님에게 의논한 결과 <em>먼저 Prototyping을 통해 개발해보고 세부적인 기획을 하는 것이 좋아보인다</em>는 의견을 들었습니다.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/148642640-8f605b02-805b-45f5-b44e-d1545409359c.png" alt="prototype"></p>
<blockquote>
<p>저는 초등학교 이후로 춤을 춰 본적이 없습니다 ....</p>
</blockquote>
<p>멘토님 의견을 적극 반영하여 약 한 달의 기간동안 Prototype을 개발하게 되었습니다.</p>
<p>이를 통해 알 수 있는 인사이트와 앞으로의 방향을 정할 수 있어서 상당히 귀중한 경험이였습니다.</p>
<p>일단, 웹 환경에서 머신러닝을 구동할 수 있는 <code>Tensorflow Lite</code>를 사용하였으며, 사용자 웹캠의 화면을 데이터화된 영상과 비교하여 결과를 출력하였습니다.</p>
<p>매 프레임을 1초 단위마다 비교하는 알고리즘 또한 TypeScript로 작성하여 실시간으로 구동한 결과, M1 Macbook air 환경에서는 원활히 동작은 하였지만, 여러가지 단점이 있었습니다.</p>
<h3 id="1-사용자-환경-차이">1. 사용자 환경 차이</h3>
<p>언급한대로 일정 수준까지는 제 환경에서 원활히 동작하였지만,</p>
<p>정확한 측정을 위해 TensorFlow Lite의 Option을 올리게 될 시 일정 수치 이후에는 브라우저가 죽는 경험을 하였습니다.</p>
<p>더불어 매우 낮은 Option에서도 멘토님의 구형 노트북에서 구동한 결과 프레임이 쫓아오지 못하는 문제가 있었습니다.</p>
<h3 id="2-낮은-정확도">2. 낮은 정확도</h3>
<p>매우 정확한 비교를 바란 것이 아니였음에도 불구하고, 정확한 비교가 불가능하였습니다.</p>
<p>그 이유는 웹캠을 통해 인식하는 사용자의 데이터가 정확하지 않기 때문이였습니다.</p>
<p>다리나 팔이 겹치거나, 매우 빠른 동작을 할 시 당연하게도 정확하게 인식하지 못했습니다.</p>
<p>이에 대한 이유는 TensorFlow Lite의 정확도, 카메라 성능, 사용자 환경 등 수 없이 많은 이유가 있었습니다. <em>유추하였다고 표현해도 무방합니다...</em></p>
<h3 id="우리가-할-수-있는-해결-방법">우리가 할 수 있는 해결 방법</h3>
<p>다양한 사용자가 우리 서비스를 보다 원활히 사용할 수 있으며, 정확도를 높히는 방법으로 저희가 생각한 해결 방법은 <strong>사용자 모션 추출과 유사도 분석을 서버에서 하자</strong> 입니다.</p>
<p>이를 통해 위에서 유추한 낮은 정확도에 대한 이유 TensorFlow Lite의 정확도를 보다 고도화된 라이브러리 <code>AlphaPose</code>를 사용하여 해결할 수 있었기 때문입니다.</p>
<p>또한 유사도 분석을 서버에 위임하면서 클라이언트에 대한 부담이 줄어들어 사용자 환경에 대한 차이를 줄여줄 수 있을 것으로 생각하여 위 방법을 택하였습니다.</p>
<h2 id="결론" class="heading">결론</h2>
<p><img src="https://user-images.githubusercontent.com/26461307/148643510-5ed51186-44b0-49b6-907c-a3d7d55dd77f.png" alt="서비스 개요"></p>
<p>Prototyping을 통해 확인한 인사이트를 기반으로 논의한 결과 Wavy는 다음과 같이 킬링 서비스에 대한 세부적인 기획을 할 수 있었습니다.</p>
<ul>
<li>사용자는 "미리 분석된" 영상 중 하나를 선택하여 <code>연습</code>하거나, <code>도전</code>할 수 있다.</li>
<li><code>연습</code>할 시, 미리 분석된 영상과 사용자 영상을 같이 보여주며 마커를 통해 구간반복, 재생속도 조절 등을 할 수 있다.</li>
<li><code>도전</code>할 시, 미리 분석된 영상과 사용자 영상을 같이 보여주며 시점을 변경하거나 멈출 수 없고, 끝까지 따라추었을 때 녹화된 영상이 기록, 분석을 요청한다.</li>
<li>분석이 요청된 영상은 <code>마이페이지</code>와 <code>메인</code>에서 확인할 수 있으며, 분석이 종료될 시 초별로 정확도를 시각화하여 보여준다.</li>
</ul>
<p><img src="https://user-images.githubusercontent.com/26461307/148643570-8704e86a-54e3-4304-8b08-26c953d806b0.png" alt="wavy_flowchart drawio"></p>
<p>킬링 서비스외에 전체적인 서비스의 완성도를 위해 검색, 찜, 내가 췄던 춤에 대한 인사이트 등을 세부적으로 기획하여 전체적인 서비스 흐름을 완성할 수 있었습니다.</p>
<p>이후에는 서비스를 어떻게 개발하였는 지 비개발적인 부분과 제가 맡은 개발적인 부분으로 나누어 소개해보도록 하겠습니다.</p>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[WAVY] 0. Intro]]></title>
    <link>https://www.hyesungoh.xyz/wavy0-Intro</link>
    <pubDate>2022-01-07</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/wavy0-Intro</guid>
    <description>
    <![CDATA[Software Maestro 과정에서 개발한 Wavy의 개발기를 공유합니다.]]>
    </description>
    <content:encoded>
      <![CDATA[<p><img src="https://user-images.githubusercontent.com/26461307/148641874-cdb4f826-a5da-43d6-a5fd-3e879dcaa2f4.png" alt="wavy_full_logo"></p>
<p>소프트웨어 마에스트로 12기 과정에서 <strong>인공지능 기반의 맞춤형 K-POP 댄스 코칭 서비스</strong>, <code>WAVY</code>를 개발하게 되었습니다.</p>
<p>Wavy의 기획부터 어떻게 개발하였는 지, 어떤 이슈를 겪었는 지 회고와 공유를 목적으로 게시해봅니다.</p>
<h2 id="1-무슨-서비스를-만들까" class="heading">1. <a href="https://www.hyesungoh.xyz/wavy1-what/" target="_blank" rel="noopener noreferer">무슨 서비스를 만들까?</a></h2>
<p>서비스를 기획하게 된 배경과 함께 초기 접근을 소개합니다.</p>
<h2 id="2-우리는-어떻게-만들까" class="heading">2. <a href="https://www.hyesungoh.xyz/wavy2-howWe/" target="_blank" rel="noopener noreferer">우리는 어떻게 만들까?</a></h2>
<p>팀원들과 어떻게 의사소통하며 프로젝트를 진행했는 지 소개합니다.</p>
<h2 id="3-나는-어떻게-만들까" class="heading">3. <a href="https://www.hyesungoh.xyz/wavy3-howI/" target="_blank" rel="noopener noreferer">나는 어떻게 만들까?</a></h2>
<p>웹 프론트엔드를 전담한 제가 어떻게 만들지 고민한 것과 기억에 남는 구현을 소개합니다.</p>
<h2 id="4-겪었던-이슈들" class="heading">4. <a href="https://www.hyesungoh.xyz/wavy4-issue/" target="_blank" rel="noopener noreferer">겪었던 이슈들</a></h2>
<p>프로젝트를 진행하며 겪었던 이슈들을 소개하며 회고를 마칩니다.</p>
<h2 id="프로젝트-결과물" class="heading">프로젝트 결과물</h2>
<ul>
<li><a href="https://github.com/EO2-WAVY" target="_blank" rel="noopener noreferer">팀 깃허브 organization</a></li>
<li><a href="https://github.com/EO2-WAVY/WavyFrontend" target="_blank" rel="noopener noreferer">Web Client 깃허브</a></li>
<li><a href="https://www.youtube.com/watch?v=MYtoSIxjS7Y" target="_blank" rel="noopener noreferer">시연 영상</a></li>
<li><a href="https://drive.google.com/file/d/1AAZCyyrcsokhkVQlJFc6zzLnKSMQpR3D/view?usp=sharing" target="_blank" rel="noopener noreferer">홍보 동영상</a></li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[리액트에서 여러 개 한 번에 import하기 with TypeScript ]]></title>
    <link>https://www.hyesungoh.xyz/MultipleImortAtTsReact</link>
    <pubDate>2021-12-19</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/MultipleImortAtTsReact</guid>
    <description>
    <![CDATA[MultipleImortAtTsReact]]>
    </description>
    <content:encoded>
      <![CDATA[<p>리액트 환경에서 프로젝트를 진행하며 특정 디렉토리에 상당히 많은 파일 (ex 이미지)을 <code>Import</code>해야 하는 상황이 있었습니다.</p>
<h2 id="1차원적-접근" class="heading">1차원적 접근</h2>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token comment">// assets/images/index.ts</span>
</span><span class="code-line"><span class="token keyword">import</span> <span class="token imports">img1</span> <span class="token keyword">from</span> <span class="token string">'assets/images/img_001.jpg'</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">import</span> <span class="token imports">img2</span> <span class="token keyword">from</span> <span class="token string">'assets/images/img_002.jpg'</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">import</span> <span class="token imports">img3</span> <span class="token keyword">from</span> <span class="token string">'assets/images/img_003.jpg'</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">import</span> <span class="token imports">img4</span> <span class="token keyword">from</span> <span class="token string">'assets/images/img_004.jpg'</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token comment">// ...</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">const</span> images <span class="token operator">=</span> <span class="token punctuation">{</span> img1<span class="token punctuation">,</span> img2<span class="token punctuation">,</span> img3<span class="token punctuation">,</span> img4<span class="token punctuation">,</span> <span class="token spread operator">...</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></code></pre>
<p>1차원적으로 해당 파일이 존재하는 디렉토리에 <code>index.ts</code>를 생성 후 위와 같이 작성할 수 있을 것 같습니다.</p>
<p>import해야하는 파일의 수가 엄청 많지 않은 환경에서는 충분히 사용할 만한 방법이라고 생각되지만,</p>
<p>제 환경은 최소 300장의 이미지를 import해야 했기 때문에 위 방법은 적절하지 못하다고 생각하였습니다.</p>
<h2 id="requirecontext" class="heading">require.context</h2>
<p>해결 방법을 찾던 중 <a href="https://stackoverflow.com/questions/44607396/importing-multiple-files-in-react" target="_blank" rel="noopener noreferer">해당 게시물</a>의 아래 코드가 적합하다고 생각되었습니다.</p>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token keyword">function</span> <span class="token function">importAll</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">let</span> images <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">  r<span class="token punctuation">.</span><span class="token method function property-access">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    images<span class="token punctuation">[</span>item<span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token string">'./'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">r</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword control-flow">return</span> images<span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">const</span> images <span class="token operator">=</span> <span class="token function">importAll</span><span class="token punctuation">(</span>require<span class="token punctuation">.</span><span class="token method function property-access">context</span><span class="token punctuation">(</span><span class="token string">'./images'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">'/.png/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>images<span class="token punctuation">[</span><span class="token string">'0.png'</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>
</span></code></pre>
<p>여기서 사용하는 <code>require.context</code>는 디렉토리로부터 정규표현식에 해당하는 모든 모듈을 불러올 수 있는 webpack 컴파일러의 기능입니다.</p>
<p>동작 방법은 해당하는 모든 모듈 요청을 동적 목록으로 변환하고 이를 빌드 dependency로 추가하여 런타임에 요구할 수 있도록 한다고 합니다.</p>
<p>자세한 설명은 <a href="https://stackoverflow.com/questions/54059179/what-is-require-context" target="_blank" rel="noopener noreferer">해당 stackoverflow</a> 게시물을 참고하시면 좋을 것 같습니다.</p>
<h2 id="typescript" class="heading">TypeScript</h2>
<p>제가 원하는 해결 방법과 적합하였지만,</p>
<p>TypeScript 환경에서 require의 <code>context</code>를 인식하지 못하는 이슈가 있었습니다.</p>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token keyword">require</span><span class="token punctuation">.</span><span class="token method function property-access">context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Property 'context' does not exist</span>
</span></code></pre>
<h4 id="해결-방법">해결 방법</h4>
<p>해결 방법은 다음과 같습니다.</p>
<pre class="language-bash"><code class="language-bash code-highlight"><span class="code-line"><span class="token function">npm</span> i @types/webpack-env @types/node <span class="token parameter variable">-D</span> <span class="token comment"># or</span>
</span><span class="code-line"><span class="token function">yarn</span> <span class="token function">add</span> @types/webpack-env @types/node <span class="token parameter variable">-D</span>
</span></code></pre>
<p><code>@types/webpack-env</code>는 webpack에 대한 type 정의가 포함된 <a href="https://www.npmjs.com/package/@types/webpack-env" target="_blank" rel="noopener noreferer">패키지</a>이며,</p>
<p><code>@types/node</code>는 Node.js에 대한 type 정의가 포함된 <a href="https://www.npmjs.com/package/@types/node" target="_blank" rel="noopener noreferer">패키지</a>입니다.</p>
<pre class="language-json"><code class="language-json code-highlight"><span class="code-line"><span class="token comment">// tsconfig.json</span>
</span><span class="code-line"><span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token comment">// ...</span>
</span><span class="code-line">    <span class="token property">"types"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"node"</span><span class="token punctuation">,</span> <span class="token string">"webpack-env"</span><span class="token punctuation">]</span> <span class="token comment">// 해당 부분 추가</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">  <span class="token comment">// ...</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>해당 패키지들을 tsconfig에 추가하여 해결할 수 있습니다.</p>
<p>Type을 추가하여 제가 사용한 방법은 다음과 같습니다.</p>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token comment">// assets/images/index.ts</span>
</span><span class="code-line"><span class="token keyword">function</span> <span class="token function">importAll</span><span class="token punctuation">(</span>r<span class="token operator">:</span> __WebpackModuleApi<span class="token punctuation">.</span>RequireContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">let</span> images<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  r<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    images<span class="token punctuation">[</span>item<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'./'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">r</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">return</span> images<span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">const</span> images <span class="token operator">=</span> <span class="token function">importAll</span><span class="token punctuation">(</span>
</span><span class="code-line">  <span class="token keyword">require</span><span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">'assets/video'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token special-escape escape">\.</span>JPG</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<p>사용하는 컴포넌트에서는 간단히 다음과 같이 접근 할 수 있습니다.</p>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token comment">// 사용하는 곳.tsx</span>
</span><span class="code-line"><span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> images <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">'assets/images'</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">function</span> <span class="token function">SomeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">const</span> foo<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>images<span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">img_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>foo<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.JPG</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<h2 id="마치며" class="heading">마치며</h2>
<p>해당 해결 방법이 최고의 방법이라고는 장담하지 못하지만, 한글로 작성된 해결 방법이 많이 없어 공유해봅니다.</p>
<p>피드백과 잘못된 점 발견 시 댓글 남겨주시기 부탁드리겠습니다. 감사합니다.</p>
<h2 id="참고" class="heading">참고</h2>
<ul>
<li><a href="https://stackoverflow.com/questions/44607396/importing-multiple-files-in-react" target="_blank" rel="noopener noreferer">Importing multiple files in react</a></li>
<li><a href="https://stackoverflow.com/questions/54059179/what-is-require-context" target="_blank" rel="noopener noreferer">What is <code>require.context</code>?</a></li>
<li><a href="https://webcache.googleusercontent.com/search?q=cache:Z4xxAh2EK6EJ:https://merrily-code.tistory.com/138+&#x26;cd=1&#x26;hl=ko&#x26;ct=clnk&#x26;gl=kr&#x26;client=firefox-b-d" target="_blank" rel="noopener noreferer">타입스크립트 프로젝트에서 require.context 사용하기</a></li>
<li><a href="https://www.npmjs.com/package/@types/webpack-env" target="_blank" rel="noopener noreferer">npm @types/webpack-env</a></li>
<li><a href="https://www.npmjs.com/package/@types/node" target="_blank" rel="noopener noreferer">npm @types/node</a></li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-두-개-뽑아서-더하기 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-두-개-뽑아서-더하기-Javascript</link>
    <pubDate>2021-12-13</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-두-개-뽑아서-더하기-Javascript</guid>
    <description>
    <![CDATA[프로그래머스-두-개-뽑아서-더하기-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>정수로 이루어진 배열에서 두 개를 뽑아서 더했을 때 나올 수 있는 수를 정렬하여 반환하는 문제. 중복 제거를 위해 Set 자료형을 이용하여 풀었다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">function</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token parameter">numbers</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> numbers<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&#x3C;</span> numbers<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      set<span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> numbers<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword control-flow">return</span> <span class="token punctuation">[</span><span class="token spread operator">...</span>set<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">n1<span class="token punctuation">,</span> n2</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> n1 <span class="token operator">-</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-레벨2-소수-찾기 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-레벨2-소수-찾기-Javascript</link>
    <pubDate>2021-12-04</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-레벨2-소수-찾기-Javascript</guid>
    <description>
    <![CDATA[프로그래머스-레벨2-소수-찾기-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>"17"과 같은 문자열 정수가 주어진 후 해당 수를 조합하여 나온 수 중에서 소수가 몇 개인지 반환하는 문제. 해당 수를 조합해서 나올 수 있는 수를 계산하기 위해 백트래킹 알고리즘을 이용하였고, 조합해서 나온 수 중 가장 큰 수까지 에라토스테네스의 체 방법을 이용해 소수판별 배열을 만들어 계산하여 풀었다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">function</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token parameter">numbers</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">const</span> splitedNumbers <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token method function property-access">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">const</span> isVisted <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>splitedNumbers<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">fill</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">const</span> setNumbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">const</span> currentNumber <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">function</span> <span class="token function">backTracking</span><span class="token punctuation">(</span><span class="token parameter">depth</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>currentNumber<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line">      setNumbers<span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>currentNumber<span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>depth <span class="token operator">===</span> splitedNumbers<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> splitedNumbers<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>isVisted<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        currentNumber<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>splitedNumbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">        isVisted<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token function">backTracking</span><span class="token punctuation">(</span>depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">        currentNumber<span class="token punctuation">.</span><span class="token method function property-access">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">        isVisted<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</span><span class="code-line">      <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">  <span class="token function">backTracking</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">const</span> maxNum <span class="token operator">=</span> <span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">max</span><span class="token punctuation">(</span><span class="token spread operator">...</span>setNumbers<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">const</span> isPrime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>maxNum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">fill</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">function</span> <span class="token function">sieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    isPrime<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</span><span class="code-line">    isPrime<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> maxNum <span class="token operator">**</span> <span class="token number">0.5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>isPrime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> i<span class="token punctuation">;</span> j <span class="token operator">&#x3C;</span> maxNum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">+=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">          isPrime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</span><span class="code-line">        <span class="token punctuation">}</span>
</span><span class="code-line">      <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function">sieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">let</span> answer <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</span><span class="code-line">  setNumbers<span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>isPrime<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> answer <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword control-flow">return</span> answer<span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-멀쩡한-사각형 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-멀쩡한-사각형-Javascript</link>
    <pubDate>2021-12-03</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-멀쩡한-사각형-Javascript</guid>
    <description>
    <![CDATA[프로그래머스-멀쩡한-사각형-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>w, h의 가로 세로길이의 직사각형이 있을 때 대각선으로 자른 후, 멀쩡한 사각형의 개수를 반환하는 문제. 대각선으로 그었을 때 잘라지는 사각형의 수를 구하는 공식인 <code>w + h - gcd(w, h)</code>를 이용하여 풀었다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">function</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> m</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword control-flow">return</span> n <span class="token operator">%</span> m <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> m <span class="token operator">:</span> <span class="token function">gcd</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n <span class="token operator">%</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">  
</span><span class="code-line">  <span class="token keyword">function</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token parameter">w<span class="token punctuation">,</span> h</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword control-flow">return</span> w <span class="token operator">*</span> h <span class="token operator">-</span> <span class="token punctuation">(</span>w <span class="token operator">+</span> h <span class="token operator">-</span> <span class="token function">gcd</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">  
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[왜 Virtual DOM 인가?]]></title>
    <link>https://www.hyesungoh.xyz/whyVirtualDom</link>
    <pubDate>2021-12-02</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/whyVirtualDom</guid>
    <description>
    <![CDATA[whyVirtualDom]]>
    </description>
    <content:encoded>
      <![CDATA[<p>다양한 게시물에서 React, Virtual DOM의 장점을 성능적인 면만 기술하고 있습니다.</p>
<p>하지만 이는 절대적인 장점이 되지 않는다는 생각을 공유하고자 포스트를 남겨봅니다.</p>
<h2 id="virtual-dom-" class="heading">Virtual DOM ?</h2>
<p>Virtual DOM은 <a href="https://ko.reactjs.org/docs/faq-internals.html" target="_blank" rel="noopener noreferer">React 공식문서</a>에서 다음과 같이 기술되어 있습니다.</p>
<blockquote>
<p>Virtual DOM (VDOM)은 UI의 이상적인 또는 “가상”적인 표현을 메모리에 저장하고 ReactDOM과 같은 라이브러리에 의해 “실제” DOM과 동기화하는 프로그래밍 개념입니다. 이 과정을 재조정이라고 합니다.</p>
</blockquote>
<p>많은 블로그에서 Real DOM을 다시 렌더링하는 것에 자원 소모가 많아, Virtual DOM을 이용해 비교를 한 후 다른 부분만 렌더링하는 것이 성능적인 이점이 있다고 기술되어 있습니다.</p>
<p>하지만 이는 "일반적"인이 제외된 표현입니다.</p>
<h2 id="virtual-dom-vs-real-dom" class="heading">Virtual DOM vs Real DOM</h2>
<p>위에서 Real DOM을 다시 렌더링하는 것은 자원 소모가 많다고 기술하였습니다. 이를 풀어서 설명하자면 각 조작이 레이아웃의 변화, 트리의 변화 그리고 렌더링을 일으킨다는 것 입니다.</p>
<p>예를 들어 100개의 노드를 수정하였을 시, 100번의 레이아웃 계산과 100번의 리렌더링이 이루어지는 문제가 있는 것 입니다.</p>
<p>Virtual DOM은 이를 "더블 버퍼링"처럼 묶어서 최종적인 변화를 Real DOM에 적용시키는 방법입니다.</p>
<p>중요한 점은 이는 Virtual DOM을 사용하지 않아도 가능하다는 것 입니다. 오히려 이런 최적화 작업을 "잘" 손수했을 때 더욱 빠르다고 합니다.</p>
<h2 id="그럼-왜-virtual-dom-" class="heading">그럼 왜 Virtual DOM ?</h2>
<p>위에서 언급했듯이 Real DOM의 조작을 "잘"하면 Virtual DOM보다 더욱 빠른 성능을 보여줄 수 있습니다.</p>
<p>하지만 해당 과정을 하나하나 작업하지 않고 Vitual DOM을 통해 <strong>자동화</strong>, <strong>추상화</strong>하여,</p>
<p><strong>일반적</strong>으로 빠른 성능과 함께 위 React 공식문서에서 말하고 있는 <strong>선언적 API</strong>를 가능하게 하는 것, <strong>상태 중심 UI 개발</strong>을 상태 전환에 대해 생각하지 않고 개발할 수 있는 것이 Virtual DOM의 핵심입니다.</p>
<blockquote>
<p>여기서 말하는 선언적 API란 DOM 관리를 Virtual DOM에 위임하여, 컴포넌트가 DOM을 조작할 때 다른 컴포넌트의 DOM 조작 상태를 공유할 필요가 없다는 것입니다.</p>
</blockquote>
<p><img src="https://user-images.githubusercontent.com/26461307/144367105-fc519840-ab4b-4f55-bd16-f4506a39068f.jpg" alt="rethinking-best-practices"></p>
<h5 id="2013-jsconfeu-세미나의-pete-hunt"><em>2013 JSConfEU 세미나의 Pete Hunt</em></h5>
<p>이에 대해 증빙하듯 2013년 React Core팀의 Pete Hunt는 다음과 같은 말을 하였습니다.</p>
<blockquote>
<p>React is not magic. Just like you can drop into assembler with C and beat the C compiler, you can drop into raw DOM operations and DOM API calls and beat React if you wanted to. However, using C or Java or JavaScript is an order of magnitude performance improvement because you don't have to worry...about the specifics of the platform. With React you can build applications without even thinking about performance and the default state is fast.</p>
</blockquote>
<p>간단히 번역하자면, "어셈블리어를 이용해 C 컴파일러보다 좋은 성능으로 개발할 수 있는 것처럼 원시 DOM <em>(해당 포스트에서 말하는 Real DOM)</em> 작업을 직접하여 React보다 빠른 성능을 낼 수 있습니다. 하지만 어셈블리어가 아닌 C, Java, JS를 사용하면 생산성이 크게 늘어나듯이 React를 사용하면 성능에 대해 덜 생각하고 애플리케이션을 개발 할 수 있으며 이는 일반적으로 빠릅니다." 라고 하였습니다.</p>
<h2 id="일반적으로-빠르다-" class="heading">일반적으로 빠르다 ?</h2>
<p><img src="https://user-images.githubusercontent.com/26461307/144362526-d0ae11ba-d719-4b84-a7f1-dfea32b1afa9.png" alt="domBenchmark"></p>
<p><a href="https://www.doria.fi/bitstream/handle/10024/177433/levlin_mattias.pdf?sequence=2&#x26;isAllowed=y" target="_blank" rel="noopener noreferer">핀란드 Åbo Akademi University의 논문</a>에서는 각 프레임워크에서 DOM 조작에 대한 벤치마크가 기술되어 있습니다.</p>
<p>해당 논문의 결과에서 확인할 수 있듯이 일반적인 상황에서 React와 Vue가 사용하는 Vitual DOM이 준수한 성능을 보여주고 있는 것을 확인할 수 있습니다.</p>
<p>하지만 Change Detector를 사용하는 Angular, 컴파일을 통해 외과적으로 업데이트하는 Svelte가 더욱 빠른 경우도 있으며 이는 절대적으로 빠르지 않다에 대한 증빙입니다.</p>
<h2 id="svelte" class="heading">Svelte</h2>
<p>Svelte의 창시자 Rich Harris는 Vitrual DOM은 빠르다는 미신을 없애자는 글을 게시하였습니다.</p>
<p><a href="https://svelte.dev/blog/virtual-dom-is-pure-overhead" target="_blank" rel="noopener noreferer">해당 게시물</a>에서는 React의 Virtual DOM이 무엇이며, 몇가지 느려질 수 있는 상황이 기술되어 있습니다.</p>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">MoreRealisticComponent</span></span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>selected<span class="token punctuation">,</span> setSelected<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword null nil">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>
</span><span class="code-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">Selected </span><span class="token punctuation">{</span>selected <span class="token operator">?</span> selected<span class="token punctuation">.</span><span class="token property-access">name</span> <span class="token operator">:</span> <span class="token string">'nothing'</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">        </span><span class="token punctuation">{</span>props<span class="token punctuation">.</span><span class="token property-access">items</span><span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span>
</span><span class="code-line">          <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>li</span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token function">setSelected</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>li</span><span class="token punctuation">></span></span>
</span><span class="code-line">        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span>
</span><span class="code-line">  <span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>그 중 하나 예를 들자면, 위 코드에서는 props의 items를 이용해 li 요소를 렌더링하고 있습니다. 하지만 이 때 state가 변경되면 props.items가 변경되지 않았음에도 li 요소가 생성되게 됩니다.</p>
<p>이를 최적화할 순 있지만, 이미 충분히 빨라 낙관하게 되고 불필요한 작업을 기본적으로 할 경우 병목 현상이 일어나게 된다고 기술되어 있습니다.</p>
<p>하지만 Svelte는 이런 상황에 대해 명시적으로 설계되었으며, Vitual DOM이 제공하는 선언적이고 상태 중심 UI 개발을 Virtual DOM을 사용하지 않는 Svelte에서 유사하게 경함할 수 있다고 말하고 있습니다.</p>
<h2 id="마치며" class="heading">마치며</h2>
<p>Virtual DOM은 무조건적으로 좋은 것은 아니지만, 대체적으로 좋은 성능을 보여주고 선언적이고 상태 중심 UI 개발이 가능해짐으로 이는 충분히 사용할만한 가치가 있는 방법임에 틀림 없습니다.</p>
<p>Svelte는 Virtual DOM을 사용하지 않고 유사한 성능, 개발 생산성을 보여줌과 동시에 21년 12월 11일 Rich Harris가 Next.js, SWR을 개발한 Vercel에 합류하며 앞으로의 행보가 기대되는 상황입니다.</p>
<blockquote>
<p>개인적으로 Svelte의 개발자 경험이 매우 좋았어서, 앞으로 생태계가 더욱 커졌으면 하는 바램이 있습니다.</p>
</blockquote>
<p>부족한 글 읽어주셔서 감사드리며, 피드백 부탁드리겠습니다. 감사합니다.</p>
<h2 id="참고" class="heading">참고</h2>
<ul>
<li>
<p><a href="https://ko.reactjs.org/docs/faq-internals.html" target="_blank" rel="noopener noreferer">React - Virtual DOM</a></p>
</li>
<li>
<p><a href="https://hashnode.com/post/the-one-thing-that-no-one-properly-explains-about-react-why-virtual-dom-cisczhfj41bmssp53mvfwmgrq" target="_blank" rel="noopener noreferer">The one thing that no one properly explains about React — Why Virtual DOM</a></p>
</li>
<li>
<p><a href="https://velopert.com/3236" target="_blank" rel="noopener noreferer">위 아티클 번역</a></p>
</li>
<li>
<p><a href="https://www.doria.fi/bitstream/handle/10024/177433/levlin_mattias.pdf?sequence=2&#x26;isAllowed=y" target="_blank" rel="noopener noreferer">DOM benchmark comparison of the front-end
JavaScript frameworks React, Angular, Vue,
and Svelte - Åbo Akademi University</a></p>
</li>
<li>
<p><a href="https://svelte.dev/blog/virtual-dom-is-pure-overhead" target="_blank" rel="noopener noreferer">Vitual DOM is pure overhead - Rich Harris</a></p>
</li>
<li>
<p><a href="https://vercel.com/blog/vercel-welcomes-rich-harris-creator-of-svelte" target="_blank" rel="noopener noreferer">Vercel welcomes Rich Harris, creator of Svelte </a></p>
</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[Svelte - Cannot convert undefined to object Error when using axios]]></title>
    <link>https://www.hyesungoh.xyz/svelteAxiosConvertError</link>
    <pubDate>2021-11-15</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/svelteAxiosConvertError</guid>
    <description>
    <![CDATA[svelteAxiosConvertError]]>
    </description>
    <content:encoded>
      <![CDATA[<blockquote>
<p>mergeConfig.js:92 Uncaught TypeError: Cannot convert undefined or null to object</p>
</blockquote>
<h2 id="문제" class="heading">문제</h2>
<p>Axios의 최신 버전의 svelte 지원 issue라고 한다.</p>
<h2 id="해결-방법" class="heading">해결 방법</h2>
<p><code>0.21.1</code> 버전으로 다운그레이드하면 해결할 수 있다.</p>
<pre class="language-json"><code class="language-json code-highlight"><span class="code-line"><span class="token comment">// package.json</span>
</span><span class="code-line"><span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"svelte-app"</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token comment">// ...</span>
</span><span class="code-line">  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token property">"axios"</span><span class="token operator">:</span> <span class="token string">"0.21.1"</span>
</span><span class="code-line">    <span class="token comment">// ...</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<pre class="language-bash"><code class="language-bash code-highlight"><span class="code-line"><span class="token function">npm</span> i
</span><span class="code-line">
</span><span class="code-line"><span class="token function">npm</span> run dev
</span></code></pre>
<h2 id="참고" class="heading">참고</h2>
<ul>
<li><a href="https://www.reddit.com/r/sveltejs/comments/qiityh/how_to_use_axios_in_svelte/hil7ei7/" target="_blank" rel="noopener noreferer">reddit</a></li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-타겟-넘버 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-타겟-넘버-Javascript</link>
    <pubDate>2021-11-14</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-타겟-넘버-Javascript</guid>
    <description>
    <![CDATA[프로그래머스-타겟-넘버-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 정수로 이루어진 배열과 한 개의 정수가 주어질 때, 배열에 구성된 숫자들은 더하기 혹은 빼기로 모두 조합하였을 때 주어진 한 개의 정수가 되는 경우의 수를 반환하는 문제. 재귀적으로 탐색, 탐색이 종료됐을 시 조건에 부합하면 증감하여 풀었다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">function</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token parameter">numbers<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">function</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> sum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> numbers<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>sum <span class="token operator">===</span> target<span class="token punctuation">)</span> ans <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line">      <span class="token keyword control-flow">return</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token function">dfs</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> sum <span class="token operator">+</span> numbers<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token function">dfs</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> sum <span class="token operator">-</span> numbers<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword control-flow">return</span> ans<span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-가장-큰-수 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-가장-큰-수-Javascript</link>
    <pubDate>2021-11-10</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-가장-큰-수-Javascript</guid>
    <description>
    <![CDATA[프로그래머스-가장-큰-수-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>문자열로 변환 후, 더한 값을 기준으로 정렬하여 풀었다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">function</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token parameter">numbers</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">const</span> answer <span class="token operator">=</span> numbers
</span><span class="code-line">        <span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> n<span class="token punctuation">.</span><span class="token method function property-access">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token punctuation">.</span><span class="token method function property-access">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> b <span class="token operator">+</span> a <span class="token operator">-</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword control-flow">return</span> answer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"0"</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">:</span> answer<span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-기능개발 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-기능개발-Javascript</link>
    <pubDate>2021-11-10</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-기능개발-Javascript</guid>
    <description>
    <![CDATA[프로그래머스-기능개발-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>배열의 첫 번째 기능이 완성되는 것을 기준으로 날짜 값을 증감 후, 조건이 달성될 시 shift를 이용하여 계속 첫 번째 값과 증감된 날짜를 기준으로 풀었다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">function</span> <span class="token function">getFinished</span><span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span> s<span class="token punctuation">,</span> days</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">let</span> finished <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> days <span class="token operator">>=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        finished <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line">        p<span class="token punctuation">.</span><span class="token method function property-access">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">        s<span class="token punctuation">.</span><span class="token method function property-access">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token keyword control-flow">return</span> finished<span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">function</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token parameter">progresses<span class="token punctuation">,</span> speeds</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">const</span> answer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">let</span> days <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>progresses<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token keyword">const</span> tempFinished <span class="token operator">=</span> <span class="token function">getFinished</span><span class="token punctuation">(</span>progresses<span class="token punctuation">,</span> speeds<span class="token punctuation">,</span> days<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>tempFinished <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> answer<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>tempFinished<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">        days <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token keyword control-flow">return</span> answer<span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[State pattern with TypeScript]]></title>
    <link>https://www.hyesungoh.xyz/state</link>
    <pubDate>2021-10-27</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/state</guid>
    <description>
    <![CDATA[state]]>
    </description>
    <content:encoded>
      <![CDATA[<p>본 게시물은 <code>Java 언어로 배우는 디자인 패턴 입문 - Yuki Hiroshi 저</code>를 기반으로 공부한 것을 정리하며 Typescript로 재작성해본 내용입니다.</p>
<h2 id="state-패턴이란-" class="heading">State 패턴이란 ?</h2>
<p><code>state</code>는 상태를 의미합니다.</p>
<p>state 패턴이란 사물이나 모양이나 형편등의 <code>상태</code>를 클래스로 나타내는 패턴입니다.</p>
<h2 id="예제-프로그램" class="heading">예제 프로그램</h2>
<p>예제 프로그램은 금고경비 시스템이며 아래의 조건이 있습니다.</p>
<ul>
<li>1초에 1시간이 흐름</li>
<li>금고사용 버튼, 비상벨, 일반통화용 버튼이 존재</li>
<li>주간은 09:00 ~ 16;59, 야간은 17:00 ~ 08:59</li>
<li>주간에 금고를 사용하면 사용기록이 남는다</li>
<li>야간에 금고를 사용하면 비상사태로 통보된다</li>
<li>비상벨은 언제든 사용할 수 있다</li>
<li>주간에 일반 통화는 경비센터가 호출된다</li>
<li>야간에 일반 통화는 자동응답기가 호출된다</li>
</ul>
<h3 id="state-패턴-없어도-될-거-같은데-">State 패턴 없어도 될 거 같은데 ?</h3>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token function-variable function">금고사용메소드</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>주간<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        사용기록
</span><span class="code-line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
</span><span class="code-line">        비상상태 통보
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line"><span class="token function-variable function">비상벨사용메소드</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    비상상태 통보
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line"><span class="token function-variable function">일반통화사용메소드</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>주간<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        경비센터 호출
</span><span class="code-line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
</span><span class="code-line">        자동응답기 호출
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>물론 위의 방법이 결코 틀린 방법은 아닙니다. 하지만 State 패턴은 이와 같은 일을 전혀 다른 관점에서 생각하고 있습니다.</p>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line">주간상태클래스 <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token function-variable function">금고사용메소드</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">        사용기록
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token function-variable function">비상벨사용메소드</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">        비상상태 통보
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token function-variable function">일반통화사용메소드</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">        경비센터 호출
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">야간상태클래스 <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token function-variable function">금고사용메소드</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">        비상상태 통보
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token function-variable function">비상벨사용메소드</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">        비상상태 통보
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token function-variable function">일반통화사용메소드</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">        자동응답기 호출
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>위 *(State 패턴을 사용하지 않는 방법)*에서는 주간과 야간의 상태가 각 메소드 안, if문에 등장하고 각 메소드 안에서 현재의 상태를 조사하고 있습니다.</p>
<p>하지만 아래 *(State 패턴을 사용하는 방법)*에서는 주간과 야간의 <strong>상태를 클래스로 표현</strong>하고 있습니다. 상태를 클래스로 표현하기 때문에 메소드에서는 <strong>상태 검사를 위한 if문이 등장하지 않습니다.</strong></p>
<p>위에서는 상태가 메소드 안에, 아래에서는 클래스로, 메소드 안에 있던 <code>상태</code>를 외부로 표현한 모습을 염두에 두고 아래 예저 프로그램을 살펴보면 좋을 것 같습니다.</p>
<table>
<thead>
<tr>
<th>이름</th>
<th>해설</th>
</tr>
</thead>
<tbody>
<tr>
<td>State</td>
<td>금고의 상태를 나타내는 인터페이스</td>
</tr>
<tr>
<td>DayState</td>
<td>State를 구현, 주간의 상태를 나타내는 클래스</td>
</tr>
<tr>
<td>NightState</td>
<td>State를 구현, 야간의 상태를 나타내는 클래스</td>
</tr>
<tr>
<td>Context</td>
<td>금고의 상태변환을 관리하고 경비센터와 연락을 취하는 인터페이스</td>
</tr>
<tr>
<td>SafeFrame</td>
<td>Context를 구현, 사용자 인터페이스를 구현</td>
</tr>
<tr>
<td>Main</td>
<td>동작 테스트용 클래스</td>
</tr>
</tbody>
</table>
<h3 id="state-인터페이스">State 인터페이스</h3>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token function-variable function">doClock</span><span class="token operator">:</span> <span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">,</span> hour<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token function-variable function">doUse</span><span class="token operator">:</span> <span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token function-variable function">doAlarm</span><span class="token operator">:</span> <span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token function-variable function">doPhone</span><span class="token operator">:</span> <span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>시간이 설정되었을 때, 금고가 사용되었을 때, 비상벨이 눌렸을 때, 일반통화를 할 때의 상황에 대응해서 호출되는 인터페이스를 규정하고 있습니다.</p>
<p>여기에서 규정되어 있는 메소드는 모두 상태에 대응해서 처리가 변하게 됩니다. 즉, State 인터페이스는 <strong>상태의존 메소드의 집합</strong>입니다.</p>
<p>인수로 전달되고 있는 Context는 상태의 관리를 수행하고 있는 인터페이스 입니다.</p>
<h3 id="daystate-클래스">DayState 클래스</h3>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">DayState</span> <span class="token keyword">implements</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">private</span> <span class="token keyword">static</span> singleton<span class="token operator">:</span> DayState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DayState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">private</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</span><span class="code-line">  <span class="token keyword">static</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>singleton<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function-variable function">doClock</span> <span class="token operator">=</span> <span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">,</span> hour<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>hour <span class="token operator">&#x3C;</span> <span class="token number">9</span> <span class="token operator">||</span> <span class="token number">17</span> <span class="token operator">&#x3C;=</span> hour<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      context<span class="token punctuation">.</span><span class="token function">changeState</span><span class="token punctuation">(</span>NightState<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function-variable function">doUse</span> <span class="token operator">=</span> <span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    context<span class="token punctuation">.</span><span class="token function">recordLog</span><span class="token punctuation">(</span><span class="token string">'금고사용(주간)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function-variable function">doAlarm</span> <span class="token operator">=</span> <span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    context<span class="token punctuation">.</span><span class="token function">callSecurityCenter</span><span class="token punctuation">(</span><span class="token string">'비상벨(주간)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function-variable function">doPhone</span> <span class="token operator">=</span> <span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    context<span class="token punctuation">.</span><span class="token function">callSecurityCenter</span><span class="token punctuation">(</span><span class="token string">'일반통화(주간)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  toString <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token string">'[주간]'</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>DayState 클래스는 주간의 상태를 나타내는 클래스 입니다.</p>
<p>상태를 나타내는 클래스는 한 개씩 인스턴스를 만듭니다. 그 이유는, 상태가 변화할 때마다 새로운 인스턴스를 만들게 되면, 메모리와 시간이 낭비되기 때문이며 따라서 <code>Singleton</code> 패턴을 사용하고 있습니다.</p>
<p><code>doClock</code> 메소드는 시간을 설정하는 메소드이며, 인수로 제공된 시간이 야간이면 야간의 상태로 시스템을 이행하며 이 때, 상태의 변화가 일어납니다.</p>
<p><code>doUse</code>, <code>doAlarm</code>, <code>doPhone</code>은 각각 금고 사용, 비상벨, 일반 통화에 대응한 메소드입니다. Context의 메소드를 호출해서 필요한 일을 수행할 뿐입니다.</p>
<h3 id="nightstate-클래스">NightState 클래스</h3>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">NightState</span> <span class="token keyword">implements</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">private</span> <span class="token keyword">static</span> singleton<span class="token operator">:</span> NightState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NightState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">private</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</span><span class="code-line">  <span class="token keyword">static</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>singleton<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function-variable function">doClock</span> <span class="token operator">=</span> <span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">,</span> hour<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">&#x3C;=</span> hour <span class="token operator">&#x26;&#x26;</span> hour <span class="token operator">&#x3C;</span> <span class="token number">17</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      context<span class="token punctuation">.</span><span class="token function">changeState</span><span class="token punctuation">(</span>DayState<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function-variable function">doUse</span> <span class="token operator">=</span> <span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    context<span class="token punctuation">.</span><span class="token function">recordLog</span><span class="token punctuation">(</span><span class="token string">'!!비상!! 야간금고 사용'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function-variable function">doAlarm</span> <span class="token operator">=</span> <span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    context<span class="token punctuation">.</span><span class="token function">callSecurityCenter</span><span class="token punctuation">(</span><span class="token string">'비상벨(야간)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function-variable function">doPhone</span> <span class="token operator">=</span> <span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    context<span class="token punctuation">.</span><span class="token function">callSecurityCenter</span><span class="token punctuation">(</span><span class="token string">'야간통화 녹음'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  toString <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token string">'[야간]'</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>NightState 클래스는 야간의 상태를 나타내는 클래스 입니다.</p>
<p>Singleton 패턴, 메소드등 구성은 DayState와 같습니다.</p>
<h3 id="context-인터페이스">Context 인터페이스</h3>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token function-variable function">setClock</span><span class="token operator">:</span> <span class="token punctuation">(</span>hour<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token function-variable function">changeState</span><span class="token operator">:</span> <span class="token punctuation">(</span>state<span class="token operator">:</span> State<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token function-variable function">callSecurityCenter</span><span class="token operator">:</span> <span class="token punctuation">(</span>msg<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token function-variable function">recordLog</span><span class="token operator">:</span> <span class="token punctuation">(</span>msg<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>Context 인터페이스는 상태를 관리하거나 경비센터의 호출을 수행합니다.</p>
<p>실제로 무슨 일을 하는지는 Context를 구현하는 SafeFrame에서 확인할 수 있습니다.</p>
<h3 id="safeframe-클래스">SafeFrame 클래스</h3>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">SafeFrame</span> <span class="token keyword">implements</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">private</span> textClock<span class="token operator">:</span> HTMLSpanElement<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">private</span> textArea<span class="token operator">:</span> HTMLTextAreaElement<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">private</span> buttonUse<span class="token operator">:</span> HTMLButtonElement<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">private</span> buttonAlarm<span class="token operator">:</span> HTMLButtonElement<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">private</span> buttonPhone<span class="token operator">:</span> HTMLButtonElement<span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token comment">// 현재 상태</span>
</span><span class="code-line">  <span class="token keyword">private</span> state<span class="token operator">:</span> State <span class="token operator">=</span> DayState<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token comment">// textClock 생성 및 배치</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>textClock <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>textClock<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token comment">// textArea 생성 및 배치</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>textArea <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'textarea'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>textArea<span class="token punctuation">.</span>rows <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
</span><span class="code-line">    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>textArea<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token comment">// 버튼들 생성 및 배치</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>buttonUse <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>buttonUse<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'USE'</span><span class="token punctuation">;</span>
</span><span class="code-line">    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>buttonUse<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>buttonAlarm <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>buttonAlarm<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'ALARM'</span><span class="token punctuation">;</span>
</span><span class="code-line">    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>buttonAlarm<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>buttonPhone <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>buttonPhone<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'PHONE'</span><span class="token punctuation">;</span>
</span><span class="code-line">    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>buttonPhone<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token comment">// Listener 부착</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>buttonUse<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onClickButton<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>buttonAlarm<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onClickButton<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>buttonPhone<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onClickButton<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function-variable function">onClickButton</span> <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> MouseEvent<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> innerHTML <span class="token punctuation">}</span> <span class="token operator">=</span> e<span class="token punctuation">.</span>target <span class="token keyword">as</span> HTMLButtonElement<span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>innerHTML <span class="token operator">===</span> <span class="token string">'USE'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">doUse</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>innerHTML <span class="token operator">===</span> <span class="token string">'ALARM'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">doAlarm</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>innerHTML <span class="token operator">===</span> <span class="token string">'PHONE'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">doPhone</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function-variable function">setClock</span> <span class="token operator">=</span> <span class="token punctuation">(</span>hour<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>textClock<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>hour <span class="token operator">></span> <span class="token number">9</span> <span class="token operator">?</span> hour <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">0</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>hour<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:00</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">doClock</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> hour<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function-variable function">changeState</span> <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token operator">:</span> State<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">recordLog</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">에서 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>state<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">로 상태가 변화했습니다.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function-variable function">callSecurityCenter</span> <span class="token operator">=</span> <span class="token punctuation">(</span>msg<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>textArea<span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">call! </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>msg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function-variable function">recordLog</span> <span class="token operator">=</span> <span class="token punctuation">(</span>msg<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>textArea<span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>msg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>SafeFrame 클래스는 Context 인터페이스를 구현하고 있으며, 프로그램에서 사용될 DOM 요소들을 클래스 생성자에서 생성하고 있습니다.</p>
<p><code>onClickButton</code> 메소드는 해당 버튼이 눌렸을 때 실행되며 안의 if문은 '버튼의 종류'에 대응하는 것이지 '현재의 상태'에 대응하는 것이 아니니 "State 패턴에서는 if문을 사용하지 않는다고 했는데?"라는 오해를 하지 않으셔도 됩니다.</p>
<p><code>setClock</code> 메소드는 시간을 나타내기 위해 'textClock'의 값을 바꿔주며, 현재 상태의 <code>doClock</code> 메소드를 통해 상태에 따른 처리를 수행합니다. 이 때 상태의 전환이 일어나게 되는데, 이 때 <code>changeState</code> 메소드의 <code>this.state = state</code> 구문에서 실행됩니다.</p>
<p>이는 <strong>현재의 상태를 나타내고 있는 필드에 상태를 나타내는 클래스의 인스턴스를 대입하는 것이 상태전환에 해당합니다.</strong></p>
<p><code>callSecurityCenter</code>, <code>recordLog</code>는 보안업체에 연락, 사용기록을 남기는 역할이지만 구현상으로 화면에 표시만하고 있습니다.</p>
<h3 id="main-클래스">Main 클래스</h3>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">const</span> frame<span class="token operator">:</span> SafeFrame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SafeFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">let</span> hour<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">      hour <span class="token operator">=</span> hour <span class="token operator">===</span> <span class="token number">23</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> hour <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line">      frame<span class="token punctuation">.</span><span class="token function">setClock</span><span class="token punctuation">(</span>hour<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<p>동작 테스트를 위해 <code>SafeFrame</code> 클래스를 생성하며, 1초마다 시간을 업데이트하고 있습니다.</p>
<h3 id="실행-결과">실행 결과</h3>
<iframe src="https://codesandbox.io/embed/state-pattern-with-ts-xnp6n?fontsize=14&hidenavigation=1&theme=dark"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="state pattern with ts"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>
<p><em>단순히 body에 요소들을 추가하고, Styling을 하지않아 깔끔하게 보이지는 않습니다</em></p>
<h2 id="state-패턴의-구성요소" class="heading">State 패턴의 구성요소</h2>
<ul>
<li>
<p><strong>State</strong></p>
<p>State 역할은 상태를 나타내며 상태가 변할 때마다 다른 동작을 하는 인터페이스를 결정합니다. 이 인터페이스는 상태에 의존한 동작을 하는 메소드의 집합이 됩니다. 예제 프로그램에서는 <code>State</code> 인터페이스가 담당하였습니다.</p>
</li>
<li>
<p><strong>ConcreteState</strong></p>
<p>ConcreteState 역할은 구체적인 각각의 상태를 표현하며 State 역할로 결정되는 인터페이스를 구체적으로 구현합니다. 예제 프로그램에서는 <code>DayState</code>, <code>NightState</code> 클래스가 담당하였습니다.</p>
</li>
<li>
<p><strong>Context</strong></p>
<p>Context 역할은 현재의 상태를 나타내는 ConcreteState 역할을 가집니다. 또한, State 패턴의 이용자에게 필요한 인터페이스를 결정합니다. 예제 프로그램에서는 <code>SafeFrame</code> 클래스가 담당하였습니다.</p>
</li>
</ul>
<h2 id="class-diagram" class="heading">Class diagram</h2>
<div align="center">
<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/e/e8/State_Design_Pattern_UML_Class_Diagram.svg/451px-State_Design_Pattern_UML_Class_Diagram.svg.png" alt="state-diagram"></p>
</div>
<h2 id="divide-and-conquer" class="heading">Divide and Conquer</h2>
<p>**Divide and Conquer(분활해서 통치해라)**라는 방침은 프로그래밍에서 자주 등장하곤 합니다. 이것은 큰 규모의 문제를 해결하고자할 때, 해당 문제를 <strong>작은 문제로</strong> 나누고 그래도 해결하기 힘들다면 더 작은 문제로 나누어 크고 까다로운 문제를 하나 푸는 대신에 작고 쉬운 문제를 많이 푸는 방침입니다.</p>
<p>State 패턴은 "상태"를 클래스로 표현하였습니다. 각각의 구체적인 상태를 각각의 클래스로 표현해서 문제를 분활한 것입니다.</p>
<p>State 패턴은 다뤄야할 상태가 많을 때 장점을 발휘하게 됩니다.</p>
<h2 id="상태에-의존한-처리" class="heading">상태에 의존한 처리</h2>
<p>SafeFrame 클래스의 <code>setClock</code> 메소드는 Main 클래스로부터 호출되어 시간의 설정을 지시하고 있습니다.</p>
<p>setClock 메소드 안에서 그 처리를 <code>state.doClock(this, hour)</code>로 state에 위임하고 있습니다.</p>
<p>즉, 시간의 설정을 현재의 상태에 의존한 처리로 취급하고 있습니다. doClock 메소드만이 아닌, State 인터페이스로 선언되고 있는 메소드는 모두 <code>"상태의 의존한 처리"</code>이고 <code>"상태에 따라 동작이 달라지는 처리"</code>입니다.</p>
<blockquote>
<ul>
<li>
<p>추상 메소드로서 선언하고 인터페이스로 한다</p>
</li>
<li>
<p>구상 메소드로서 구현하고 각각의 클래스로 한다</p>
</li>
</ul>
</blockquote>
<p>State 패턴에서는 "상태에 의존한 처리"를 위 두 가지 사항으로 정리할 수 있습니다.</p>
<p>추상 메소드로 선언하고 인터페이스로 하는 것이 <code>상태에 따라 달라져야할 메소드들</code>,</p>
<p>구상 메소드로서 구현하고 각각의 클래스로 하는 것이 <code>각각의 상태에 따라 실행되어야할 메소드들의 구현</code>입니다.</p>
<h2 id="상태전환은-누가-관리해야-하는가-" class="heading">상태전환은 누가 관리해야 하는가 ?</h2>
<p>State 패턴에서 상태전환은 <strong>누가 관리해야 할지</strong>는 주의해야하는 요소입니다.</p>
<p>예제 프로그램에서는 Context 역할의 <code>SafeFrame</code> 클래스가 상태전환을 실제로 수행하는 <code>changeState</code> 메소드를 구현하였으나 실제로 호출하는 것은 <code>ConcreteState</code> 역할의 DayState 클래스나 NightState 클래스입니다. 즉, 예제 프로그램에선느 "상태전환"을 "상태에 의존한 동작"으로 간주하고 있습니다. 이는 장점과 단점이 존재합니다.</p>
<p>장점은 "다른 상태로 전환하는 것은 언제인가"하는 정보가 <code>하나의 클래스 내에 정리</code>되어 있는 점입니다. 즉, DayState 클래스가 다른 상태로 전환하는 것은 언제인지를 알고 싶을 경우 DayState 클래스의 코드를 읽으면 됩니다.</p>
<p>단점은 <code>"하나의 ConcreteState 역할이 다른 ConcreteState 역할을 알아야 한다"</code>는 점입니다. 예제 프로그램에서는 DayState 클래스는 doClock 메소드 안에서 NightState 클래스를 사용하고 있습니다. 이는 장래에 NightState 클래스를 삭제하고 싶을 때 DayState 클래스도 수정해야 한다는 것을 의미합니다. 즉, <code>상태전환을 ConcreteState 역할에 맡기면 클래스 사이의 의존관계를 깊게 한다</code>는 것입니다.</p>
<p>위 방법을 포기하고 모든 상태전환을 Context 역할의 SafeFrame 클래스에 맡길 수도 있습니다. 그렇게 하면 각각의 ConcreteState 역할의 독립성이 높아져서 프로그램 전체의 예측이 좋아지는 경우가 있지만, Context 역할이 모든 ConcreteState 역할을 알아야 하는 문제가 발생합니다. 경우에 따라서 여기에 "Mediator" 패턴을 적용할 수 있습니다.</p>
<h2 id="새로운-상태를-추가하는-것은-간단하다" class="heading">새로운 상태를 추가하는 것은 간단하다</h2>
<p>State 패턴에서 새로운 상태를 추가하는 것은 간단합니다. 예제 프로그램처럼 State 인터페이스를 구현한 FooState 클래스를 만들어 필요한 메소드를 구현하면 되기 때문입니다. 단지, 상태전환의 부분이 다른 ConcreteState 역할과의 접점이 되기 때문에 주의해야할 뿐입니다.</p>
<p>하지만 완성된 State 패턴에 새로운 <code>상태의존의 처리</code>를 추가하는 것은 <code>곤란</code>합니다. 이는 State 인터페이스를 수정하는 것을 의미하며, 모든 ConcreteState 역할에 처리를 추가하는 일이 되기 때문입니다.</p>
<h2 id="관련-패턴" class="heading">관련 패턴</h2>
<ul>
<li>Singleton</li>
<li>Flyweight</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[Javascript의 Deep한 깊은 복사]]></title>
    <link>https://www.hyesungoh.xyz/deepCopy</link>
    <pubDate>2021-10-23</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/deepCopy</guid>
    <description>
    <![CDATA[deepCopy]]>
    </description>
    <content:encoded>
      <![CDATA[<pre class="language-js"><code class="language-js code-highlight"><span class="code-line"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token literal-property property">info</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">job</span><span class="token operator">:</span> <span class="token string">'student'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token spread operator">...</span>foo <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">bar<span class="token punctuation">.</span><span class="token property-access">info</span><span class="token punctuation">.</span><span class="token property-access">job</span> <span class="token operator">=</span> <span class="token string">'programmer'</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span><span class="token property-access">info</span><span class="token punctuation">.</span><span class="token property-access">job</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span><span class="token property-access">info</span><span class="token punctuation">.</span><span class="token property-access">job</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<p>다음 출력 결과는 무엇일까 ?</p>
<pre class="language-js"><code class="language-js code-highlight"><span class="code-line">programmer<span class="token punctuation">;</span> <span class="token comment">// student 일 줄 알으셨나요 ?</span>
</span><span class="code-line">programmer<span class="token punctuation">;</span>
</span></code></pre>
<p><code>student</code>일 줄 알으셨던 분은 아래 글을 읽으시면 도움이 될 것 같습니다.</p>
<h2 id="얕은-복사-깊은-복사-" class="heading">얕은 복사, 깊은 복사 ?</h2>
<p>얕은 복사는 객체를 직접 대입 해, <code>둘 다 같은 데이터</code>의 주소를 가지도록 복사하는 것입니다.</p>
<pre class="language-js"><code class="language-js code-highlight"><span class="code-line"><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">const</span> obj2 <span class="token operator">=</span> obj1<span class="token punctuation">;</span>
</span><span class="code-line">obj2<span class="token punctuation">.</span><span class="token property-access">age</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span><span class="token property-access">age</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
</span></code></pre>
<p>위 예제처럼 <code>obj2</code>의 값을 바꾸었는데, <code>obj1</code>의 값도 바뀐 것을 확인할 수 있습니다.</p>
<hr>
<p><code>깊은</code> 복사는 얕은 복사와 반대로, 해당 데이터 주소의 데이터만 복사해서 사용하는 것을 뜻합니다.</p>
<pre class="language-js"><code class="language-js code-highlight"><span class="code-line"><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token spread operator">...</span>obj1 <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// spread</span>
</span><span class="code-line"><span class="token keyword">const</span> obj3 <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// assign</span>
</span><span class="code-line">obj2<span class="token punctuation">.</span><span class="token property-access">age</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
</span><span class="code-line">obj3<span class="token punctuation">.</span><span class="token property-access">age</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span><span class="token property-access">age</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1</span>
</span></code></pre>
<p>일반적으로 객체(오브젝트)에 대한 깊은 복사는 <code>...</code> spread 연산자, <code>assign</code> 메소드를 이용합니다.</p>
<p><strong>하지만 이는 <code>1 Depth</code>의 요소에 한해서 깊은 복사가 이루어집니다.</strong></p>
<pre class="language-js"><code class="language-js code-highlight"><span class="code-line"><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token literal-property property">depth1</span><span class="token operator">:</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token literal-property property">depth2Name</span><span class="token operator">:</span> <span class="token string">'name'</span><span class="token punctuation">,</span>
</span><span class="code-line">    <span class="token literal-property property">depth2</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></code></pre>
<p>예를 들어 다음과 같은 오브젝트는 depth1의 값은 깊은 복사가 되지만,</p>
<p>depth2Name, depth2의 경우 얕은 복사가 되어 <code>맨 위</code>의 실행 결과를 초래하는 것입니다.</p>
<h2 id="깊이있는-객체를-깊은-복사하는-법" class="heading">깊이있는 객체를 깊은 복사하는 법</h2>
<ol>
<li>cloneDeep</li>
</ol>
<p>가장 쉬운 방법은 <code>lodash</code>의 <code>cloneDeep</code>을 사용하는 것입니다.</p>
<pre class="language-js"><code class="language-js code-highlight"><span class="code-line"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> cloneDeep <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">'lodash'</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token function">cloneDeep</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<ol start="2">
<li>JSON</li>
</ol>
<p>오픈 소스에 의존하지 않으면서 가장 쉬운 방법은 <code>JSON</code>을 활용하는 방법입니다.</p>
<pre class="language-js"><code class="language-js code-highlight"><span class="code-line"><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">parse</span><span class="token punctuation">(</span><span class="token known-class-name class-name">JSON</span><span class="token punctuation">.</span><span class="token method function property-access">stringify</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<p>하지만 함수, Date 객체, Regex등 유실되는 데이터가 있을 수 있으며,</p>
<p>속도가 느리다는 단점이 존재합니다.</p>
<ol start="3">
<li>재귀적으로 탐색하여 생성</li>
</ol>
<p>오픈 소스에 의존하지 않으면서, 퍼포먼스적인 문제를 해결하고자하면</p>
<p>직접 객체의 요소들을 1차원 값처럼 여길 수 있도록 재귀적으로 복사하는 방법이 있습니다.</p>
<h2 id="마치며" class="heading">마치며</h2>
<pre class="language-js"><code class="language-js code-highlight"><span class="code-line"><span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token spread operator">...</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span></code></pre>
<p>저는 웹을 개발하며 1 depth 이상의 깊은 복사는 구현해본 경험이 없어 spread 연산자를 이용해 시도를 하였으나, 정상적으로 동작하지 않아 찾아본 결과를 추합하여 저와 같은 문제를 겪는 분들에게 도움을 드리고자 정리 해보았습니다.</p>
<p>제 상황은 ML 파이프라인을 거친 데이터를 시각화하기전, 전처리 과정을 거쳐야하는 상황이였으며 기존 throttle, debounce 기능을 위해 lodash를 사용했어서, cloneDeep을 이용하여 해결하였습니다.</p>
<p>이 글을 보시는 분들은 각자의 환경에 적합한 방법으로 현명히 해결하시길 바라겠습니다. 감사합니다.</p>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[Mediator pattern with TypeScript]]></title>
    <link>https://www.hyesungoh.xyz/mediator</link>
    <pubDate>2021-10-20</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/mediator</guid>
    <description>
    <![CDATA[mediator]]>
    </description>
    <content:encoded>
      <![CDATA[<p>본 게시물은 <code>Java 언어로 배우는 디자인 패턴 입문 - Yuki Hiroshi 저</code>를 기반으로 공부한 것을 정리하며 Typescript로 재작성해본 내용입니다.</p>
<h2 id="mediator-패턴이란-" class="heading">Mediator 패턴이란 ?</h2>
<p><code>Mediator</code>는 중개인, 조정자를 의미합니다.</p>
<p>100명의 회원이 함께 프로젝트를 하고 있을 때, 모든 회원이 각 회원들에게 서로 지시를 내리는 상황은 매우 혼란스럽니다.</p>
<p>하지만, 1명의 <code>중개인</code>가 등장하여 이 중개인에게만 보고를 하고, 중개자인이 회원에게 지시를 내릴 수 있게 되었다면 상황은 훨씬 간결해질 것입니다.</p>
<p>이처럼 모든 요소들이 각 요소들에게 영향을 끼치는 것이 아닌, 다른 요소에 영향을 미칠 일이 발생할 시 <code>중개인</code>에게 알리고 중개인은 대국적인 판단을 통해 각 회원에게 지시를 내리는 것이 <code>Mediator</code> 패턴의 성격입니다.</p>
<h2 id="예제-프로그램" class="heading">예제 프로그램</h2>
<p>예제 프로그램은 이름과 패스워드를 입력하는 로그인 Form 입니다.</p>
<p>하지만 단순히 입력을 하는 것이 아닌 아래의 조건이 있는, 조금 복잡한 Form 입니다.</p>
<ul>
<li>게스트 로그인, 사용자 로그인인지 선택</li>
<li>게스트 로그인일 시 사용자 명과 패스워드를 무효상태화</li>
<li>사용자 로그인일 시 사용자 명은 유효상태화</li>
<li>사용자 명에 입력될 시 패스워드 유효상태화</li>
<li>사용자 명과 패스워드에 한 문자라도 입력될 시, OK 버튼은 유효상태화 하지만 둘 중 하나라도 입력되지 않을 시 무효상태화</li>
</ul>
<p>위 상황에서 다른 요소에 대한 설정을 각 클래스에 기술할 시 프로그램을 확장하는 것도, 디버그를 하는 것도 어렵게 됩니다.</p>
<p>이처럼 <strong>다수의 요소(객체) 사이를 조정해야 할 경우 Mediator 패턴</strong>을 이용합니다.</p>
<p>각각의 요소 상호간에 통신을 하는 것이 아닌, <strong>중개인과만 통신을 하고, 표시 컨트롤 로직은 중개인</strong> 안에만 기술합니다.</p>
<table>
<thead>
<tr>
<th>이름</th>
<th>해설</th>
</tr>
</thead>
<tbody>
<tr>
<td>Mediator</td>
<td>중개인의 인터페이스를 결정하는 인터페이스</td>
</tr>
<tr>
<td>Colleague</td>
<td>회원의 인터페이스를 결정하는 인터페이스</td>
</tr>
<tr>
<td>ColleagueButton</td>
<td>Colleague 인터페이스를 구현, 버튼을 나타내는 클래스</td>
</tr>
<tr>
<td>ColleagueTextField</td>
<td>Colleague 인터페이스를 구현, 텍스트 입력을 실행하는 클래스</td>
</tr>
<tr>
<td>ColleagueCheckbox</td>
<td>Colleague 인터페이스를 구현, 체크박스 버튼을 나타내는 클래스</td>
</tr>
<tr>
<td>LoginFrame</td>
<td>Mediator 인터페이스를 구현, 로그인 Form을 나타내는 클래스</td>
</tr>
<tr>
<td>Main</td>
<td>동작 테스트용 클래스</td>
</tr>
</tbody>
</table>
<h3 id="mediator-인터페이스">Mediator 인터페이스</h3>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Mediator</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token function-variable function">createCollegues</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token function-variable function">colleagueChanged</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>Mediator 인터페이스는 <code>중개인</code>을 표현하는 인터페이스입니다.</p>
<p>createCollegues 메소드는 Mediator가 관리하는 회원을 생성, colleagueChanged 메소드는 각 회원인 <code>Colleague</code>들에서 호출되는 메소드이며 이는 중개인에 대한 <code>상담</code>에 해당합니다.</p>
<h3 id="colleague-인터페이스">Colleague 인터페이스</h3>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Colleague</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token function-variable function">setMediator</span><span class="token operator">:</span> <span class="token punctuation">(</span>mediator<span class="token operator">:</span> Mediator<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token function-variable function">setColleagueEnabled</span><span class="token operator">:</span> <span class="token punctuation">(</span>enabled<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>Colleague 인터페이스는 중개인에게 상담을 의뢰하는 회원을 나타내는 인터페이스입니다.</p>
<p>setMediator 메소드는 중개인을 기억하는 메소드이며 이 메소드의 인수로 전달된 인스턴스는 나중에 <code>상담</code>이 필요해질 때 사용합니다.</p>
<p>setColleagueEnabled 메소드는 중개인이 내리는 <code>지시</code>에 해당합니다. 인수 enabled가 true일 시 유효상태로 하며, false일 시 무효상태로 합니다.</p>
<blockquote>
<p>Mediator, Colleague 인터페이스에게 어떤 메소드를 가지게 할지는 작성할 어플리케이션에 따라 다릅니다.</p>
</blockquote>
<h3 id="colleaguebutton-클래스">ColleagueButton 클래스</h3>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ColleagueButton</span> <span class="token keyword">implements</span> <span class="token class-name">Colleague</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">public</span> element<span class="token operator">:</span> HTMLButtonElement<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">private</span> mediator<span class="token operator">:</span> Mediator<span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function">constructor</span><span class="token punctuation">(</span>caption<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span>value <span class="token operator">=</span> caption<span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'button'</span><span class="token punctuation">;</span>
</span><span class="code-line">    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function-variable function">setMediator</span> <span class="token operator">=</span> <span class="token punctuation">(</span>mediator<span class="token operator">:</span> Mediator<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>mediator <span class="token operator">=</span> mediator<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function-variable function">setColleagueEnabled</span> <span class="token operator">=</span> <span class="token punctuation">(</span>enabled<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token operator">!</span>enabled<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p><em>책의 예제는 java.awt를 이용하지만 필자는 HTML Form을 이용하였습니다</em></p>
<p><code>Colleague</code> 인터페이스를 구현하며, <code>Mediator</code>와 협조할 Button을 뜻하는 클래스입니다.</p>
<p><code>mediator</code> 필드에는 <code>setMediator</code> 메소드에서 전달되는 Mediator 오브젝트를 저장합니다.</p>
<p><code>setColleagueEnabled</code> 메소드는 해당 element의 disabled(유효, 무효상태)를 설정합니다.</p>
<h3 id="colleaguetextfield-클래스">ColleagueTextField 클래스</h3>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ColleagueTextField</span> <span class="token keyword">implements</span> <span class="token class-name">Colleague</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">public</span> element<span class="token operator">:</span> HTMLInputElement<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">private</span> mediator<span class="token operator">:</span> Mediator<span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function">constructor</span><span class="token punctuation">(</span>label<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">const</span> inputLable <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'label'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    inputLable<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> label<span class="token punctuation">;</span>
</span><span class="code-line">    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>inputLable<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'text'</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>textValueChanged<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function-variable function">setMediator</span> <span class="token operator">=</span> <span class="token punctuation">(</span>mediator<span class="token operator">:</span> Mediator<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>mediator <span class="token operator">=</span> mediator<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function-variable function">setColleagueEnabled</span> <span class="token operator">=</span> <span class="token punctuation">(</span>enabled<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token operator">!</span>enabled<span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> enabled <span class="token operator">?</span> <span class="token string">'white'</span> <span class="token operator">:</span> <span class="token string">'lightgray'</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function-variable function">textValueChanged</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>mediator<span class="token punctuation">.</span><span class="token function">colleagueChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p><code>Colleague</code> 인터페이스를 구현하며, <code>Mediator</code>와 협조할 TextField를 뜻하는 클래스입니다.</p>
<p>위 ColleagueButton 클래스와 마찬가지로 <code>setMediator</code>, <code>setColleagueEnabled</code>를 작성하였으며 추가적으로 해당 <code>element</code>의 배경색에 대한 접근 또한 하고 있습니다.</p>
<p>생성자에서 <code>eventListener</code>를 부착하여 요소가 변경될 시 <code>mediator</code>에게 상담을 요구하는 <code>colleagueChanged</code>를 실행합니다.</p>
<h3 id="colleaguecheckbox-클래스">ColleagueCheckbox 클래스</h3>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ColleagueCheckbox</span> <span class="token keyword">implements</span> <span class="token class-name">Colleague</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">public</span> element<span class="token operator">:</span> HTMLInputElement<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">private</span> mediator<span class="token operator">:</span> Mediator<span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function">constructor</span><span class="token punctuation">(</span>label<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> state<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">const</span> inputLabel <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'label'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    inputLabel<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> label<span class="token punctuation">;</span>
</span><span class="code-line">    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>inputLabel<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'radio'</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span>checked <span class="token operator">=</span> state<span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>itemStateChanged<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function-variable function">setMediator</span> <span class="token operator">=</span> <span class="token punctuation">(</span>mediator<span class="token operator">:</span> Mediator<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>mediator <span class="token operator">=</span> mediator<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function-variable function">setColleagueEnabled</span> <span class="token operator">=</span> <span class="token punctuation">(</span>enabled<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token operator">!</span>enabled<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function-variable function">itemStateChanged</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>mediator<span class="token punctuation">.</span><span class="token function">colleagueChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p><code>Colleague</code> 인터페이스를 구현하며, <code>Mediator</code>와 협조할 checkbox를 뜻하는 클래스입니다.</p>
<p>위 ColleagueTextField 클래스와 마찬가지로 <code>setMediator</code>, <code>setColleagueEnabled</code>, 상담을 요청하는 <code>colleagueChanged</code>를 구현, 사용하고 있습니다.</p>
<h3 id="loginframe-클래스">LoginFrame 클래스</h3>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">LoginFrame</span> <span class="token keyword">implements</span> <span class="token class-name">Mediator</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">private</span> checkGuest<span class="token operator">:</span> ColleagueCheckbox<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">private</span> checkLogin<span class="token operator">:</span> ColleagueCheckbox<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">private</span> textUser<span class="token operator">:</span> ColleagueTextField<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">private</span> textPass<span class="token operator">:</span> ColleagueTextField<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">private</span> buttonOk<span class="token operator">:</span> ColleagueButton<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">private</span> buttonCancel<span class="token operator">:</span> ColleagueButton<span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createCollegues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">colleagueChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function-variable function">createCollegues</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">const</span> checkboxGroup <span class="token operator">=</span> <span class="token string">'loginType'</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>checkGuest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ColleagueCheckbox</span><span class="token punctuation">(</span><span class="token string">'Guest'</span><span class="token punctuation">,</span> checkboxGroup<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>checkLogin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ColleagueCheckbox</span><span class="token punctuation">(</span><span class="token string">'Login'</span><span class="token punctuation">,</span> checkboxGroup<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>textUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ColleagueTextField</span><span class="token punctuation">(</span><span class="token string">'ID'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>textPass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ColleagueTextField</span><span class="token punctuation">(</span><span class="token string">'PW'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>buttonOk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ColleagueButton</span><span class="token punctuation">(</span><span class="token string">'OK'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>buttonCancel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ColleagueButton</span><span class="token punctuation">(</span><span class="token string">'CANCEL'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token comment">// mediator 세팅</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>checkGuest<span class="token punctuation">.</span><span class="token function">setMediator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>checkLogin<span class="token punctuation">.</span><span class="token function">setMediator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>textUser<span class="token punctuation">.</span><span class="token function">setMediator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>textPass<span class="token punctuation">.</span><span class="token function">setMediator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>buttonOk<span class="token punctuation">.</span><span class="token function">setMediator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>buttonCancel<span class="token punctuation">.</span><span class="token function">setMediator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function-variable function">colleagueChanged</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>checkGuest<span class="token punctuation">.</span>element<span class="token punctuation">.</span>checked<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token keyword">this</span><span class="token punctuation">.</span>textUser<span class="token punctuation">.</span><span class="token function">setColleagueEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      <span class="token keyword">this</span><span class="token punctuation">.</span>textPass<span class="token punctuation">.</span><span class="token function">setColleagueEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      <span class="token keyword">this</span><span class="token punctuation">.</span>buttonOk<span class="token punctuation">.</span><span class="token function">setColleagueEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token keyword">this</span><span class="token punctuation">.</span>textUser<span class="token punctuation">.</span><span class="token function">setColleagueEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">userpassChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function-variable function">userpassChanged</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>textUser<span class="token punctuation">.</span>element<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token keyword">this</span><span class="token punctuation">.</span>textPass<span class="token punctuation">.</span><span class="token function">setColleagueEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>textPass<span class="token punctuation">.</span>element<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token keyword">this</span><span class="token punctuation">.</span>buttonOk<span class="token punctuation">.</span><span class="token function">setColleagueEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token keyword">this</span><span class="token punctuation">.</span>buttonOk<span class="token punctuation">.</span><span class="token function">setColleagueEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token keyword">this</span><span class="token punctuation">.</span>textPass<span class="token punctuation">.</span><span class="token function">setColleagueEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      <span class="token keyword">this</span><span class="token punctuation">.</span>buttonOk<span class="token punctuation">.</span><span class="token function">setColleagueEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p><code>Mediator</code> 인터페이스를 구현하는 클래스입니다.</p>
<p><code>createColleague</code> 메소드에서 Form에 필요한 Colleague를 생성하고 그것을 필드에 저장합니다.</p>
<p>그 후, <code>setMediator</code>를 호출하여 해당 인스턴스가 중개인인 것을 알려줍니다.</p>
<p><code>colleagueChanged</code> 메소드에서는 각 colleague들의 유효상태, 무효상태를 설정하는 처리를 행하고 있습니다.</p>
<p>지금까지 작성했던 colleague 클래스들은 자신을 유효, 무효상태화하는 메소드는 있었지만, 어떤 경우에 유효, 무효상태화 할지에 대한 로직은 써있지 않았습니다.</p>
<p>즉, 모든 Colleague들의 상담이 <code>colleagueChanged</code> 메소드로 집결합니다.</p>
<p><code>userpassChanged</code> 메소드는 <code>colleagueChanged</code>에서 사용하며, textUser, textPass 필드의 변경을 담당합니다.</p>
<h3 id="main-클래스">Main 클래스</h3>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">import</span> <span class="token punctuation">{</span> LoginFrame <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./LoginFrame'</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">public</span> <span class="token function-variable function">main</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">new</span> <span class="token class-name">LoginFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">m<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<p><code>LoginFrame</code> 인스턴스를 생성하는 <code>Main</code> 클래스입니다.</p>
<h3 id="실행-결과">실행 결과</h3>
<iframe src="https://codesandbox.io/embed/mediator-pattern-with-ts-cj8zx?autoresize=1&fontsize=14&hidenavigation=1&theme=dark"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="mediator pattern with ts"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>
<p><em>단순히 body에 요소들을 추가하고, Styling을 하지않아 깔끔하게 보이지는 않습니다</em></p>
<h2 id="mediator-패턴의-구성요소" class="heading">Mediator 패턴의 구성요소</h2>
<ul>
<li>
<p><strong>Mediator</strong></p>
<p>Colleague 역할과 통신을 통해 조정을 실행하기 위한 인터페이스를 결정합니다. 예제 프로그램에서는 <code>Mediator</code> 인터페이스가 담당하였습니다.</p>
</li>
<li>
<p><strong>ConcreteMediator</strong></p>
<p>Mediator 역할의 인터페이스를 구현해서 실제의 조정을 실행합니다. 예제 프로그램에서는 <code>LoginFrame</code> 클래스가 담당하였습니다.</p>
</li>
<li>
<p><strong>Colleague</strong></p>
<p>Mediator 역할과 통신을 실행할 인터페이스를 결정합니다. 예제 프로그램에서는 <code>Colleague</code> 인터페이스가 담당하였습니다.</p>
</li>
<li>
<p><strong>ConcreteColleague</strong></p>
<p>Colleague 역할의 인터페이스를 구현하는 역할입니다. 예제 프로그램에서는 <code>ColleagueButton</code>, <code>ColleagueTextField</code>, <code>ColleagueCheckbox</code> 클래스가 담당하였습니다.</p>
</li>
</ul>
<h2 id="class-diagram" class="heading">Class diagram</h2>
<div align="center">
<p><img src="https://upload.wikimedia.org/wikipedia/commons/e/e4/Mediator_design_pattern.png" alt="mediator-diagram"></p>
</div>
<h2 id="분산이-화를-부를-때" class="heading">분산이 화를 부를 때</h2>
<p>예제 프로그램 <code>LoginFrame</code>의 <code>colleagueChanged</code> 메소드는 다소 복잡합니다.</p>
<p>사양이 변경되면 결국 버그가 발생하지 않을까 생각되지만 그것은 문제가 되지 않습니다.</p>
<p>왜냐하면 colleagueChanged 메소드에 버그가 발생해도 <strong>표시 유효, 무효에 관한 로직은 여기 외에는 존재하지 않기 떄문에</strong> 해당 메소드만 디버그하면 되기 때문입니다.</p>
<p>객체 지향에서는 한 곳에 집중되는 것을 피해서 처리를 분산시키는 겨웅가 많습니다. 하지만 예제 프로그램과 같은 경우에는 처리를 각 클래스에 분산시키는 것은 현명하지 못합니다.</p>
<p>각 클래스에 분산시킬 것은 분산시키고, 집중시킬 것은 집중시키지 않으면 클래스의 분산이 오히려 화를 부르게 됩니다.</p>
<h2 id="재이용할-수-있는-것" class="heading">재이용할 수 있는 것</h2>
<p><code>ConcreteColleague</code> 역할은 재이용하기 쉽지만 <code>ConcreteMediator</code> 역할은 재이용하기 어렵습니다.</p>
<p>예를 들어, 로그인 form과는 다르게 별도의 form을 만들 때 <code>ConcreteColleague</code> 역할들은 재이용이 가능합니다.</p>
<p>왜냐하면 ConcreteColleague 역할 안에는 <strong>특정한 form에 의존하는 코드가 없기 때문</strong>입니다.</p>
<p>코드 중 의존성이 높은 부분은 <code>ConcreteMediator</code> 클래스 안에 갇혀 있습니다. 어플리케이션에 대한 의존도가 높다는 것은 재이용성이 낮다는 것을 의미하므로 당연스럽게 ConcreteMediator는 재이용이 어려운 것입니다.</p>
<h2 id="그래서-왜-써야하나-" class="heading">그래서 왜 써야하나 ?</h2>
<p>만약 2개의 인스턴스가 서로 통신한다고 가정할 때, 통신 경로는 2가지가 됩니다.</p>
<p>그렇다면 10개의 인스턴스가 서로 통신한다면 경로는 몇가지가 될까요 ?</p>
<p>무려 90가지의 통신 경로를 갖게 됩니다.</p>
<p>하지만 <code>Mediator</code> 패턴을 이용할 시, 각 인스턴스는 ConcreteMediator와만 오고가는 통신을 하게되므로 20가지의 통신경로로 줄게 됩니다.</p>
<p>이에 더불어 통신을 통한 로직을 ConcreteMediator에 위임하기 때문에 디버깅이 쉬워집니다.</p>
<p>이처럼 같은 입장의 인스턴스가 많이 존재할 때 그것들을 서로 통신시키면 프로그램은 복잡해져만 가며, 이를 해소하기 위해 <code>Mediator</code> 패턴을 사용한다고 생각합니다.</p>
<blockquote>
<p>다대다의 관계를 다대 "1"의 관계로 줄였다</p>
</blockquote>
<h2 id="ocp-관점" class="heading">OCP 관점</h2>
<p>만약 <code>ConcreteColleague</code>를 추가해야되는 상황이 왔을 때, <code>ConcreteMediator</code> 혹은 <code>Mediator</code>까지 수정을 해야할 수 있다.</p>
<p>이는 <strong>확장엔 열려있으며, 변경에는 닫혀</strong>있어야하는 객체지향의 원칙, OCP에 위반되지 않을까 ?</p>
<p>이에 대한 멘토님의 대답은 <code>아니다</code>였다. 물론 수정을 해야겠지만, 해당 패턴을 사용하지 않고 추가해야하는 상황은 더욱 크고 복잡한 수정을 요구하기 때문이다.</p>
<h2 id="관련-패턴" class="heading">관련 패턴</h2>
<ul>
<li>
<p>Facade</p>
<p>Mediator는 Colleague 역할의 중개자로써 주고받기를 수행합니다. Facade 패턴에서는 Facade 역할이 일방적으로 다른 역할을 이용해 높은 레벨의 인터페이스를 만들었습니다. 이처럼 <strong>Mediator는 쌍방향, Facade는 단방향</strong>이라고 할 수 있습니다.</p>
</li>
<li>
<p>Observer</p>
<p>Mediator와 Colleague 역할의 통신은 Observer 패턴을 사용해서 실행되는 경우가 있습니다.</p>
</li>
</ul>
<p><em>이미지 출처 : <a href="https://ko.wikipedia.org/" target="_blank" rel="noopener noreferer">https://ko.wikipedia.org/</a></em></p>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[TypeScript React - Prompt message location TypeError]]></title>
    <link>https://www.hyesungoh.xyz/typescriptPromptLocationType</link>
    <pubDate>2021-10-10</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/typescriptPromptLocationType</guid>
    <description>
    <![CDATA[typescriptPromptLocationType]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="문제" class="heading">문제</h2>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">Prompt</span> <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">function</span> <span class="token function-variable function">Foo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">const</span> <span class="token function-variable function">handleBlockedNavigation</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token dom variable">location</span><span class="token operator">:</span> <span class="token maybe-class-name">Location</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Prompt</span></span> <span class="token attr-name">when</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>when<span class="token punctuation">}</span></span> <span class="token attr-name">message</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleBlockedNavigation<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>custom prompt를 개발하는 중, 위 코드의 message에 해당하는 부분이 에러 발생</p>
<blockquote>
<p>Type 'Location<unknown>' is missing the following properties from type 'Location': ancestorOrigins, host, hostname, href, and 6 more.</p>
</blockquote>
<p><code>Location</code>은 <code>Location&#x3C;unknown></code>보다 속성 몇가지가 없다고 한다.</p>
<p>그래서 위 <code>handleBlockedNavigation</code>에 <code>Location&#x3C;unknown></code>으로 작성을 하면</p>
<blockquote>
<p>Type 'Location' is not generic.ts(2315)</p>
</blockquote>
<p>제너릭으로 사용할 수 없다는 에러가 나를 반겨주었다.</p>
<h2 id="해결-방법" class="heading">해결 방법</h2>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> <span class="token constant">H</span> <span class="token keyword">from</span> <span class="token string">"history"</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token spread operator">...</span>
</span><span class="code-line"><span class="token keyword">const</span> <span class="token function-variable function">handleBlockedNavigation</span> <span class="token operator">=</span> <span class="token punctuation">(</span>lastLocation<span class="token operator">:</span> <span class="token constant">H</span><span class="token punctuation">.</span><span class="token property-access"><span class="token maybe-class-name">Location</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token spread operator">...</span>
</span><span class="code-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Prompt</span></span> <span class="token attr-name">when</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>when<span class="token punctuation">}</span></span> <span class="token attr-name">message</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleBlockedNavigation<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>
</span></code></pre>
<p>위와 같이 <code>history</code> 패키지의 Location으로 Type을 지정해주면 된다.</p>
<p>해결 방법은 <code>react-router</code>의 <code>index.d.ts</code>에서 찾았으며 아래가 해당 부분이다.</p>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token comment">// This is the type of the context object that will be passed down to all children of</span>
</span><span class="code-line"><span class="token comment">// a `Router` component:</span>
</span><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">RouterChildContext<span class="token operator">&#x3C;</span>
</span></span><span class="code-line"><span class="token class-name">  Params <span class="token keyword">extends</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> Params<span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</span></span><span class="code-line"><span class="token class-name"><span class="token operator">></span></span> <span class="token punctuation">{</span>
</span><span class="code-line">  router<span class="token operator">:</span> <span class="token punctuation">{</span>
</span><span class="code-line">    history<span class="token operator">:</span> <span class="token constant">H</span><span class="token punctuation">.</span>History<span class="token punctuation">;</span>
</span><span class="code-line">    route<span class="token operator">:</span> <span class="token punctuation">{</span>
</span><span class="code-line">      location<span class="token operator">:</span> <span class="token constant">H</span><span class="token punctuation">.</span>Location<span class="token punctuation">;</span>
</span><span class="code-line">      match<span class="token operator">:</span> match<span class="token operator">&#x3C;</span>Params<span class="token operator">></span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">MemoryRouterProps</span> <span class="token punctuation">{</span>
</span><span class="code-line">  children<span class="token operator">?</span><span class="token operator">:</span> React<span class="token punctuation">.</span>ReactNode<span class="token punctuation">;</span>
</span><span class="code-line">  initialEntries<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">H</span><span class="token punctuation">.</span>LocationDescriptor<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
</span><span class="code-line">  initialIndex<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
</span><span class="code-line">  getUserConfirmation<span class="token operator">?</span><span class="token operator">:</span>
</span><span class="code-line">    <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span>ok<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
</span><span class="code-line">  keyLength<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MemoryRouter</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>Component<span class="token operator">&#x3C;</span>MemoryRouterProps<span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">PromptProps</span> <span class="token punctuation">{</span>
</span><span class="code-line">  message<span class="token operator">:</span>
</span><span class="code-line">    <span class="token operator">|</span> <span class="token builtin">string</span>
</span><span class="code-line">    <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>location<span class="token operator">:</span> <span class="token constant">H</span><span class="token punctuation">.</span>Location<span class="token punctuation">,</span> action<span class="token operator">:</span> <span class="token constant">H</span><span class="token punctuation">.</span>Action<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  when<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[React AWS S3, Cloudfront 배포자동화 w/ github actions]]></title>
    <link>https://www.hyesungoh.xyz/cdS3CfWithGithubAction</link>
    <pubDate>2021-10-02</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/cdS3CfWithGithubAction</guid>
    <description>
    <![CDATA[cdS3CfWithGithubAction]]>
    </description>
    <content:encoded>
      <![CDATA[<p>React (CRA) 프로젝트를 AWS S3에 배포하고 Cloudfront를 이용해 CDN에 올려두었습니다.</p>
<p>개발자가 특정 상황에 <code>package.json</code>에 스크립트를 작성하여 배포할 수도 있지만,</p>
<p><code>Netlify</code>를 통해 맛본 배포자동화의 맛을 잊지 못해 <code>Github Actions</code>을 이용하여 배포자동화 환경을 구성한 결과물을 공유하고자 합니다.</p>
<h2 id="결과물" class="heading">결과물</h2>
<pre class="language-yml"><code class="language-yml code-highlight"><span class="code-line"><span class="token comment"># .github/workflows/깃헙액션이름.yml</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token key atrule">name</span><span class="token punctuation">:</span> deploy<span class="token punctuation">-</span>on<span class="token punctuation">-</span>s3
</span><span class="code-line">
</span><span class="code-line"><span class="token key atrule">on</span><span class="token punctuation">:</span>
</span><span class="code-line">  <span class="token key atrule">push</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token key atrule">branches</span><span class="token punctuation">:</span>
</span><span class="code-line">      <span class="token punctuation">-</span> master
</span><span class="code-line"><span class="token key atrule">jobs</span><span class="token punctuation">:</span>
</span><span class="code-line">  <span class="token key atrule">deploy</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span><span class="token number">18.04</span>
</span><span class="code-line">    <span class="token key atrule">env</span><span class="token punctuation">:</span>
</span><span class="code-line">      <span class="token key atrule">AWS_S3_BUCKET_NAME</span><span class="token punctuation">:</span> wavy<span class="token punctuation">-</span>client
</span><span class="code-line">      <span class="token key atrule">AWS_CF_DISTRIBUTION_ID</span><span class="token punctuation">:</span> E21LSR6NXBZR13
</span><span class="code-line">      <span class="token key atrule">AWS_REGION</span><span class="token punctuation">:</span> ap<span class="token punctuation">-</span>northeast<span class="token punctuation">-</span><span class="token number">2</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token key atrule">steps</span><span class="token punctuation">:</span>
</span><span class="code-line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout master <span class="token comment"># branch checkout</span>
</span><span class="code-line">        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@master
</span><span class="code-line">
</span><span class="code-line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Cache node modules <span class="token comment"># node modules 캐싱</span>
</span><span class="code-line">        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/cache@v1
</span><span class="code-line">        <span class="token key atrule">with</span><span class="token punctuation">:</span>
</span><span class="code-line">          <span class="token key atrule">path</span><span class="token punctuation">:</span> node_modules
</span><span class="code-line">          <span class="token key atrule">key</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> runner.OS <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">-</span>build<span class="token punctuation">-</span>$<span class="token punctuation">{</span><span class="token punctuation">{</span> hashFiles('<span class="token important">**/package-lock.json')</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
</span><span class="code-line">          <span class="token key atrule">restore-keys</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
</span></span><span class="code-line"><span class="token scalar string">            ${{ runner.OS }}-build-
</span></span><span class="code-line"><span class="token scalar string">            ${{ runner.OS }}-</span>
</span><span class="code-line">
</span><span class="code-line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Generate environment variables <span class="token comment"># 환경변수 설정</span>
</span><span class="code-line">        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
</span></span><span class="code-line"><span class="token scalar string">          echo "REACT_APP_API_URL=$REACT_APP_API_URL" >> .env.production
</span></span><span class="code-line"><span class="token scalar string">          echo "REACT_APP_GA_TRACKING_ID=$REACT_APP_GA_TRACKING_ID" >> .env.production</span>
</span><span class="code-line">        <span class="token key atrule">env</span><span class="token punctuation">:</span>
</span><span class="code-line">          <span class="token key atrule">REACT_APP_API_URL</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.REACT_APP_API_URL <span class="token punctuation">}</span><span class="token punctuation">}</span>
</span><span class="code-line">          <span class="token key atrule">REACT_APP_GA_TRACKING_ID</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.REACT_APP_GA_TRACKING_ID <span class="token punctuation">}</span><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Install Dependencies <span class="token comment"># dependency 설치</span>
</span><span class="code-line">        <span class="token key atrule">run</span><span class="token punctuation">:</span> npm install
</span><span class="code-line">
</span><span class="code-line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Build Application <span class="token comment"># build</span>
</span><span class="code-line">        <span class="token key atrule">run</span><span class="token punctuation">:</span> npm run build
</span><span class="code-line">
</span><span class="code-line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Configure AWS credentials <span class="token comment"># AWS 계정 설정</span>
</span><span class="code-line">        <span class="token key atrule">uses</span><span class="token punctuation">:</span> aws<span class="token punctuation">-</span>actions/configure<span class="token punctuation">-</span>aws<span class="token punctuation">-</span>credentials@v1
</span><span class="code-line">        <span class="token key atrule">with</span><span class="token punctuation">:</span>
</span><span class="code-line">          <span class="token key atrule">aws-access-key-id</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.AWS_ACCESS_KEY_ID <span class="token punctuation">}</span><span class="token punctuation">}</span>
</span><span class="code-line">          <span class="token key atrule">aws-secret-access-key</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.AWS_SECRET_ACCESS_KEY <span class="token punctuation">}</span><span class="token punctuation">}</span>
</span><span class="code-line">          <span class="token key atrule">aws-region</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> env.AWS_REGION <span class="token punctuation">}</span><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy to S3 <span class="token comment"># s3 배포</span>
</span><span class="code-line">        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
</span></span><span class="code-line"><span class="token scalar string">          aws s3 cp \
</span></span><span class="code-line"><span class="token scalar string">            --recursive \
</span></span><span class="code-line"><span class="token scalar string">            --region ${{ env.AWS_REGION }} \
</span></span><span class="code-line"><span class="token scalar string">            build s3://${{ env.AWS_S3_BUCKET_NAME }}</span>
</span><span class="code-line">
</span><span class="code-line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> CloudFront Invalidate <span class="token comment"># Cloud cache invalidate</span>
</span><span class="code-line">        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
</span></span><span class="code-line"><span class="token scalar string">          aws cloudfront create-invalidation \
</span></span><span class="code-line"><span class="token scalar string">            --distribution-id ${{ env.AWS_CF_DISTRIBUTION_ID }} \
</span></span><span class="code-line"><span class="token scalar string">            --paths "/*"</span>
</span></code></pre>
<h2 id="github-action-trigger" class="heading">Github Action Trigger</h2>
<pre class="language-yml"><code class="language-yml code-highlight"><span class="code-line"><span class="token key atrule">on</span><span class="token punctuation">:</span>
</span><span class="code-line">  <span class="token key atrule">push</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token key atrule">branches</span><span class="token punctuation">:</span>
</span><span class="code-line">      <span class="token punctuation">-</span> master <span class="token comment"># master branch에 push 됐을 때 트리거</span>
</span></code></pre>
<p><code>master branch</code>에 <code>push</code>가 일어났을 때 Trigger를 설정하는 부분입니다.</p>
<p><code>push</code> 외, <code>pull request</code>, <code>schedule</code> 등의 방법이 있습니다.</p>
<p>외의 방법은 <a href="https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows" target="_blank" rel="noopener noreferer">해당 문서</a>를 참고하면 좋을 것 같습니다.</p>
<h2 id="환경-구성" class="heading">환경 구성</h2>
<pre class="language-yml"><code class="language-yml code-highlight"><span class="code-line"><span class="token key atrule">jobs</span><span class="token punctuation">:</span>
</span><span class="code-line">  <span class="token key atrule">deploy</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span><span class="token number">18.04</span>
</span><span class="code-line">    <span class="token key atrule">env</span><span class="token punctuation">:</span>
</span><span class="code-line">      <span class="token key atrule">AWS_S3_BUCKET_NAME</span><span class="token punctuation">:</span> 본인S3버킷이름
</span><span class="code-line">      <span class="token key atrule">AWS_CF_DISTRIBUTION_ID</span><span class="token punctuation">:</span> 본인CloudfrontID
</span><span class="code-line">      <span class="token key atrule">AWS_REGION</span><span class="token punctuation">:</span> 본인S3리전이름
</span></code></pre>
<p>실행 환경과 환경 변수 설정에 대한 부분입니다.</p>
<p>환경 변수의 경우 하단에 <code>${{ env.foo }}</code>와 같이 사용 가능하여 구성해 두었습니다.</p>
<h2 id="checkout-cashing" class="heading">Checkout, Cashing</h2>
<pre class="language-yml"><code class="language-yml code-highlight"><span class="code-line"><span class="token key atrule">steps</span><span class="token punctuation">:</span>
</span><span class="code-line">  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout master <span class="token comment"># branch checkout</span>
</span><span class="code-line">    <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@master
</span><span class="code-line">
</span><span class="code-line">  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Cache node modules <span class="token comment"># node modules 캐싱</span>
</span><span class="code-line">    <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/cache@v1
</span><span class="code-line">    <span class="token key atrule">with</span><span class="token punctuation">:</span>
</span><span class="code-line">      <span class="token key atrule">path</span><span class="token punctuation">:</span> node_modules
</span><span class="code-line">      <span class="token key atrule">key</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> runner.OS <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">-</span>build<span class="token punctuation">-</span>$<span class="token punctuation">{</span><span class="token punctuation">{</span> hashFiles('<span class="token important">**/package-lock.json')</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
</span><span class="code-line">      <span class="token key atrule">restore-keys</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
</span></span><span class="code-line"><span class="token scalar string">        ${{ runner.OS }}-build-
</span></span><span class="code-line"><span class="token scalar string">        ${{ runner.OS }}-</span>
</span></code></pre>
<p><code>steps</code>는 순차적으로 이루어지는 task들 입니다.</p>
<blockquote>
<p>jobs.&#x3C;job_id>.steps 의 형태로 이루어지며, 저는 위 환경 구성 부분에서 deploy라는 이름을 사용하였습니다.</p>
</blockquote>
<ol>
<li>master 브랜치로 이동</li>
<li>node modules 캐싱</li>
<li>dependency 설치</li>
<li>React build</li>
</ol>
<p>위 순서대로 실행되도록 작성한 것 입니다.</p>
<p><code>node modules 캐싱</code>의 경우 dependency들이 많을수록 설치에 걸리는 시간을 단축시켜주는 이유로 적용하였습니다.</p>
<p>reference로는 <a href="https://github.com/actions/cache" target="_blank" rel="noopener noreferer">Github Actions의 cache repo</a>를 참고하시면 좋을 것 같습니다.</p>
<h2 id="env" class="heading">Env</h2>
<p>저는 유출되면 안되는 것들을 <code>.env</code> 파일을 이용해 관리하곤 합니다.</p>
<p>당연히 gitignore를 활용해 github에는 올려두지 않아, 해당 파일의 내용을 사용하기 위해서는 <code>배포 단계에서 생성</code>이 필요합니다.</p>
<pre class="language-yml"><code class="language-yml code-highlight"><span class="code-line"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Generate environment variables <span class="token comment"># 환경변수 설정</span>
</span><span class="code-line">  <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
</span></span><span class="code-line"><span class="token scalar string">    echo "REACT_APP_API_URL=$REACT_APP_API_URL" >> .env.production
</span></span><span class="code-line"><span class="token scalar string">    echo "REACT_APP_GA_TRACKING_ID=$REACT_APP_GA_TRACKING_ID" >> .env.production</span>
</span><span class="code-line">  <span class="token key atrule">env</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token key atrule">REACT_APP_API_URL</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.REACT_APP_API_URL <span class="token punctuation">}</span><span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token key atrule">REACT_APP_GA_TRACKING_ID</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.REACT_APP_GA_TRACKING_ID <span class="token punctuation">}</span><span class="token punctuation">}</span>
</span></code></pre>
<p><code>echo</code> 명령을 사용하여 새로운 파일을 생성, 추가합니다.</p>
<p>이 때 .env에 작성된 내용을 <code>github secrets</code>을 이용해 관리합니다.</p>
<p>github secrets에 관한 내용은 아래에서 자세히 다루도록 하겠습니다.</p>
<h2 id="install-build" class="heading">Install, Build</h2>
<p>그 다음으로 필요한 패키지 설치, build를 진행합니다.</p>
<pre class="language-yml"><code class="language-yml code-highlight"><span class="code-line"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Install Dependencies <span class="token comment"># dependency 설치</span>
</span><span class="code-line">  <span class="token key atrule">run</span><span class="token punctuation">:</span> npm install
</span><span class="code-line">
</span><span class="code-line"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Build Application <span class="token comment"># build</span>
</span><span class="code-line">  <span class="token key atrule">run</span><span class="token punctuation">:</span> npm run build
</span></code></pre>
<h2 id="aws-계정-설정" class="heading">AWS 계정 설정</h2>
<pre class="language-yml"><code class="language-yml code-highlight"><span class="code-line"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Configure AWS credentials <span class="token comment"># AWS 계정 설정</span>
</span><span class="code-line">  <span class="token key atrule">uses</span><span class="token punctuation">:</span> aws<span class="token punctuation">-</span>actions/configure<span class="token punctuation">-</span>aws<span class="token punctuation">-</span>credentials@v1
</span><span class="code-line">  <span class="token key atrule">with</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token key atrule">aws-access-key-id</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.AWS_ACCESS_KEY_ID <span class="token punctuation">}</span><span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token key atrule">aws-secret-access-key</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.AWS_SECRET_ACCESS_KEY <span class="token punctuation">}</span><span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token key atrule">aws-region</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> env.AWS_REGION <span class="token punctuation">}</span><span class="token punctuation">}</span>
</span></code></pre>
<p>위 문단의 4개의 step 중, 위 2개는 <code>uses</code> 키워드를 보실 수 있습니다.</p>
<p>해당 구문은 이미 작성된 <code>action</code>을 본인이 작성한 job에 추가하는 것입니다.</p>
<p>AWS 계정 설정 또한 <code>aws-actions/configure-aws-credentials@v1</code> action을 이용합니다.</p>
<h2 id="s3-배포" class="heading">S3 배포</h2>
<pre class="language-yml"><code class="language-yml code-highlight"><span class="code-line"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy to S3 <span class="token comment"># s3 배포</span>
</span><span class="code-line">  <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
</span></span><span class="code-line"><span class="token scalar string">    aws s3 cp \
</span></span><span class="code-line"><span class="token scalar string">      --recursive \
</span></span><span class="code-line"><span class="token scalar string">      --region ${{ env.AWS_REGION }} \
</span></span><span class="code-line"><span class="token scalar string">      build s3://${{ env.AWS_S3_BUCKET_NAME }}</span>
</span></code></pre>
<p>본인이 미리 생성한 <code>S3 bucket</code>에 배포하는 동작입니다.</p>
<p><code>aws</code> 커맨드를 미리 작성해둔 환경 변수를 활용하여 작성하였습니다.</p>
<h2 id="cloudfront-cache-invalidation" class="heading">Cloudfront cache Invalidation</h2>
<pre class="language-yml"><code class="language-yml code-highlight"><span class="code-line"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> CloudFront Invalidate <span class="token comment"># Cloud cache invalidate</span>
</span><span class="code-line">  <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
</span></span><span class="code-line"><span class="token scalar string">    aws cloudfront create-invalidation \
</span></span><span class="code-line"><span class="token scalar string">      --distribution-id ${{ env.AWS_CF_DISTRIBUTION_ID }} \
</span></span><span class="code-line"><span class="token scalar string">      --paths "/*"</span>
</span></code></pre>
<p>S3에 배포된 파일이 업데이트 되었으니, CDN에 퍼져있는 파일들을 새로고침하기 위해 제거처리하는 동작입니다.</p>
<p>마찬가지로 환경 변수, aws 커맨드를 이용합니다.</p>
<h2 id="github-secrets-설정" class="heading">Github Secrets 설정</h2>
<p><img src="https://user-images.githubusercontent.com/26461307/135655395-052f934d-fb52-453b-bae0-472650b6c501.png" alt="Github Secrets 설정"></p>
<p>위에서 사용한 <code>${{ secrets.~~~ }}</code>의 경우 github repo에서 설정을 통해 추가 가능합니다.</p>
<p>repo의 settings 탭을 누른 후,</p>
<p>사진의 왼쪽 하단 <code>Secrets</code> 클릭 후 새로운 <code>repository secret</code>을 생성해주시면 됩니다.</p>
<p>위 예제에서의 <code>AWS_ACCESS_KEY_ID</code>, <code>AWS_SECRET_ACCESS_KEY</code>와 <code>.env</code>에서 사용한 값들을 적어주었습니다.</p>
<blockquote>
<p>AWS 값들의 IAM은 S3, Cloudfront에 대한 권한이 있어야 합니다.</p>
</blockquote>
<h2 id="적용-모습" class="heading">적용 모습</h2>
<p><img src="https://user-images.githubusercontent.com/26461307/135655404-14d8f75a-d93c-4d68-acb6-2a987b4eea3d.png" alt="result"></p>
<p>Master branch에 push 후 자동적으로 S3 배포, Cloudfront invalidate까지 수행된 모습입니다.</p>
<h2 id="마치며" class="heading">마치며</h2>
<p>여러 문서, 블로그 등을 참고하여 최대한 가독성이 좋게 나타내고자 추합한 결과물입니다.</p>
<p>많은 분들에게 도움이 되길 바라며, 마지막으로 참고한 블로그 게시물들과 함께 제가 배포할 때 상당한 도움이 된 벨로퍼트님의 AWS S3, Cloudfront 배포 게시글까지 첨부하겠습니다. 감사합니다.</p>
<blockquote>
<p><a href="https://react-etc.vlpt.us/08.deploy-s3.html" target="_blank" rel="noopener noreferer">https://react-etc.vlpt.us/08.deploy-s3.html</a></p>
</blockquote>
<blockquote>
<p><a href="https://medium.com/@schmidphilipp1995/set-up-a-ci-cd-pipeline-for-your-webapp-on-aws-with-github-actions-within-5-minutes-810b10749833" target="_blank" rel="noopener noreferer">https://medium.com/@schmidphilipp1995/set-up-a-ci-cd-pipeline-for-your-webapp-on-aws-with-github-actions-within-5-minutes-810b10749833</a></p>
</blockquote>
<blockquote>
<p><a href="https://sustainable-dev.tistory.com/160" target="_blank" rel="noopener noreferer">https://sustainable-dev.tistory.com/160</a></p>
</blockquote>
<blockquote>
<p><a href="https://velog.io/@loakick/Github-Action-AWS-S3%EC%97%90-React-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0" target="_blank" rel="noopener noreferer">https://velog.io/@loakick/Github-Action-AWS-S3%EC%97%90-React-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0</a></p>
</blockquote>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[Visitor pattern with TypeScript]]></title>
    <link>https://www.hyesungoh.xyz/visitor</link>
    <pubDate>2021-09-26</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/visitor</guid>
    <description>
    <![CDATA[visitor]]>
    </description>
    <content:encoded>
      <![CDATA[<p>본 게시물은 <code>Java 언어로 배우는 디자인 패턴 입문 - Yuki Hiroshi 저</code>를 기반으로 공부한 것을 정리하며 Typescript로 재작성해본 내용입니다.</p>
<h2 id="visitor-패턴이란-" class="heading">Visitor 패턴이란 ?</h2>
<p><code>Visitor</code>은 방문자를 의미한다.</p>
<p>데이터 구조 안에 많은 요소가 저장되어 있고, 각 요소에 대해서 어떤 <code>처리</code>를 해야될 때 해당 처리의 코드는 어디에 써야할까 ?</p>
<p>일반적으로 데이터 구조를 표현하는 클래스 안에 기술할 것이다. 하지만 처리의 종류가 여러개거나 새로운 처리가 필요할 시 데이터 구조 클래스를 수정해야 한다.</p>
<p>Visitor 패턴에서는 데이터 <code>구조와 처리를 분리</code>한다. 그리고 데이터 구조 안을 돌아다니는 <code>방문자</code>에게 처리를 위임한다.</p>
<p>그렇다면 새로운 처리를 추가하고 싶을 때에는 새로운 방문자를 만들면 된다.</p>
<h2 id="예제-프로그램" class="heading">예제 프로그램</h2>
<p><code>Composite</code> 패턴으로 파일과 디렉터리로 이루어진 데이터 구조 안을 <code>방문자</code>가 돌아다니고 파일의 종류를 표시하는 프로그램이다.</p>
<table>
<thead>
<tr>
<th>이름</th>
<th>해설</th>
</tr>
</thead>
<tbody>
<tr>
<td>Visitor</td>
<td>파일과 디렉터리를 방문하는 방문자를 나타내는 추상 클래스</td>
</tr>
<tr>
<td>Element</td>
<td>Visitor 클래스의 생성자를 받아들이는 데이터 구조를 나타내는 인터페이스</td>
</tr>
<tr>
<td>ListVisitor</td>
<td>Visitor 클래스의 하위 클래스로 파일과 디렉터리의 종류를 나타내는 클래스</td>
</tr>
<tr>
<td>Entry</td>
<td>File과 Directory의 상위 클래스가 되는 추상 클래스</td>
</tr>
<tr>
<td>File</td>
<td>파일을 나타내는 클래스</td>
</tr>
<tr>
<td>Directory</td>
<td>디렉터리를 나타내는 클래스</td>
</tr>
<tr>
<td>FileTreatmentException</td>
<td>File에 대해서 add한 경우에 발생하는 예외 클래스</td>
</tr>
<tr>
<td>Main</td>
<td>동작 테스트용 클래스</td>
</tr>
</tbody>
</table>
<h3 id="visitor-클래스">Visitor 클래스</h3>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">import</span> <span class="token punctuation">{</span> File <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./File'</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Directory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./Directory'</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Visitor</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token function">visit</span><span class="token punctuation">(</span>file<span class="token operator">:</span> File<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token function">visit</span><span class="token punctuation">(</span>directory<span class="token operator">:</span> Directory<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p><code>Visitor</code> 클래스는 <strong>방문자</strong>를 나타내는 추상 클래스이다.</p>
<p>인수를 <code>File</code>, <code>Directory</code>로 구분한 메소드가 <code>Overload</code>되어 선언되어 있다.</p>
<h3 id="element-인터페이스">Element 인터페이스</h3>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token function-variable function">accept</span><span class="token operator">:</span> <span class="token punctuation">(</span>v<span class="token operator">:</span> Visitor<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p><code>Element</code> 인터페이스는 방문자를 받아들이는 인터페이스로써, Visitor 클래스를 인수로 갖는 메소드 <code>accept</code>를 선언하고 있다.</p>
<p>간단히 비유하자면 호텔은 <code>Element</code>, 호텔의 투숙객은 <code>Visitor</code>가 되는 것이다.</p>
<h3 id="entry-클래스">Entry 클래스</h3>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span> <span class="token keyword">implements</span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token function-variable function">accept</span><span class="token operator">:</span> <span class="token punctuation">(</span>v<span class="token operator">:</span> Visitor<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token function-variable function">getName</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token function-variable function">getSize</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">number</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">public</span> add <span class="token operator">=</span> <span class="token punctuation">(</span>entry<span class="token operator">:</span> Entry<span class="token punctuation">)</span><span class="token operator">:</span> Entry <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">FileTreatmentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">public</span> iterator <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">FileTreatmentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">public</span> toString <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>Composite 패턴의 <code>Component</code> 역할을 하는 클래스를 Element를 구현하도록 한 클래스이다.</p>
<p>Element 인터페이스에 선언된 추상 메소드 <code>accept</code>는 하위 클래스인 <code>File</code>, <code>Directory</code> 클래스에서 구현한다.</p>
<p><code>add</code>, <code>iterator</code> 메소드는 Directory 클래스에서만 유효하므로 에러로 처리하고 있다.</p>
<h3 id="file-클래스">File 클래스</h3>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">File</span> <span class="token keyword">extends</span> <span class="token class-name">Entry</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">private</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">private</span> size<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> size<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">public</span> getName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">public</span> getSize <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">public</span> accept <span class="token operator">=</span> <span class="token punctuation">(</span>v<span class="token operator">:</span> Visitor<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    v<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>Composite 패턴의 <code>Leaf</code> 역할의 클래스이며 추가적으로 <code>accept</code> 메소드를 구현하고 있다.</p>
<p>this가 File 클래스의 생성자이기 때문에, Overload된 두 메소드 중 <code>visit(File)</code>이 호출되며,</p>
<p>visit 메소드를 호출하여 방문한 File의 인스턴스를 Visitor에게 알려준다.</p>
<h3 id="directory-클래스">Directory 클래스</h3>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Directory</span> <span class="token keyword">extends</span> <span class="token class-name">Entry</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">private</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">private</span> dir<span class="token operator">:</span> Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">public</span> getName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">public</span> getSize <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">let</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> entry <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dir<span class="token punctuation">)</span> size <span class="token operator">+=</span> entry<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">return</span> size<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">public</span> add <span class="token operator">=</span> <span class="token punctuation">(</span>entry<span class="token operator">:</span> Entry<span class="token punctuation">)</span><span class="token operator">:</span> Entry <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>dir<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">public</span> iterator <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dir<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">public</span> accept <span class="token operator">=</span> <span class="token punctuation">(</span>v<span class="token operator">:</span> Visitor<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    v<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>Composite 패턴의 <code>Composite</code> 역할의 클래스이며 추가적으로 <code>iterator</code>, <code>accept</code> 메소드를 구현하고 있다.</p>
<p><code>iterator</code> 메소드는 Directory에 포함되어 있는 Entry의 종류를 얻기 위해 사용되며,</p>
<p><code>accept</code> 메소드는 위 File 클래스와 같은 이유로 <code>visit(Directory)</code>가 호출되며 Visitor에게 Directory의 인스턴스를 알려준다.</p>
<h3 id="listvisitor-클래스">ListVisitor 클래스</h3>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ListVisitor</span> <span class="token keyword">extends</span> <span class="token class-name">Visitor</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">private</span> currentdir<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function">visit</span><span class="token punctuation">(</span>file<span class="token operator">:</span> File<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token function">visit</span><span class="token punctuation">(</span>directory<span class="token operator">:</span> Directory<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">public</span> <span class="token function">visit</span><span class="token punctuation">(</span>value<span class="token operator">:</span> File <span class="token operator">|</span> Directory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentdir<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">File</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">let</span> savedir <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currentdir<span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>currentdir <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentdir<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> entry <span class="token keyword">of</span> value<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      entry<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>currentdir <span class="token operator">=</span> savedir<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p><code>ListVisitor</code> 클래스는 Visitor 클래스의 하위 클래스로써 <code>visit(File)</code>, <code>visit(Directory)</code> 를 구현하고 있다.</p>
<p><code>currentdir</code> 필드는 현재 주목하고 있는 디렉터리의 이름을 저장한다.</p>
<p><code>visit</code> 메소드는 동일하게 현재 위치를 출력하며,
Directory일 경우 해당 디렉터리의 각 엔트리에 대해서 accept 메소드를 호출한다.</p>
<p><code>accept</code> 메소드는 visit 메소드를, <code>visit</code> 메소드는 accept 메소드를 호출하고 있는, 서로 상대를 호출하는 모습을 띄고 있다.</p>
<h3 id="filetreatmentexception-클래스">FileTreatmentException 클래스</h3>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">FileTreatmentException</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token function">constructor</span><span class="token punctuation">(</span>msg<span class="token operator">?</span><span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token function">Error</span><span class="token punctuation">(</span>msg <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p><code>File</code>에서 add, iterator를 호출하였을 때 Error를 throw하는 클래스이다.</p>
<h3 id="main-클래스">Main 클래스</h3>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">try</span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Making root entries...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      <span class="token keyword">const</span> rootdir<span class="token operator">:</span> Directory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Directory</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      <span class="token keyword">const</span> bindir<span class="token operator">:</span> Directory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Directory</span><span class="token punctuation">(</span><span class="token string">'bin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      <span class="token keyword">const</span> tmpdir<span class="token operator">:</span> Directory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Directory</span><span class="token punctuation">(</span><span class="token string">'tmp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      <span class="token keyword">const</span> usrdir<span class="token operator">:</span> Directory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Directory</span><span class="token punctuation">(</span><span class="token string">'usr'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      rootdir<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bindir<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      rootdir<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmpdir<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      rootdir<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>usrdir<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      bindir<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">'vi'</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      bindir<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">'latex'</span><span class="token punctuation">,</span> <span class="token number">20000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      rootdir<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ListVisitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Making user entries...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      <span class="token keyword">const</span> Kim<span class="token operator">:</span> Directory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Directory</span><span class="token punctuation">(</span><span class="token string">'Kim'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      <span class="token keyword">const</span> Oh<span class="token operator">:</span> Directory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Directory</span><span class="token punctuation">(</span><span class="token string">'Oh'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      <span class="token keyword">const</span> Park<span class="token operator">:</span> Directory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Directory</span><span class="token punctuation">(</span><span class="token string">'Park'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      usrdir<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Kim<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      usrdir<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Oh<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      usrdir<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Park<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      Kim<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">'diary.html'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      Kim<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">'foo.css'</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      <span class="token keyword">const</span> Wavy<span class="token operator">:</span> Directory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Directory</span><span class="token punctuation">(</span><span class="token string">'Wavy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      Oh<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Wavy<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      Wavy<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">'index.tsx'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      Wavy<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">'App.tsx'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      Park<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">'game.doc'</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      rootdir<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ListVisitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>Directory와 File을 이용하여 구조를 만든다.</p>
<p>그 후 출력이라는 <code>처리</code>를 위해 rootdir의 accept 메소드에 <code>ListVisitor</code> 클래스의 인스턴스를 인수로 실행한다.</p>
<h3 id="실행-결과">실행 결과</h3>
<iframe src="https://codesandbox.io/embed/runtime-mountain-zhyrt?expanddevtools=1&fontsize=14&hidenavigation=1&theme=dark"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="runtime-mountain-zhyrt"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>
<h2 id="visitor-패턴의-구성요소" class="heading">Visitor 패턴의 구성요소</h2>
<ul>
<li>
<p><strong>Visitor</strong></p>
<p>데이터 구조의 구체적인 요소마다 <code>visit(foo)</code> 메소드를 선언하는 역할을 한다. <code>foo</code>는 foo를 처리하기 위한 메소드이고, 실제 구현은 ConcreteVisitor 역할에 기술되어 있다. 예제 프로그램에서는 <code>Visitor</code> 클래스가 담당하였다.</p>
</li>
<li>
<p><strong>ConcreteVisitor</strong></p>
<p>Visitor 역할의 인터페이스를 구현하는 역할을 한다. 예제 프로그램에서는 <code>ListVisitor</code>가 담당하였다. 이 때 ListVisitor의 <code>currentdir</code> 필드값이 변화하듯 visit을 처리하는 중 내부상태가 변화하는 일도 있을 수 있다.</p>
</li>
<li>
<p><strong>Element</strong></p>
<p>Visitor 역할이 방문할 곳을 나타내는 역할이다. 방문자를 받아들이는 <code>accept</code> 메소드를 선언하며 인수에는 Visitor 역할이 전달된다. 예제 프로그램에서는 <code>Element</code> 인터페이스가 담당하였다.</p>
</li>
<li>
<p><strong>ConcreteElement</strong></p>
<p>Element 역할의 인터페이스를 구현하는 역할이다. 예제 프로그램에서는 <code>File</code>, <code>Directory</code> 클래스가 담당하였다.</p>
</li>
<li>
<p><strong>ObjectStructure</strong></p>
<p>Element 역할의 집합을 취급하는 역할로써 <code>ConcreteVisitor</code> 역할이 각각의 <code>Element</code> 역할을 취급할 수 있는 메소드를 구비하고 있다. 예제 프로그램에서는 <code>Directory</code> 클래스가 담당하였으며 각각의 Element 역할을 취급할 수 있는 메소드는 <code>iterator</code>였다.</p>
</li>
</ul>
<h2 id="class-diagram" class="heading">Class diagram</h2>
<div align="center">
<p><img src="https://user-images.githubusercontent.com/26461307/134809802-96f3bfdd-34e9-4d07-80f2-e0796c0f4195.png" alt="visitor-diagram"></p>
</div>
<p>데이터 구조를 담당하는 <code>Element</code>와 처리를 담당하는 <code>Visitor</code>가 분리되어 있다.</p>
<h2 id="sequence-diagram" class="heading">Sequence diagram</h2>
<div align="center">
<p><img src="https://user-images.githubusercontent.com/26461307/134809801-223d1536-daa6-4620-93fd-950cd09605b1.png" alt="visitor-sequence"></p>
</div>
<p>Element는 <code>accept(Visitor)</code>하며, Visitor는 <code>visit(element)</code>하는 형태를 띄고 있다.</p>
<p>이 처럼 두 역할을 하는 한 쌍에 의해 실제 처리가 되는 것을 일반적으로 <code>더블 디스패치</code>라고 한다.</p>
<h2 id="왜-이렇게까지-복잡하게-해야하나-" class="heading">왜 이렇게까지 복잡하게 해야하나 ?</h2>
<p>Visitor 패턴의 목적은 <code>처리를 데이터 구조에서 분리하는 일</code>이다.</p>
<p>만약 처리 내용을 File, Directory 클래스의 메소드로서 프로그램을 작성하면, 새로운 <code>처리</code>가 생기거나 기능을 확장해야 할 때마다 각 File, Directory 클래스를 수정해야 한다.</p>
<p>하지만 Visitor 패턴을 사용하여 처리와 데이터 구조를 분리하였을 시, 데이터 구조와 독립적으로 <code>ConcreteVisitor</code> 역할을 개발하면 된다.</p>
<p>이 처럼 File, Directory 클래스의 부품으로써의 <code>독립성</code>을 높임과 데이터 구조와 처리를 <code>분리</code>함으로써 OCP 원칙을 지킬 수 있따.</p>
<h3 id="open-closed-principle">Open-Closed Principle</h3>
<blockquote>
<p>확장에 대해서는 열려(open)있지만, 수정에 대해서는 닫혀(closed)있어야 한다.</p>
</blockquote>
<p>기존의 클래스를 수정하지 않고 확장할 수 있도록 하는 것이 OCP 원칙이다.</p>
<h2 id="concretevisitor-추가" class="heading">ConcreteVisitor 추가</h2>
<p>구체적인 처리는 ConcreteVisitor가 전담하며, 해당 처리를 위해 ConcreteElement의 수정은 필요치 않기 때문에 <strong>간단</strong>하다.</p>
<h2 id="concreteelement-추가" class="heading">ConcreteElement 추가</h2>
<p>ConcreteVisitor의 추가와 반대로 ConcreteElement의 추가는 곤란하다.</p>
<p>예제 프로그램에서 Entry 클래스의 하위에 <code>Device</code> 클래스를 만든다고 하였을 때,</p>
<p>Visitor 역할에 <code>visit(Device)</code> 메소드가 필요해지며, Visitor의 모든 하위 클래스에서 <code>visit(Device)</code>를 구현해야하기 때문이다.</p>
<h2 id="visitor가-필요한-것" class="heading">Visitor가 필요한 것</h2>
<p>처리(Visitor)와 데이터 구조(Element)를 분리하는 것은 그럴듯 하지만, Element는 Visitor에게 <strong>충분한 정보를 공개할 필요</strong>가 있다.</p>
<p>예제 프로그램에서는 각 Directory 안의 각 엔트리에 대해 accept를 하기 위해 <code>iterator</code>를 제공하고 있다.</p>
<p>이 처럼 Visitor는 데이터 구조에 필요한 정보를 취득해서 동작한다.</p>
<p>필요한 정보를 얻을 수 없으면 Visitor는 제대로 일할 수 없으며, 공개할 필요 없는 정보까지 공개하게 되면 미래의 데이터 구조를 수정하기 어렵게 된다.</p>
<h2 id="관련-패턴" class="heading">관련 패턴</h2>
<ul>
<li>
<p>Iterator</p>
</li>
<li>
<p>Composite</p>
<p>방문처가 되는 데이터 구조는 Composite 패턴이 되는 경우가 많다.</p>
</li>
<li>
<p>Interpreter</p>
</li>
</ul>
<p><em>이미지 출처 : <a href="https://reactiveprogramming.io/blog/en/design-patterns/visitor" target="_blank" rel="noopener noreferer">https://reactiveprogramming.io/blog/en/design-patterns/visitor</a></em></p>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[내가 Intersection Observer 사용하는 방법]]></title>
    <link>https://www.hyesungoh.xyz/usisngIntersectionObserverMyWay</link>
    <pubDate>2021-09-21</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/usisngIntersectionObserverMyWay</guid>
    <description>
    <![CDATA[usisngIntersectionObserverMyWay]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="intersection-observer-" class="heading">Intersection Observer ?</h2>
<p><code>infinite scroll</code>, <code>lazy loading</code> 등 특정 요소가 보이는지 감지하는 것은 다양한 이유로써 사용된다.</p>
<p>이를 위해 단순 scroll을 감지하여 사용할 수도 있지만, 성능적인 문제로 <code>Intersection Observer</code> 사용을 권장한다.</p>
<p><strong>MDN</strong>에서는 Intersection Observer를 다음과 같이 설명한다.</p>
<blockquote>
<p>Intersection Observer API 의 IntersectionObserver 인터페이스는 대상 요소와 그 상위 요소 혹은 최상위 도큐먼트인 viewport와의 교차 영역에 대한 변화를 비동기적으로 감지할 수 있도록 도와줍니다.</p>
</blockquote>
<p>이론적인 부분은 약술하고 내가 React, TypeScript 환경에서 Intersection Observer를 사용하는 방법을 공유하고자 한다.</p>
<p><a href="https://itnext.io/1v1-scroll-listener-vs-intersection-observers-469a26ab9eb6" target="_blank" rel="noopener noreferer">Scroll listener와 Intersection Observer의 performance 비교 결과</a></p>
<h2 id="첫-번째-접근" class="heading">첫 번째 접근</h2>
<ul>
<li>useIntersectionObserver.ts</li>
</ul>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">interface</span> <span class="token class-name">useIntersectionObserverProps</span> <span class="token punctuation">{</span>
</span><span class="code-line">  root<span class="token operator">?</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</span><span class="code-line">  rootMargin<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</span><span class="code-line">  threshold<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
</span><span class="code-line">  target<span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>
</span><span class="code-line">  onIntersect<span class="token operator">:</span> IntersectionObserverCallback<span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">const</span> useIntersectionObserver <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
</span><span class="code-line">  root<span class="token punctuation">,</span>
</span><span class="code-line">  rootMargin <span class="token operator">=</span> <span class="token string">'0px'</span><span class="token punctuation">,</span>
</span><span class="code-line">  threshold <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
</span><span class="code-line">  target
</span><span class="code-line">  onIntersect<span class="token punctuation">,</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token operator">:</span> useIntersectionObserverProps<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>target<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">const</span> observer<span class="token operator">:</span> IntersectionObserver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span>
</span><span class="code-line">      onIntersect<span class="token punctuation">,</span>
</span><span class="code-line">      <span class="token punctuation">{</span> root<span class="token punctuation">,</span> rootMargin<span class="token punctuation">,</span> threshold <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> observer<span class="token punctuation">.</span><span class="token function">unobserve</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>onIntersect<span class="token punctuation">,</span> root<span class="token punctuation">,</span> rootMargin<span class="token punctuation">,</span> target<span class="token punctuation">,</span> threshold<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">default</span> useIntersectionObserver<span class="token punctuation">;</span>
</span></code></pre>
<ul>
<li>사용하는곳.tsx</li>
</ul>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token keyword">import</span> <span class="token imports"><span class="token punctuation">{</span> useRef <span class="token punctuation">}</span></span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">import</span> <span class="token imports">useIntersectionObserver</span> <span class="token keyword">from</span> <span class="token string">'hooks/useIntersectionObserver'</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">const</span> <span class="token function-variable function">Foo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">const</span> targetRef <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useRef</span><span class="token generic class-name"><span class="token operator">&#x3C;</span>HTMLDivElement<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">const</span> onIntersect<span class="token operator">:</span> <span class="token function-variable function">IntersectionObserverCallback</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span> isIntersecting <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">감지결과 : </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>isIntersecting<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function">useIntersectionObserver</span><span class="token punctuation">(</span><span class="token punctuation">{</span> target<span class="token operator">:</span> targetRef<span class="token punctuation">.</span><span class="token property-access">current</span><span class="token punctuation">,</span> onIntersect <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>targetRef<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></code></pre>
<p>첫 번째로 접근한 방법은 Intersection Observer의 Option들을 Props로 받을 수 있는 <code>Custom Hook</code>을 이용하면서</p>
<p>사용하는 곳에서 감지를 당할 <strong>HTMLElement ref의 current값</strong>을 Props로 활용하는 방법으로 접근하였다.</p>
<h2 id="하지만" class="heading">하지만</h2>
<p><code>useIntersectionObserver</code>를 보면 다음과 같은 줄이 있다.</p>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>target<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
</span></code></pre>
<p>감지할 대상이 falsy하면 observer를 생성, 이용하지 못하도록 반환하는 역할을 한다.</p>
<p>하지만 <code>사용하는곳.ts</code>에서 ref에 초기 값이 null로써, 반환되어 감지되지 못한다.</p>
<p>내가 이해한 Cycle을 간단히 기술하자면 아래와 같다.</p>
<ol>
<li>ref 객체 생성 (null)</li>
<li>custom hook 실행 (반환되어 감지 못함)</li>
<li>ref.current 객체 할당</li>
<li>custom hook 재실행 X</li>
</ol>
<blockquote>
<p>그럼 useEffect dependency에 target.current 를 걸면 되지 않나 ?</p>
</blockquote>
<p>결론부터 말하자면 안된다. 공식문서에 따르면 <code>useRef</code>는 현재 참조 값의 변경 사항을 알리지 않아 <code>useEffect</code>가 트리거되지 않는다고 한다.</p>
<p><a href="https://reactjs.org/docs/hooks-faq.html#how-can-i-measure-a-dom-node" target="_blank" rel="noopener noreferer">해당 공식 문서</a></p>
<h2 id="해결-방법" class="heading">해결 방법</h2>
<p>위 공식 문서를 읽어보면 이미 해결 방법을 아시겠지만,</p>
<p>React 공식문서는 ref가 설정, 해제되는 상황을 다룰 때 <code>Callback ref</code>라 불리는 방법을 제공한다.</p>
<h3 id="추가적으로">추가적으로</h3>
<p><code>Ref object</code>와 <code>useEffect</code>에 관해서 다룬 내용의 주소는 다음과 같다.</p>
<p><a href="https://medium.com/@teh_builder/ref-objects-inside-useeffect-hooks-eb7c15198780" target="_blank" rel="noopener noreferer">Ref objects inside useEffect Hooks</a></p>
<p>해당 글의 작성자는 Facebook React Core Team이자 Redux, CRA등을 개발한 <em>Dan Abramov</em>에게 직접 아래와 같은 답변을 받았다고 한다.</p>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">I think you want callback ref for that. You can’t have component magically react to ref changes because ref can go deep down and have independent lifecycle of the owner component.</p>&mdash; Dan (@dan_abramov) <a href="https://twitter.com/dan_abramov/status/1093497348913803265?ref_src=twsrc%5Etfw">February 7, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<h2 id="내-적용-방법" class="heading">내 적용 방법</h2>
<ul>
<li>useIntersectionObserver.ts</li>
</ul>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useEffect<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">interface</span> <span class="token class-name">useIntersectionObserverProps</span> <span class="token punctuation">{</span>
</span><span class="code-line">  root<span class="token operator">?</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</span><span class="code-line">  rootMargin<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</span><span class="code-line">  threshold<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
</span><span class="code-line">  onIntersect<span class="token operator">:</span> IntersectionObserverCallback<span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">const</span> useIntersectionObserver <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
</span><span class="code-line">  root<span class="token punctuation">,</span>
</span><span class="code-line">  rootMargin <span class="token operator">=</span> <span class="token string">'0px'</span><span class="token punctuation">,</span>
</span><span class="code-line">  threshold <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
</span><span class="code-line">  onIntersect<span class="token punctuation">,</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token operator">:</span> useIntersectionObserverProps<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>target<span class="token punctuation">,</span> setTarget<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&#x3C;</span>HTMLElement <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>target<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">const</span> observer<span class="token operator">:</span> IntersectionObserver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span>
</span><span class="code-line">      onIntersect<span class="token punctuation">,</span>
</span><span class="code-line">      <span class="token punctuation">{</span> root<span class="token punctuation">,</span> rootMargin<span class="token punctuation">,</span> threshold <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> observer<span class="token punctuation">.</span><span class="token function">unobserve</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>onIntersect<span class="token punctuation">,</span> root<span class="token punctuation">,</span> rootMargin<span class="token punctuation">,</span> target<span class="token punctuation">,</span> threshold<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">return</span> <span class="token punctuation">{</span> setTarget <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">default</span> useIntersectionObserver<span class="token punctuation">;</span>
</span></code></pre>
<ul>
<li>사용하는곳.ts</li>
</ul>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token keyword">import</span> <span class="token imports">useIntersectionObserver</span> <span class="token keyword">from</span> <span class="token string">'hooks/useIntersectionObserver'</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">const</span> <span class="token function-variable function">Foo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">const</span> onIntersect<span class="token operator">:</span> <span class="token function-variable function">IntersectionObserverCallback</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span> isIntersecting <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">감지결과 : </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>isIntersecting<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> setTarget <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useIntersectionObserver</span><span class="token punctuation">(</span><span class="token punctuation">{</span> onIntersect <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>setTarget<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></code></pre>
<p><code>Callback ref</code>의 역할로 useState의 <code>setState</code>를 위임하였으며,</p>
<p>감지 요소에 대한 위임을 <code>useIntersectionObserver</code>가 하고 있어 사용하는 곳에서는 더욱 간결해진 모습이다.</p>
<h2 id="마치며" class="heading">마치며</h2>
<p>이 방법이 제일 좋은 방법, 즉 흔히 말하는 <code>Best Practice</code>인지는 확답을 드릴 수 없다.</p>
<p>하지만 이 글을 읽고 해당 방법에 대한 단점, 더욱 좋은 해결 방법을 공유해주셨으면 하는 마음과 함께</p>
<p>아직 해결하지 못한 분들에게 도움이 되고자 블로그 글을 게시해본다.</p>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-체육복 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-체육복-Javascript</link>
    <pubDate>2021-09-10</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-체육복-Javascript</guid>
    <description>
    <![CDATA[프로그래머스-체육복-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n명의 학생, 체육복을 잃어버린 학생들의 번호 lost, 여분의 체육복을 가진 학생들의 번호 reserve가 주어지며 자신의 앞뒤 번호에게만 체육복을 빌려줄 수 있을 때, 가장 많은 학생들이 체육복을 입을 때의 학생 수를 반환하는 문제. 배열에 학생별 체육복의 수를 저장한 뒤, 2개의 체육복을 가진 학생일 때 앞, 뒤 순서로 빌려주어 풀었다. 간단한 그리디 문제.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">function</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> lost<span class="token punctuation">,</span> reserve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">const</span> cloths <span class="token operator">=</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    lost<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span>cloths<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    reserve<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span>cloths<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>cloths<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword control-flow">continue</span><span class="token punctuation">;</span>
</span><span class="code-line">        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>cloths<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">            cloths<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line">            cloths<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line">            <span class="token keyword control-flow">continue</span><span class="token punctuation">;</span>
</span><span class="code-line">        <span class="token punctuation">}</span>
</span><span class="code-line">        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>cloths<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">            cloths<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line">            cloths<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line">        <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword control-flow">return</span> cloths<span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-3진법-뒤집기 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-3진법-뒤집기-Javascript</link>
    <pubDate>2021-09-09</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-3진법-뒤집기-Javascript</guid>
    <description>
    <![CDATA[프로그래머스-3진법-뒤집기-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>정수를 입력받은 후, 3진수로 바꾸고 뒤집은 다음, 다시 10진수 정수로 반환하는 문제. <code>n.toString(3)</code>을 이용하여 3진법으로 변환, <code>Number.parseInt(3진수, 3)</code>의 문법을 이용하여 풀었다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">const</span> <span class="token function-variable function">solution</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span>
</span><span class="code-line">    <span class="token known-class-name class-name">Number</span><span class="token punctuation">.</span><span class="token method function property-access">parseInt</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token method function property-access">toString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-약수의-개수와-덧셈 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-약수의-개수와-덧셈-Javascript</link>
    <pubDate>2021-09-08</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-약수의-개수와-덧셈-Javascript</guid>
    <description>
    <![CDATA[프로그래머스-약수의-개수와-덧셈-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>주어진 정수 두개의 사이 숫자들의 약수가 홀수인 경우 빼고, 짝수인 경우 더한 값을 반환하는 문제. 첫 풀이는 약수를 담은 배열을 이용하여 풀었다. 두 번째 풀이는 제곱근이 정수일 때, 약수의 개수가 홀수인 것을 이용해여 풀었으며, 세 번째 풀이는 이를 이용하여 숏코딩하였다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token comment">// const getAliquot = (n) => {</span>
</span><span class="code-line"><span class="token comment">//     const aliquots = [];</span>
</span><span class="code-line"><span class="token comment">//     for (let i = 1; i &#x3C; n ** 0.5 + 1; i++) {</span>
</span><span class="code-line"><span class="token comment">//         if (n % i === 0) {</span>
</span><span class="code-line"><span class="token comment">//             aliquots.push(i);</span>
</span><span class="code-line"><span class="token comment">//             if (n / i !== i) aliquots.push(n / i);</span>
</span><span class="code-line"><span class="token comment">//         }</span>
</span><span class="code-line"><span class="token comment">//     }</span>
</span><span class="code-line"><span class="token comment">//     return aliquots;</span>
</span><span class="code-line"><span class="token comment">// };</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// const solution = (left, right) => {</span>
</span><span class="code-line"><span class="token comment">//     let answer = 0;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">//     for (let i = left; i &#x3C; right + 1; i++) {</span>
</span><span class="code-line"><span class="token comment">//         const { length } = getAliquot(i);</span>
</span><span class="code-line"><span class="token comment">//         answer += length % 2 === 0 ? i : -i;</span>
</span><span class="code-line"><span class="token comment">//     }</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">//     return answer;</span>
</span><span class="code-line"><span class="token comment">// };</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// const solution = (left, right) => {</span>
</span><span class="code-line"><span class="token comment">//     let answer = 0;</span>
</span><span class="code-line"><span class="token comment">//     for (let i = left; i &#x3C; right + 1; i++)</span>
</span><span class="code-line"><span class="token comment">//         answer += Number.isInteger(Math.sqrt(i)) ? -i : i;</span>
</span><span class="code-line"><span class="token comment">//     return answer;</span>
</span><span class="code-line"><span class="token comment">// };</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">const</span> <span class="token function-variable function">solution</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">l<span class="token punctuation">,</span> r</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span>
</span><span class="code-line">    <span class="token known-class-name class-name">Array</span><span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token punctuation">.</span><span class="token method function property-access">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> l <span class="token operator">+</span> i<span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token punctuation">.</span><span class="token method function property-access">reduce</span><span class="token punctuation">(</span>
</span><span class="code-line">            <span class="token punctuation">(</span><span class="token parameter">ac<span class="token punctuation">,</span> cu</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span>ac <span class="token operator">+=</span> <span class="token known-class-name class-name">Number</span><span class="token punctuation">.</span><span class="token method function property-access">isInteger</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">sqrt</span><span class="token punctuation">(</span>cu<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span>cu <span class="token operator">:</span> cu<span class="token punctuation">)</span><span class="token punctuation">,</span>
</span><span class="code-line">            <span class="token number">0</span>
</span><span class="code-line">        <span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-문자열-다루기-기본 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-문자열-다루기-기본-Javascript</link>
    <pubDate>2021-09-07</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-문자열-다루기-기본-Javascript</guid>
    <description>
    <![CDATA[프로그래머스-문자열-다루기-기본-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>숫자 혹은 문자로 이루어진 문자열이 주어진다. 이 수가 길이가 4 혹은 6이며 숫자로만 이루졌을 때 true를, 아닐 시 false를 반환하는 문제. 첫 풀이는 <code>isNan</code>을 활용하여 풀었으나 프로그래머스 상에서는 통과하지만 로컬에서 테스트했을 때는 지수인 경우에 통과하지 못했다. 두 번째 풀이는 <code>==</code> 연산자를 이용하여 풀었다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token comment">// const solution = (s) => {</span>
</span><span class="code-line"><span class="token comment">//     if (s.length !== 4 &#x26;&#x26; s.length !== 6) return false;</span>
</span><span class="code-line"><span class="token comment">//     for (let w of s.split("")) if (isNaN(w)) return false;</span>
</span><span class="code-line"><span class="token comment">//     return true;</span>
</span><span class="code-line"><span class="token comment">// };</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">const</span> <span class="token function-variable function">solution</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">!==</span> <span class="token number">4</span> <span class="token operator">&#x26;&#x26;</span> s<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">!==</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword control-flow">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-2016년 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-2016년-Javascript</link>
    <pubDate>2021-09-06</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-2016년-Javascript</guid>
    <description>
    <![CDATA[프로그래머스-2016년-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>월, 일이 주어졌을 때 2016년의 해당 날짜는 무슨 요일인지 반환하는 문제. 요일과 각 월별 일수를 이용하여 진행된 일수를 이용해 풀었다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">const</span> <span class="token function-variable function">solution</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">m<span class="token punctuation">,</span> d</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">const</span> words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"FRI"</span><span class="token punctuation">,</span> <span class="token string">"SAT"</span><span class="token punctuation">,</span> <span class="token string">"SUN"</span><span class="token punctuation">,</span> <span class="token string">"MON"</span><span class="token punctuation">,</span> <span class="token string">"TUE"</span><span class="token punctuation">,</span> <span class="token string">"WED"</span><span class="token punctuation">,</span> <span class="token string">"THU"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">const</span> days <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">const</span> curDay <span class="token operator">=</span> days<span class="token punctuation">.</span><span class="token method function property-access">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> idx <span class="token operator">&#x3C;</span> m<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> a <span class="token operator">+</span> c<span class="token punctuation">)</span> <span class="token operator">+</span> d <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword control-flow">return</span> words<span class="token punctuation">[</span>curDay <span class="token operator">%</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-자연수-뒤집어-배열로-만들기 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-자연수-뒤집어-배열로-만들기-Javascript</link>
    <pubDate>2021-09-05</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-자연수-뒤집어-배열로-만들기-Javascript</guid>
    <description>
    <![CDATA[프로그래머스-자연수-뒤집어-배열로-만들기-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>정수 n이 주어진 후, 해당 정수를 정수로 이루어진 배열로 만든 후 뒤집은 배열을 반환하는 문제. <code>Array.from</code>을 이용하여 풀었다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">const</span> <span class="token function-variable function">solution</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token keyword module">from</span><span class="token punctuation">(</span><span class="token known-class-name class-name">String</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token known-class-name class-name">Number</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-소수-찾기 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-소수-찾기-Javascript</link>
    <pubDate>2021-09-04</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-소수-찾기-Javascript</guid>
    <description>
    <![CDATA[프로그래머스-소수-찾기-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>정수 n이 주어진 후, 1부터 n까지 소수의 개수를 반환하는 문제. <code>에라토스테네스 체</code> 방식을 이용하여 소수를 판별, 소수일 시 <code>primeArr</code>에 추가한 후 length 값을 반환하여 풀었다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">const</span> <span class="token function-variable function">solution</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">const</span> isPrime <span class="token operator">=</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">fill</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">const</span> primeArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isPrime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword control-flow">continue</span><span class="token punctuation">;</span>
</span><span class="code-line">        primeArr<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> i<span class="token punctuation">;</span> j <span class="token operator">&#x3C;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">+=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">            isPrime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</span><span class="code-line">        <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token keyword control-flow">return</span> primeArr<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[Strategy pattern with TypeScript]]></title>
    <link>https://www.hyesungoh.xyz/strategy</link>
    <pubDate>2021-09-04</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/strategy</guid>
    <description>
    <![CDATA[strategy]]>
    </description>
    <content:encoded>
      <![CDATA[<p>본 게시물은 <code>Java 언어로 배우는 디자인 패턴 입문 - Yuki Hiroshi 저</code>를 기반으로 공부한 것을 정리하며 Typescript로 재작성해본 내용입니다.</p>
<h2 id="strategy-패턴이란-" class="heading">Strategy 패턴이란 ?</h2>
<p><code>Strategy</code>란 전략을 의미한다.</p>
<p>모든 프로그램은 문제를 해결하기 위해 작성되며 문제를 해결하기 위한 알고리즘들이 구현되고 있다.</p>
<p>Strategy 패턴은 그 알고리즘을 모두 교환 할 수 있으며,</p>
<p>빈틈없이 교체하여 같은 문제를 다른 방법으로도 쉽게 해결할 수 있도록 도와주는 패턴이다.</p>
<h2 id="예제-프로그램" class="heading">예제 프로그램</h2>
<p>작성할 예제 프로그램은 "가위바위보"를 실행하는 프로그램이다.</p>
<p>가위바위보에 대한 전략으로 <code>랜덤 전략</code>, <code>이기면 같은 것을 내는 전략</code>을 구현할 것이다.</p>
<table>
<thead>
<tr>
<th>이름</th>
<th>해설</th>
</tr>
</thead>
<tbody>
<tr>
<td>Hand</td>
<td>가위바위보의 '손'을 표시하는 클래스</td>
</tr>
<tr>
<td>Strategy</td>
<td>가위바위보의 '전략'을 표시하는 인터페이스</td>
</tr>
<tr>
<td>WinningStrategy</td>
<td>이기면 다음에도 같은 손을 내는 전략을 표시하는 클래스</td>
</tr>
<tr>
<td>RandomStrategy</td>
<td>랜덤으로 손을 내는 전략을 표시하는 클래스</td>
</tr>
<tr>
<td>Player</td>
<td>가위바위보를 하는 플레이어를 표시하는 클래스</td>
</tr>
<tr>
<td>Main</td>
<td>동작 테스트용 메소드</td>
</tr>
</tbody>
</table>
<h3 id="hand-클래스">Hand 클래스</h3>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Hand</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token constant">HANDVALUE_MUK</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 주먹</span>
</span><span class="code-line">  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token constant">HANDVALUE_CHI</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 가위</span>
</span><span class="code-line">  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token constant">HANDVALUE_PAA</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 보</span>
</span><span class="code-line">  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> hand <span class="token operator">=</span> <span class="token punctuation">[</span>
</span><span class="code-line">    <span class="token keyword">new</span> <span class="token class-name">Hand</span><span class="token punctuation">(</span>Hand<span class="token punctuation">.</span><span class="token constant">HANDVALUE_MUK</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
</span><span class="code-line">    <span class="token keyword">new</span> <span class="token class-name">Hand</span><span class="token punctuation">(</span>Hand<span class="token punctuation">.</span><span class="token constant">HANDVALUE_CHI</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
</span><span class="code-line">    <span class="token keyword">new</span> <span class="token class-name">Hand</span><span class="token punctuation">(</span>Hand<span class="token punctuation">.</span><span class="token constant">HANDVALUE_PAA</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// static method에서 this를 호출할 수 없다</span>
</span><span class="code-line">  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> nameList<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'주먹'</span><span class="token punctuation">,</span> <span class="token string">'가위'</span><span class="token punctuation">,</span> <span class="token string">'보'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">private</span> handValue<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function">constructor</span><span class="token punctuation">(</span>handValue<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>handValue <span class="token operator">=</span> handValue<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">public</span> <span class="token keyword">static</span> getHand <span class="token operator">=</span> <span class="token punctuation">(</span>handValue<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> Hand <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">return</span> Hand<span class="token punctuation">.</span>hand<span class="token punctuation">[</span>handValue<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">public</span> isStrongerThan <span class="token operator">=</span> <span class="token punctuation">(</span>h<span class="token operator">:</span> Hand<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fight</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">public</span> isWeakerThan <span class="token operator">=</span> <span class="token punctuation">(</span>h<span class="token operator">:</span> Hand<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fight</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">private</span> fight <span class="token operator">=</span> <span class="token punctuation">(</span>h<span class="token operator">:</span> Hand<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> h<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handValue <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">===</span> h<span class="token punctuation">.</span>handValue<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">public</span> toString <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">return</span> Hand<span class="token punctuation">.</span>nameList<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>handValue<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p><code>Hand</code> 클래스는 가위바위보의 '손'을 표시하는 클래스이며 0은 주먹, 1은 가위, 2는 보로 표현한다.</p>
<p>Hand 클래스의 인스턴스는 세 개만 작성되고, 처음에 세 개의 인스턴스가 만들어져 배열 <code>hand</code>에 저장된다.</p>
<p><code>getHand</code> 메소드를 이용해 인스턴스를 얻을 수 있다.
손의 값을 인수로 할당하면 인스턴스가 반환되며 이는 "Singleton" 패턴의 일종이다.</p>
<p><code>isStrongerThan</code>, <code>isWeakerThan</code>은 손의 승패를 비교하는 메소드이다.</p>
<p><strong>이 <code>Hand</code> 클래스는 다른 클래스에서 사용되지만 <code>Strategy</code> 패턴의 역할에는 포함되지 않는다.</strong></p>
<h3 id="strategy-인터페이스">Strategy 인터페이스</h3>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Strategy</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token function-variable function">nextHand</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Hand<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token function-variable function">study</span><span class="token operator">:</span> <span class="token punctuation">(</span>win<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p><code>Strategy</code> 인터페이스는 가위바위보의 <strong>전략</strong>을 위한 추상 메소드의 집합이다.</p>
<p><code>nextHand</code>는 '다음에 내는 손을 얻기' 위한 메소드, <code>study</code>는 '직전에 낸 손으로 이겼는지, 졌는지'를 학습하기 위한 메소드이다.</p>
<h3 id="winningstrategy-클래스">WinningStrategy 클래스</h3>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">WinningStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">Strategy</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">private</span> won<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">private</span> prevHand<span class="token operator">:</span> Hand<span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">public</span> nextHand <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Hand <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>won<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token keyword">this</span><span class="token punctuation">.</span>prevHand <span class="token operator">=</span> Hand<span class="token punctuation">.</span><span class="token function">getHand</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>prevHand<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">public</span> study <span class="token operator">=</span> <span class="token punctuation">(</span>win<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>won <span class="token operator">=</span> win<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p><code>WinningStrategy</code> 클래스는 <code>Strategy</code> 인터페이스를 구현하는 클래스 중 하나이다.</p>
<p>이 클래스는 직전 승부에서 이겼으면 다음에도 같은 손을 낸다는 전략을 취한다.</p>
<h3 id="randomstrategy-클래스">RandomStrategy 클래스</h3>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">RandomStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">Strategy</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">private</span> won<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">private</span> prevHand<span class="token operator">:</span> Hand<span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">public</span> nextHand <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Hand <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>prevHand <span class="token operator">=</span> Hand<span class="token punctuation">.</span><span class="token function">getHand</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>prevHand<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">public</span> study <span class="token operator">=</span> <span class="token punctuation">(</span>win<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>won <span class="token operator">=</span> win<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p><code>RandomStrategy</code> 클래스 또한 <code>Strategy</code> 인터페이스를 구현하는 클래스 중 하나이다.</p>
<p>이 클래스는 직전 승부와 관계없이 랜덤으로 손을 낸다는 전략을 취한다.</p>
<h3 id="player-클래스">Player 클래스</h3>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">private</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">private</span> strategy<span class="token operator">:</span> Strategy<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">private</span> winCount<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">private</span> loseCount<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">private</span> gameCount<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> strategy<span class="token operator">:</span> Strategy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>strategy <span class="token operator">=</span> strategy<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">public</span> nextHand <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Hand <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>strategy<span class="token punctuation">.</span><span class="token function">nextHand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">public</span> win <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>strategy<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>winCount<span class="token operator">++</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>gameCount<span class="token operator">++</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">public</span> lose <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>strategy<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>loseCount<span class="token operator">++</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>gameCount<span class="token operator">++</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">public</span> even <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>gameCount<span class="token operator">++</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">public</span> toString <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> : </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>gameCount<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> game, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>winCount<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> win, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>loseCount<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> lose ]</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p><code>Player</code> 클래스는 가위바위보를 하는 사람을 표현한 클래스이며, "이름", "전략"이 할당되어 인스턴스를 생성한다.</p>
<p><code>nextHand</code> 메소드는 다음의 손을 얻기 위한 것이지만, 실제로 다음의 손을 결정하는 것은 자신의 <code>전략</code>이다.
전략의 nextHand 메소드의 반환값이 그대로 Player의 nextHand 메소드의 반환값이 되는, 즉 <code>위임</code>하고 있다.</p>
<p>이기거나, 지거나, 비기거나한 승부의 결과를 다음 승부에 활용하기 위해서 <code>Player</code> 클래스는 <code>strategy</code> 필드를 통해 <code>study</code> 메소드를 호출한다.
<code>study</code> 메소드를 사용해서 전략의 내부 상태를 변화시킨다.</p>
<h3 id="main-메소드">Main 메소드</h3>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">const</span> <span class="token function-variable function">main</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">const</span> player1<span class="token operator">:</span> Player <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token string">'하나'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">WinningStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">const</span> player2<span class="token operator">:</span> Player <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token string">'두리'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RandomStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">const</span> nextHand1<span class="token operator">:</span> Hand <span class="token operator">=</span> player1<span class="token punctuation">.</span><span class="token function">nextHand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">const</span> nextHand2<span class="token operator">:</span> Hand <span class="token operator">=</span> player2<span class="token punctuation">.</span><span class="token function">nextHand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>nextHand1<span class="token punctuation">.</span><span class="token function">isStrongerThan</span><span class="token punctuation">(</span>nextHand2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Winner: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>player1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      player1<span class="token punctuation">.</span><span class="token function">win</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      player2<span class="token punctuation">.</span><span class="token function">lose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nextHand2<span class="token punctuation">.</span><span class="token function">isStrongerThan</span><span class="token punctuation">(</span>nextHand1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Winner: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>player2<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      player1<span class="token punctuation">.</span><span class="token function">lose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      player2<span class="token punctuation">.</span><span class="token function">win</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Even'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      player1<span class="token punctuation">.</span><span class="token function">even</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      player2<span class="token punctuation">.</span><span class="token function">even</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Total Result : '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>player1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>player2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<p><code>main</code> 메소드는 앞의 클래스를 이용해서 실제로 컴퓨터에서 가위바위보를 실행하기 위한 메소드이다.</p>
<p><code>WinningStrategy</code> 전략을 사용하는 '하나', <code>RandomStrategy</code> 전략을 사용한 '두리'가 10번 대전시켜 그 결과를 표시한다.</p>
<h3 id="실행-예시">실행 예시</h3>
<pre class="language-bash"><code class="language-bash code-highlight"><span class="code-line">Winner: <span class="token punctuation">[</span>하나 <span class="token builtin class-name">:</span> <span class="token number">0</span> game, <span class="token number">0</span> win, <span class="token number">0</span> lose <span class="token punctuation">]</span>
</span><span class="code-line">Winner: <span class="token punctuation">[</span>하나 <span class="token builtin class-name">:</span> <span class="token number">1</span> game, <span class="token number">1</span> win, <span class="token number">0</span> lose <span class="token punctuation">]</span>
</span><span class="code-line">Winner: <span class="token punctuation">[</span>두리 <span class="token builtin class-name">:</span> <span class="token number">2</span> game, <span class="token number">0</span> win, <span class="token number">2</span> lose <span class="token punctuation">]</span>
</span><span class="code-line">Winner: <span class="token punctuation">[</span>하나 <span class="token builtin class-name">:</span> <span class="token number">3</span> game, <span class="token number">2</span> win, <span class="token number">1</span> lose <span class="token punctuation">]</span>
</span><span class="code-line">Even
</span><span class="code-line">Even
</span><span class="code-line">Even
</span><span class="code-line">Winner: <span class="token punctuation">[</span>두리 <span class="token builtin class-name">:</span> <span class="token number">7</span> game, <span class="token number">1</span> win, <span class="token number">3</span> lose <span class="token punctuation">]</span>
</span><span class="code-line">Winner: <span class="token punctuation">[</span>하나 <span class="token builtin class-name">:</span> <span class="token number">8</span> game, <span class="token number">3</span> win, <span class="token number">2</span> lose <span class="token punctuation">]</span>
</span><span class="code-line">Winner: <span class="token punctuation">[</span>두리 <span class="token builtin class-name">:</span> <span class="token number">9</span> game, <span class="token number">2</span> win, <span class="token number">4</span> lose <span class="token punctuation">]</span>
</span><span class="code-line">Total Result <span class="token builtin class-name">:</span>
</span><span class="code-line"><span class="token punctuation">[</span>하나 <span class="token builtin class-name">:</span> <span class="token number">10</span> game, <span class="token number">4</span> win, <span class="token number">3</span> lose <span class="token punctuation">]</span>
</span><span class="code-line"><span class="token punctuation">[</span>두리 <span class="token builtin class-name">:</span> <span class="token number">10</span> game, <span class="token number">3</span> win, <span class="token number">4</span> lose <span class="token punctuation">]</span>
</span></code></pre>
<h2 id="strategy-패턴의-구성요소" class="heading">Strategy 패턴의 구성요소</h2>
<ul>
<li>
<p><strong>Strategy</strong></p>
<p>Strategy는 전략을 이용하기 위한 인터페이스를 결정한다. 예제 프로그램에서는 <code>Strategy</code> 인터페이스가 담당하였다.</p>
</li>
<li>
<p><strong>ConcreteStrategy</strong></p>
<p>위 Strategy 인터페이스를 구현한다. 여기에서 구체적인 전략을 실제로 개발하며, 예제 프로그램에서는 <code>WinningStrategy</code> 클래스와 <code>RandomStrategy</code> 클래스가 담당하였다.</p>
</li>
<li>
<p><strong>Context</strong></p>
<p>Context는 Strategy를 이용하는 역할을 한다. ConcreteStrategy의 인스턴스를 가지고 있으며 필요에 따라 그것을 사용한다. 예제 프로그램에서는 <code>Player</code> 클래스가 담당하였다.</p>
</li>
</ul>
<div align="center">
<p><img src="https://upload.wikimedia.org/wikipedia/commons/3/39/Strategy_Pattern_in_UML.png" alt="classdiagram"></p>
</div>
<h2 id="일부러-strategy-역할을-만들-필요가-있을까-" class="heading">일부러 Strategy 역할을 만들 필요가 있을까 ?</h2>
<p>Strategy 패턴에서는 알고리즘의 부분을 다른 부분과 의식적으로 분리해서 알고리즘의 인터페이스 부분만을 규정하고 위임에 의해 알고리즘을 이용한다.</p>
<p>더욱이 <strong>위임</strong>이라는 느슨한 연결을 사용하고 있으므로 <strong>알고리즘을 용이하게 교환</strong>할 수 있다.</p>
<p>예를 들어 알고리즘을 개량해서 사용하고 싶을 때, Strategy 패턴을 사용하면 Strategy 역할의 인터페이스를 변경하지 않도록 주의하고 ConcreteStrategy 역할만을 수정하면 된다.
원래의 알고리즘과 개량 알고리즘의 속도를 비교하고 싶은 경우에도 간단하게 교체해서 시험할 수 있다.</p>
<h2 id="실행-중에-교체도-가능" class="heading">실행 중에 교체도 가능</h2>
<p>Strategy 패턴을 사용하면 프로그램의 동작 중에 ConcreteStrategy 역할의 클래스를 교체할 수 있다.</p>
<p>예를 들어, 메모리가 적은 환경에서는 SlowButLesttMemoryStrategy를 사용하고, 메모리가 많은 환경에서는 FastButMoreMemoryStrategy를 사용하는 것도 생각할 수 있다.</p>
<p>다른 예로 한쪽의 알고리즘을 다른 쪽 알고리즘의 '검산'에 이용할 수도 있다.
'버그가 있을지도 모르는 고속의 알고리즘'과 '저속이지만 확실한 계산을 실행하는 알고리즘'이 있을 때 전자의 검산을 후자로 실행하는 것이다.</p>
<h2 id="관련-패턴" class="heading">관련 패턴</h2>
<ul>
<li>
<p>Flyweight</p>
<p>ConcreteStrategy 역할은 Flyweight 패턴을 사용해서 복수의 장소에서 공유할 수도 있다.</p>
</li>
<li>
<p>Abstract Factory</p>
</li>
<li>
<p>State</p>
<p>Strategy 패턴, State 패턴 둘 다 위임하는 곳을 교환하는 패턴이고 클래스 간의 관계도 매우 비슷하지만 목적이 다르다.</p>
<p>Strategy 패턴은 '알고리즘'을 표현하는 클래스를 작성해서 해당 클래스를 교체할 수 있지만 필요하지 않으면 교체하지 않아도 된다. 하지만 State 패턴에서는 '상태'를 표현하는 클래스를 작성해서 해당 클래스를 상태가 변화할 때마다 위임하는 곳의 클래스가 반드시 교체된다.</p>
</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-문자열내-p와y의-개수 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-문자열내-p와y의-개수-Javascript</link>
    <pubDate>2021-09-03</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-문자열내-p와y의-개수-Javascript</guid>
    <description>
    <![CDATA[프로그래머스-문자열내-p와y의-개수-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>문자열이 주어질 때, 'p', 'P'의 수와 'y', 'Y'의 수가 같을 때 true를, 같지 않을 때 false를 반환하는 문제.배열화하여 reducer를 통해 p일 때 +1, y일 때 -1을 계산한 값을 반대를 반환하여 풀었다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">const</span> <span class="token function-variable function">solution</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword control-flow">return</span> <span class="token operator">!</span>s
</span><span class="code-line">        <span class="token punctuation">.</span><span class="token method function property-access">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token punctuation">.</span><span class="token method function property-access">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token punctuation">.</span><span class="token method function property-access">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">            <span class="token keyword control-flow">return</span> acc <span class="token operator">+</span> <span class="token punctuation">(</span>cur <span class="token operator">===</span> <span class="token string">"P"</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> cur <span class="token operator">===</span> <span class="token string">"Y"</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-약수의-합 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-약수의-합-Javascript</link>
    <pubDate>2021-09-02</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-약수의-합-Javascript</guid>
    <description>
    <![CDATA[프로그래머스-약수의-합-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>정수 n이 주어질 때, n의 모든 약수의 합을 반환하는 문제. 재귀적으로 i를 하나씩 키워 계산하는 방법으로 풀었다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">function</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> i<span class="token operator">=</span><span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> i <span class="token operator">||</span> n <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> n
</span><span class="code-line">    <span class="token keyword control-flow">return</span> n <span class="token operator">%</span> i <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> i <span class="token operator">+</span> <span class="token function">solution</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span> <span class="token operator">+</span> <span class="token function">solution</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-콜라츠-추측 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-콜라츠-추측-Javascript</link>
    <pubDate>2021-09-01</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-콜라츠-추측-Javascript</guid>
    <description>
    <![CDATA[프로그래머스-콜라츠-추측-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>정수 n이 주어진 후 콜라츠 추측을 통해 몇 번만에 1이 되었는 지 반환하는 문제. 재귀적으로 풀었다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">const</span> <span class="token function-variable function">solution</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">></span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> cnt<span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword control-flow">return</span> <span class="token function">solution</span><span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> n <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">:</span> n <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cnt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-가운데-글자-가져오기 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-가운데-글자-가져오기-Javascript</link>
    <pubDate>2021-08-31</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-가운데-글자-가져오기-Javascript</guid>
    <description>
    <![CDATA[프로그래머스-가운데-글자-가져오기-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>문자열이 주어진 후, 해당 문자열의 길이가 짝수이면 가운데 2글자를, 홀수이면 가운데 글자를 반환하는 문제. length를 기준으로 slice하여 풀었다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">const</span> <span class="token function-variable function">solution</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> length <span class="token punctuation">}</span> <span class="token operator">=</span> s<span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">const</span> half <span class="token operator">=</span> length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword control-flow">return</span> length <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span>
</span><span class="code-line">        <span class="token operator">?</span> s<span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">(</span>half <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> half <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token operator">:</span> s<span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">(</span>half<span class="token punctuation">,</span> half <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-같은-숫자는-싫어 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-같은-숫자는-싫어-Javascript</link>
    <pubDate>2021-08-30</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-같은-숫자는-싫어-Javascript</guid>
    <description>
    <![CDATA[프로그래머스-같은-숫자는-싫어-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>배열에서 연속된 숫자 중 중복되는 수를 제외한 배열을 반환하는 문제. 첫 풀이는 주어진 배열을 기준으로 반복을 수행하며, 새로운 배열의 마지막 값과 비교하여 풀었다. 두 번째 풀이는 filter를 이용하여 주어진 배열의 idx-1 값과 비교하여 풀었다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token comment">// function solution(arr) {</span>
</span><span class="code-line"><span class="token comment">//     const answer = [];</span>
</span><span class="code-line"><span class="token comment">//     arr.forEach((elem) => {</span>
</span><span class="code-line"><span class="token comment">//         if (answer[answer.length - 1] === elem) return;</span>
</span><span class="code-line"><span class="token comment">//         answer.push(elem);</span>
</span><span class="code-line"><span class="token comment">//     });</span>
</span><span class="code-line"><span class="token comment">//     return answer;</span>
</span><span class="code-line"><span class="token comment">// }</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">const</span> <span class="token function-variable function">solution</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> arr<span class="token punctuation">.</span><span class="token method function property-access">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">cur<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> cur <span class="token operator">!==</span> arr<span class="token punctuation">[</span>idx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-서울에서-김서방-찾기 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-서울에서-김서방-찾기-Javascript</link>
    <pubDate>2021-08-29</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-서울에서-김서방-찾기-Javascript</guid>
    <description>
    <![CDATA[프로그래머스-서울에서-김서방-찾기-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>배열에서의 "Kim"의 인덱스 값을 이용한 문자열을 반환하는 문제. indexOf를 활용하여 풀었다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">const</span> <span class="token function-variable function">solution</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">seoul</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">김서방은 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>seoul<span class="token punctuation">.</span><span class="token method function property-access">indexOf</span><span class="token punctuation">(</span><span class="token string">"Kim"</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">에 있다</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-직업군-추천하기 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-직업군-추천하기-Javascript</link>
    <pubDate>2021-08-28</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-직업군-추천하기-Javascript</guid>
    <description>
    <![CDATA[프로그래머스-직업군-추천하기-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>각 직업군 언어 점수, 개발자가 사용하는 언어와 언어 선호도가 주어질 때, 그에 맞는 직업군을 추천해주는 문제. 문자열로 주어지는 각 직업군 언어 점수를 오브젝트로 Parsing한 후, 각 언어에 대해 점수를 계산, 저장하였다. 저장하는 과정에서 최댓값을 저장하여 배열에 저장하였다. 동일한 값은 알파벳순으로 빠른 값을 반환하는 조건이 있어 정렬한 값 중에서 0번 째 인덱스 값을 반환하여 풀었다. 각 직업군 언어에서 개발자가 사용하는 언어가 없을 때는 0으로 계산하는 조건이 있어 <code>Nullish coalescing</code>을 사용하였으나 프로그래머스 상에서 호환이 안되어 삼항연산자로 대체하여 풀었다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">function</span> <span class="token function">parsingTable</span><span class="token punctuation">(</span><span class="token parameter">table</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">const</span> parsedObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">const</span> jobObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    table<span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">row</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token keyword">const</span> arrRow <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token method function property-access">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">        <span class="token keyword">const</span> job <span class="token operator">=</span> arrRow<span class="token punctuation">.</span><span class="token method function property-access">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">        jobObj<span class="token punctuation">[</span>job<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</span><span class="code-line">        parsedObj<span class="token punctuation">[</span>job<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">        arrRow<span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">            parsedObj<span class="token punctuation">[</span>job<span class="token punctuation">]</span><span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">-</span> index<span class="token punctuation">;</span>
</span><span class="code-line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span> parsedObj<span class="token punctuation">,</span> jobObj <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">function</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token parameter">table<span class="token punctuation">,</span> languages<span class="token punctuation">,</span> preference</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> parsedObj<span class="token punctuation">,</span> jobObj <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">parsingTable</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">let</span> jobList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">let</span> maxValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">keys</span><span class="token punctuation">(</span>jobObj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">job</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">        languages<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">language<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">            <span class="token comment">// const jobLangRank = parsedObj[job][language] ?? 0;</span>
</span><span class="code-line">            <span class="token keyword">const</span> jobLangRank <span class="token operator">=</span> parsedObj<span class="token punctuation">[</span>job<span class="token punctuation">]</span><span class="token punctuation">[</span>language<span class="token punctuation">]</span>
</span><span class="code-line">                <span class="token operator">?</span> parsedObj<span class="token punctuation">[</span>job<span class="token punctuation">]</span><span class="token punctuation">[</span>language<span class="token punctuation">]</span>
</span><span class="code-line">                <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
</span><span class="code-line">            <span class="token keyword">const</span> langPreference <span class="token operator">=</span> preference<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">            jobObj<span class="token punctuation">[</span>job<span class="token punctuation">]</span> <span class="token operator">+=</span> jobLangRank <span class="token operator">*</span> langPreference<span class="token punctuation">;</span>
</span><span class="code-line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>jobObj<span class="token punctuation">[</span>job<span class="token punctuation">]</span> <span class="token operator">></span> maxValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">            maxValue <span class="token operator">=</span> jobObj<span class="token punctuation">[</span>job<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">            jobList <span class="token operator">=</span> <span class="token punctuation">[</span>job<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">        <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>jobObj<span class="token punctuation">[</span>job<span class="token punctuation">]</span> <span class="token operator">===</span> maxValue<span class="token punctuation">)</span> jobList<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword control-flow">return</span> jobList<span class="token punctuation">.</span><span class="token method function property-access">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-수박수박수박 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-수박수박수박-Javascript</link>
    <pubDate>2021-08-27</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-수박수박수박-Javascript</guid>
    <description>
    <![CDATA[프로그래머스-수박수박수박-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>정수 n이 주어졌을 때 "수", "박"을 순서와 n에 맞게 반환하는 문제. repeat을 이용하여 긴 문자열을 만든 후 slice를 이용해 처음부터 n까지 잘라서 반환하여 풀었다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">const</span> <span class="token function-variable function">solution</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token string">"수박"</span><span class="token punctuation">.</span><span class="token method function property-access">repeat</span><span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-부족한-금액-계산하기 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-부족한-금액-계산하기-Javascript</link>
    <pubDate>2021-08-26</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-부족한-금액-계산하기-Javascript</guid>
    <description>
    <![CDATA[프로그래머스-부족한-금액-계산하기-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>놀이기구의 가격, 보유한 금액, 계산이 될 횟수가 주어지고 가격은 횟수만큼 올라갈 때, 놀이기구를 몇 번 탑승할 수 있는지 계산하는 문제. 사칙연산과 조건문을 이용하여 풀었다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">const</span> <span class="token function-variable function">solution</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">price<span class="token punctuation">,</span> money<span class="token punctuation">,</span> count</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;=</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        sum <span class="token operator">+=</span> price <span class="token operator">*</span> i<span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token keyword control-flow">return</span> sum <span class="token operator">&#x3C;</span> money <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> sum <span class="token operator">-</span> money<span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-제일-작은-수-제거하기 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-제일-작은-수-제거하기-Javascript</link>
    <pubDate>2021-08-25</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-제일-작은-수-제거하기-Javascript</guid>
    <description>
    <![CDATA[프로그래머스-제일-작은-수-제거하기-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>정수로 이루어진 배열이 주어진 후, 해당 배열에서 제일 작은 수를 제거한 배열을 반환하는 문제. 이 때 제거된 배열의 길이가 0일 시 -1로 이루어진 배열을 반환하는 조건이 있다. filter, Math.min 메소드를 이용하여 풀었다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">function</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">const</span> answer <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token method function property-access">filter</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token arrow operator">=></span> num <span class="token operator">!==</span> <span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">min</span><span class="token punctuation">(</span><span class="token spread operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword control-flow">return</span> answer<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">:</span> answer
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-모의고사 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-모의고사-Javascript</link>
    <pubDate>2021-08-24</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-모의고사-Javascript</guid>
    <description>
    <![CDATA[프로그래머스-모의고사-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>최대 10,000개의 문제의 정답들로 이루어진 배열이 주어진다. 1번, 2번, 3번 사람이 일정 규칙을 갖고 문제를 풀 때, 제일 많이 맞춘 사람의 번호를 배열에 담아 반환하는 문제. 규칙을 배열에 담아둔 후, 문제의 인덱스 값과 비교한 나머지를 이용하여 맞았는 지 판별, 맞은 횟수를 저장하였다. 맞은 횟수 중 제일 큰 수와 비교하여 맞은 사람들을 배열에 담아 반환하여 풀었다.자바스크립트를 이용해 완벽탐색 문제는 처음인 것 같은데, forEach, map, reduce, filter와 같은 메소드가 참 좋은 것 같다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">function</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token parameter">answers</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">const</span> peopleAnswerList <span class="token operator">=</span> <span class="token punctuation">[</span>
</span><span class="code-line">        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">        <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">    <span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">const</span> peopleAnswerNum <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    answers<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">answer<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> peopleAnswerList<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">            <span class="token keyword">const</span> currentCompareIndex <span class="token operator">=</span> index <span class="token operator">%</span> peopleAnswerList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span>
</span><span class="code-line">            peopleAnswerNum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span>
</span><span class="code-line">                answer <span class="token operator">===</span> peopleAnswerList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>currentCompareIndex<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
</span><span class="code-line">        <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">const</span> maxNum <span class="token operator">=</span> <span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">max</span><span class="token punctuation">(</span><span class="token spread operator">...</span>peopleAnswerNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">const</span> answer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    peopleAnswerNum<span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">num<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>num <span class="token operator">===</span> maxNum<span class="token punctuation">)</span> answer<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword control-flow">return</span> answer<span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-문자열-내림차순으로-배치하기 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-문자열-내림차순으로-배치하기-Javascript</link>
    <pubDate>2021-08-23</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-문자열-내림차순으로-배치하기-Javascript</guid>
    <description>
    <![CDATA[프로그래머스-문자열-내림차순으로-배치하기-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>문자열이 주어진 후, 내림차 순으로 정렬된 문자열을 반환하는 문제. split, sort, reverse, join 메소드를 이용하여 풀었다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">const</span> <span class="token function-variable function">solution</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> s<span class="token punctuation">.</span><span class="token method function property-access">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-나누어-떨어지는-숫자-배열 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-나누어-떨어지는-숫자-배열-Javascript</link>
    <pubDate>2021-08-22</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-나누어-떨어지는-숫자-배열-Javascript</guid>
    <description>
    <![CDATA[프로그래머스-나누어-떨어지는-숫자-배열-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>정수로 이루어진 배열과, 정수가 주어진다. 해당 배열에서 주어진 정수로 나누어떨어지는 수들을 오름차순 정렬하여 반환하는 문제.filter 메소드를 이용하여 나누어 떨어진 수로 이루어진 배열을 생성 후, 해당 배열의 크기를 기준으로 정렬한 배열, -1만 존재한 배열을 나누어 반환하여 풀었다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">function</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> divisor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">const</span> answer <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token method function property-access">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> n <span class="token operator">%</span> divisor <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>answer<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword control-flow">return</span> answer<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> answer<span class="token punctuation">.</span><span class="token method function property-access">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-직사각형-별찍기 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-직사각형-별찍기-Javascript</link>
    <pubDate>2021-08-21</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-직사각형-별찍기-Javascript</guid>
    <description>
    <![CDATA[프로그래머스-직사각형-별찍기-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>두 개의 수가 주어지고 해당 수를 이용하여 직사각형을 출력하는 문제, 문자열의 repeat 메소드를 이용하여 풀었다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line">process<span class="token punctuation">.</span><span class="token property-access">stdin</span><span class="token punctuation">.</span><span class="token method function property-access">setEncoding</span><span class="token punctuation">(</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">process<span class="token punctuation">.</span><span class="token property-access">stdin</span><span class="token punctuation">.</span><span class="token method function property-access">on</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">const</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token method function property-access">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token string">"*"</span><span class="token punctuation">.</span><span class="token method function property-access">repeat</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">.</span><span class="token method function property-access">repeat</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[Builder pattern with TypeScript]]></title>
    <link>https://www.hyesungoh.xyz/builder</link>
    <pubDate>2021-08-21</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/builder</guid>
    <description>
    <![CDATA[builder]]>
    </description>
    <content:encoded>
      <![CDATA[<p>본 게시물은 <code>Java 언어로 배우는 디자인 패턴 입문 - Yuki Hiroshi 저</code>를 기반으로 공부한 것을 정리하며 Typescript로 재작성해본 내용입니다.</p>
<h2 id="builder-패턴이란-" class="heading">Builder 패턴이란 ?</h2>
<p>빌딩을 세울 때 우선 지반을 다지고, 골격을 세우고, 아래에서 위로 조금씩 만들어 간다.</p>
<p>이렇게 일반적으로 복잡한 건물을 세울 때 한 번에 완성시키기는 어렵다.</p>
<p>이 처럼 <strong>우선 전체를 구성하고 있는 각 부분을 만들고 단계를 밟아 만들어 가는</strong></p>
<p>구조를 가진 인스턴스를 쌓아 올리는 것이 <code>Builder 패턴</code> 이다.</p>
<h2 id="예제-프로그램" class="heading">예제 프로그램</h2>
<p>작성할 예제 프로그램은 <strong>문서</strong>를 작성하는 프로그램이며,</p>
<p>문서는 <em>타이틀을 한 개 포함한다</em>, <em>문자열을 몇 개 포함한다</em>, <em>개별 항목을 몇 개 포함한다</em>는 구조를 가지고 있다.</p>
<table>
<thead>
<tr>
<th>이름</th>
<th>해설</th>
</tr>
</thead>
<tbody>
<tr>
<td>Builder</td>
<td>문서를 구성하기 위한 메소드를 결정하는 추상 클래스</td>
</tr>
<tr>
<td>Director</td>
<td>한 개의 문서를 만드는 클래스</td>
</tr>
<tr>
<td>TextBuilder</td>
<td>일반 텍스트를 이용해서 문서를 만드는 클래스</td>
</tr>
<tr>
<td>HTMLBuilder</td>
<td>HTML 파일을 이용해서 문서를 만드는 클래스</td>
</tr>
<tr>
<td>Main</td>
<td>동작 테스트용 클래스</td>
</tr>
</tbody>
</table>
<h3 id="builder-클래스">Builder 클래스</h3>
<pre class="language-java"><code class="language-java code-highlight"><span class="code-line"><span class="token comment">// Java</span>
</span><span class="code-line"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">makeTitle</span><span class="token punctuation">(</span><span class="token class-name">String</span> title<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">makeString</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">makeItems</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> items<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token comment">// Typescript</span>
</span><span class="code-line"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token function">makeTitle</span><span class="token punctuation">(</span>title<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token function">makeString</span><span class="token punctuation">(</span>str<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token function">makeItems</span><span class="token punctuation">(</span>items<span class="token operator">:</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p><code>Builder</code> 클래스는 <code>문서</code>를 만들 메소드들을 선언하고 있는 추상 클래스이다.</p>
<h3 id="director-클래스">Director 클래스</h3>
<pre class="language-java"><code class="language-java code-highlight"><span class="code-line"><span class="token comment">// Java</span>
</span><span class="code-line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Director</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">private</span> <span class="token class-name">Builder</span> builder<span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">public</span> <span class="token class-name">Director</span><span class="token punctuation">(</span><span class="token class-name">Builder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token keyword">this</span><span class="token punctuation">.</span>builder <span class="token operator">=</span> builder<span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 문서 구축</span>
</span><span class="code-line">        builder<span class="token punctuation">.</span><span class="token function">makeTitle</span><span class="token punctuation">(</span><span class="token string">"안녕하세요"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 타이틀</span>
</span><span class="code-line">        builder<span class="token punctuation">.</span><span class="token function">makeString</span><span class="token punctuation">(</span><span class="token string">"아침과 낮에"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 문자열</span>
</span><span class="code-line">        builder<span class="token punctuation">.</span><span class="token function">makeItems</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"좋은 아침입니다"</span><span class="token punctuation">,</span> <span class="token string">"안녕하세요"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 개별 항목</span>
</span><span class="code-line">        builder<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 문서 완성</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token comment">// Typescript</span>
</span><span class="code-line"><span class="token keyword">class</span> <span class="token class-name">Director</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">private</span> builder<span class="token operator">:</span> Builder<span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">public</span> <span class="token function">constructor</span><span class="token punctuation">(</span>builder<span class="token operator">:</span> Builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>builder <span class="token operator">=</span> builder<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token comment">// 문서 구축</span>
</span><span class="code-line">  <span class="token keyword">public</span> construct <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">makeTitle</span><span class="token punctuation">(</span><span class="token string">'안녕하세요'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 타이틀</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">makeString</span><span class="token punctuation">(</span><span class="token string">'아침과 낮에'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 문자열</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">makeItems</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'좋은 아침입니다'</span><span class="token punctuation">,</span> <span class="token string">'안녕하세요'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 개별 항목</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 문서 완성</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p><code>Director</code> 클래스는 <code>Builder</code> 클래스로 선언되어 있는 메소드를 사용해서 <code>문서</code>를 만듭니다.</p>
<p><code>Director</code> 클래스의 생성자의 인수는 <code>Builder형</code>인데,</p>
<p>실제로 Builder 클래스의 인스턴스가 인수로 주어지는 경우는 없다.</p>
<p>Builder 클래스는 <strong>추상</strong> 클래스이며, 이는 인스턴스를 만들 수 없기 때문이다.</p>
<p>즉, Director 클래스의 생성자에 전달되는 것은 Builder 클래스의 <strong>하위</strong> 클래스인 <code>TextBuilder</code>, <code>HTMLBuilder</code> 클래스의 인스턴스이다.</p>
<blockquote>
<p>construct 메소드를 호출하면 문서가 만들어진다.</p>
</blockquote>
<h3 id="textbuilder-클래스">TextBuilder 클래스</h3>
<pre class="language-java"><code class="language-java code-highlight"><span class="code-line"><span class="token comment">// Java</span>
</span><span class="code-line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TextBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">private</span> <span class="token class-name">StringBuffer</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeTitle</span><span class="token punctuation">(</span><span class="token class-name">String</span> title<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 타이틀</span>
</span><span class="code-line">        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"=================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&#x3C;"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">">\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeString</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 일반 텍스트</span>
</span><span class="code-line">        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeItems</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 개별 항목</span>
</span><span class="code-line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">            buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">+</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">        <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 종료선</span>
</span><span class="code-line">        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"=================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 완성한 문서</span>
</span><span class="code-line">        <span class="token keyword">return</span> buffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token comment">// Typescript</span>
</span><span class="code-line"><span class="token keyword">class</span> <span class="token class-name">TextBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">private</span> buffer<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">public</span> makeTitle <span class="token operator">=</span> <span class="token punctuation">(</span>title<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>buffer<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'=================\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>buffer<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>title <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">public</span> makeString <span class="token operator">=</span> <span class="token punctuation">(</span>str<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>buffer<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">public</span> makeItems <span class="token operator">=</span> <span class="token punctuation">(</span>items<span class="token operator">:</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token keyword">this</span><span class="token punctuation">.</span>buffer<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">public</span> close <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>buffer<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'=================\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">public</span> getResult <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>buffer<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p><code>TextBuilder</code> 클래스는 Builder 클래스의 하위 클래스이다.</p>
<p>일반 텍스트를 사용해서 문서를 구축하고 결과를 String으로 반환한다.</p>
<h3 id="htmlbuilder-클래스">HTMLBuilder 클래스</h3>
<pre class="language-java"><code class="language-java code-highlight"><span class="code-line"><span class="token comment">// Java</span>
</span><span class="code-line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HTMLBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">private</span> <span class="token class-name">String</span> filename<span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">private</span> <span class="token class-name">PrintWriter</span> writer<span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeTitle</span><span class="token punctuation">(</span><span class="token class-name">String</span> title<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        filename <span class="token operator">=</span> title <span class="token operator">+</span> <span class="token string">".html"</span><span class="token punctuation">;</span>
</span><span class="code-line">        <span class="token comment">// 중략</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeString</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        writer<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&#x3C;p>"</span> <span class="token operator">+</span> str <span class="token operator">+</span> <span class="token string">"&#x3C;/p>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeItems</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">            <span class="token comment">// 중략</span>
</span><span class="code-line">        <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 파일명을 반환</span>
</span><span class="code-line">        <span class="token keyword">return</span> filename<span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<blockquote>
<p>HTML 파일을 만들고 작성하는 내용이라 TS는 생략하겠습니다.</p>
</blockquote>
<p>HTMLBuilder 클래스도 Builder 클래스의 하위 클래스이며, HTML 파일로 문서를 구축하고 파일명을 반환한다.</p>
<h3 id="main-클래스">Main 클래스</h3>
<pre class="language-java"><code class="language-java code-highlight"><span class="code-line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">            <span class="token function">usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">        <span class="token punctuation">}</span>
</span><span class="code-line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"plain"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">            <span class="token class-name">TextBuilder</span> textbuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">            <span class="token class-name">Director</span> director <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Director</span><span class="token punctuation">(</span>textbuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">            director<span class="token punctuation">.</span><span class="token function">consturct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">            <span class="token class-name">String</span> result <span class="token operator">=</span> textbuilder<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"html"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">            <span class="token class-name">HTMLBuilder</span> htmlbuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HTMLBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">            <span class="token class-name">Director</span> director <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Director</span><span class="token punctuation">(</span>htmlbuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">            director<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">            <span class="token class-name">String</span> filename <span class="token operator">=</span> htmlbuilder<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>filename <span class="token operator">+</span> <span class="token string">"가 작성되었습니다"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
</span><span class="code-line">            <span class="token function">usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">        <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Usage: java Main plane 일반 텍스트로 문서작성"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Usage: java Main html  HTML 파일로 문서작성"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<blockquote>
<p>TextBuilder 클래스의 인스턴스 혹은 HTMLBuilder 클래스의 인스턴스를
Director 클래스의 생성자에게 전달한다.</p>
</blockquote>
<p>TexBuilder, HTMLBuilder는 Builder 클래스의 하위 클래스이고</p>
<p>Director는 Builder의 메소드만을 사용해서 문서를 작성한다.</p>
<p>Builder의 메소드만을 사용한다는 것은 <strong>Director는 실제로 동작하는 것이 TextBuilder인지, HTMLBuilder인지 모른다</strong>는 뜻이다.</p>
<p>따라서 Builder는 문서를 구축하려는 목적을 달성하기 위해서 필요 충분한 메소드군을 선언할 필요가 있다.</p>
<p>단, 일반 텍스트나 HTML 파일에 <strong>고유의 메소드까지 Builder가 제공해서는 안된다.</strong></p>
<h2 id="builder-패턴의-구성요소" class="heading">Builder 패턴의 구성요소</h2>
<ul>
<li>
<p><strong>Builder</strong></p>
<p>Builder 역할은 인스턴스를 생성하기 위한 인터페이스를 결정한다.</p>
<p>인스턴스의 각 부분을 만들기 위한 메소드가 준비되어 있으며, 예제 프로그램에서는 Builder 클래스가 이 역할을 담당한다.</p>
</li>
<li>
<p><strong>ConcreteBuilder</strong></p>
<p>ConcreteBuilder 역할은 Builder 역할의 인터페이스를 구현하고 있는 클래스이다.</p>
<p>실제 인스턴스 작성으로 호출되는 메소드, 최종 결과를 얻기 위한 메소드가 준비되어 있다.</p>
<p>예제 프로그램에서는 TextBuilder, HTMLBuilder 크래스가 이 역할을 담당한다.</p>
</li>
<li>
<p><strong>Director</strong></p>
<p>Director 역할은 Builder 역할의 인터페이스를 사용해서 인스턴스를 생성한다.</p>
<p>ConcreteBuilder 역할과 관계없이 제대로 기능하도록 Builder 역할의 메소드만을 사용한다.</p>
<p>예제 프로그램에서는 Director 클래스가 이 역할을 담당한다.</p>
</li>
<li>
<p><strong>Client</strong></p>
<p>Builder 패턴을 이용하는 역할이며, 예제 프로그램에서는 Main 클래스가 역할을 담당하였다.</p>
<p><em>GoF 책에서는 Client 역할은 Builder 패턴 안에 포함되어 있지 않다.</em></p>
</li>
</ul>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/f3/Builder_UML_class_diagram.svg/700px-Builder_UML_class_diagram.svg.png" alt="diagram"></p>
<h2 id="누가-무엇을-알고-있을까-" class="heading">누가 무엇을 알고 있을까 ?</h2>
<p>OOP에서 "누가 무엇을 알고 있을까?", "어떤 클래스가 어떤 메소드를 사용할 수 있을까?" 는 상당히 중요하여 주의하며 프로그래밍을 할 필요가 있다.</p>
<ul>
<li>
<p>Main 클래스는 Builder 클래스의 메소드를 모르며, Director 클래스의 construct 메소드만을 호출한다.</p>
</li>
<li>
<p>Director 클래스는 Builder 클래스를 알고 있어, 메소드를 사용하여 문서를 구착한다. 하지만 실제로 이용하고 있는 클래스가 TextBuilder, HTMLBuilder 또는 Builder의 다른 하위 클래스인지 모른다.</p>
</li>
<li>
<p>Director 클래스가 자신이 이용하고 있는 Builder 클래스의 하위 클래스를 <strong>모르기 때문에 교체할 수 있다.</strong></p>
</li>
</ul>
<p>모르기 때문에 교환이 가능하고, 교체가 가능하기 때문에 부품으로서 가치가 높다.</p>
<p><code>교환가능성</code>은 클래스의 설계자로써 항상 기억할 필요가 있다.</p>
<h2 id="설계-시에-결정할-수-있는-것-결정할-수-없는-것" class="heading">설계 시에 결정할 수 있는 것, 결정할 수 없는 것</h2>
<p>Builder 클래스는 문서를 구축할 때 필요 충분한 메소드군을 선언해야 한다.</p>
<p>왜냐하면 Director 클래스에 주어진 도구는 Builder 클래스가 제공하는 도구이기 때문이다.</p>
<p>예제 프로그램에서는 Text와 HTML 형식의 파일만을 Build 했지만, 미래에 ASDF라는 형식이 나왔을 때 ASDFBuilder 클래스를 만들 수 있을 지, 새로운 메소드가 필요할지는 모른다.</p>
<p>이처럼 모든 것을 예상할 수는 없기 때문에, 가까운 미래에 발생할 것으로 <strong>예상되는 변화에 적응할 수 있도록 설계</strong>해야 한다.</p>
<h2 id="관련-패턴" class="heading">관련 패턴</h2>
<ul>
<li>
<p>Template Method</p>
<p>Director 역할이 Builder 역할을 제어, Template Method 패턴에서는 상위 클래스가 하위 클래스를 제어한다.</p>
</li>
<li>
<p>Composite</p>
<p>Builder 패턴에 의해 만들어진 생성물은 Composite 패턴이 되는 경우가 있다.</p>
</li>
<li>
<p>Abstract Factory</p>
<p>Builder 패턴과 마찬가지로 복잡한 인스턴스를 생선한다.</p>
</li>
<li>
<p>Facade</p>
<p>Director 역할은 Builder 역할의 복잡한 메소드를 조합해서 인스턴스를 구축하는 인터페이스를 외부에 제공하는 것 (construct)이다.
Facade 패턴의 Facade 역할은 내부 모듈을 조합해 단순한 인터페이스를 외부에 제공한다.</p>
</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-정수-내림차순으로-배치하기 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-정수-내림차순으로-배치하기-Javascript</link>
    <pubDate>2021-08-20</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-정수-내림차순으로-배치하기-Javascript</guid>
    <description>
    <![CDATA[프로그래머스-정수-내림차순으로-배치하기-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>정수가 주어진 후, 해당 자릿수의 숫자들을 내림차순으로 배치하여 정수를 반환하는 문제. 주어진 정수를 배열화한 후, 내림차순으로 정렬, join한 값을 parseInt한 값을 반환하여 풀었다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line">
</span><span class="code-line"><span class="token comment">// function solution(n) {</span>
</span><span class="code-line"><span class="token comment">//     const nArr = Array.from(String(n));</span>
</span><span class="code-line"><span class="token comment">//     const sortedArr = nArr.sort((a, b) => b - a);</span>
</span><span class="code-line"><span class="token comment">//     return Number(sortedArr.join(""));</span>
</span><span class="code-line"><span class="token comment">// }</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">const</span> <span class="token function-variable function">solution</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span>
</span><span class="code-line">    <span class="token function">parseInt</span><span class="token punctuation">(</span>
</span><span class="code-line">        <span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token keyword module">from</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span>
</span><span class="code-line">            <span class="token punctuation">.</span><span class="token method function property-access">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> b <span class="token operator">-</span> a<span class="token punctuation">)</span>
</span><span class="code-line">            <span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-핸드폰-번호-가리기 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-핸드폰-번호-가리기-Javascript</link>
    <pubDate>2021-08-19</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-핸드폰-번호-가리기-Javascript</guid>
    <description>
    <![CDATA[프로그래머스-핸드폰-번호-가리기-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>문자열이 주어진 후, 마지막 4자리 수를 제외하고 *로 바꾼 문자열을 반환하는 문제. 문자열을 spread한 후, map을 이용해 길이와 비교하여 조건에 맞는 배열을 구성하였다. 배열을 join한 값을 반환하여 풀었다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token comment">// function solution(phone_number) {</span>
</span><span class="code-line"><span class="token comment">//     const answer = [...phone_number].map((n, i) =></span>
</span><span class="code-line"><span class="token comment">//         i > phone_number.length - 5 ? n : "*"</span>
</span><span class="code-line"><span class="token comment">//     );</span>
</span><span class="code-line"><span class="token comment">//     return answer.join("");</span>
</span><span class="code-line"><span class="token comment">// }</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">const</span> <span class="token function-variable function">solution</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">pN</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span>
</span><span class="code-line">    <span class="token punctuation">[</span><span class="token spread operator">...</span>pN<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span>i <span class="token operator">></span> pN<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">-</span> <span class="token number">5</span> <span class="token operator">?</span> n <span class="token operator">:</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-평균-구하기 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-평균-구하기-Javascript</link>
    <pubDate>2021-08-18</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-평균-구하기-Javascript</guid>
    <description>
    <![CDATA[프로그래머스-평균-구하기-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>reduce를 이용하여 sum 값을 구한 후, length를 이용하여 평균을 구한 후 반환하여 풀었다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">const</span> <span class="token function-variable function">solution</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> arr<span class="token punctuation">.</span><span class="token method function property-access">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> a <span class="token operator">+</span> c<span class="token punctuation">)</span> <span class="token operator">/</span> arr<span class="token punctuation">.</span><span class="token property-access">length</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-짝수와-홀수 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-짝수와-홀수-Javascript</link>
    <pubDate>2021-08-17</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-짝수와-홀수-Javascript</guid>
    <description>
    <![CDATA[프로그래머스-짝수와-홀수-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>정수를 입력받은 후, 해당 정수가 짝, 홀수인지 반환하는 문제. 화살표 함수로 바꾼 후, 삼항 연산자와 0이 false인 것을 이용하여 간단히 풀었다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">const</span> <span class="token function-variable function">solution</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token string">"Odd"</span> <span class="token operator">:</span> <span class="token string">"Even"</span><span class="token punctuation">;</span>
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-자릿수-더하기 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-자릿수-더하기-Javascript</link>
    <pubDate>2021-08-16</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-자릿수-더하기-Javascript</guid>
    <description>
    <![CDATA[프로그래머스-자릿수-더하기-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>정수를 입력받은 후, 해당 정수의 자릿수를 모두 더해 반환하는 문제. 정수를 문자열, 배열화한 후 reduce를 이용하여 모든 자릿수를 더하여 풀었다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">function</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">const</span> nArr <span class="token operator">=</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token keyword module">from</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token method function property-access">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">const</span> answer <span class="token operator">=</span> nArr<span class="token punctuation">.</span><span class="token method function property-access">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> acc <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword control-flow">return</span> answer<span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[2021 Toss Next 개발자 채용 FE 후기]]></title>
    <link>https://www.hyesungoh.xyz/toss2021NextReview</link>
    <pubDate>2021-08-14</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/toss2021NextReview</guid>
    <description>
    <![CDATA[toss2021NextReview]]>
    </description>
    <content:encoded>
      <![CDATA[<p><img src="https://user-images.githubusercontent.com/26461307/129446556-51ac5424-2669-43fc-9f84-a096cf35d118.png" alt="toss next 2021"></p>
<p><code>소프트웨어 마에스트로</code> 활동때문에 정신없이 보내고 있는 요즘이지만,</p>
<p>주말이기도 하고 가고 싶었던 기업인 <code>Toss</code>의 개발자 채용 테스트를 봐보았다.</p>
<h2 id="문제" class="heading">문제</h2>
<p>FE 개발자 기준, 약 2시간동안 진행되었다.</p>
<blockquote>
<p>자세한 내용은 발설을 해서는 안되어 자세히는 기술하지 못하는 점 이해 바랍니당</p>
</blockquote>
<p>다른 기업들 코딩 테스트의 경우 DP, 그래프 탐색, 그리디같은 일반적인 알고리즘 문제들이 출제되었는데</p>
<p>Toss의 경우 개발시에 실질적으로 사용할 것 같은 문제들이 대거 출제 되었다.</p>
<blockquote>
<p>일반적인 알고리즘은 많이 풀어봐서 비교적 자신이 있었는데, <br/> 자바스크립트에서 소홀히 다뤘던 부분들이 문제로 대거 나와서 개인적으로 만족스럽게 보지 못했다.</p>
</blockquote>
<p>이렇게 출제되다 보니, 내가 자바스크립트에서 어느 부분을 신경 못쓰고 있었는 지 알게 되었다.</p>
<p>다른 기업 테스트에 임할 때는 학교 시험을 보는 기분이였다면, Toss는 공부하고 있다는 느낌도 강하게 들었다.</p>
<p>이렇게 출제하는 문화가 널리 퍼지면 기업 입장에서 원하는 개발자를 뽑기도 쉽고, 개발자들도 많이 성장할 것 같다고 생각한다.</p>
<h2 id="업적-달성" class="heading">업적 달성</h2>
<p><img src="https://user-images.githubusercontent.com/26461307/129446688-b1c1f9b5-0112-4e16-a8c4-d37b09e57458.png" alt="스크린샷 2021-08-14 오후 9 43 15"></p>
<p>스크롤 하기, 우클릭 하기, 개발자도구 켜기와 같은 다양한 도전 과제들이</p>
<p><a href="https://toss.im/career/next-developer-2021" target="_blank" rel="noopener noreferer">소개 페이지</a>에 있어, 테스트 신청한 날 열심히 풀어봤었는데 되게 재밌고 신선한 경험이였다.</p>
<h2 id="이벤트" class="heading">이벤트</h2>
<p><em>나한테 남은건 이벤트 밖에 없어...!</em></p>
<p>코딩 테스트 참가자중 사우이 50% 안에서 20명을 뽑아 개발 지원금 100만원을 준다고 한다.</p>
<p>개인적인 생각으로 통과는 힘들 것 같고,,, 올해는 이벤트 당첨되기를 기원하는 수 밖에 없을 것 같다.</p>
<p>취직은 내년, 내후년 아니면 그 후년을 기약해봐야겠다.</p>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[Factory Method pattern with TypeScript]]></title>
    <link>https://www.hyesungoh.xyz/factoryMethod</link>
    <pubDate>2021-08-02</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/factoryMethod</guid>
    <description>
    <![CDATA[factoryMethod]]>
    </description>
    <content:encoded>
      <![CDATA[<p>본 게시물은 <code>Java 언어로 배우는 디자인 패턴 입문 - Yuki Hiroshi 저</code>를 기반으로 공부한 것을 정리하며 Typescript로 재작성해본 내용입니다.</p>
<h2 id="factory-method-패턴이란-" class="heading">Factory Method 패턴이란 ?</h2>
<p>'Factory'는 <code>공장</code>이라는 의미를 가지고 있다.</p>
<p><code>Factory Method</code> 패턴은 인스턴스를 만드는 방법을 상위 클래스 측에서 결정하지만, 구체적인 클래스 이름까지는 결정하지 않는다.</p>
<p>구체적인 내용은 모두 하위 클래스 측에서 수행한다.</p>
<blockquote>
<p>인스턴스를 생성하는 공장을 <code>Template Method</code> 패턴으로 구성한 것이 <code>Factory Method</code> 패턴이 된다.</p>
</blockquote>
<h2 id="예제-프로그램" class="heading">예제 프로그램</h2>
<p>작성할 예제 프로그램은 <code>IDCard</code>를 만드는 공장을 소재로 하였다.</p>
<p>골격 역할을 할 <code>Product</code>, <code>Factory</code> 클래스, 구체적인 내용을 구현할 <code>IDCard</code>, <code>IDCardFactory</code> 클래스 나뉘어져 있다.</p>
<h3 id="product-클래스">Product 클래스</h3>
<pre class="language-java"><code class="language-java code-highlight"><span class="code-line"><span class="token comment">// Java</span>
</span><span class="code-line"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span></code></pre>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token comment">// Typescript</span>
</span><span class="code-line"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p><code>Product</code> 클래스는 <code>제품</code>을 표현한 클래스이며, 추상 메소드 <code>use</code>만이 선언되어 있다.</p>
<p>구체적인 <code>use</code>의 구현은 모두 <code>Product</code>의 하위 클래스에게 맡기고 있다.</p>
<h3 id="factory-클래스">Factory 클래스</h3>
<pre class="language-java"><code class="language-java code-highlight"><span class="code-line"><span class="token comment">// Java</span>
</span><span class="code-line"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Factory</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">Product</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">String</span> owner<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token class-name">Product</span> p <span class="token operator">=</span> <span class="token function">createProduct</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">        <span class="token function">registerProduct</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">        <span class="token keyword">return</span> p<span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token class-name">Product</span> <span class="token function">createProduct</span><span class="token punctuation">(</span><span class="token class-name">String</span> owner<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">registerProduct</span><span class="token punctuation">(</span><span class="token class-name">Product</span> product<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<blockquote>
<p>final 메소드는 더 이상 <strong>오버라이딩 할 수 없음</strong>을 뜻한다.</p>
</blockquote>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token comment">// Typescript</span>
</span><span class="code-line"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Factory</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">public</span> create <span class="token operator">=</span> <span class="token punctuation">(</span>owner<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> Product <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">const</span> p<span class="token operator">:</span> Product <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createProduct</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerProduct</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">return</span> p<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token function">createProduct</span><span class="token punctuation">(</span>owner<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> Product<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token function">registerProduct</span><span class="token punctuation">(</span>product<span class="token operator">:</span> Product<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>Factory 클래스는 인스턴스를 생성할 때 <code>Template Method</code> 패턴이 사용되고 있다.</p>
<p>추상 메소드 <code>createProduct</code>에서 '제품을 만들고', 만든 제품을 추상 메소드 <code>registerProduct</code>에서 '등록' 한다.</p>
<p>이 클래스는 <strong>"create 메소드에서 Product의 인스턴스를 createProduct에서 만들어서 registerProduct에서 등록한다"</strong> 라는 순서로 구현되고 있다.</p>
<blockquote>
<p>제품을 만들고 등록하는 구현은 하위 클래스에서 수행한다.</p>
</blockquote>
<h3 id="idcard-클래스">IDCard 클래스</h3>
<pre class="language-java"><code class="language-java code-highlight"><span class="code-line"><span class="token comment">// Java</span>
</span><span class="code-line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IDCard</span> <span class="token keyword">extends</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">private</span> <span class="token class-name">String</span> owner<span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token class-name">IDCard</span><span class="token punctuation">(</span><span class="token class-name">String</span> owner<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>owner <span class="token operator">+</span> <span class="token string">"의 카드를 만듭니다."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">        <span class="token keyword">this</span><span class="token punctuation">.</span>owner <span class="token operator">=</span> owner<span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>owner <span class="token operator">+</span> <span class="token string">"의 카드를 사용합니다."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token keyword">return</span> owner<span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token comment">// Typescript</span>
</span><span class="code-line"><span class="token keyword">class</span> <span class="token class-name">IDCard</span> <span class="token keyword">extends</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">private</span> owner<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function">constructor</span><span class="token punctuation">(</span>owner<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>owner<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">의 카드를 만듭니다.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>owner <span class="token operator">=</span> owner<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">public</span> use <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>owner<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">의 카드를 사용합니다.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">public</span> getOwner <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>owner<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p><code>Product</code> 클래스의 하위 클래스로 정의하며, <code>use</code> 메소드를 구현합니다.</p>
<h3 id="idcardfactory-클래스">IDCardFactory 클래스</h3>
<pre class="language-java"><code class="language-java code-highlight"><span class="code-line"><span class="token comment">// Java</span>
</span><span class="code-line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IDCardFactory</span> <span class="token keyword">extends</span> <span class="token class-name">Factory</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">private</span> <span class="token class-name">List</span> owners <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">protected</span> <span class="token class-name">Product</span> <span class="token function">createProduct</span><span class="token punctuation">(</span><span class="token class-name">String</span> owner<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">IDCard</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">registerProduct</span><span class="token punctuation">(</span><span class="token class-name">Product</span> product<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        owners<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">IDCard</span><span class="token punctuation">)</span>product<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token keyword">public</span> <span class="token class-name">List</span> <span class="token function">getOwners</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token keyword">return</span> owners<span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token comment">// Typescript</span>
</span><span class="code-line"><span class="token keyword">class</span> <span class="token class-name">IDCardFactory</span> <span class="token keyword">extends</span> <span class="token class-name">Factory</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">private</span> owners<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">protected</span> createProduct <span class="token operator">=</span> <span class="token punctuation">(</span>owner<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> Product <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">IDCard</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">protected</span> registerProduct <span class="token operator">=</span> <span class="token punctuation">(</span>product<span class="token operator">:</span> Product<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>owners<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>product <span class="token keyword">as</span> IDCard<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">public</span> getOwners <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>owners<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p><code>IDCardFactory</code> 클래스는 <code>IDCard</code> 인스턴스를 생성해 <strong>제품을 만드는</strong> <code>createProduct</code>와</p>
<p><code>IDCard의 owner</code>를 owners 필드에 추가해 <strong>등록하는</strong> <code>registerProduct</code> 메소드를 구현하고 있다.</p>
<h3 id="main-클래스">Main 클래스</h3>
<pre class="language-java"><code class="language-java code-highlight"><span class="code-line"><span class="token comment">// Java</span>
</span><span class="code-line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token class-name">Factory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IDCardFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">        <span class="token class-name">Product</span> card1 <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"김철수"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">        <span class="token class-name">Product</span> card2 <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"박철수"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">        <span class="token class-name">Product</span> card3 <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"오철수"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">        card1<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">        card2<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">        card3<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token comment">// Typescript</span>
</span><span class="code-line"><span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token function-variable function">main</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">const</span> factory<span class="token operator">:</span> Factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IDCardFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">const</span> card1<span class="token operator">:</span> Product <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">'김철수'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">const</span> card2<span class="token operator">:</span> Product <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">'박철수'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">const</span> card3<span class="token operator">:</span> Product <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">'오철수'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    card1<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    card2<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    card3<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<pre><code class="language-console code-highlight"><span class="code-line">김철수의 카드를 만듭니다.
</span><span class="code-line">박철수의 카드를 만듭니다.
</span><span class="code-line">오철수의 카드를 만듭니다.
</span><span class="code-line">김철수의 카드를 사용합니다.
</span><span class="code-line">박철수의 카드를 사용합니다.
</span><span class="code-line">오철수의 카드를 사용합니다.
</span></code></pre>
<p><code>Main</code> 클래스에서는 위에서 구현한 <code>IDCardFactory</code>를 사용하여 3개의 카드를 만들고 사용하였다.</p>
<h2 id="factory-method의-구성요소" class="heading">Factory Method의 구성요소</h2>
<ul>
<li><strong>Product</strong></li>
</ul>
<p>예제 프로그램에서 <code>Product</code> 클래스가 역할을 담당했으며, 이 패턴에서 생성되는 인스턴스가 가져야하는 인터페이스를 결정하는 추상 클래스이다.</p>
<ul>
<li><strong>Creator</strong></li>
</ul>
<p>예제 프로그램에서 <code>Factory</code> 클래스가 역할을 담당했다.</p>
<p>해당 요소의 역할은 인스턴스 생성의 메소드를 호출하면 <code>Product</code>가 생성된다는 것이며, 예제 프로그램에서는 <code>createProduct</code> 메소드가 담당하였다.</p>
<blockquote>
<p>new를 사용해서 실제의 인스턴스를 생성하는 대신에, 인스턴스 생성을 위한 메소드를 호출해서 구체적인 클래스 이름에 의한 속박에서 상위 클래스를 자유롭게 만든다.</p>
</blockquote>
<ul>
<li><strong>ConcreteProduct</strong></li>
</ul>
<p>예제 프로그램에서 <code>IDCard</code> 클래스가 역할을 담당헀으며, 구체적인 제품을 결정한다.</p>
<ul>
<li><strong>ConcreteCreator</strong></li>
</ul>
<p>예제 프로그램에서 <code>IDCardFactory</code> 클래스가 역할을 담당했으며, 구체적인 제품을 만드는 클래스를 결정한다.</p>
<h2 id="framework와-구체적인-내용" class="heading">Framework와 구체적인 내용</h2>
<p>위에서 <code>추상적인 골격</code>, <code>구체적인 내용</code>의 두 가지 측면에 관해서 살펴보았다.</p>
<p>이들은 각각 <code>framework</code>, <code>idcard</code>로 나뉘어져 있는데, 이 상황에서 동일한 framework를 사용해서 'Television', 'TelevisionFactory'를 만든다고 가정하자.</p>
<p>이 때 <code>framework</code>의 <strong>내용을 수정하지 않아도</strong> 전혀 다른 제품과 공장을 만들 수 있다.</p>
<p>그 이유는 <code>frameworks</code>는 <code>idcard</code>를 사용하지 않기 때문, 즉 <code>의존하고 있지 않기</code> 때문이다.</p>
<h2 id="인스턴스-생성---메소드의-구현-방법" class="heading">인스턴스 생성 - 메소드의 구현 방법</h2>
<p>예제 프로그램 <code>Factory</code> 클래스의 <code>createProduct</code> 메소드의 기술 방법은 다음 세 가지가 있다.</p>
<h4 id="1-추상-메소드">1. 추상 메소드</h4>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Factory</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token function">createProduct</span><span class="token punctuation">(</span>owner<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> Product<span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token operator">...</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>추상 메소드로 작성하면 하위 클래스는 반드시 이 메소드를 구현해야 한다.</p>
<p>예제 프로그램에서 사용한 방법이다.</p>
<h4 id="2-디폴트의-구현을-준비">2. 디폴트의 구현을 준비</h4>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">class</span> <span class="token class-name">Factory</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">protected</span> createProduct <span class="token operator">=</span> <span class="token punctuation">(</span>owner<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> Product <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token operator">...</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>디폴트 메소드를 구현해두고 하위 클래스에서 구현하지 않았을 때 사용하는 방법이다.</p>
<p>단, 이 경우에서는 <code>Product</code> 클래스에 대해서 직접 new를 이용하고 있으므로 Product 클래스를 추상 클래스로 둘 수 없다.</p>
<h4 id="3-에러를-이용">3. 에러를 이용</h4>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">class</span> <span class="token class-name">Factory</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">protected</span> createProduct <span class="token operator">=</span> <span class="token punctuation">(</span>owner<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> Product <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">FactoryMethodRuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token operator">...</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>디폴트의 구현 내용을 에러로 처리해 두면, 하위 클래스에서 구현하지 않았을 경우 에러가 발생하여 <strong>구현되고 있지 않은 것</strong>을 알려 줄 수 있다.</p>
<p>단, <em>FactoryMethodRuntimeException</em>는 별도로 작성되어 있다고 가정한다.</p>
<h2 id="그-외" class="heading">그 외</h2>
<ul>
<li>
<p>패턴 이용과 개발자 간의 의사 소통</p>
<p>여러 디자인 패턴들은 1개의 클래스만을 읽는 것이 아니기 때문에, 실제 이루어지는 동작에 비해 복잡한 프로그래밍으로 느껴질 수 있다.</p>
<p>일반적으로 디자인 패턴을 사용해서 어떤 클래스를 설계할 때, 그 클래스를 보수하는 사람에게 설계자가 의도한 디자인 패턴이 무엇인지를 전달할 필요가 있다. 그렇지 않으면 설계자의 처음 의도와는 다동떨어진 수정이 가해질 가능성이 있기 때문이다.</p>
<p>프로그램의 주석이나 개발 문서 안에 실제로 사용되고 있는 <code>디자인 패턴의 명칭과 의도를 기술</code>해 놓는 것도 좋은 방법이다.</p>
</li>
<li>
<p>관련 패턴</p>
<p><code>Template Method</code>, <code>Singleton</code>, <code>Composite</code>, <code>Iterator</code></p>
</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[React Typescript, Cannot find name MediaRecorder]]></title>
    <link>https://www.hyesungoh.xyz/cannotFindNameMediaRecorder</link>
    <pubDate>2021-08-01</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/cannotFindNameMediaRecorder</guid>
    <description>
    <![CDATA[cannotFindNameMediaRecorder]]>
    </description>
    <content:encoded>
      <![CDATA[<p><img src="https://user-images.githubusercontent.com/25426534/67540808-660ecd80-f719-11e9-9602-075dea090e58.png" alt="errorImg"></p>
<blockquote>
<p>Cannot find name 'MediaRecorder'.</p>
</blockquote>
<p>React, TypeScript 환경에서 녹화를 위해 <code>MediaRecorder</code> api를 사용하려 했으나 위 오류에 봉착</p>
<h2 id="문제" class="heading">문제</h2>
<p>사용중인 컴파일러가 <code>MediaRecorder</code> 오브젝트를 알지 못해서 생긴 오류라고 한다.</p>
<h2 id="해결-방법" class="heading">해결 방법</h2>
<pre class="language-bash"><code class="language-bash code-highlight"><span class="code-line"><span class="token function">npm</span> i @types/dom-mediacapture-record
</span><span class="code-line"><span class="token comment"># or yarn add</span>
</span></code></pre>
<p>이 외에 tsconfig에서 해결하는 방법, declare하는 방법이 있다고 한다.</p>
<h2 id="참고" class="heading">참고</h2>
<p><a href="https://stackoverflow.com/questions/40051818/how-can-i-use-a-mediarecorder-object-in-an-angular2-application" target="_blank" rel="noopener noreferer">https://stackoverflow.com/questions/40051818/how-can-i-use-a-mediarecorder-object-in-an-angular2-application</a></p>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[Iterator pattern with TypeScript]]></title>
    <link>https://www.hyesungoh.xyz/iterator</link>
    <pubDate>2021-07-19</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/iterator</guid>
    <description>
    <![CDATA[iterator]]>
    </description>
    <content:encoded>
      <![CDATA[<p>본 게시물은 <code>Java 언어로 배우는 디자인 패턴 입문 - Yuki Hiroshi 저</code>를 기반으로 공부한 것을 정리하며 Typescript로 재작성해본 내용입니다.</p>
<h2 id="iterator-패턴이란-" class="heading">Iterator 패턴이란 ?</h2>
<pre class="language-java"><code class="language-java code-highlight"><span class="code-line"><span class="token comment">// Java</span>
</span><span class="code-line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token comment">// Typescript</span>
</span><span class="code-line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>위 코드는 <code>i</code>를 하나씩 증가시키며 배열 <code>arr</code>의 요소 전체를 처음부터 차례대로 검색하게 된다. 여기에서 사용되고 있는 변수 <code>i</code>의 기능을 <strong>추상화</strong>해서 <strong>일반화</strong>한 것을 디자인 패턴에서는 <code>Iterator</code> 패턴이라고 한다.</p>
<blockquote>
<p>쉽게 말해 무엇인가 많이 모여있는 것들을 순서대로 지정하면서 전체를 검색하는 처리를 실행하기 위한 것이다.</p>
</blockquote>
<h2 id="예제-프로그램" class="heading">예제 프로그램</h2>
<p>작성할 예제 프로그램은 <code>BookShelf</code> 안에 <code>Book</code>을 넣고, 그 책의 이름을 차례대로 표시하는 프로그램이다.</p>
<h3 id="aggregate-인터페이스">Aggregate 인터페이스</h3>
<pre class="language-java"><code class="language-java code-highlight"><span class="code-line"><span class="token comment">// Java</span>
</span><span class="code-line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Aggregate</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">Iterator</span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token comment">// Typescript</span>
</span><span class="code-line"><span class="token keyword">interface</span> <span class="token class-name">Aggerate</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token function-variable function">iterator</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> myIterator<span class="token punctuation">;</span> <span class="token comment">// myIterator는 후술</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<blockquote>
<p>Aggregate는 '모으다', '모이다', '집합'의 의미로 <code>집합체</code>를 나타낸다.</p>
</blockquote>
<p>해당 인터페이스를 구현하고 있는 클래스는 배열과 같이 무엇인가가 많이 모여있으며,</p>
<p>집합체를 하나씩 나열, 검색, 조사하고 싶을 때 <code>iterator</code> 메소드를 사용한다.</p>
<h3 id="iterator-인터페이스">Iterator 인터페이스</h3>
<pre class="language-java"><code class="language-java code-highlight"><span class="code-line"><span class="token comment">// Java</span>
</span><span class="code-line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Iterator</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">Object</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token comment">// Typescript</span>
</span><span class="code-line"><span class="token keyword">interface</span> <span class="token class-name">myIterator</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token function-variable function">hasNext</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> object<span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>다음 값이 존재하는지를 조사하기 위한 <code>hasNext</code>, 다음 요소를 얻으며 내부 상태를 다음으로 진행시켜 두는 <code>next</code> 메소드로 이루어져 있다.</p>
<h3 id="book-클래스">Book 클래스</h3>
<pre class="language-java"><code class="language-java code-highlight"><span class="code-line"><span class="token comment">// Java</span>
</span><span class="code-line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">public</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token comment">// Typescript</span>
</span><span class="code-line"><span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">private</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  getName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<h3 id="bookshelf-클래스">BookShelf 클래스</h3>
<pre class="language-java"><code class="language-java code-highlight"><span class="code-line"><span class="token comment">// Java</span>
</span><span class="code-line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookShelf</span> <span class="token keyword">implements</span> <span class="token class-name">Aggregate</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">private</span> <span class="token class-name">Book</span><span class="token punctuation">[</span><span class="token punctuation">]</span> books<span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">private</span> <span class="token keyword">int</span>  last <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">public</span> <span class="token class-name">BookShelf</span> <span class="token punctuation">(</span><span class="token keyword">int</span> maxsize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token keyword">this</span><span class="token punctuation">.</span>books <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">[</span>maxsize<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token keyword">public</span> <span class="token class-name">Book</span> getBookAt <span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token keyword">return</span> books<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token keyword">public</span> <span class="token keyword">void</span> appendBook <span class="token punctuation">(</span><span class="token class-name">Book</span> book<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">[</span>last<span class="token punctuation">]</span> <span class="token operator">=</span> book<span class="token punctuation">;</span>
</span><span class="code-line">        last<span class="token operator">++</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token keyword">return</span> last<span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token keyword">public</span> <span class="token class-name">Iterator</span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BookShelfIterator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token comment">// Typescript</span>
</span><span class="code-line"><span class="token keyword">class</span> <span class="token class-name">BookShelf</span> <span class="token keyword">implements</span> <span class="token class-name">Aggerate</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">private</span> books<span class="token operator">:</span> Book<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">private</span> last<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function">constructor</span><span class="token punctuation">(</span>maxsize<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>books <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>last <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  getBookAt <span class="token operator">=</span> <span class="token punctuation">(</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> Book <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function-variable function">appendBook</span> <span class="token operator">=</span> <span class="token punctuation">(</span>book<span class="token operator">:</span> Book<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>last<span class="token punctuation">]</span> <span class="token operator">=</span> book<span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>last<span class="token operator">++</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function-variable function">getLength</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>last<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function-variable function">iterator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BookShelfIterator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p><code>Aggregate</code> 구현하고 있는 <code>BookShelf</code> 클래스이다.</p>
<p><code>iterator</code> 메소드는 <code>BookShelf</code> 클래스에 대응하는 <code>Iterator</code>로서, <code>BookShelfIterator</code>라는 클래스의 인스턴스를 생성하고 그것을 반환한다. 이 서가의 책을 하나씩 나열하고 싶을 때는 <code>iterator</code> 메소드를 호출한다.</p>
<h3 id="bookshelfiterator-클래스">BookShelfIterator 클래스</h3>
<pre class="language-java"><code class="language-java code-highlight"><span class="code-line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookShelfIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">private</span> <span class="token class-name">BookShelf</span> bookShelf<span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">private</span> <span class="token keyword">int</span> index<span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">public</span> <span class="token class-name">BookShelfIterator</span><span class="token punctuation">(</span><span class="token class-name">BookShelf</span> bookShelf<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token keyword">this</span><span class="token punctuation">.</span>bookShelf <span class="token operator">=</span> bookShelf<span class="token punctuation">;</span>
</span><span class="code-line">        <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&#x3C;</span> bookShelf<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</span><span class="code-line">        <span class="token punctuation">}</span>
</span><span class="code-line">        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token class-name">Book</span> book <span class="token operator">=</span> bookShelf<span class="token punctuation">.</span><span class="token function">getBookAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">        index<span class="token operator">++</span><span class="token punctuation">;</span>
</span><span class="code-line">        <span class="token keyword">return</span> book<span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token comment">// Typescript</span>
</span><span class="code-line"><span class="token keyword">class</span> <span class="token class-name">BookShelfIterator</span> <span class="token keyword">implements</span> <span class="token class-name">myIterator</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">private</span> bookShelf<span class="token operator">:</span> BookShelf<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">private</span> index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function">constructor</span><span class="token punctuation">(</span>bookShelf<span class="token operator">:</span> BookShelf<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>bookShelf <span class="token operator">=</span> bookShelf<span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function-variable function">hasNext</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">&#x3C;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bookShelf<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token function-variable function">next</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">const</span> book<span class="token operator">:</span> Book <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bookShelf<span class="token punctuation">.</span><span class="token function">getBookAt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token operator">++</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">return</span> book<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p><code>BookShelfIterator</code>를 <code>Iterator</code>로서 다루기 위해 Iterator 인터페이스를 구현하고 있으며, <code>BookShelf</code> 필드는 검색할 서가, <code>index</code> 필드는 현재 주목하고 있는 책을 가리키는 첨자이다.</p>
<p><code>hasNext</code> 메소드는 Iterator 인터페이스에서 선언되어 있는 메소드를 구현한 것으로, <code>다음 책</code>이 있는지를 조사해서 있으면 <code>true</code>, 없으면 <code>false</code>를 반환합니다.</p>
<p><code>next</code> 메소드는 현재 처리하고 있는 Book을 반환하고, 다시 다음으로 진행시키는 메소드이다.</p>
<h3 id="main-클래스">Main 클래스</h3>
<pre class="language-java"><code class="language-java code-highlight"><span class="code-line"><span class="token comment">// java</span>
</span><span class="code-line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token class-name">BookShelf</span> bookShelf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BookShelf</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">        bookShelf<span class="token punctuation">.</span><span class="token function">appendBook</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">"Apple"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">        bookShelf<span class="token punctuation">.</span><span class="token function">appendBook</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">"Banana"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">        bookShelf<span class="token punctuation">.</span><span class="token function">appendBook</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">"Chicken"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">        bookShelf<span class="token punctuation">.</span><span class="token function">appendBook</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">"Diamond"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token class-name">Iterator</span> it <span class="token operator">=</span> bookShelf<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">        <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">            <span class="token class-name">Book</span> book <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Book</span><span class="token punctuation">)</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">        <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<pre class="language-typescript"><code class="language-typescript code-highlight"><span class="code-line"><span class="token comment">// Typescript</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token function-variable function">main</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">const</span> bookShelf<span class="token operator">:</span> BookShelf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BookShelf</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    bookShelf<span class="token punctuation">.</span><span class="token function">appendBook</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">'Apple'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    bookShelf<span class="token punctuation">.</span><span class="token function">appendBook</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">'Banana'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    bookShelf<span class="token punctuation">.</span><span class="token function">appendBook</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">'Chicken'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    bookShelf<span class="token punctuation">.</span><span class="token function">appendBook</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">'Diamond'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">const</span> it<span class="token operator">:</span> myIterator <span class="token operator">=</span> bookShelf<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token keyword">const</span> book<span class="token operator">:</span> Book <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Book<span class="token punctuation">;</span>
</span><span class="code-line">      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>4권의 책을 만들어 넣은 후, 책이 있는 한 while 루프가 돌아가고, 루프 내에서 next에 의해 책을 한 권씩 조사하게 되며 결과는 다음과 같다.</p>
<pre><code class="language-console code-highlight"><span class="code-line">Apple
</span><span class="code-line">Banana
</span><span class="code-line">Chicken
</span><span class="code-line">Diamond
</span></code></pre>
<h2 id="iterator의-구성요소" class="heading">Iterator의 구성요소</h2>
<ul>
<li><strong>Iterator</strong></li>
</ul>
<p>요소를 순서대로 검색해가는 인터페이스를 결정하며, 예제 프로그램에서는 <code>Iterator (myIterator)</code> 인터페이스가 그 역할을 한다.</p>
<ul>
<li><strong>ConcreteIterator</strong></li>
</ul>
<p><code>Iterator</code>가 결정한 인터페이스를 실제로 구현한 것이며, 예제 프로그램에서는 <code>BookShelfIterator</code> 클래스가 담당하였다.</p>
<p>이 역할은 <strong>검색하기 위해 필요한 정보</strong>를 가지고 있어야 하며, 예제 프로그램에서는 bookShelf, index 필드를 가지고 있었다.</p>
<ul>
<li><strong>Aggregate</strong></li>
</ul>
<p><code>Iterator</code> 역할을 만들어내는 인터페이스를 결정한다. 이는 <strong>내가 가지고 있는 요소를 순서대로 검색해 주는 것</strong>을 만들어내는 메소드이다.</p>
<p>예제 프로그램에서는 <code>Aggregate</code> 인터페이스가 이 역할을 담당하며 iterator 메소드를 경정하였다.</p>
<ul>
<li><strong>ConcreteAggregate</strong></li>
</ul>
<p><code>Aggregate</code> 역할이 결정한 인터페이스를 실제로 구현하는 일을 하며, <code>ConcreteIterator</code> 역할의 인스턴스를 만들어낸다.</p>
<p>예제 프로그램에서는 <code>BookShelf</code> 클래스가 이 역할을 담당하였다.</p>
<h2 id="사용-이유" class="heading">사용 이유</h2>
<p>배열을 이용해 반복할 수 있는데, 조금 번거로울 수 있는 <code>Iterator</code> 패턴을 왜 사용하는 것일까 ?</p>
<p>가장 큰 이유는 <strong>구현과 분리</strong>해서 하나씩 셀 수 있기 때문이다.</p>
<pre class="language-typescript"><code class="language-typescript code-highlight"><span class="code-line"><span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">const</span> book<span class="token operator">:</span> Book <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Book<span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<p>위 코드에서 사용되고 있는 <code>hasNext</code>와 <code>next</code>는 <code>Iterator</code>의 메소드뿐이며, <code>BookShelf</code> 구현에서 사용되고 있는 메소드는 호출되고 있지 않다. 즉, 위 while 루프는 <strong>BookShelf의 구현에 의존하지 않는 것</strong>이다.</p>
<p>만약 다른 사람이 <code>BookShelf</code>를 수정하였다 하더라도, <code>iterator</code> 메소드를 가지고 있으며 올바른 <code>Iterator</code>를 반환해 준다면 위 코드는 <strong>변경하지 않아도 동작</strong>한다.</p>
<p>디자인 패턴은 클래스의 <code>재이용화</code>를 촉진하는데, 재이용화를 촉진한다는 것은 클래스를 부품처럼 사용할 수 있게 하고, 하나의 부품을 수정해도 다른 부품에 큰 영향 없이 적은 수정만으로 끝낼 수 있다는 것을 의미한다.</p>
<blockquote>
<p>즉 SideEffect를 최소화 한다.</p>
</blockquote>
<p>따라서 예제 프로그램에서 <code>iterator</code>의 반환값을 <code>BookShelfIterator</code> 형이 아닌, <code>Iterator</code>형의 변수로 대입하는 것이며 이는 어디까지나 <code>Iterator</code>의 메소드를 사용해서 프로그래밍을 하는 방법을 나타내고 있다.</p>
<h2 id="추상-클래스나-인터페이스" class="heading">추상 클래스나 인터페이스</h2>
<p>추상 클래스나 인터페이스의 사용법을 잘 모르는 사람은 Aggregate 인터페이스나 Iterater 인터페이스를 사용하지 않고 ConcreteAggregate, ConcreteIterater 역할을 사용해서 구현하기 쉽다.</p>
<blockquote>
<p>바로 나 ...</p>
</blockquote>
<p>하지만 <strong>구체적인 클래스만 사용하면 클래스 간의 결합이 강해져서, 부품으로 재이용하는 일이 어렵다.</strong> 결합을 약하게 해서 부품으로 재이용하기 쉽도록 하기 위해 추상 클래스나 인터페이스가 도입된다.</p>
<h2 id="aggregate와-iterator의-대응" class="heading">Aggregate와 Iterator의 대응</h2>
<p><code>BookShelfIterator</code>는 <code>BookShelf</code>가 어떻게 구현되고 있는지 알기 떄문에, 다음 책을 얻기 위해 <code>getBookAt</code> 메소드를 호출하였다.</p>
<p>이처럼 만약 BookShelf의 구현을 전부 변경하고, <strong>getBookAt 메소드라는 인터페이스도 변경</strong>했을 때에는 <strong>BookShelfIterator의 수정</strong>이 필요하게 된다.</p>
<p><code>Aggregate</code>와 <code>Iterator</code>라는 두 개의 인터페이스가 쌍을 이루듯이, <code>BookShelf</code>와 <code>BookShelfIterator</code>라는 두 개의 클래스도 쌍을 이루고 있다.</p>
<h2 id="틀리기-쉬운-next-hasnext" class="heading">틀리기 쉬운 next, hasNext</h2>
<p><code>next</code>와 <code>hasNext</code>는 다소 헷갈리기 쉬운 이름의 메소드이다.</p>
<p><code>next</code>는 현재 요소를 반환하면서, 다음 위치로 진행하는 의미이며 <code>hasNext</code>는 다음에 next 메소드를 불러도 괜찮은지를 조사하는 것이라고 기억을 해두면 좋을 것이다.</p>
<h2 id="그-외" class="heading">그 외</h2>
<ul>
<li>복수의 Iterator</li>
</ul>
<p><strong>하나씩 나열하는 구조가 Aggregate 역할의 외부에 놓여있는 것</strong>은 <code>Iterator 패턴의 특징</code> 중 하나인데, 이로 인해 <strong>하나</strong>의 <code>ConcreteAggregate</code> 역할에 대해서 <strong>복수</strong>의 <code>ConcreateIterator</code> 역할을 만들 수 있다.</p>
<ul>
<li>Iterator의 종류</li>
</ul>
<p>예제 프로그램은 정뱡향을 한 번만 검색하는 것이였지만, <em>뒤에서 시작하며 역방향으로, 정방향, 역방향으로도 진행, 번호를 지정하여 이동</em> 등 다양한 종류가 있다.</p>
<ul>
<li>관련 패턴</li>
</ul>
<p><code>Visitor</code>, <code>Composite</code>, <code>Factory Method</code></p>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[M1 Mac sharp 설치 오류]]></title>
    <link>https://www.hyesungoh.xyz/npmSharpInM1</link>
    <pubDate>2021-07-18</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/npmSharpInM1</guid>
    <description>
    <![CDATA[npmSharpInM1]]>
    </description>
    <content:encoded>
      <![CDATA[<blockquote>
<p>블로그 테마에서 <code>Sharp</code> 라이브러리가 설치되지 않는 오류에 봉착</p>
</blockquote>
<h2 id="문제" class="heading">문제</h2>
<p>arm64 아키텍처에서 <code>Sharp</code> 라이브러리가 컴파일되지 않는다고 합니다.</p>
<p><a href="https://github.com/lovell/sharp/issues/2460" target="_blank" rel="noopener noreferer">이슈</a></p>
<h2 id="해결-방법" class="heading">해결 방법</h2>
<pre class="language-bash"><code class="language-bash code-highlight"><span class="code-line">brew <span class="token function">install</span> vips <span class="token comment"># 시간이 꽤 걸립니다</span>
</span><span class="code-line"><span class="token function">npm</span> i --unsafe-perm
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[깃허브 잔디 1주년 회고]]></title>
    <link>https://www.hyesungoh.xyz/githubGrassFirstAnniversary</link>
    <pubDate>2021-07-10</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/githubGrassFirstAnniversary</guid>
    <description>
    <![CDATA[githubGrassFirstAnniversary]]>
    </description>
    <content:encoded>
      <![CDATA[<img width="947" alt="스크린샷 2021-07-10 오후 4 49 44" src="https://user-images.githubusercontent.com/26461307/125156273-99201b80-e19f-11eb-985d-0c26dd46e581.png">
<h3 id="서론">서론</h3>
<p>입대 전부터 갈망하고 있던 깃허브 1년 잔디를 <code>21년 7월 10일</code> 달성했다.</p>
<p>처음은 단순히 멋있어보여서 시작했으나, 시간이 갈 수록 오기로 하게 되었고 지금은 매일 키보드를 뚝딱이는 일이 습관이 되었다.</p>
<h3 id="알고리즘">알고리즘</h3>
<p>1일 1커밋을 계획했을 때는 단순히 코딩 테스트를 위해 매일 알고리즘 문제를 푸는 것을 목표로 하였다.</p>
<p>전역 후에는 입력을 받는 방법도 기억이 나지 않아 모든 것을 새롭게 배우며 풀어 나갔는데, 그래도 <a href="https://solved.ac/" target="_blank" rel="noopener noreferer">Solved</a>에서 클래스 별로 정복해나가며 푸니 입대 전의 나는 금방 따라잡을 수 있었다.</p>
<blockquote>
<p>Solved의 티어 시스템이 승부욕을 자극시켜 더 열심히 했지만</p>
</blockquote>
<p><code>소프트웨어 마에스트로</code> 과정을 준비하며 알고리즘 공부에 박차를 가했으며, 하루에 많게는 8 문제씩 매일 풀었던 것 같다.</p>
<p>그렇게 많은 유형에 익숙해지고 기본기를 잡을 수 있었던 것 같고, 운이 좋았는 지 <code>SCOF 2021</code>에서의 좋은 결과와 함께 <code>소프트웨어 마에스트로</code> 과정도 합격하게 되어 현재 연수중에 있다.</p>
<p>지금은 연수 과정에 시간을 많이 투자하고 있어 하루에 한 문제는 고사하고, 일주일에 한 문제 푸는 것도 힘들지만, 여러 기업 코딩테스트 문제를 풀어보며 감을 잃지 않으려고 노력하고 있다.</p>
<blockquote>
<p>백준, Solved 기준 플래티넘 달성 후 많이 해이해졌지만 ,,</p>
</blockquote>
<h3 id="프로젝트들">프로젝트들</h3>
<p>전역 후 백엔드로 참가한 <a href="https://github.com/hyesungoh/dino_history" target="_blank" rel="noopener noreferer">공아역</a>부터 첫 프론트엔드 개인 프로젝트 <a href="https://github.com/hyesungoh/MPMD" target="_blank" rel="noopener noreferer">MPMD</a>, 멋쟁이사자처럼 홍보를 위해 제작한 이벤트 웹 <a href="https://github.com/hyesungoh/Like_Amazing_Lion" target="_blank" rel="noopener noreferer">놀라운 사자처럼</a>, 성공회대학교 재학생-졸업생 커뮤니티 <a href="https://github.com/hyesungoh/skhuedIn" target="_blank" rel="noopener noreferer">SKHUED-IN</a>까지 많은 프로젝트들을 진행하였다.</p>
<p>프론트엔드를 공부하며 JS, React, SASS, TS, Styled-components, NextJs 등 새로운 것을 배울 때 마다 조그맣게라도 프로젝트를 진행해보며 배우느라, 다작을 하게 되고 이 때문에 리팩토링은 손도 못대고 있다 ,,,</p>
<p>그래도 간단한 서버부터, 클라이언트까지 개발한 프로젝트들을 통해 서버 개발자 분들에게 효과적으로 의사소통 하는 법을 배울 수 있었고</p>
<p>수 차례의 클라이언트 개발 프로젝트를 시작하며 구조에 대한 고민을 할 수 있게 되었다.</p>
<p>다양한 사람들과 의사소통하며 문서화가 중요하단 것, 같은 말이라도 다르게 이해될 수 있는 것을 배울 수 있었다.</p>
<h3 id="소프트웨어-마에스트로">소프트웨어 마에스트로</h3>
<p>소프트웨어 마에스트로 (이하 <code>소마</code>) 과정에 프론트엔드 개발을 메인 스택으로 지원하게 되었고 합격하게 되었다.</p>
<p>내가 소마에서 얻고 싶었던 것은 프론트엔드 개발의 심도있는 부분, 내가 하고 있는 'directory structure'에 대한 고민을 해소하기 위함 그리고 현업 수준의 개발 능력으로 끌어올리고 싶은 마음이 제일 컸다.</p>
<p>프론트엔드 관련 멘토링과 특강은 모두 참여하였고 이를 통해 새로운 곳에 발을 딛는 기분을 느낄 수 있었다.</p>
<p>웹 표준, 현업에서 사용중인 라이브러리, Custom hooks 사용법, NextJs 와 같이 프론트엔드 영역에 대한 것도 배울 수 있었고 OS단에서의 프로그램이 처리되는 과정, AWS 아키텍처 등 너무 배운 것이 많았고 앞으로 배울 것은 더 많다는 것을 알게 되었다.</p>
<p>배움과 동시에 <code>인공지능을 이용한 K-POP 댄스 코칭</code>이라는 주제로 프로젝트를 진행하고 있다.</p>
<p>이전에 인공지능을 예제만 따라해보는 수준으로 알고 있었고, <code>모두의 딥러닝</code>이라는 서적을 엘리스 플랫폼에 포팅하는 외주를 맡아서 한 경험이 있었는데, 이 경험이 소마 과정에서 도움이 될 줄은 상상도 못했다 ..</p>
<p>오늘을 기준으로 TensorflowJS, Posenet 모델, 웹캠을 이용해 프로토타입 개발을 하고 있는데 생각보다 순조롭게 되가는 것 같아 기분이 좋다.</p>
<p>앞으로 많은 고민과 마주하겠지만, 팀원들과 멘토님과 함께라면 같이 고민하며 현명하게 헤쳐나갈 수 있을 것 같다.</p>
<h3 id="마치며">마치며</h3>
<blockquote>
<p>처음으로 작성해보는 회고인데, 이렇게 작성하는게 맞나 싶다.</p>
</blockquote>
<p>지난 1년간 많은 문제들, 프로젝트들이 겪으며 내가 살아온 24년동안 제일 많은 것을 배운 1년이 아닌가 생각된다.</p>
<p>여러 인기 개발자분들을 팔로우하며 활동을 보곤하면 나보다 수만배는 잘하실텐데 매일 공부하고, 새로운 것에 도전하고 그걸 타인에게 공유하는 모습이 존경스럽고 상당한 자극이 된다.</p>
<p>나도 언젠가는 짱 쎈 짱 개발자가 되고 싶다.</p>
<p>앞으로의 1년은 더 많이 커밋하고, 오픈소스에 기여하는 한 해가 되도록 노력해 봐야겠다.</p>
<blockquote>
<p>현재 사용하고 있는 블로그 테마에 기여해보았는데 상당히 재밌었다.</p>
</blockquote>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-11444 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-11444-Python</link>
    <pubDate>2021-06-28</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-11444-Python</guid>
    <description>
    <![CDATA[BOJ-11444-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>최대 10경 번째 피보나치 수를 구하는 문제. 첫 번째 풀이는 두 개의 변수에 값을 할당하는 방식으로 풀었으나 당연하게도 시간초과 결과를 받게 되었다. 검색하여 알아본 결과 매우 매우 큰 수의 피보나치를 빠르게 구하는 방법은 <a href="https://ataraxiady.github.io/dev/2021/04/15/dev-boj-2_11444/" target="_blank" rel="noopener noreferer">행렬의 거듭제곱</a>을 사용한다고 한다. 위 링크의 게시물을 참고하여 풀었으나 아직 많이 부족하다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># n = int(input())</span>
</span><span class="code-line"><span class="token comment"># x, y = 0, 1</span>
</span><span class="code-line"><span class="token comment"># for _ in range(n):</span>
</span><span class="code-line"><span class="token comment">#     x, y = y, (x+y) % 1000000007</span>
</span><span class="code-line"><span class="token comment"># print(x)</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">power</span><span class="token punctuation">(</span>adj<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token keyword">return</span> adj
</span><span class="code-line">    <span class="token keyword">elif</span> n <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token keyword">return</span> multi<span class="token punctuation">(</span>power<span class="token punctuation">(</span>adj<span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> adj<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">return</span> power<span class="token punctuation">(</span>multi<span class="token punctuation">(</span>adj<span class="token punctuation">,</span> adj<span class="token punctuation">)</span><span class="token punctuation">,</span> n <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">multi</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            sum_n <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">            <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">                sum_n <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>
</span><span class="code-line">            temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> sum_n <span class="token operator">%</span> MOD
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> temp
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">MOD <span class="token operator">=</span> <span class="token number">1000000007</span>
</span><span class="code-line">adj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</span><span class="code-line">start <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</span><span class="code-line">N <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">if</span> N <span class="token operator">&#x3C;</span> <span class="token number">3</span> <span class="token keyword">else</span> multi<span class="token punctuation">(</span>power<span class="token punctuation">(</span>adj<span class="token punctuation">,</span> N<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[M1 Mac node-sass 오류]]></title>
    <link>https://www.hyesungoh.xyz/usingSassInM1</link>
    <pubDate>2021-06-22</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/usingSassInM1</guid>
    <description>
    <![CDATA[usingSassInM1]]>
    </description>
    <content:encoded>
      <![CDATA[<blockquote>
<p>TypeError: Node Sass does not yet support your current environment: OSX Unsupported architecture (arm64) with Unsupported runtime (93)</p>
</blockquote>
<h2 id="문제" class="heading">문제</h2>
<p>M1 Mac에서는 node-sass 보다 <code>Dart sass</code>를 사용하는 것을 권장한다고 합니다</p>
<h2 id="해결-방법" class="heading">해결 방법</h2>
<pre class="language-bash"><code class="language-bash code-highlight"><span class="code-line"><span class="token function">npm</span> i sass --save-dev
</span><span class="code-line"><span class="token comment"># or</span>
</span><span class="code-line"><span class="token function">yarn</span> <span class="token function">add</span> sass <span class="token parameter variable">-D</span>
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-4153 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-4153-Python</link>
    <pubDate>2021-06-17</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-4153-Python</guid>
    <description>
    <![CDATA[BOJ-4153-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>3가지 정수를 입력받은 후 해당 길이로 이루어진 삼각형일 때, 직각 삼각형인 지 출력하는 문제. 세 수를 제곱한 값과 비교하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
</span><span class="code-line">    x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> x <span class="token operator">==</span> y <span class="token operator">==</span> z <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">break</span>
</span><span class="code-line">    <span class="token keyword">if</span> x <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> y <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">==</span> z <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"right"</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"wrong"</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-4101 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-4101-Python</link>
    <pubDate>2021-05-07</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-4101-Python</guid>
    <description>
    <![CDATA[BOJ-4101-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>0 0이 입력될 때까지 두 수를 비교한 결과를 출력하는 문제, 카카오 인턴 코딩 테스트전에 간단히 풀어보았는데 약 이주동안 안풀었다고 어렵게 느껴진다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
</span><span class="code-line">    n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> m <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">break</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Yes"</span> <span class="token keyword">if</span> n <span class="token operator">></span> m <span class="token keyword">else</span> <span class="token string">"No"</span><span class="token punctuation">)</span>
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[Toss SLASH 21 - 프론트엔드 웹 서비스에서 우아하게 비동기 처리하기 정리]]></title>
    <link>https://www.hyesungoh.xyz/tossSlash21Async</link>
    <pubDate>2021-05-04</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/tossSlash21Async</guid>
    <description>
    <![CDATA[tossSlash21Async]]>
    </description>
    <content:encoded>
      <![CDATA[<p><img src="https://user-images.githubusercontent.com/26461307/116906670-878c3600-ac7b-11eb-8e5a-7779faf5b884.png" alt="toss slash 21"></p>
<p>토스 SLASH 21의 <code>프론트엔드 웹 서비스에서 우아하게 비동기 처리하기</code>라는 주제로 박서진님이 발표하신 내용을 정리한 내용입니다.</p>
<p><a href="https://toss.im/slash-21" target="_blank" rel="noopener noreferer">토스 SLASH 21 주소</a></p>
<h3 id="좋은-코드란-">좋은 코드란 ?</h3>
<pre class="language-js"><code class="language-js code-highlight"><span class="code-line"><span class="token comment">// 💩</span>
</span><span class="code-line"><span class="token keyword">function</span> <span class="token function">getBazFromX</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> <span class="token keyword nil">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword control-flow">return</span> <span class="token keyword nil">undefined</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token property-access">foo</span> <span class="token operator">===</span> <span class="token keyword nil">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword control-flow">return</span> <span class="token keyword nil">undefined</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token property-access">foo</span><span class="token punctuation">.</span><span class="token property-access">bar</span> <span class="token operator">===</span> <span class="token keyword nil">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword control-flow">return</span> <span class="token keyword nil">undefined</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword control-flow">return</span> x<span class="token punctuation">.</span><span class="token property-access">foo</span><span class="token punctuation">.</span><span class="token property-access">bar</span><span class="token punctuation">.</span><span class="token property-access">baz</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<ul>
<li>
<p>하는 일은 단순하지만 코드가 너무 복잡하다</p>
</li>
<li>
<p>각 프로퍼티에 접근하는 <code>핵심 기능이 코드로 잘 드러나지 않는다</code></p>
</li>
</ul>
<pre class="language-js"><code class="language-js code-highlight"><span class="code-line"><span class="token comment">// 👍</span>
</span><span class="code-line"><span class="token keyword">function</span> <span class="token function">getBazFromX</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword control-flow">return</span> x<span class="token operator">?.</span>foo<span class="token operator">?.</span>bar<span class="token operator">?.</span>baz<span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<ul>
<li>
<p><code>Optional Chaining</code> 문법을 활용한 동일한 함수</p>
</li>
<li>
<p>함수가 하는 일을 흐리게 만들던 if 문을 없애고, 성공 시의 모양과 큰 차이가 없다</p>
</li>
<li>
<p>같은 역할을 하는 식이 비슷하게 표현된다는 것은 코드에 있어서 좋은 징조</p>
</li>
</ul>
<h3 id="비동기-처리시에는-">비동기 처리시에는 ?</h3>
<pre class="language-js"><code class="language-js code-highlight"><span class="code-line"><span class="token comment">// 💩</span>
</span><span class="code-line"><span class="token keyword">function</span> <span class="token function">fetchAccounts</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token function">fetchUserEntity</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> user</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>err <span class="token operator">!=</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">      <span class="token keyword control-flow">return</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token function">fetchUserAccount</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token property-access">no</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> accounts</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>err <span class="token operator">!=</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">        <span class="token keyword control-flow">return</span><span class="token punctuation">;</span>
</span><span class="code-line">      <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword null nil">null</span><span class="token punctuation">,</span> accounts<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<ul>
<li>
<p><code>성공하는 경우</code>와 <code>실패하는 경우</code>가 섞여서 처리된다</p>
</li>
<li>
<p>코드를 작성하는 입장에서 매번 에러 유무를 확인해야 한다</p>
</li>
</ul>
<pre class="language-js"><code class="language-js code-highlight"><span class="code-line"><span class="token comment">// 👍</span>
</span><span class="code-line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchAccounts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword control-flow">await</span> <span class="token function">fetchUserEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">const</span> accounts <span class="token operator">=</span> <span class="token keyword control-flow">await</span> <span class="token function">fetchUserAccounts</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token property-access">no</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword control-flow">return</span> accounts<span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<ul>
<li>
<p>성공하는 경우만 다루고 실패하는 경우는 catch절에서 분리해 처리한다</p>
</li>
<li>
<p>실패하는 경우에 대한 처리를 외부에 위임할 수 있다.</p>
</li>
</ul>
<h3 id="좋은-코드의-특징">좋은 코드의 특징</h3>
<ul>
<li>
<p>성공, 실패의 경우를 <strong>분리</strong>해 처리할 수 있다</p>
</li>
<li>
<p>비즈니스 로직을 한눈에 파악할 수 있다</p>
</li>
</ul>
<h3 id="어려운-코드의-특징">어려운 코드의 특징</h3>
<ul>
<li>
<p>실패, 성공의 경우가 서로 섞여 처리된다</p>
</li>
<li>
<p>비즈니스 로직을 파악하기 어렵다</p>
</li>
</ul>
<h3 id="지금까지의-비동기처리">지금까지의 비동기처리</h3>
<p>보통 API 호출 시에, SWR, react-query와 같은 라이브러리 사용</p>
<p>Promise를 반환하는 함수를 React Hook의 인자로 넘기고, Promist 상태에 따라 Hook이 반환하는 data, error의 값을 적절히 작성</p>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Profile</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token function">useAsyncValue</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword control-flow">return</span> <span class="token function">fetchFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>foo<span class="token punctuation">.</span><span class="token property-access">error</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">로딩에 실패했습니다.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>foo<span class="token punctuation">.</span><span class="token property-access">data</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">로딩중입니다 ...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword control-flow">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>foo<span class="token punctuation">.</span><span class="token property-access">data</span><span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">}</span><span class="token plain-text">님 안녕하세요!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<ul>
<li>
<p>성공하는 경우, 실패하는 경우가 섞여서 처리된다</p>
</li>
<li>
<p>실패하는 경우에 대한 처리를 외부에 위임하기 어려워졌다</p>
</li>
</ul>
<h3 id="여러-개의-비동기-작업이-동시에-실행된다면-">여러 개의 비동기 작업이 동시에 실행된다면 ?</h3>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token comment">// 💩</span>
</span><span class="code-line"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Profile</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token function">useAsyncValue</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword control-flow">return</span> <span class="token function">fetchFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token function">useAsyncValue</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>foo<span class="token punctuation">.</span><span class="token property-access">error</span> <span class="token operator">||</span> <span class="token operator">!</span>foo<span class="token punctuation">.</span><span class="token property-access">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token keyword control-flow">return</span> <span class="token keyword nil">undefined</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword control-flow">return</span> <span class="token function">fetchBar</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span><span class="token property-access">data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>foo<span class="token punctuation">.</span><span class="token property-access">error</span> <span class="token operator">||</span> bar<span class="token punctuation">.</span><span class="token property-access">error</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">로딩에 실패했습니다.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>foo<span class="token punctuation">.</span><span class="token property-access">data</span> <span class="token operator">||</span> <span class="token operator">!</span>bar<span class="token punctuation">.</span><span class="token property-access">data</span><span class="token punctuation">)</span> <span class="token keyword control-flow">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">로딩중입니다 ...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>
</span><span class="code-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">      </span><span class="token punctuation">{</span>foo<span class="token punctuation">.</span><span class="token property-access">data</span><span class="token punctuation">}</span><span class="token plain-text">, </span><span class="token punctuation">{</span>bar<span class="token punctuation">.</span><span class="token property-access">data</span><span class="token punctuation">}</span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span>
</span><span class="code-line">  <span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<ul>
<li>복잡한 if문</li>
</ul>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchFooBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token keyword control-flow">await</span> <span class="token function">fetchFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token keyword control-flow">await</span> <span class="token function">fetchBar</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword control-flow">return</span> bar<span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<ul>
<li>
<p>성공하는 경우에만 집중해 복잡도를 낮춘다</p>
</li>
<li>
<p>일반적으로 작성하는 동기 로직과 큰 차이가 없다</p>
</li>
</ul>
<h3 id="react의-비동기-처리는-어렵다">React의 비동기 처리는 어렵다</h3>
<ul>
<li>
<p>성공하는 경우에만 집중해 컴포넌트를 구성하기 어렵다</p>
</li>
<li>
<p>2개 이상의 비동기 로직이 개입할 때, 비즈니스 로직을 파악하기 점점 어려워진다</p>
</li>
</ul>
<hr>
<h3 id="우아하게-해결하는-도구-react-suspense-for-data-fetching">우아하게 해결하는 도구, React Suspense for Data Fetching</h3>
<p>데이터를 가져오기 위한 Suspense</p>
<p>React의 실험 버전에서만 사용 가능</p>
<h3 id="목표로-하는-코드">목표로 하는 코드</h3>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">FooBar</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token function">useAsyncValue</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token function">fetchFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">  <span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token function">useAsyncValue</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token function">fetchBar</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>
</span><span class="code-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">      </span><span class="token punctuation">{</span>foo<span class="token punctuation">}</span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">      </span><span class="token punctuation">{</span>bar<span class="token punctuation">}</span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span>
</span><span class="code-line">  <span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<ul>
<li>
<p>성공한 경우에만 집중할 수 있다</p>
</li>
<li>
<p>동기와 거의 같게 사용할 수 있다</p>
</li>
<li>
<p>로딩, 에러 상태는 외부에 위임</p>
</li>
</ul>
<h3 id="에러-상태와-로딩-상태가-분리되는-방법">에러 상태와 로딩 상태가 분리되는 방법</h3>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">ErrorBoundary</span></span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">MyErrorPage</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Suspense</span></span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Loader</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">FooBar</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span><span class="token class-name">Suspense</span></span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span><span class="token class-name">ErrorBoundary</span></span><span class="token punctuation">></span></span>
</span></code></pre>
<ul>
<li>
<p>컴포넌트를 <code>쓰는 쪽</code>에서 로딩 처리와 에러 처리를 한다</p>
</li>
<li>
<p>로딩 상태는 가장 가까운 <code>Suspense</code>의 <code>Fallback</code>으로 그려진다</p>
</li>
<li>
<p>에러 상태는 가장 가까운 <code>ErrorBoundary</code>가 <code>componentDidCatch()</code>로 처리한다</p>
</li>
<li>
<p>Async Await의 Try - Catch문과 유사성</p>
</li>
</ul>
<h3 id="사용하는-방법">사용하는 방법</h3>
<blockquote>
<p>Recoil : Async Selector
SWR, React Query : {suspense: true}</p>
</blockquote>
<h3 id="어떻게-사용할-수-있는가-">어떻게 사용할 수 있는가 ?</h3>
<p><code>runPureTask</code>로 실행시키면, 비동기 함수도 동기적으로 작성할 수 있다</p>
<h3 id="대수적-효과-algebraic-effects-">대수적 효과 (Algebraic Effects) ?</h3>
<p>어떤 코드 조각을 감싸는 맥락으로 책임을 분리하는 방식을 대수적 효과(Algebraic Effects)라고 한다</p>
<p>객체지향의 의존성 주입(DI), 의존선 역전(IoC)과도 유사</p>
<h3 id="추가적으로-사용자-경험을-향상시킬-수-있는-키워드">추가적으로 사용자 경험을 향상시킬 수 있는 키워드</h3>
<p>컴포넌트의 렌더 트리를 부분적으로로 완성함으로써 사용자 경험을 향상시킬 수 있다</p>
<p><code>React Concurrent Mode</code>, <code>useTransition</code>, <code>useDeferredValue</code></p>
<h3 id="그래서-내가-부족한-것-">그래서 내가 부족한 것 ?</h3>
<blockquote>
<p>useMemo, useCallback
SWR? React-Query?</p>
</blockquote>
<h3 id="마치며">마치며</h3>
<p>이해하기 어려운 부분이 많았지만 많은 부분을 알고, 깨닫게 된 느낌을 받았다.</p>
<p>직군이 앓고 있는 문제를 제시하고 어려운 코드, 좋은 코드를 보여줌과 동시에 해결 방안을 제시하고 회사에서는 어떻게 사용하여 해결하였는 지를 설명해주는 기승전결이 너무 좋다고 느껴졌으며, 무료로 들을 수 있는 것에 감사하다고 생각된다.</p>
<p>개발하는 시간 외에 공부하는 시간을 만들어야겠다.</p>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[Wanted - 성장하는 프론트엔드 개발자 되기 후기]]></title>
    <link>https://www.hyesungoh.xyz/becomeGrowingFEDeveloper</link>
    <pubDate>2021-05-03</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/becomeGrowingFEDeveloper</guid>
    <description>
    <![CDATA[becomeGrowingFEDeveloper]]>
    </description>
    <content:encoded>
      <![CDATA[<p><img src="https://user-images.githubusercontent.com/26461307/116823808-a29a6f80-abc1-11eb-9048-92d66cc55c27.png" alt="스크린샷 2021-05-03 오전 3 42 21"></p>
<p>개인적으로 김민준(벨로퍼트)님을 좋아한다... 블로그 글을 보고 많이 배웠고 아직도 많이 배우는 중이다.</p>
<p>벨로퍼트님 외에 다른 개발자님들의 <code>성장하는 프론트엔드 개발자되기</code>라는 주제로 Live Talk를 진행하여 결제 후 듣고 배우고 느낀 점을 기록해 본다.</p>
<h4 id="내가-부족한-것-작성해보기">내가 부족한 것 작성해보기</h4>
<h4 id="이미-알고-있는-것-갈고-닦기">이미 알고 있는 것 갈고 닦기</h4>
<ul>
<li>옛날에 썼던 코드 리팩토링하기</li>
</ul>
<h4 id="사이드-프로젝트-진행시에-기술-or-프로덕트-선택">사이드 프로젝트 진행시에 기술 or 프로덕트 선택</h4>
<ul>
<li>프로덕트가 위주일 시 이미 알고 있는 기술로</li>
<li>기술이 위주일 시 평상시 시간이 없어 다루지 못했던 것을</li>
</ul>
<h4 id="라이브러리나-프레임워크의-내부-구조-공부">라이브러리나 프레임워크의 내부 구조 공부</h4>
<ul>
<li>리액트 버츄얼 돔 구현</li>
<li>리액트 훅의 구현</li>
</ul>
<h4 id="오픈소스-뜯어보기">오픈소스 뜯어보기</h4>
<ul>
<li>작은 것부터 남이 쓴 코드 보는 법 연습</li>
<li>추천) Strapi, Mattermost, Redux-thunk, Lodash</li>
</ul>
<h4 id="결국은-브라우저-위에서-동작">결국은 브라우저 위에서 동작</h4>
<ul>
<li>HTML, 브라우저 렌더링, 자바스크립트 엔진</li>
</ul>
<h4 id="프로젝트-진행-시에">프로젝트 진행 시에</h4>
<ul>
<li>왜 사용한 기술인 지, 고민한 점은 무엇인 지</li>
</ul>
<h4 id="그래서-내가-부족한-거-">그래서 내가 부족한 거 ?</h4>
<blockquote>
<p>유닛 테스트, E2E 테스트, SSR, 브라우저 렌더링, HTML, 자바스크립트 엔진, 디자인 시스템, 재사용성 높은 컴포넌트, A/B 테스트, 문서 작성, 라이브러리 제작, 애니메이션, 함수형 프로그래밍, 실시간 처리 등 거의 모든 것 ...</p>
</blockquote>
<p>잘하고 싶은 것을 생각해보자</p>
<h4 id="후기">후기</h4>
<p>앞으로 배울 것과 함께 현업 개발자의 시선, 고민을 간접적으로나마 느껴볼 수 있는 시간이였다. 그릇을 채울 수록 그릇이 커지는 기분이다...</p>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[소프트웨어 마에스트로 12기 코딩 테스트, 면접 후기]]></title>
    <link>https://www.hyesungoh.xyz/swmaestro12thReview</link>
    <pubDate>2021-05-02</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/swmaestro12thReview</guid>
    <description>
    <![CDATA[swmaestro12thReview]]>
    </description>
    <content:encoded>
      <![CDATA[<p><img src="https://user-images.githubusercontent.com/26461307/116822247-c3aa9280-abb8-11eb-91a5-c0936d3ee7ea.png" alt="dkFllDy"></p>
<p>원래 22년도에 소프트웨어 마에스트로 활동을 할 계획이였지만, 지인이 지원한다는 소식을 듣고 나도 한 번 연습삼아 해볼까? 하는 마음에 지원했다.</p>
<p>PS 공부를 전역하고 반년 가까이 했었는데, 해당 경험이 많이 도움이 되어 최종적으로 합격하게 되었다.</p>
<p>소프트웨어 마에스트로 코딩 테스트부터 면접까지 경험을 공유하고 앞으로 지원하실 분들에게 도움이 되었으면 한다.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/116822244-c1483880-abb8-11eb-8317-407dfbc6fd99.png" alt="스크린샷 2021-05-03 오전 2 37 53"></p>
<h3 id="1차-코딩-테스트">1차 코딩 테스트</h3>
<p>1차 코딩 테스트는 알고리즘 6개, SQL 1개, Web 1개, 총 8개의 문제가 출제 되었으며 시간은 두시간이 주어졌다.</p>
<p>알고리즘 난이도는 백준 기준 실버 5 ~ 실버 1 정도로 느껴졌으며, SQL은 프로그래머스 SQL 기출 문제를 풀면 충분한 정도, Web은 CSS에 이해가 있으면 풀 수 있는 문제였다.</p>
<p>필자는 웹, SQL을 먼저 풀고 알고리즘을 먼저 풀었으며 시간이 부족하여 한 문제를 못풀고 다른 문제는 모두 풀긴 했었다.</p>
<p><code>다익스트라</code>, <code>유니온 파인드</code>, <code>DP</code> 위주로 준비를 했었는데 출제는 대부분 <code>스택</code>, <code>해시</code>의 비중이 높았던 것으로 기억한다.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/116822245-c2796580-abb8-11eb-9e69-8e7871103b0b.png" alt="스크린샷 2021-05-03 오전 2 38 04"></p>
<h3 id="2차-코딩-테스트">2차 코딩 테스트</h3>
<p>2차 코딩 테스트는 1차와 다르게 알고리즘 3개, SQL 1개, Web 1개가 출제 되었으며 시간은 동일하였다.</p>
<p>알고리즘은 백준 기준 실버 2 ~ 골드 3 정도라 느껴졌으며, Web은 JS로 DOM을 조작하는 이해가 있으면 풀 수 있는 문제였다.</p>
<p>SQL 문제는 필자는 어떻게 써야할 지 모르겠어서 못풀었다 ...</p>
<p>대신 알고리즘 3 문제 모두를 풀긴 하였는데, 유형은 <code>백트래킹</code>, <code>그래프 탐색</code> 이였던 것으로 기억한다.</p>
<p>문제 수가 줄어들어 1차에 비해 시간적 여유가 있어서, 문제를 효율적으로 풀기 위해 고민하였다.</p>
<p>문제를 다 풀고 나서야 떠올랐지만....</p>
<p><img src="https://user-images.githubusercontent.com/26461307/116822246-c311fc00-abb8-11eb-8eba-ffc1712e5a8c.png" alt="스크린샷 2021-05-03 오전 2 38 21"></p>
<h3 id="심층-면접">심층 면접</h3>
<p>면접은 다대다로 진행되었다.</p>
<p>다른 면접자분들에겐 인성 면의 비율이 조금 더 높았다면, 필자는 대부분이 기술 면접 질문이였다.</p>
<p>기억에 남는 질문은 <code>FOUC란? 해결한 방법은?</code>과 <code>React의 CBC, FBC의 차이</code> 이다.</p>
<p>FOUC의 뜻은 솔직히 모른다고 답변드렸고, FOUC를 해결하기 위해서 React-Transition-Group을 사용하였다고 답변드렸다. 지금까지도 정확한 정답인 지는 모르겠지만, 필자의 경우 route 이동 간 자연스러움을 위해 해당 패키지를 사용한 기억이 떠올라 답변했었다.</p>
<p>CBC와 FBC는 현재 트렌드가 FBC이며, 이점은 간결해지는 코드라고 답변드림과 동시에 <code>Presenter-Container</code> 패턴을 사용하여 컨테이너는 CBC로, 프레젠터는 FBC로 작성한다고 말씀드렸다.</p>
<p>대부분의 질문은 자소서에 있는 내용을 기반으로 출제되었다. 면접을 잘보고 싶으신 분들은 <strong>솔직하게 자소서를 작성하고, 자소서를 읽고 궁금할만한 점을 생각</strong>해보면 매우 좋을 것 같다.</p>
<p>프로젝트는 최소 한, 두 개만 진행한 경험이 있으면 충분할 것 같다. 자소서에 적을 내용은 물론, 해당 프로젝트에서 무엇을 배웠는 지 면접에서까지 어필 할 수 있기 때문이다.</p>
<h3 id="마치며">마치며</h3>
<p>소프트웨어 마에스트로 활동은 IT 기기 지원비, 멘토링, 매달 입금되는 지원비, 다양한 협업의 기회 등 이력외에도 다양한 장점이 있기 때문에 대학생, 빠르면 고등학생까지 개발자를 희망한다면 한 번쯤은 지원하고 연수하면 좋을 과정이라고 생각한다.</p>
<h3 id="정리">정리</h3>
<ul>
<li>자소서는 솔직하게</li>
<li>알고리즘은 기본기를 튼튼하게</li>
<li>웹은 기본적인 난이도</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[React에서 Netlify Environment Variables (환경 변수) 사용하는 방법]]></title>
    <link>https://www.hyesungoh.xyz/usingEnvValueAtNetlify</link>
    <pubDate>2021-04-28</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/usingEnvValueAtNetlify</guid>
    <description>
    <![CDATA[usingEnvValueAtNetlify]]>
    </description>
    <content:encoded>
      <![CDATA[<p>Firebase를 이용한 CRA 앱을 Netlify를 통해 배포했으나,
배포 환경에서 dotenv와 gitignore를 사용한 config 파일을 이용한 환경변수가 undefined로
작성되어 Firebase instance 생성이 안되는 오류에 봉착하였습니다.</p>
<p>해당 오류를 고치며 배운 Netlify의 환경 변수를 사용하는 법을 공유해봅니다.</p>
<h2 id="1-netlify-환경변수-생성" class="heading">1. Netlify 환경변수 생성</h2>
<p><img src="https://user-images.githubusercontent.com/26461307/116404569-bbc1ba00-a869-11eb-90c7-47e44cde5798.png" alt="스크린샷 2021-04-28 오후 9 33 58"></p>
<p>Netlify Site settings > Build &#x26; deploy > Environment의 <strong>Environment variables</strong>를 생성해줍니다.</p>
<h2 id="2-scriptscreate-envjs-생성" class="heading">2. scripts/create-env.js 생성</h2>
<p>Root 디렉토리에 scripts 폴더, create-env.js 파일을 생성합니다.</p>
<pre class="language-js"><code class="language-js code-highlight"><span class="code-line"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">const</span> dotenv <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'dotenv'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">dotenv<span class="token punctuation">.</span><span class="token method function property-access">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">fs<span class="token punctuation">.</span><span class="token method function property-access">writeFileSync</span><span class="token punctuation">(</span>
</span><span class="code-line">  <span class="token string">'./.env'</span><span class="token punctuation">,</span>
</span><span class="code-line">  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">REACT_APP_APIKEY=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>process<span class="token punctuation">.</span><span class="token property-access">env</span><span class="token punctuation">.</span><span class="token constant">REACT_APP_APIKEY</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
</span></span></span><span class="code-line"><span class="token template-string"><span class="token string">REACT_APP_SOMETHINGYOUWANT=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>process<span class="token punctuation">.</span><span class="token property-access">env</span><span class="token punctuation">.</span><span class="token constant">REACT_APP_SOMETHINGYOUWANT</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
</span></span></span><span class="code-line"><span class="token template-string"><span class="token string">SOMETHING_YOU_WANT=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>process<span class="token punctuation">.</span><span class="token property-access">env</span><span class="token punctuation">.</span><span class="token constant">SOMETHING_YOU_WANT</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
</span></span></span><span class="code-line"><span class="token template-string"><span class="token string">...</span><span class="token template-punctuation string">`</span></span>
</span><span class="code-line"><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<p>그 후 해당 파일을 위와 같이 작성합니다.</p>
<p>Netlify에서 생성한 환경 변수와 이름이 동일해야 합니다.</p>
<h2 id="3-build-command-추가" class="heading">3. build command 추가</h2>
<p>Netlify에서 build 시에 위에서 작성한 스크립트를 먼저 실행하여야 합니다.</p>
<p>이는 여러가지 방법으로 접근할 수 있습니다.</p>
<ol>
<li>Netlify build command 설정</li>
</ol>
<pre><code class="language-terminal code-highlight"><span class="code-line">node ./scripts/create-env.js &#x26;&#x26; npm run build
</span></code></pre>
<ol start="2">
<li>Root 디렉토리에 netlify.toml 파일 배치</li>
</ol>
<pre class="language-toml"><code class="language-toml code-highlight"><span class="code-line"><span class="token punctuation">[</span><span class="token table class-name">build</span><span class="token punctuation">]</span>
</span><span class="code-line">  <span class="token key property">command</span> <span class="token punctuation">=</span> <span class="token string">"node ./scripts/create-env.js &#x26;&#x26; npm run build"</span>
</span><span class="code-line">  <span class="token key property">publish</span> <span class="token punctuation">=</span> <span class="token string">"build"</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token punctuation">[</span><span class="token table class-name">context.production.environment</span><span class="token punctuation">]</span>
</span><span class="code-line">  <span class="token key property">TOML_ENV_VAR</span> <span class="token punctuation">=</span> <span class="token string">"From netlify.toml"</span>
</span><span class="code-line">  <span class="token key property">REACT_APP_TOML_ENV_VAR</span> <span class="token punctuation">=</span> <span class="token string">"From netlify.toml (REACT_APP_)"</span>
</span></code></pre>
<ol start="3">
<li>package.json의 prebuild 작성</li>
</ol>
<pre class="language-json"><code class="language-json code-highlight"><span class="code-line">...
</span><span class="code-line"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"react-scripts start"</span><span class="token punctuation">,</span>
</span><span class="code-line">        <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"react-scripts build"</span><span class="token punctuation">,</span>
</span><span class="code-line">        <span class="token property">"prebuild"</span><span class="token operator">:</span> <span class="token string">"node ./scripts/create-env.js"</span><span class="token punctuation">,</span>
</span><span class="code-line">        <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"react-scripts test"</span><span class="token punctuation">,</span>
</span><span class="code-line">        <span class="token property">"eject"</span><span class="token operator">:</span> <span class="token string">"react-scripts eject"</span>
</span><span class="code-line">    <span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line">...
</span></code></pre>
<h2 id="4-react에서-사용" class="heading">4. React에서 사용</h2>
<p>dotenv와 같은 방법으로 사용하면 됩니다.</p>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line">process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">REACT_APP_APIKEY</span>
</span><span class="code-line">process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">SOMETHING_YOU_WANT</span>
</span></code></pre>
<p>빌드 시에 netlify에 작성된 환경 변수를 사용하여 .env 파일이 작성되고, 해당 파일에 작성된 내용을 사용하는 것이기 때문에 로컬에서의 사용은 아래와 같은 방법으로 하였습니다.</p>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token comment">// for local</span>
</span><span class="code-line"><span class="token keyword">import</span> <span class="token punctuation">{</span> firebaseConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'config/config'</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// for deploy</span>
</span><span class="code-line"><span class="token comment">// const firebaseConfig = {</span>
</span><span class="code-line"><span class="token comment">//   apiKey: process.env.REACT_APP_APIKEY,</span>
</span><span class="code-line"><span class="token comment">//   authDomain: process.env.REACT_APP_AUTHDOMAIN,</span>
</span><span class="code-line"><span class="token comment">//   projectId: process.env.REACT_APP_PROJECTID,</span>
</span><span class="code-line"><span class="token comment">//   storageBucket: process.env.REACT_APP_STORAGEBUCKET,</span>
</span><span class="code-line"><span class="token comment">//   messagingSenderId: process.env.REACT_APP_MESSAGINGSENDERID,</span>
</span><span class="code-line"><span class="token comment">//   appId: process.env.REACT_APP_APPID,</span>
</span><span class="code-line"><span class="token comment">// }</span>
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-11375 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-11375-Python</link>
    <pubDate>2021-04-21</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-11375-Python</guid>
    <description>
    <![CDATA[BOJ-11375-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>N명의 있고 M개의 해야할 일이 있으며 직원은 1번부터 N번까지, 일은 1번부터 M번까지 번호가 매겨 있다. 각 직원은 한 개의 일만 할 수 있고, 각각의 일을 담당하는 사람은 1명이어야 한다. 각각의 직원이 할 수 있는 일의 목록이 주어졌을 때, M개의 일 중에서 최대 몇 개를 할 수 있는 지 구하는 문제. 이분매칭 문제이다. 해당 <a href="https://blog.naver.com/kks227/220807541506" target="_blank" rel="noopener noreferer">게시물</a>을 통해 공부했으며, 작성 난이도는 어렵지 않았지만 깊은 이해까지는 시간이 걸릴 것 같다. 언제나 처럼 반복숙달 해야겠다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> visit<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>
</span><span class="code-line">    visit<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> S<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> E<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">or</span> dfs<span class="token punctuation">(</span>E<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            E<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> start
</span><span class="code-line">            <span class="token keyword">return</span> <span class="token number">1</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line">N<span class="token punctuation">,</span> M <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">S <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">E <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>M<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    t <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>extend<span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    visit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">if</span> dfs<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span> ans <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2188 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2188-Python</link>
    <pubDate>2021-04-21</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2188-Python</guid>
    <description>
    <![CDATA[BOJ-2188-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>N마리의 소, M개의 축사가 있는 이분매칭 문제, 11375번 문제와 동일한 구성이여서 반복숙달겸 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> visit<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line">    visit<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> S<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> E<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">or</span> dfs<span class="token punctuation">(</span>E<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            E<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> start
</span><span class="code-line">            <span class="token keyword">return</span> <span class="token number">1</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line">N<span class="token punctuation">,</span> M <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">S <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">E <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>M<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    temp <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>extend<span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    visit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">if</span> dfs<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span> ans <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-14284 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-14284-Python</link>
    <pubDate>2021-04-16</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-14284-Python</guid>
    <description>
    <![CDATA[BOJ-14284-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>정점 N개, 두 노드, 가중치를 갖는 무방향 간선 M개가 있을 때, S부터 E까지 도달하는 최소 가중치를 출력하는 전형적인 다익스트라 문제. heap을 사용한 다익스트라를 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token keyword">import</span> heapq
</span><span class="code-line">INF <span class="token operator">=</span> sys<span class="token punctuation">.</span>maxsize
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    dist <span class="token operator">=</span> <span class="token punctuation">[</span>INF <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    dist<span class="token punctuation">[</span>S<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line">    q <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">    heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> S<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">        w<span class="token punctuation">,</span> n <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>q<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">if</span> dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">&#x3C;</span> w<span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">continue</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">for</span> nn<span class="token punctuation">,</span> nw <span class="token keyword">in</span> graph<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            tnw <span class="token operator">=</span> nw <span class="token operator">+</span> w
</span><span class="code-line">            <span class="token keyword">if</span> dist<span class="token punctuation">[</span>nn<span class="token punctuation">]</span> <span class="token operator">></span> tnw<span class="token punctuation">:</span>
</span><span class="code-line">                dist<span class="token punctuation">[</span>nn<span class="token punctuation">]</span> <span class="token operator">=</span> tnw
</span><span class="code-line">                heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token punctuation">[</span>tnw<span class="token punctuation">,</span> nn<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> dist
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">N<span class="token punctuation">,</span> M <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">{</span>i<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    s<span class="token punctuation">,</span> e<span class="token punctuation">,</span> w <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    graph<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>e<span class="token punctuation">,</span> w<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    graph<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>s<span class="token punctuation">,</span> w<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">S<span class="token punctuation">,</span> E <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">dist <span class="token operator">=</span> dijkstra<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>E<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1806 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1806-Python</link>
    <pubDate>2021-04-16</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1806-Python</guid>
    <description>
    <![CDATA[BOJ-1806-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>길이가 N인 수열이 주어진다. 수열에서 연속된 부분합 중 그 합이 S 이상이 되는 것 중, 가장 짧은 길이를 출력하는 문제. 최대 길이를 INF로 저장한 후, 왼쪽과 오른쪽 인덱스 값을 이용하여 부분합을 계산, 비교하여 인덱스 값을 조정하는 두 포인터 방법을 이용하였다. 최소 길이가 반복문이 종료 시에도 INF일 시, 모두 더하여도 S 이상이 되지 않은 것이여서 0을 출력, 아닐 시 해당 값을 출력하여 풀었다. 자세한 풀이는 주석 참조</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">
</span><span class="code-line">INF <span class="token operator">=</span> <span class="token number">100001</span>
</span><span class="code-line">N<span class="token punctuation">,</span> S <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">L <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> tsum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
</span><span class="code-line">min_length <span class="token operator">=</span> INF
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> tsum <span class="token operator">>=</span> S<span class="token punctuation">:</span> <span class="token comment"># 합이 구하고자하는 값보다 같거나 클 때</span>
</span><span class="code-line">        min_length <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>min_length<span class="token punctuation">,</span> right<span class="token operator">-</span>left<span class="token punctuation">)</span> <span class="token comment"># 최소 길이를 갱신</span>
</span><span class="code-line">        tsum <span class="token operator">-=</span> L<span class="token punctuation">[</span>left<span class="token punctuation">]</span>
</span><span class="code-line">        left <span class="token operator">+=</span> <span class="token number">1</span> <span class="token comment"># 왼쪽 값을 제외하고 탐색</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">elif</span> right <span class="token operator">==</span> N<span class="token punctuation">:</span> <span class="token keyword">break</span> <span class="token comment"># 오른쪽 끝까지 탐색시에 종료</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment"># 합이 구하고자 하는 값보다 작으며, 오른쪽 끝까지 탐색을 하지 않았을 시</span>
</span><span class="code-line">        tsum <span class="token operator">+=</span> L<span class="token punctuation">[</span>right<span class="token punctuation">]</span>
</span><span class="code-line">        right <span class="token operator">+=</span> <span class="token number">1</span> <span class="token comment"># 오른쪽 값을 추가하고 범위를 넓혀 탐색</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">if</span> min_length <span class="token operator">==</span> INF<span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 최대 길이와 같음 > 구하고자 하는 값보다 큰 수를 만들 수 없는 것</span>
</span><span class="code-line"><span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>min_length<span class="token punctuation">)</span>
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-11066 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-11066-Python</link>
    <pubDate>2021-04-10</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-11066-Python</guid>
    <description>
    <![CDATA[BOJ-11066-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>N개의 파일이 있을 때 두 개의 파일을 합쳐서 하나의 임시파일을 만들고, 이 임시파일이나 원래의 파일을 계속 두 개씩 합쳐서 소설의 여러 장들이 연속이 되도록 파일을 합쳐나가고, 최종적으로는 하나의 파일로 합친다. 두 개의 파일을 합칠 때 필요한 비용이 두 파일 크기의 합이라고 가정할 때, 최종적인 한 개의 파일을 완성하는데 필요한 비용 중 최소 총합을 계산하는 문제. 크누스(knuth) 알고리즘을 이용하여 풀었다곤 하지만 아직 정확하게 이해하지 못했다. 누적합을 계산하여 연산에 이용, <code>dp[2][4]는 dp[2][3] + sizes[4], dp[3][4] + sizes[2]</code> 중 작은 것을 할당하는 점화식이 이용돼었다. 아직 너무 부족하다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">INF <span class="token operator">=</span> sys<span class="token punctuation">.</span>maxsize
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    N <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    sizes <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    acc_sum <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">for</span> size <span class="token keyword">in</span> sizes<span class="token punctuation">:</span> acc_sum<span class="token punctuation">.</span>append<span class="token punctuation">(</span>acc_sum<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> size<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> d <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N<span class="token operator">-</span>d<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            j <span class="token operator">=</span> d <span class="token operator">+</span> i
</span><span class="code-line">            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> INF
</span><span class="code-line">            <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> acc_sum<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> acc_sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1005 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1005-Python</link>
    <pubDate>2021-04-09</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1005-Python</guid>
    <description>
    <![CDATA[BOJ-1005-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>N개의 건물과 건설 순서 규칙 K가 주어진다. 이때 건물 번호 X가 건설 완료되는 최소시간을 출력하는 문제. deque와 위상 정렬을 사용하여 풀었다. 진압차수를 줄인 후 반복중인 건물의 최소 시간을 저장하는 answers 배열에 <code>answers[next] = max(answers[next], answers[now] + answers[next])</code>의 점화식을 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    N<span class="token punctuation">,</span> K <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    times <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    answers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> times<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    tree <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    indegree <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>K<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        bef<span class="token punctuation">,</span> nex <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">        tree<span class="token punctuation">[</span>bef<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>nex<span class="token punctuation">)</span>
</span><span class="code-line">        indegree<span class="token punctuation">[</span>nex<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">    q <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> indegree<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">            q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</span><span class="code-line">            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> times<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">        now <span class="token operator">=</span> q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">for</span> <span class="token builtin">next</span> <span class="token keyword">in</span> tree<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            indegree<span class="token punctuation">[</span><span class="token builtin">next</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>
</span><span class="code-line">            answers<span class="token punctuation">[</span><span class="token builtin">next</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>answers<span class="token punctuation">[</span><span class="token builtin">next</span><span class="token punctuation">]</span><span class="token punctuation">,</span> answers<span class="token punctuation">[</span>now<span class="token punctuation">]</span> <span class="token operator">+</span> times<span class="token punctuation">[</span><span class="token builtin">next</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">            <span class="token keyword">if</span> indegree<span class="token punctuation">[</span><span class="token builtin">next</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">                q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>answers<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>Î
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2243 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2243-Python</link>
    <pubDate>2021-04-04</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2243-Python</guid>
    <description>
    <![CDATA[BOJ-2243-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>몇 번째로 맛있는 사탕을 pop, 사탕을 상자에서 넣고 뺌을 구현하는 문제. 세그먼트 트리를 이용하여 개수를 업데이트, 몇 번째 맛인 지를 확인하는 쿼리를 이용하여 상자를 조작할 때는 업데이트를 이용하여, 몇 번째 사탕을 꺼낼 때는 인덱스를 참고하여 출력하고, -1 diff로 업데이트하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token keyword">from</span> math <span class="token keyword">import</span> log2<span class="token punctuation">,</span> ceil
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">MAX <span class="token operator">=</span> <span class="token number">1000000</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> index<span class="token punctuation">,</span> diff<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> start <span class="token operator">></span> index <span class="token keyword">or</span> index <span class="token operator">></span> end<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span>
</span><span class="code-line">
</span><span class="code-line">    tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">+=</span> diff
</span><span class="code-line">    <span class="token keyword">if</span> start <span class="token operator">!=</span> end<span class="token punctuation">:</span>
</span><span class="code-line">        mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
</span><span class="code-line">        update<span class="token punctuation">(</span>node <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> index<span class="token punctuation">,</span> diff<span class="token punctuation">)</span>
</span><span class="code-line">        update<span class="token punctuation">(</span>node <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> index<span class="token punctuation">,</span> diff<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">query</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> seq<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> start <span class="token operator">==</span> end<span class="token punctuation">:</span> <span class="token keyword">return</span> start
</span><span class="code-line">
</span><span class="code-line">    mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
</span><span class="code-line">    <span class="token comment"># 왼쪽으로 탐색</span>
</span><span class="code-line">    <span class="token keyword">if</span> tree<span class="token punctuation">[</span>node <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">>=</span> seq<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> query<span class="token punctuation">(</span>node <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> seq<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token comment"># 오른쪽으로 탐색</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> query<span class="token punctuation">(</span>node <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> seq <span class="token operator">-</span> tree<span class="token punctuation">[</span>node <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">height <span class="token operator">=</span> ceil<span class="token punctuation">(</span>log2<span class="token punctuation">(</span>MAX<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">size <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token punctuation">(</span>height <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">tree <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    ip <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> ip<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">        index <span class="token operator">=</span> query<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> MAX<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> ip<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>
</span><span class="code-line">        update<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> MAX<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        update<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> MAX<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> ip<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ip<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1966 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1966-Javascript</link>
    <pubDate>2021-04-03</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1966-Javascript</guid>
    <description>
    <![CDATA[BOJ-1966-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>우선순위가 있는 프린터 문제. 파이썬은 deque를 사용해 popleft를 사용하여 풀었지만 JS는 shift를 사용하면 되어 추가적인 import없이 풀었다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token punctuation">.</span><span class="token method function property-access">readFileSync</span><span class="token punctuation">(</span><span class="token string">"dev/stdin"</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token punctuation">.</span><span class="token method function property-access">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token punctuation">.</span><span class="token method function property-access">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token punctuation">.</span><span class="token method function property-access">split</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// const input = `3</span>
</span><span class="code-line"><span class="token comment">// 1 0</span>
</span><span class="code-line"><span class="token comment">// 5</span>
</span><span class="code-line"><span class="token comment">// 4 2</span>
</span><span class="code-line"><span class="token comment">// 1 2 3 4</span>
</span><span class="code-line"><span class="token comment">// 6 0</span>
</span><span class="code-line"><span class="token comment">// 1 1 9 1 1 1`.split("\n");</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">function</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> m</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">const</span> priorities <span class="token operator">=</span> input<span class="token punctuation">[</span>readIndex<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Number</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">const</span> printerIndex <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token spread operator">...</span><span class="token known-class-name class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">let</span> printedIndex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword control-flow">while</span> <span class="token punctuation">(</span>priorities<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token keyword">const</span> left <span class="token operator">=</span> priorities<span class="token punctuation">.</span><span class="token method function property-access">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">        <span class="token keyword">const</span> tempIndex <span class="token operator">=</span> printerIndex<span class="token punctuation">.</span><span class="token method function property-access">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token keyword">in</span> priorities<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">            index <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">            <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>priorities<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">></span> left<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">                priorities<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">                printerIndex<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>tempIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">                <span class="token keyword control-flow">break</span><span class="token punctuation">;</span>
</span><span class="code-line">            <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> priorities<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">                <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>tempIndex <span class="token operator">===</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">                    <span class="token keyword control-flow">return</span> printedIndex<span class="token punctuation">;</span>
</span><span class="code-line">                <span class="token punctuation">}</span>
</span><span class="code-line">                printedIndex<span class="token operator">++</span><span class="token punctuation">;</span>
</span><span class="code-line">            <span class="token punctuation">}</span>
</span><span class="code-line">        <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token keyword control-flow">return</span> printedIndex<span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">const</span> tc <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">let</span> readIndex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> tc<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">const</span> <span class="token punctuation">[</span>n<span class="token punctuation">,</span> m<span class="token punctuation">]</span> <span class="token operator">=</span> input<span class="token punctuation">[</span>readIndex<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Number</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">solve</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-10546 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-10546-Javascript</link>
    <pubDate>2021-03-30</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-10546-Javascript</guid>
    <description>
    <![CDATA[BOJ-10546-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>프로그래머스 완주하지 못한 선수와 같은 문제. 오브젝트 자료형을 이용하여 참가한 선수의 이름을 기준으로 정수형 값으로 저장한 후, 완주한 사람에 대해서 -1 하였다. 그 후 모든 오브젝트 요소에 대해서 값이 1인 요소를 출력하여 풀었다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token punctuation">.</span><span class="token method function property-access">readFileSync</span><span class="token punctuation">(</span><span class="token string">"/dev/stdin"</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token punctuation">.</span><span class="token method function property-access">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token punctuation">.</span><span class="token method function property-access">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token punctuation">.</span><span class="token method function property-access">split</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// const input = `4</span>
</span><span class="code-line"><span class="token comment">// mislav</span>
</span><span class="code-line"><span class="token comment">// stanko</span>
</span><span class="code-line"><span class="token comment">// mislav</span>
</span><span class="code-line"><span class="token comment">// ana</span>
</span><span class="code-line"><span class="token comment">// stanko</span>
</span><span class="code-line"><span class="token comment">// ana</span>
</span><span class="code-line"><span class="token comment">// mislav`.split("\n");</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">const</span> <span class="token function-variable function">solve</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">participant</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span>temp <span class="token keyword">in</span> participant<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>participant<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">            <span class="token keyword control-flow">return</span> temp<span class="token punctuation">;</span>
</span><span class="code-line">        <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">const</span> participant <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> <span class="token number">1</span> <span class="token operator">+</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">let</span> temp_people <span class="token operator">=</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>temp_people <span class="token keyword">in</span> participant<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        participant<span class="token punctuation">[</span>temp_people<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>
</span><span class="code-line">        participant<span class="token punctuation">[</span>temp_people<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> n<span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> <span class="token number">1</span> <span class="token operator">+</span> n <span class="token operator">+</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">let</span> finished <span class="token operator">=</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">    participant<span class="token punctuation">[</span>finished<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">solve</span><span class="token punctuation">(</span>participant<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-5397 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-5397-Javascript</link>
    <pubDate>2021-03-30</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-5397-Javascript</guid>
    <description>
    <![CDATA[BOJ-5397-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 문자열이 주어진다. 모든 문자열에 대해서 "&#x3C;", ">"가 입력될 시 커서를 움직이며, "-"가 입력될 시 커서에 해당하는 문자를 지우는 연산을 할 때, 문자열이 완성된 모습을 출력하는 문제. 첫 번째 풀이는 정수형 변수 index와 <code>splice</code>를 이용하여 stack에 값을 추가, 삭제하여 풀었으나 시간초과 결과를 받았다. 두 번째 풀이는 스택 배열을 두개 사용하여 커서 이동 시 pop과 push를 이용, 연산 종료 후 오른쪽 스택을 뒤집어서 <code>join</code>하여 풀었다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token punctuation">.</span><span class="token method function property-access">readFileSync</span><span class="token punctuation">(</span><span class="token string">"dev/stdin"</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token punctuation">.</span><span class="token method function property-access">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token punctuation">.</span><span class="token method function property-access">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token punctuation">.</span><span class="token method function property-access">split</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// const input = `2</span>
</span><span class="code-line"><span class="token comment">// ---abc--</span>
</span><span class="code-line"><span class="token comment">// ab---cde&#x3C;&#x3C;&#x3C;&#x3C;ab`.split("\n");</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// function edit(string) {</span>
</span><span class="code-line"><span class="token comment">//     const stack = [];</span>
</span><span class="code-line"><span class="token comment">//     let index = 0;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">//     for (word of string) {</span>
</span><span class="code-line"><span class="token comment">//         if (word === "&#x3C;") {</span>
</span><span class="code-line"><span class="token comment">//             if (index > 0) {</span>
</span><span class="code-line"><span class="token comment">//                 index -= 1;</span>
</span><span class="code-line"><span class="token comment">//             }</span>
</span><span class="code-line"><span class="token comment">//         } else if (word === ">") {</span>
</span><span class="code-line"><span class="token comment">//             if (index &#x3C; stack.length) {</span>
</span><span class="code-line"><span class="token comment">//                 index += 1;</span>
</span><span class="code-line"><span class="token comment">//             }</span>
</span><span class="code-line"><span class="token comment">//         } else if (word === "-") {</span>
</span><span class="code-line"><span class="token comment">//             if (stack.length !== 0) {</span>
</span><span class="code-line"><span class="token comment">//                 stack.splice(index - 1, 1);</span>
</span><span class="code-line"><span class="token comment">//                 index -= 1;</span>
</span><span class="code-line"><span class="token comment">//             }</span>
</span><span class="code-line"><span class="token comment">//         } else {</span>
</span><span class="code-line"><span class="token comment">//             stack.splice(index, 0, word);</span>
</span><span class="code-line"><span class="token comment">//             index += 1;</span>
</span><span class="code-line"><span class="token comment">//         }</span>
</span><span class="code-line"><span class="token comment">//     }</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">//     return stack.join("");</span>
</span><span class="code-line"><span class="token comment">// }</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">function</span> <span class="token function">edit</span><span class="token punctuation">(</span><span class="token parameter">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">const</span> leftStack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword">const</span> rightStack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span>word <span class="token keyword">of</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>word <span class="token operator">===</span> <span class="token string">"&#x3C;"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">            <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>leftStack<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> rightStack<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>leftStack<span class="token punctuation">.</span><span class="token method function property-access">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">        <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>word <span class="token operator">===</span> <span class="token string">">"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">            <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>rightStack<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> leftStack<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>rightStack<span class="token punctuation">.</span><span class="token method function property-access">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">        <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>word <span class="token operator">===</span> <span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">            <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>leftStack<span class="token punctuation">.</span><span class="token property-access">length</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> leftStack<span class="token punctuation">.</span><span class="token method function property-access">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">        <span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>
</span><span class="code-line">            leftStack<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">        <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token keyword control-flow">return</span> leftStack<span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">+</span> rightStack<span class="token punctuation">.</span><span class="token method function property-access">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">edit</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-11054 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-11054-Python</link>
    <pubDate>2021-03-29</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-11054-Python</guid>
    <description>
    <![CDATA[BOJ-11054-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 정수로 이루어진 수열 s를 입력받는다. 그 후 부분 수열 중 바이토닉 수열이면서 가장 긴 수열의 길이를 구하는 문제. 가장 긴 증가하는 부분 수열의 길이를 저장한 배열과 가장 긴 감소하는 부분 수열의 길이를 저장한 배열을 비교하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">upper <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">downer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> l<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            upper<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>upper<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> upper<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> l<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            downer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>downer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> downer<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">answer <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    answer <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>answer<span class="token punctuation">,</span> upper<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> downer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[스타트업 코딩 페스티벌 SCOF 2021 후기]]></title>
    <link>https://www.hyesungoh.xyz/scof2021</link>
    <pubDate>2021-03-27</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/scof2021</guid>
    <description>
    <![CDATA[scof2021]]>
    </description>
    <content:encoded>
      <![CDATA[<img width="1069" alt="스크린샷 2021-03-27 오후 4 26 48" src="https://user-images.githubusercontent.com/26461307/112713589-4c2e7700-8f19-11eb-9fea-2a60aeeabd01.png">
<h2 id="스타트업-코딩-페스티벌-2021-후기" class="heading">스타트업 코딩 페스티벌 2021 후기</h2>
<p>SW마에스트로 준비를 하면서 알고리즘 공부를 열심히 했는데, 재밌어 보이는 행사가 있어서 참여하게 되었다.</p>
<img width="1060" alt="스크린샷 2021-03-27 오후 4 29 53" src="https://user-images.githubusercontent.com/26461307/112713654-bf37ed80-8f19-11eb-96ee-2414cb33be8d.png">
<p><b>왓챠, 쏘카, 오늘의집, 마켓컬리, 브랜디, 번개장터</b>, 총 6개 기업이 개최한 행사는 1, 2차 알고리즘 테스트를 거쳐 다양한 상품, 채용 기회까지 주는데 참가를 안할 이유가 없었다.</p>
<img width="393" alt="스크린샷 2021-03-27 오후 4 34 40" src="https://user-images.githubusercontent.com/26461307/112713806-58670400-8f1a-11eb-8fbc-fd9d99f580e9.png">
<p>1차는 <b>4시간 동안 6문제</b>로 진행되었는데 운이 좋게 합격하게 되었다. 문제는 <i>백준 기준 실버 5 ~ 골드 5 정도, 프로그래머스 레벨 1, 2 정도</i>로 느껴졌다.</p>
<p>2차는 <b>4시간 동안 4문제</b>로 진행하였는데, 난이도가 갑자기 훅 올른 것처럼 느껴졌다. SW 마에스트로 면접 준비를 하면서 알고리즘을 소홀히하긴 했지만 ... <i>골드 2 ~ 플레티넘 5 정도</i>의 난이도로 느껴졌다.</p>
<p>1, 2차 모두 <u>구름 IDE 플랫폼</u>에서 진행하였으며, 문제의 정답을 제출할 시 <b>오답입니다, 오답입니다 (통과하지 못한 테스트케이스 존재), 정답</b>으로 나누어 알려주는데</p>
<p><u>1차는 6문제 중 5문제 정답, 1문제 오답 (TC)를 받았는데, 2차는 4문제 중 1문제 정답, 3문제 오답 (TC)</u>를 받았다...</p>
<img width="1072" alt="스크린샷 2021-03-27 오후 4 30 14" src="https://user-images.githubusercontent.com/26461307/112713665-c4953800-8f19-11eb-9763-b9150b0dddfc.png">
<p>물론 1, 2, 3등은 기대를 하지 않아서 재밌는 경험으로 남았고, 진짜 목표는 2차 진출 후 100명에게 추첨을 통해 지급되는 애플 기기였다 :D 지금까지 레플 당첨된 적이 없는데 이번 SCOF를 위해 액땜을 한 거였으면 좋겠당</p>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[백준 자동 채점 프로그램] - python, selenium, bs4]]></title>
    <link>https://www.hyesungoh.xyz/bojautomation</link>
    <pubDate>2021-03-24</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/bojautomation</guid>
    <description>
    <![CDATA[bojautomation]]>
    </description>
    <content:encoded>
      <![CDATA[<p>학과 조교를 수행하며 개발한, <strong>백준 채점 자동화 프로그램</strong> 입니다.</p>
<h2 id="개발도구" class="heading">개발도구</h2>
<img src="https://img.shields.io/badge/Python-3776AB?style=flat-square&logo=Python&logoColor=white" alt="python"/>
<img src="https://img.shields.io/badge/Selenium-43B02A?style=flat-square&logo=Selenium&logoColor=white" alt="selenium"/>
<p>파이썬과 함께 동적 웹 크롤링을 위해 Selenium을 사용하였습니다.</p>
<h2 id="해결하고자-한-문제" class="heading">해결하고자 한 문제</h2>
<p>제가 처한 상황은 다음과 같습니다.</p>
<ol>
<li>매주 2문제씩 백준 출처의 알고리즘 문제를 제출</li>
<li>해당 강의 수강생은 약 40명</li>
<li>백준 정답 기준으로 채점</li>
<li>채점 결과를 바탕으로 교내 시스템에 입력</li>
</ol>
<p>위 과정을 수작업으로 수행하게될 시 매주 1시간 30분 이상의 시간이 소모되어</p>
<p>최소한 3번까지 자동화를 통해 시간을 단축시키고자 하였습니다.</p>
<h2 id="결과" class="heading">결과</h2>
<blockquote>
<p>결과물 <a href="https://youtu.be/jMBtbVg0Abw" target="_blank" rel="noopener noreferer">Youtube Link</a></p>
</blockquote>
<ul>
<li>동적 크롤링</li>
</ul>
<p><img src="https://user-images.githubusercontent.com/26461307/112181418-c7550c00-8c3f-11eb-87e3-271008b5f301.png" alt="동적 크롤링"></p>
<ul>
<li>채점결과 CSV 파일로 저장</li>
</ul>
<p><img src="https://user-images.githubusercontent.com/26461307/112181432-ca4ffc80-8c3f-11eb-845d-4d7cc88318f2.png" alt="채점결과"></p>
<p>위에서 기술한 것처럼 Python과 Selenium을 사용하여 구현하였습니다.</p>
<p>먼저 해당 프로그램의 확정성을 고려해 <code>이름(학번) - 백준 ID</code>로 이루어진 csv 파일을 읽었으며, 동적 크롤링을 통해 매 학생들의 결과를 실시간으로 확인할 수 있게 하였습니다.</p>
<p>위 <code>4번</code>의 입력을 위해 최종적으로 csv 파일로써 결과를 저장하는 방식으로 구현하였습니다.</p>
<p>해당 프로그램을 개발함으로써 매주 최대 1시간 20분, 한 학기에 약 18시간을 절약할 수 있었습니다.</p>
<details>
<summary>
<h2 id="-구현-과정-보기" class="heading">👉 구현 과정 보기</h2>
</summary>
<ul>
<li><code>이름(학번), 백준 ID</code>로 이루어진 CSV 파일을 읽어 딕셔너리화하여 반환</li>
</ul>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">return_student_information</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>CSV_FILE_NAME<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
</span><span class="code-line">    reader <span class="token operator">=</span> csv<span class="token punctuation">.</span>reader<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    student_information <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token keyword">for</span> line <span class="token keyword">in</span> reader<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"성명"</span><span class="token punctuation">:</span> <span class="token keyword">continue</span>
</span><span class="code-line">        student_information<span class="token punctuation">[</span>line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token comment"># student_information = {"오혜성": "hs980414", "한슬희": "3021062"}</span>
</span><span class="code-line">    <span class="token keyword">return</span> student_information
</span></code></pre>
<ul>
<li>백준 ID를 이용해 백준 프로필로 이동 후 주차별 통과 여부, 각 문제별 풀었는 지 확인하여 반환</li>
</ul>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">grading</span><span class="token punctuation">(</span>student_id<span class="token punctuation">,</span> problems<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>BOJ_URL <span class="token operator">+</span> student_id<span class="token punctuation">)</span>
</span><span class="code-line">    page_source <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>driver<span class="token punctuation">.</span>page_source<span class="token punctuation">,</span> <span class="token string">"html.parser"</span><span class="token punctuation">)</span>s
</span><span class="code-line">
</span><span class="code-line">    correct_div <span class="token operator">=</span> page_source<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"class"</span><span class="token punctuation">:</span> <span class="token string">"panel-body"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</span><span class="code-line">    students_answers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">for</span> answer <span class="token keyword">in</span> correct_div<span class="token punctuation">.</span>findAll<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        students_answers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>answer<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    is_passed <span class="token operator">=</span> <span class="token string">'O'</span>
</span><span class="code-line">    is_solve_by_problems <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> problem <span class="token keyword">in</span> problems<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> problem <span class="token keyword">not</span> <span class="token keyword">in</span> students_answers<span class="token punctuation">:</span>
</span><span class="code-line">            is_passed <span class="token operator">=</span> <span class="token string">'X'</span>
</span><span class="code-line">            is_solve_by_problems<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'X'</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span> is_solve_by_problems<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'O'</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token punctuation">[</span>is_passed<span class="token punctuation">,</span> is_solve_by_problems<span class="token punctuation">]</span>
</span></code></pre>
<ul>
<li>성명, 백준 ID, 제출 결과, 각 문제별 결과를 CSV 파일로 저장</li>
</ul>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">write_csv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">def</span> <span class="token function">write_base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        csv_infomation <span class="token operator">=</span> current_date <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> problems<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> problems<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">        writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span><span class="token punctuation">[</span>csv_infomation<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">        writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"성명"</span><span class="token punctuation">,</span> <span class="token string">"백준 ID"</span><span class="token punctuation">,</span> <span class="token string">"제출 결과"</span><span class="token punctuation">]</span> <span class="token operator">+</span> problems<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    problems <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"이번 주 제출 문제 '공백으로 나누어' 입력하세요 : "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>GRADING_FILE_NAME<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>
</span><span class="code-line">    writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>
</span><span class="code-line">    write_base<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    students_information <span class="token operator">=</span> return_student_information<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">    total_students_length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>students_information<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> index<span class="token punctuation">,</span> student_information <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>students_information<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        student_name<span class="token punctuation">,</span> student_id <span class="token operator">=</span> student_information
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">if</span> student_id <span class="token operator">==</span> <span class="token string">"미제출"</span><span class="token punctuation">:</span>
</span><span class="code-line">            writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span><span class="token punctuation">[</span>student_name<span class="token punctuation">,</span> <span class="token string">"ID 미제출"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">            is_passed<span class="token punctuation">,</span> is_solve_by_problems <span class="token operator">=</span> grading<span class="token punctuation">(</span>student_id<span class="token punctuation">,</span> problems<span class="token punctuation">)</span>
</span><span class="code-line">            writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span><span class="token punctuation">[</span>student_name<span class="token punctuation">,</span> student_id<span class="token punctuation">,</span> is_passed<span class="token punctuation">]</span> <span class="token operator">+</span> is_solve_by_problems<span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%d / %d ------- %s 학생 : %s"</span> <span class="token operator">%</span><span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> total_students_length<span class="token punctuation">,</span> student_name<span class="token punctuation">,</span> is_passed<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>
</details>
<h2 id="겪었던-이슈" class="heading">겪었던 이슈</h2>
<ul>
<li>Selenium chrome driver version
<ul>
<li>로컬 <a href="https://chromedriver.chromium.org/downloads" target="_blank" rel="noopener noreferer">chrome 버전에 맞는 driver</a>을 업데이트하여 수정</li>
</ul>
</li>
</ul>
<h2 id="마치며" class="heading">마치며</h2>
<p>제가 직접 놓인 상황을 자동화 프로그램이란 종목으로 개선하면서 또 다른 개발의 재미를 느낄 수 있었습니다.</p>
<p>최대한 빠르게 개발하고자 날개발을 한 감이 없진 않지만, 큰 오류가 발견되지 않고 조교 역할을 마칠 때까지 요긴하게 사용하여 기분 좋았던 경험이였습니다.</p>
<p>제가 절약한 시간은 약 18시간 정도지만, 앞으로 같은 과목의 조교 역할을 수행할 후임자분들의 시간 또한 절약할 수 있지 않을까라는 생각에 인계할 계획입니다.</p>
<h4 id="깃허브에서-보기"><a href="https://github.com/hyesungoh/BOJ_grading_automation" target="_blank" rel="noopener noreferer">깃허브에서 보기</a></h4>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-4949 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-4949-Python</link>
    <pubDate>2021-03-23</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-4949-Python</guid>
    <description>
    <![CDATA[BOJ-4949-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>영문 알파벳, 공백, 소괄호, 대괄호, 온점으로 이루어진 문자열을 입력받는다. 해당 문자열이 소괄호, 대괄호에 대해서 균형을 이루고 있으면 "yes"를, 아닐 시 "no"를 출력하는 문제. 스택을 이용하여 풀었으며 괄호를 여는 문자일 시 스택에 추가, 닫는 문자일 시 스택의 마지막 값과 비교하여 pop하거나 break하여 풀었다. 소괄호 대괄호를 비교하는 데 딕셔너리 자료형을 이용하였으며 반복문이 종료시에도 스택에 괄호가 남아있는 경우도 예외처리하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">braket_fair <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">")"</span><span class="token punctuation">:</span> <span class="token string">"("</span><span class="token punctuation">,</span> <span class="token string">"]"</span><span class="token punctuation">:</span> <span class="token string">"["</span><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
</span><span class="code-line">    stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">    answer <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">    string <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">if</span> string <span class="token operator">==</span> <span class="token string">"."</span><span class="token punctuation">:</span> <span class="token keyword">break</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> word <span class="token keyword">in</span> string<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> word <span class="token operator">==</span> <span class="token string">"("</span> <span class="token keyword">or</span> word <span class="token operator">==</span> <span class="token string">"["</span><span class="token punctuation">:</span> stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>word<span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">elif</span> word <span class="token operator">==</span> <span class="token string">")"</span> <span class="token keyword">or</span> word <span class="token operator">==</span> <span class="token string">"]"</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> stack <span class="token keyword">and</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> braket_fair<span class="token punctuation">[</span>word<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">                stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">            <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">                answer <span class="token operator">=</span> <span class="token boolean">False</span>
</span><span class="code-line">                <span class="token keyword">break</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span> answer <span class="token operator">=</span> <span class="token boolean">False</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"yes"</span> <span class="token keyword">if</span> answer <span class="token keyword">else</span> <span class="token string">"no"</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1092 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1092-Python</link>
    <pubDate>2021-03-19</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1092-Python</guid>
    <description>
    <![CDATA[BOJ-1092-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>항구에 각 옮길 수 있는 최대 무게가 있는 N개의 크레인, 각 무게가 있는 M개의 화물이 있다. 이 때 최소 시간으로 모든 박스를 옮겼을 때의 시간을 출력하는 문제. 첫 번째 풀이는 크레인 중 제일 작은 값과 리스트를 슬라이싱하여 비교하였으나, 작은 것부터 계산할 시에 3 6 8, 1 2 3 4 5 6 7 8 9와 같은 반례에 통과하지 못하였다. 두 번째 풀이는 옮길 수 있는 화물 중 제일 무거운 것부터 del 메소드를 이용하여 풀었다. 간단하지만 생각보다 긴 시간을 소비하였다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># n = int(input())</span>
</span><span class="code-line"><span class="token comment"># cranes = sorted(map(int, input().split()))</span>
</span><span class="code-line"><span class="token comment"># min_crane = min(cranes)</span>
</span><span class="code-line"><span class="token comment"># m = int(input())</span>
</span><span class="code-line"><span class="token comment"># boxes = sorted(map(int, input().split()))</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># cnt, answer = 0, 0</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># while True:</span>
</span><span class="code-line"><span class="token comment">#     if cnt >= m: break</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     length = cnt+n if cnt+n &#x3C; m else m if cnt == m-1 else -1</span>
</span><span class="code-line"><span class="token comment">#     now_boxes = boxes[cnt:length]</span>
</span><span class="code-line"><span class="token comment">#     max_box = now_boxes[-1]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     if min_crane >= max_box:</span>
</span><span class="code-line"><span class="token comment">#         cnt += n</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     else:</span>
</span><span class="code-line"><span class="token comment">#         for crane in cranes:</span>
</span><span class="code-line"><span class="token comment">#             # print(crane, boxes[cnt])</span>
</span><span class="code-line"><span class="token comment">#             if cnt >= m: break</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#             if crane >= boxes[cnt]:</span>
</span><span class="code-line"><span class="token comment">#                 cnt += 1</span>
</span><span class="code-line"><span class="token comment">#                 continue</span>
</span><span class="code-line"><span class="token comment">#             if crane == cranes[-1] and crane &#x3C; boxes[cnt]:</span>
</span><span class="code-line"><span class="token comment">#                 print(-1)</span>
</span><span class="code-line"><span class="token comment">#                 exit(0)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     answer += 1</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># print(answer)</span>
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">cranes <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</span><span class="code-line">m <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">boxes <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">if</span> cranes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&#x3C;</span> boxes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">    exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">answer <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line"><span class="token keyword">while</span> m <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">    answer <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">    <span class="token keyword">for</span> crane <span class="token keyword">in</span> cranes<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> crane <span class="token operator">>=</span> boxes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">                <span class="token keyword">del</span> boxes<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
</span><span class="code-line">                m <span class="token operator">-=</span> <span class="token number">1</span>
</span><span class="code-line">                <span class="token keyword">break</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1759 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1759-Python</link>
    <pubDate>2021-03-18</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1759-Python</guid>
    <description>
    <![CDATA[BOJ-1759-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>l개의 문자중에서, c개의 문자열로 이루어진 암호를 만드는 문제. 해당 문자열은 알파벳이 오름차순이 되어야하며, 1개 이상의 모음, 2개 이상의 자음으로 이루어져 있어야하는 조건이 있다. 백트래킹 방식을 이용하여 모든 알파벳이 중복되지 않으며 오름차순으로 담길 수 있도록 하였다. 길이가 c가 될 시 모음과 자음의 수를 세는 함수를 만들어 통과할 시 출력하도록 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line">sys<span class="token punctuation">.</span>setrecursionlimit<span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">6</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    vowel_cnt <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    cont_cnt <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> w <span class="token keyword">in</span> word<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> w <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">]</span><span class="token punctuation">:</span> vowel_cnt <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span> cont_cnt <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">if</span> vowel_cnt <span class="token operator">>=</span> <span class="token number">1</span> <span class="token keyword">and</span> cont_cnt <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">True</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token boolean">False</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">bt</span><span class="token punctuation">(</span>depth<span class="token punctuation">,</span> temp_word<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> depth <span class="token operator">==</span> l<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> check<span class="token punctuation">(</span>temp_word<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>temp_word<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">return</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> <span class="token keyword">not</span> visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token keyword">not</span> temp_word <span class="token keyword">or</span> temp_word<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&#x3C;</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">            temp_word<span class="token punctuation">.</span>append<span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">            bt<span class="token punctuation">(</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> temp_word<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">            visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>
</span><span class="code-line">            temp_word<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">l<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">words <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">visit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">bt<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-7578 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-7578-Python</link>
    <pubDate>2021-03-16</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-7578-Python</guid>
    <description>
    <![CDATA[BOJ-7578-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>기계의 식별번호로 이루어진 두 열을 입력받는다. 해당 식별번호로 케이블을 연결할 때 서로 교차하는 케이블 쌍의 개수를 출력하는 문제. 첫 번쨰 생각은 정렬 후에 LIS를 구할까 했으나, 최대 500,000개의 기계가 입력되며 시간 제한이 1초라 불가할 것으로 판단하였다. 세그먼트 트리를 이용하여 해당 인덱스밖의 연결 객체를 합하여 풀었다. 두 번째 기계열을 딕셔너리 자료형으로 key는 식별번호, value를 인덱스 번호로 저장하였으며, l1의 식별번호에 대하여 반복문을 수행하며 query, update 연산을 하여 풀었다. 자세한 풀이는 <a href="https://hooongs.tistory.com/118" target="_blank" rel="noopener noreferer">해당 게시물</a> 참조</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token keyword">from</span> math <span class="token keyword">import</span> log2<span class="token punctuation">,</span> ceil
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> idx <span class="token operator">&#x3C;</span> start <span class="token keyword">or</span> end <span class="token operator">&#x3C;</span> idx<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> <span class="token number">0</span>
</span><span class="code-line">    <span class="token keyword">if</span> start <span class="token operator">==</span> end<span class="token punctuation">:</span>
</span><span class="code-line">        tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">        <span class="token keyword">return</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">    mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
</span><span class="code-line">    update<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> idx<span class="token punctuation">)</span>
</span><span class="code-line">    update<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> idx<span class="token punctuation">)</span>
</span><span class="code-line">    tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> tree<span class="token punctuation">[</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> tree<span class="token punctuation">[</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">return</span> tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">query</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> right <span class="token operator">&#x3C;</span> start <span class="token keyword">or</span> end <span class="token operator">&#x3C;</span> left<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">if</span> left <span class="token operator">&#x3C;=</span> start <span class="token keyword">and</span> end <span class="token operator">&#x3C;=</span> right<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
</span><span class="code-line">    <span class="token keyword">return</span> query<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token operator">+</span> query<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l1 <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">idx<span class="token punctuation">,</span> l2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</span><span class="code-line"><span class="token keyword">for</span> num <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    l2<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> idx
</span><span class="code-line">    idx <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">height <span class="token operator">=</span> ceil<span class="token punctuation">(</span>log2<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">size <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token punctuation">(</span>height <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">tree <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">answer <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line"><span class="token keyword">for</span> num <span class="token keyword">in</span> l1<span class="token punctuation">:</span>
</span><span class="code-line">    l2_idx <span class="token operator">=</span> l2<span class="token punctuation">[</span>num<span class="token punctuation">]</span>
</span><span class="code-line">    answer <span class="token operator">+=</span> query<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> l2_idx<span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">    update<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> l2_idx<span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-12738 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-12738-Python</link>
    <pubDate>2021-03-12</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-12738-Python</guid>
    <description>
    <![CDATA[BOJ-12738-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>수열 A가 주어졌을 때 가장 긴 증가하는 부분 수열을 구하는 문제. 기존 dp 방법을 이용하여 구하는 것이 아닌, 이분탐색을 사용하여 풀었다. 모든 수에 대해서 dp 배열의 마지막 값과 비교하여 클 시 추가하고 아닐 시 이분탐색을 이용해 가장 인접한 수와 바꿔주어 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">while</span> start <span class="token operator">&#x3C;</span> end<span class="token punctuation">:</span>
</span><span class="code-line">        mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
</span><span class="code-line">        <span class="token keyword">if</span> dp<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&#x3C;</span> num<span class="token punctuation">:</span>
</span><span class="code-line">            start <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">            end <span class="token operator">=</span> mid
</span><span class="code-line">    <span class="token keyword">return</span> end
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> num <span class="token keyword">in</span> l<span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">        dp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">continue</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">if</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&#x3C;</span> num<span class="token punctuation">:</span>
</span><span class="code-line">        dp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        idx <span class="token operator">=</span> lower_bound<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>
</span><span class="code-line">        dp<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> num
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-14003 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-14003-Python</link>
    <pubDate>2021-03-12</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-14003-Python</guid>
    <description>
    <![CDATA[BOJ-14003-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>수열 A가 주어졌을 때, 가장 긴 증가하는 부분 수열(LIS)를 구하는 문제. 해당 LIS의 길이와 수열을 공백으로 나누어 출력하는 문제. 이분탐색을 이용하여 LIS의 길이를 저장했으며 배열에 각 인덱스의 LIS를 저장하여 해당 값을 비교, 감소하여 수열의 구성요소를 판별하여 풀었다. 자세한 풀이는 주석 참고</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">from</span> bisect <span class="token keyword">import</span> bisect_left
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token builtin">cmp</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment"># 이분탐색을 위해</span>
</span><span class="code-line">maxVal <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment"># 최대값</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token comment"># 첫 번째일 때 추가만</span>
</span><span class="code-line">        <span class="token builtin">cmp</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">continue</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">if</span> <span class="token builtin">cmp</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&#x3C;</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment"># 저장된 값과 비교하여 클 시</span>
</span><span class="code-line">        <span class="token builtin">cmp</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">cmp</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span>
</span><span class="code-line">        maxVal <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token comment"># 작을 시 어느 위치의 값에 해당하는 지</span>
</span><span class="code-line">        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> bisect_left<span class="token punctuation">(</span><span class="token builtin">cmp</span><span class="token punctuation">,</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token builtin">cmp</span><span class="token punctuation">[</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># 최대 길이 출력</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>maxVal <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># 인덱스별 길이를 기준으로 수열 저장</span>
</span><span class="code-line">res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> maxVal<span class="token punctuation">:</span>
</span><span class="code-line">        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">        maxVal <span class="token operator">-=</span> <span class="token number">1</span>
</span><span class="code-line">res<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span>res<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-17352 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-17352-Python</link>
    <pubDate>2021-03-12</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-17352-Python</guid>
    <description>
    <![CDATA[BOJ-17352-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>N개의 섬이 있고 모든 섬들을 잇는 n-1개의 다리가 있다. 어느날 다리 하나가 무너졌을 때, 모든 섬들을 이을 수 있는 다리의 시작 섬과 끝 섬을 출력하는 문제. 정답은 여러개이며 그 중 하나만 출력해도 된다. 유니온 파인드 방법으로 풀었으며 입력되는 다리들을 기준으로 union하였다. 그 후 첫 번째 섬의 부모 노드와 2부터 N번째 섬의 부모 노드를 비교해 다를 때 1과 해당 섬의 번호를 출력한 후 종료하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">sys<span class="token punctuation">.</span>setrecursionlimit<span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">8</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> node <span class="token operator">==</span> parents<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> node
</span><span class="code-line">    p <span class="token operator">=</span> find<span class="token punctuation">(</span>parents<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    parents<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> p
</span><span class="code-line">    <span class="token keyword">return</span> p
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">union</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    pa<span class="token punctuation">,</span> pb <span class="token operator">=</span> find<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> find<span class="token punctuation">(</span>b<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">if</span> pa <span class="token operator">!=</span> pb<span class="token punctuation">:</span>
</span><span class="code-line">        parents<span class="token punctuation">[</span>pb<span class="token punctuation">]</span> <span class="token operator">=</span> pa
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">parents <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    s<span class="token punctuation">,</span> e <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    union<span class="token punctuation">(</span>s<span class="token punctuation">,</span> e<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">first <span class="token operator">=</span> find<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> find<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> first<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
</span><span class="code-line">        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-가장먼노드 - Python]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-가장먼노드-Python</link>
    <pubDate>2021-03-12</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-가장먼노드-Python</guid>
    <description>
    <![CDATA[프로그래머스-가장먼노드-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 노드가 있는 그래프가 있다. 1번 노드에서 가장 멀리 떨어진 노드의 갯수를 반환하는 문제. 가장 멀리 떨어진 노드란 최단경로로 이동했을 때 간선의 개수가 가장 많은 노드들을 의미한다. INF와 heap을 이용하는 다익스트라 방법을 이용하여 풀었다. 인접리스트 방식으로 그래프를 저장한 후 다익스트라 연산을 통해 최단 거리를 저장, 최단 거리 중 최장 길이를 갖는 노드들을 센 후 반환하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line">INF <span class="token operator">=</span> sys<span class="token punctuation">.</span>maxsize
</span><span class="code-line"><span class="token keyword">import</span> heapq
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">solution</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> vertex<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">def</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        q <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">        heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">            ndist<span class="token punctuation">,</span> nnode <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>q<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">            <span class="token keyword">if</span> dist<span class="token punctuation">[</span>nnode<span class="token punctuation">]</span> <span class="token operator">&#x3C;</span> ndist<span class="token punctuation">:</span>
</span><span class="code-line">                <span class="token keyword">continue</span>
</span><span class="code-line">
</span><span class="code-line">            nextDist <span class="token operator">=</span> ndist <span class="token operator">+</span> <span class="token number">1</span>
</span><span class="code-line">            <span class="token keyword">for</span> nextNode <span class="token keyword">in</span> graph<span class="token punctuation">[</span>nnode<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">                <span class="token keyword">if</span> dist<span class="token punctuation">[</span>nextNode<span class="token punctuation">]</span> <span class="token operator">></span> nextDist<span class="token punctuation">:</span>
</span><span class="code-line">                    dist<span class="token punctuation">[</span>nextNode<span class="token punctuation">]</span> <span class="token operator">=</span> nextDist
</span><span class="code-line">                    heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token punctuation">[</span>nextDist<span class="token punctuation">,</span> nextNode<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">    graph <span class="token operator">=</span> <span class="token punctuation">{</span>i<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
</span><span class="code-line">    dist <span class="token operator">=</span> <span class="token punctuation">[</span>INF <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    dist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> s<span class="token punctuation">,</span> e <span class="token keyword">in</span> vertex<span class="token punctuation">:</span>
</span><span class="code-line">        graph<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>e<span class="token punctuation">)</span>
</span><span class="code-line">        graph<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    dijkstra<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">    max_num<span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> max_num <span class="token operator">&#x3C;</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            max_num <span class="token operator">=</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
</span><span class="code-line">            cnt <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">        <span class="token keyword">elif</span> max_num <span class="token operator">==</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            cnt <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> cnt
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-더맵게 - Python]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-더맵게-Python</link>
    <pubDate>2021-03-12</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-더맵게-Python</guid>
    <description>
    <![CDATA[프로그래머스-더맵게-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>모든 음식의 스코빌 지수가 주어지고, 모든 음식의 스코빌 지수가 k 이상이 되게 하고 싶다. 이 때 가장 맵지 않은 음식 + 두 번째로 맵지 않은 음식 * 2를 하여 섞을 수 있을 때 몇 번 섞어야 모든 음식이 k 스코빌 이상인 지 반환하는 문제. heap 연산을 이용해 제일 첫 번째 요소와 k를 비교해서 반환하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> heapq
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">solution</span><span class="token punctuation">(</span>scov<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    heapq<span class="token punctuation">.</span>heapify<span class="token punctuation">(</span>scov<span class="token punctuation">)</span>
</span><span class="code-line">    cnt <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>scov<span class="token punctuation">)</span>
</span><span class="code-line">    first <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>scov<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">while</span> length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">        second <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>scov<span class="token punctuation">)</span>
</span><span class="code-line">        first <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappushpop<span class="token punctuation">(</span>scov<span class="token punctuation">,</span> first <span class="token operator">+</span> second <span class="token operator">+</span> second<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">if</span> first <span class="token operator">>=</span> k<span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">return</span> cnt <span class="token operator">+</span> <span class="token number">1</span>
</span><span class="code-line">        cnt <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">        length <span class="token operator">-=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-입국심사 - Python]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-입국심사-Python</link>
    <pubDate>2021-03-12</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-입국심사-Python</guid>
    <description>
    <![CDATA[프로그래머스-입국심사-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n명이 입국심사를 기다리고 있다. 입국 심사관이 한 사람을 심사하는 데 걸리는 시간이 주어질 때, 모든 인원이 심사를 받는 데 걸리는 최소 시간을 반환하는 문제. 1부터 가장 심사가 오래걸리는 사람 * 심사관의 수 + 1까지 이분탐색을 하였다. 이분탐색을 하며 mid와 모든 심사관들을 기준으로 몇 명을 심사할 수 있는 지 정한 후, n명 이상 심사를 할 수 있을 때 answer 변수를 mid 값으로 설정 후, end의 값을 mid - 1로 설정 후 재탐색하였다. n명을 심사할 수 없는 겨우 start 값을 mid + 1하여 재탐색하도록 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">solution</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> times<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    answer <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line">    length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span>
</span><span class="code-line">    start<span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token builtin">max</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">while</span> start <span class="token operator">&#x3C;=</span> end<span class="token punctuation">:</span>
</span><span class="code-line">        mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
</span><span class="code-line">
</span><span class="code-line">        count <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">        <span class="token keyword">for</span> time <span class="token keyword">in</span> times<span class="token punctuation">:</span>
</span><span class="code-line">            count <span class="token operator">+=</span> mid <span class="token operator">//</span> time
</span><span class="code-line">            <span class="token keyword">if</span> count <span class="token operator">>=</span> n<span class="token punctuation">:</span> <span class="token keyword">break</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">if</span> count <span class="token operator">>=</span> n<span class="token punctuation">:</span>
</span><span class="code-line">            answer <span class="token operator">=</span> mid
</span><span class="code-line">            end <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span> start <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> answer
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-카펫 - Python]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-카펫-Python</link>
    <pubDate>2021-03-12</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-카펫-Python</guid>
    <description>
    <![CDATA[프로그래머스-카펫-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>문제의 그림과 같은 격자 모양 카펫이 있을 때, 갈색과 노란색의 수를 통해 전체 카펫의 크기를 반환하는 문제. 가로 크기에 대해서 갈색과 노란색을 합한 수부터 3까지 반복을 한다. 전체수에 가로 크기를 나눈 값이 세로가 되며, 주어진 노란색 타일의 수와 <code>(x-2)*(y-2)</code>값을 비교하여 맞을 시 [x, y]를 반환하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">solution</span><span class="token punctuation">(</span>brown<span class="token punctuation">,</span> yellow<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    total <span class="token operator">=</span> brown <span class="token operator">+</span> yellow
</span><span class="code-line">    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>total<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> total <span class="token operator">%</span> x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">            y <span class="token operator">=</span> total <span class="token operator">//</span> x
</span><span class="code-line">            <span class="token keyword">if</span> yellow <span class="token operator">==</span> <span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>y<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">                <span class="token keyword">return</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-쿼드압축후개수세기 - Python]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-쿼드압축후개수세기-Python</link>
    <pubDate>2021-03-12</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-쿼드압축후개수세기-Python</guid>
    <description>
    <![CDATA[프로그래머스-쿼드압축후개수세기-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>0과 1로 이루어진 2의 n승 크기의 2차원 배열이 있다. 이 때 쿼드 트리와 같은 방식으로 압축할 때, 0과 1의 수를 반환하는 문제. 시작 y, x 좌표와 크기를 갖는 함수를 재귀적으로 사용하여 풀었다. 크기가 1일 때는 해당 좌표의 값에 따라 추가, 아닐 시 첫 번째 값과 해당 크기의 모든 요소와 비교하여 모두 같을 시 값에 따라 CBR 형식으로 값을 바꿈, 하나라도 다를 시 사이즈를 반으로 줄여 재귀적으로 탐색하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">solution</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>startY<span class="token punctuation">,</span> startX<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> size <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">            answer<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>startY<span class="token punctuation">]</span><span class="token punctuation">[</span>startX<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">            <span class="token keyword">return</span>
</span><span class="code-line">
</span><span class="code-line">        temp_graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">        <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>startY<span class="token punctuation">,</span> startY<span class="token operator">+</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            temp_graph<span class="token punctuation">.</span>append<span class="token punctuation">(</span>arr<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>startX<span class="token punctuation">:</span>startX<span class="token operator">+</span>size<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">        first_ele <span class="token operator">=</span> temp_graph<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</span><span class="code-line">        <span class="token keyword">for</span> temp_l <span class="token keyword">in</span> temp_graph<span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">for</span> temp_ele <span class="token keyword">in</span> temp_l<span class="token punctuation">:</span>
</span><span class="code-line">                <span class="token keyword">if</span> temp_ele <span class="token operator">!=</span> first_ele<span class="token punctuation">:</span>
</span><span class="code-line">                    half <span class="token operator">=</span> size <span class="token operator">//</span> <span class="token number">2</span>
</span><span class="code-line">                    search<span class="token punctuation">(</span>startY<span class="token punctuation">,</span> startX<span class="token punctuation">,</span> half<span class="token punctuation">)</span>
</span><span class="code-line">                    search<span class="token punctuation">(</span>startY<span class="token punctuation">,</span> startX<span class="token operator">+</span>half<span class="token punctuation">,</span> half<span class="token punctuation">)</span>
</span><span class="code-line">                    search<span class="token punctuation">(</span>startY<span class="token operator">+</span>half<span class="token punctuation">,</span> startX<span class="token punctuation">,</span> half<span class="token punctuation">)</span>
</span><span class="code-line">                    search<span class="token punctuation">(</span>startY<span class="token operator">+</span>half<span class="token punctuation">,</span> startX<span class="token operator">+</span>half<span class="token punctuation">,</span> half<span class="token punctuation">)</span>
</span><span class="code-line">                    <span class="token keyword">return</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">            answer<span class="token punctuation">[</span>first_ele<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">            <span class="token keyword">return</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">    length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
</span><span class="code-line">    answer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>
</span><span class="code-line">    search<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">return</span> answer
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-등굣길 - Python]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-등굣길-Python</link>
    <pubDate>2021-03-11</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-등굣길-Python</guid>
    <description>
    <![CDATA[프로그래머스-등굣길-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>m, n 크기의 2차원 배열이 있다. 가장 왼쪽 위의 좌표를 1, 1로 나타내며 방문할 수 없는 물웅덩이가 있는 곳의 좌표들이 주어질 때 오른쪽과 아래쪽으로만 움직여 집에서 학교까지 갈 수 있는 최단경로의 개수를 반환하는 문제. dp 방법으로 풀었으며 1, 1 좌표를 1로 만든 후, 물웅덩이는 배열에 -1로 저장한다. 그 후 반복문을 수행하며 시작 좌표일 때, 배열의 값이 -1일 때 0으로 바꾸고 컨티뉴하며 <code>dp[y][x] = (dp[y-1][x] + dp[y][x-1]) % 1000000007</code>다음 점화식을 수행하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">solution</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> puddles<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">    <span class="token keyword">for</span> px<span class="token punctuation">,</span> py <span class="token keyword">in</span> puddles<span class="token punctuation">:</span>
</span><span class="code-line">        dp<span class="token punctuation">[</span>py<span class="token punctuation">]</span><span class="token punctuation">[</span>px<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> y <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">and</span> x <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">                <span class="token keyword">continue</span>
</span><span class="code-line">            <span class="token keyword">if</span> dp<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">                dp<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">                <span class="token keyword">continue</span>
</span><span class="code-line">
</span><span class="code-line">            dp<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1000000007</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1300 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1300-Python</link>
    <pubDate>2021-03-10</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1300-Python</guid>
    <description>
    <![CDATA[BOJ-1300-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n, n 크기의 A 배열이 있다. A[i][j] = ixj 일 때, 해당 값을 일차원 배열에 넣었을 때 주어지는 수 k번 째 수를 구하는 문제. K번째 수는 K를 넘을 수 없기 때문에 1부터 k까지 이분탐색을 하여 풀었다. mid보다 작거나 같은 숫자들을 전부 찾아 수를 더해줌으로써 해당 수의 위치를 알 수 있다. 이분탐색의 방식은 알겠으나 어떤 문제를 어떻게 이분탐색을 적용시켜야되는 지가 너무 어렵다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">N<span class="token punctuation">,</span> K <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">start<span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> K
</span><span class="code-line"><span class="token keyword">while</span> start <span class="token operator">&#x3C;=</span> end<span class="token punctuation">:</span>
</span><span class="code-line">    mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
</span><span class="code-line">    temp <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> temp <span class="token operator">+=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>mid<span class="token operator">//</span>i<span class="token punctuation">,</span> N<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> temp <span class="token operator">>=</span> K<span class="token punctuation">:</span>
</span><span class="code-line">        answer <span class="token operator">=</span> mid
</span><span class="code-line">        end <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span> start <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-13308 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-13308-Python</link>
    <pubDate>2021-03-10</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-13308-Python</guid>
    <description>
    <![CDATA[BOJ-13308-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>N개의 도시가 있고 양방향의 M개의 도로가 있다. 그리고 모든 도시들은 1리터의 기름당 가격을 갖는 주유소를 보유하고 있다. 도로의 길이 1만큼 1리터의 기름을 쓸 때, 최소 비용으로 1번 도시부터 N번 도시까지 이동할 때의 비용을 출력하는 문제. 첫 번째 풀이는 힙을 이용한 다익스트라 방식으로 다음 주유소가 현재 주유소보다 비쌀 때 다음 주유소의 가격을 현재 주유소 값으로 변환(미리 주유)하며. 방문했던 곳의 비용을 계산하여 방문을 하도록 연산을 하였더니, 싼 주유소를 방문해 왕창 주유하고 다시 돌아가는 경우가 반례였다. 두 번째 풀이는 최소 비용을 저장하는 배열을 2차원으로, [주유소 가격][도시들]로 구성하였다. 또한 힙에 지금까지 방문했던 주유소 가격중 제일 싼 곳을 저장하여 해당 주유소 가격의 배열과 비교하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># def dijkstra():</span>
</span><span class="code-line"><span class="token comment">#     price4dist = [INF for _ in range(N+1)]</span>
</span><span class="code-line"><span class="token comment">#     # price4dist[1] = 0</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     q = []</span>
</span><span class="code-line"><span class="token comment">#     heapq.heappush(q, [0, 1])</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     while q:</span>
</span><span class="code-line"><span class="token comment">#         cnt, now = heapq.heappop(q)</span>
</span><span class="code-line"><span class="token comment">#         if cnt > price4dist[now]:</span>
</span><span class="code-line"><span class="token comment">#             continue</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#         for next, next_dist in graph[now]:</span>
</span><span class="code-line"><span class="token comment">#             next_price = (next_dist * price[now]) + cnt</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#             if price4dist[next] >= next_price:</span>
</span><span class="code-line"><span class="token comment">#                 if price[next] > price[now]:</span>
</span><span class="code-line"><span class="token comment">#                     price[next] = price[now]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#                 price4dist[next] = next_price</span>
</span><span class="code-line"><span class="token comment">#                 heapq.heappush(q, [next_price, next])</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     return price4dist</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token keyword">import</span> heapq
</span><span class="code-line">INF <span class="token operator">=</span> sys<span class="token punctuation">.</span>maxsize
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token comment"># 현재 위치, 현재까지 가장 싼 기름값</span>
</span><span class="code-line">    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>INF <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2501</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    q <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token comment"># 총 비용, 현재까지 가장 싼 주유소, 현재 위치</span>
</span><span class="code-line">    heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> price<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">        node <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>q<span class="token punctuation">)</span>
</span><span class="code-line">        here_cost <span class="token operator">=</span> node<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</span><span class="code-line">        here_min_oil <span class="token operator">=</span> node<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">        here <span class="token operator">=</span> node<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token comment"># 저장된 값이 현재 값보다 클 시</span>
</span><span class="code-line">        <span class="token keyword">if</span> here_cost <span class="token operator">></span> result<span class="token punctuation">[</span>here<span class="token punctuation">]</span><span class="token punctuation">[</span>here_min_oil<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">continue</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token comment"># 목적지에 도착 시</span>
</span><span class="code-line">        <span class="token keyword">if</span> here <span class="token operator">==</span> N<span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">return</span> here_cost
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">for</span> there<span class="token punctuation">,</span> dist <span class="token keyword">in</span> graph<span class="token punctuation">[</span>here<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token comment"># 현재까지 가장 싼 주유소에서 기름을 넣은 것으로 계산</span>
</span><span class="code-line">            there_cost <span class="token operator">=</span> here_cost <span class="token operator">+</span> <span class="token punctuation">(</span>dist <span class="token operator">*</span> here_min_oil<span class="token punctuation">)</span>
</span><span class="code-line">            <span class="token comment"># 가장 싼 주유소 갱신</span>
</span><span class="code-line">            there_min_oil <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>here_min_oil<span class="token punctuation">,</span> price<span class="token punctuation">[</span>there<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">            <span class="token comment"># 현재 저장된 값보다 갱신될 값이 작을 시</span>
</span><span class="code-line">            <span class="token keyword">if</span> result<span class="token punctuation">[</span>there<span class="token punctuation">]</span><span class="token punctuation">[</span>there_min_oil<span class="token punctuation">]</span> <span class="token operator">></span> there_cost<span class="token punctuation">:</span>
</span><span class="code-line">                result<span class="token punctuation">[</span>there<span class="token punctuation">]</span><span class="token punctuation">[</span>there_min_oil<span class="token punctuation">]</span> <span class="token operator">=</span> there_cost
</span><span class="code-line">                heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token punctuation">[</span>there_cost<span class="token punctuation">,</span> there_min_oil<span class="token punctuation">,</span> there<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">N<span class="token punctuation">,</span> M <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">price <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">{</span>i<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    s<span class="token punctuation">,</span> e<span class="token punctuation">,</span> w <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    graph<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>e<span class="token punctuation">,</span> w<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    graph<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>s<span class="token punctuation">,</span> w<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>dijkstra<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-20040 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-20040-Python</link>
    <pubDate>2021-03-10</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-20040-Python</guid>
    <description>
    <![CDATA[BOJ-20040-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>문제를 해석할 시 n개의 정점, m개의 간선이 있다. 해당 트리가 사이클이 되는 간선의 순서를 출력하는 문제. 분리집합을 이용하여 풀었다. 각 정점의 부모를 저장하는 배열을 n크기로 만들어 매 간선마다 부모 노드를 확인한 후, 부모 노드가 같을 시 해당 간선의 순서를 출력, 아닐 시 union하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> node <span class="token operator">==</span> parents<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> node
</span><span class="code-line">    p <span class="token operator">=</span> find<span class="token punctuation">(</span>parents<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    parents<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> p
</span><span class="code-line">    <span class="token keyword">return</span> p
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">union</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> a <span class="token operator">&#x3C;</span> b<span class="token punctuation">:</span>
</span><span class="code-line">        parents<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> a
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        parents<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> b
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">parents <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">isCycle <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> cnt <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span>find<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span>cnt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">        exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line">    union<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-소수찾기 - Python]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-소수찾기-Python</link>
    <pubDate>2021-03-09</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-소수찾기-Python</guid>
    <description>
    <![CDATA[프로그래머스-소수찾기-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>한자리 숫자가 적힌 종이 조각이 흩어져있다. 흩어진 종지 조각을 붙여 소수를 몇 개 만들 수 있는 지 반환하는 문제. 주어지는 종이 조각, 즉 문자열을 기준으로 백트래킹 방법을 이용해 모든 경우의 수들을 set 자료형을 이용해 중복없이 확인하였다. 그 중 제일 큰 수를 이용하여 에라토스테네스 체 방법을 이용해 해당 수 까지의 소수는 False로 저장되는 배열을 만들었다. set에 들어있는 수들이 소수일 때 정수형 변수 값을 늘려 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">solution</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">def</span> <span class="token function">bt</span><span class="token punctuation">(</span>depth<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> number<span class="token punctuation">:</span> number_set<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">if</span> depth <span class="token operator">==</span> length<span class="token punctuation">:</span> <span class="token keyword">return</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> <span class="token keyword">not</span> visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">                number<span class="token punctuation">.</span>append<span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">                visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">
</span><span class="code-line">                bt<span class="token punctuation">(</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">                number<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">                visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">def</span> <span class="token function">sieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        is_prime<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>
</span><span class="code-line">        is_prime<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>max_num <span class="token operator">**</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> is_prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">                <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span>i<span class="token punctuation">,</span> max_num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">                    is_prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>
</span><span class="code-line">
</span><span class="code-line">    length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span>
</span><span class="code-line">    visit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    number_set <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">    number <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">    bt<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    max_num <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>number_set<span class="token punctuation">)</span>
</span><span class="code-line">    is_prime <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">True</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>max_num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    sieve<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    ans <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    <span class="token keyword">for</span> n <span class="token keyword">in</span> number_set<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> is_prime<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">:</span> ans <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> ans
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-위장 - Python]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-위장-Python</link>
    <pubDate>2021-03-09</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-위장-Python</guid>
    <description>
    <![CDATA[프로그래머스-위장-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>옷의 정보를 담은 2차원 배열이 주어진다. 해당 배열은 옷의 이름, 종류로 이루어져 있다. 최소 한 개의 의상을 선택하는 서로 다른 옷의 조합의 수를 반환하는 문제. 같은 이름을 갖는 의상이 존재하지 않기 때문에 옷의 종류별로 딕셔너리를 이용하여 수를 세어 주었다. 그 후 옷 종류마다 +1 한 값을 계속 곱해주어 조합의 수를 찾은 후, 하나도 안입은 경우를 하나 뺀 값을 반환하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">solution</span><span class="token punctuation">(</span>clothes<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    graph <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token keyword">for</span> cloth <span class="token keyword">in</span> clothes<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> cloth<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">in</span> graph<span class="token punctuation">:</span> graph<span class="token punctuation">[</span>cloth<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span> graph<span class="token punctuation">[</span>cloth<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">    ans <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">    <span class="token keyword">for</span> key <span class="token keyword">in</span> graph<span class="token punctuation">:</span>
</span><span class="code-line">        ans <span class="token operator">=</span> ans <span class="token operator">*</span> <span class="token punctuation">(</span>graph<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">return</span> ans <span class="token operator">-</span> <span class="token number">1</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-조이스틱 - Python]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-조이스틱-Python</link>
    <pubDate>2021-03-09</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-조이스틱-Python</guid>
    <description>
    <![CDATA[프로그래머스-조이스틱-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>맨 처음 A로만 이루어진 문자열이 있다. 해당 문자열을 주어진 문자열로 바꿀 때, 다음 알파벳, 이전 알파벳, 커서 왼쪽으로 이동, 오른쪽으로 이동의 명령이 가능할 때 명령의 최솟값을 출력하는 문제. 첫 풀이는 모든 문자에 대해서 앞으로 이동했을 때와 뒤로 이동했을 때의 값을 비교해서 가장 작은 값을 할당하였다. 그 후에 왼쪽으로 한칸씩 이동하며 남은 칸의 수가 A로만 이루어져 있는 지를 확인해서 이동하는 값, 오른쪽으로 한칸씩 이동하며 이동한 값 중 작은 값을 더해 풀었다. 이렇게 풀었을 때 프로그래머스 상에서 마지막 반례만 틀렸습니다 결과가 나오게 되는데 "BBAAAAB"와 같은 왼쪽으로 가고 오른쪽으로 다시가야되는 경우가 반례인 것 같다. 다른 사람의 풀이를 참고해서 왼쪽, 오른쪽의 값이 0일 때까지 값을 더해서 더욱 작은 값으로 이동하여 위 반례를 해결하였다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># def solution(name):</span>
</span><span class="code-line"><span class="token comment">#     def isAllZero(start, end):</span>
</span><span class="code-line"><span class="token comment">#         for i in range(start, end):</span>
</span><span class="code-line"><span class="token comment">#             if changes[i] != 0: return False</span>
</span><span class="code-line"><span class="token comment">#         return True</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     length = len(name)</span>
</span><span class="code-line"><span class="token comment">#     changes = [0 for _ in range(length)]</span>
</span><span class="code-line"><span class="token comment">#     for i in range(length):</span>
</span><span class="code-line"><span class="token comment">#         n = ord(name[i])</span>
</span><span class="code-line"><span class="token comment">#         t1 = n - 65</span>
</span><span class="code-line"><span class="token comment">#         t2 = abs(90 - n + 1)</span>
</span><span class="code-line"><span class="token comment">#         changes[i] = min(t1, t2)</span>
</span><span class="code-line"><span class="token comment">#     s = sum(changes)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     search_left = 0</span>
</span><span class="code-line"><span class="token comment">#     for i in range(length):</span>
</span><span class="code-line"><span class="token comment">#         if isAllZero(i, length): break</span>
</span><span class="code-line"><span class="token comment">#         search_left += 1</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     search_right = 0</span>
</span><span class="code-line"><span class="token comment">#     for i in range(length, -1, -1):</span>
</span><span class="code-line"><span class="token comment">#         if isAllZero(1, i): break</span>
</span><span class="code-line"><span class="token comment">#         search_right += 1</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     print(s)</span>
</span><span class="code-line"><span class="token comment">#     print(search_left)</span>
</span><span class="code-line"><span class="token comment">#     print(search_right)</span>
</span><span class="code-line"><span class="token comment">#     return min(search_left, search_right) + s</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     # print(ord("A")) 65</span>
</span><span class="code-line"><span class="token comment">#     # print(ord("X")) 90</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># n = "BBAAAAAAAAB"</span>
</span><span class="code-line"><span class="token comment"># print(solution(n))</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">solution</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
</span><span class="code-line">    changes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        n <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">        t1 <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">65</span>
</span><span class="code-line">        t2 <span class="token operator">=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span><span class="token number">90</span> <span class="token operator">-</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">        changes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span> t2<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    index <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    answer <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
</span><span class="code-line">        answer <span class="token operator">+=</span> changes<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
</span><span class="code-line">        changes<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">        <span class="token keyword">if</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>changes<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> answer
</span><span class="code-line">
</span><span class="code-line">        left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span>
</span><span class="code-line">        <span class="token keyword">while</span> changes<span class="token punctuation">[</span>index <span class="token operator">-</span> left<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">            left <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">        <span class="token keyword">while</span> changes<span class="token punctuation">[</span>index <span class="token operator">+</span> right<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">            right <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">        answer <span class="token operator">+=</span> left <span class="token keyword">if</span> left <span class="token operator">&#x3C;</span> right <span class="token keyword">else</span> right
</span><span class="code-line">        index <span class="token operator">+=</span> <span class="token operator">-</span>left <span class="token keyword">if</span> left <span class="token operator">&#x3C;</span> right <span class="token keyword">else</span> right
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1516 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1516-Python</link>
    <pubDate>2021-03-08</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1516-Python</guid>
    <description>
    <![CDATA[BOJ-1516-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 건물을 짓는다. 이 때 어떤 건물은 짓기 위해서 다른 건물을 먼저 지어야 할 수도 있다. 이 때 각 건물마다 짓는데 걸리는 최소시간을 출력하는 문제. deque를 사용한 위상정렬 방법을 이용해 풀었다. 진입차수를 줄이는 과정해서 현재 선수 건물과 현재 건물의 값을 더한 것과 저번 선수 건물과 더한 값 혹은 자신의 값을 비교해 큰 것을 할당하는 점화식 <code>answer[next] = max(answer[next], answer[now] + times[next])</code>을 사용하여 풀었다</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">tree <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">times <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">answer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">inDegree <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    inputs <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    times<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> inputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</span><span class="code-line">    answer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> inputs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">if</span> inputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">continue</span>
</span><span class="code-line">    <span class="token keyword">for</span> before <span class="token keyword">in</span> inputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> before <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token keyword">break</span>
</span><span class="code-line">        tree<span class="token punctuation">[</span>before<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</span><span class="code-line">        inDegree<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">q <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> inDegree<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">        q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">    now <span class="token operator">=</span> q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">for</span> <span class="token builtin">next</span> <span class="token keyword">in</span> tree<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">        inDegree<span class="token punctuation">[</span><span class="token builtin">next</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>
</span><span class="code-line">        answer<span class="token punctuation">[</span><span class="token builtin">next</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>answer<span class="token punctuation">[</span><span class="token builtin">next</span><span class="token punctuation">]</span><span class="token punctuation">,</span> answer<span class="token punctuation">[</span>now<span class="token punctuation">]</span> <span class="token operator">+</span> times<span class="token punctuation">[</span><span class="token builtin">next</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">if</span> inDegree<span class="token punctuation">[</span><span class="token builtin">next</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">            q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token punctuation">[</span><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span> <span class="token keyword">for</span> ans <span class="token keyword">in</span> answer<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2565 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2565-Python</link>
    <pubDate>2021-03-08</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2565-Python</guid>
    <description>
    <![CDATA[BOJ-2565-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>두 개의 전봇대에 N개의 전깃줄이 있다. 각 전깃줄마다 두 전봇대에 연결되는 위치의 번호가 주어질 때, 남아있는 모든 전깃줄이 서로 교차하지 않게 하기 위해 없애야 하는 전깃줄의 최소 개수를 구하는 문제. 첫번째 전봇대에 붙은 위치를 기준으로 정렬 후, 가장 긴 증가하는 부분 수열을 구하였다. 그리고 그 수를 n에 뺀 값을 출력하여 풀었다. 정렬하였기 때문에 증가하는 부분 수열이 겹치지 않는 전깃줄의 수이기 때문이다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> graph<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-여행경로 - Python]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-여행경로-Python</link>
    <pubDate>2021-03-08</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-여행경로-Python</guid>
    <description>
    <![CDATA[프로그래머스-여행경로-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>주어진 항공권을 모두 이용하여 여행경로를 짤려고한다. 항공권 정보가 담긴 2차원 배열이 주어질 때, 방문하는 공항 경로를 배열에 담아 반환하는 문제. 첫 번째 풀이는 알파벳 순서대로 방문해야되는 조건을 이용해 heap 연산을 사용하여 풀었다. 결과는 테스트 케이스 4개중 두개를 맞췄으며, 반례는 출발지와 도착지가 같은 항공권이 여러개 있을 때 였다. 두 번째 풀이는 스택을 stack을 이용한 dfs로 풀었다. 스택의 가장 위 값을 기준으로 그래프에 존재하며, 남은 항공권이 있을 시, 스택에 추가. 아닐 시 방문정보를 저장하는 배열에 스택의 가장 위 값을 pop한 후, 뒤집어서 반환하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># import heapq</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># def solution(tickets):</span>
</span><span class="code-line"><span class="token comment">#     graph = {i[0]: [] for i in tickets}</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     for ticket in tickets:</span>
</span><span class="code-line"><span class="token comment">#         fr = ticket[0]</span>
</span><span class="code-line"><span class="token comment">#         to = ticket[1]</span>
</span><span class="code-line"><span class="token comment">#         heapq.heappush(graph[fr], to)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     q = ['ICN']</span>
</span><span class="code-line"><span class="token comment">#     answer = []</span>
</span><span class="code-line"><span class="token comment">#     while q:</span>
</span><span class="code-line"><span class="token comment">#         now = q.pop()</span>
</span><span class="code-line"><span class="token comment">#         answer.append(now)</span>
</span><span class="code-line"><span class="token comment">#         if now in graph and graph[now]:</span>
</span><span class="code-line"><span class="token comment">#             next = heapq.heappop(graph[now])</span>
</span><span class="code-line"><span class="token comment">#             q.append(next)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     return answer</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">solution</span><span class="token punctuation">(</span>tickets<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    graph <span class="token operator">=</span> <span class="token punctuation">{</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> tickets<span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> ticket <span class="token keyword">in</span> tickets<span class="token punctuation">:</span> graph<span class="token punctuation">[</span>ticket<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>ticket<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">for</span> k <span class="token keyword">in</span> graph<span class="token punctuation">:</span> graph<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ICN'</span><span class="token punctuation">]</span>
</span><span class="code-line">    answer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">while</span> stack<span class="token punctuation">:</span>
</span><span class="code-line">        top <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">        <span class="token keyword">if</span> top <span class="token keyword">in</span> graph <span class="token keyword">and</span> graph<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">:</span> stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>graph<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span> answer<span class="token punctuation">.</span>append<span class="token punctuation">(</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> answer<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-완주하지못한선수 - Python]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-완주하지못한선수-Python</link>
    <pubDate>2021-03-08</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-완주하지못한선수-Python</guid>
    <description>
    <![CDATA[프로그래머스-완주하지못한선수-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>마라톤에 참여한 사람의 이름, 완주한 사람의 이름으로 이루어진 두 배열이 주어질 때 완주하지 못한 사람을 반환하는 문제. 동명이인이 있는 경우가 있어 딕셔너리 자료형을 이용해 value 값을 정수형 변수로 저장, 동일 시 증가하였다. 완주자에 대해서 값을 1씩 뺀 후, 값이 1 이상인 key 값을 반환하여 풀었다. 다른 사람의 풀이를 참고하여 정답이 한명인 경우인 것을 이용, 두 배열을 정렬하여 다를 시 반환하는 방법으로도 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">solution</span><span class="token punctuation">(</span>part<span class="token punctuation">,</span> comp<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token builtin">dict</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token keyword">for</span> per <span class="token keyword">in</span> part<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> per <span class="token keyword">in</span> <span class="token builtin">dict</span><span class="token punctuation">:</span> <span class="token builtin">dict</span><span class="token punctuation">[</span>per<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token builtin">dict</span><span class="token punctuation">[</span>per<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> per <span class="token keyword">in</span> comp<span class="token punctuation">:</span> <span class="token builtin">dict</span><span class="token punctuation">[</span>per<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token builtin">dict</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> v <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">return</span> k
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># def solution(part, comp):</span>
</span><span class="code-line"><span class="token comment">#     part.sort()</span>
</span><span class="code-line"><span class="token comment">#     comp.sort()</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     for i in range(len(part)):</span>
</span><span class="code-line"><span class="token comment">#         if part[i] != comp[i]:</span>
</span><span class="code-line"><span class="token comment">#             return part[i]</span>
</span><span class="code-line"><span class="token comment">#     return part[-1]</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-주식가격 - Python]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-주식가격-Python</link>
    <pubDate>2021-03-08</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-주식가격-Python</guid>
    <description>
    <![CDATA[프로그래머스-주식가격-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>초 단위로 기록된 주식가격이 담긴 배열이 주어진다. 가격이 떨어지지 않은 기간은 몇 초인지를 반환하는 문제. deque를 이용해 popleft하여 남은 값들과 비교하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">solution</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    prices <span class="token operator">=</span> deque<span class="token punctuation">(</span>prices<span class="token punctuation">)</span>
</span><span class="code-line">    answer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">while</span> prices<span class="token punctuation">:</span>
</span><span class="code-line">        now <span class="token operator">=</span> prices<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">        cnt <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">        <span class="token keyword">for</span> <span class="token builtin">next</span> <span class="token keyword">in</span> prices<span class="token punctuation">:</span>
</span><span class="code-line">            cnt <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">            <span class="token keyword">if</span> now <span class="token operator">></span> <span class="token builtin">next</span><span class="token punctuation">:</span> <span class="token keyword">break</span>
</span><span class="code-line">        answer<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cnt<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> answer
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1766 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1766-Python</link>
    <pubDate>2021-03-07</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1766-Python</guid>
    <description>
    <![CDATA[BOJ-1766-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>숫자가 작을 수록 쉬운 N개의 문제와, 먼저 풀면 쉽게 풀 수 있는 관계 M개가 주어진다. 이 때 모든 문제를 풀어야 하며, 먼저 푸는 것이 좋은 문제가 있는 것은 반드시 먼저 푸는 것이 좋은 문제를 먼저 풀어야하며, 가능하면 쉬운 문제부터 풀어야되는 조건을 지켜 N개의 문제를 풀 순서를 출력하는 문제. 위상정렬 방법을 이용하여 풀었으며, 첫 번째 접근은 deque의 appendleft를 이용하여 선행 문제를 풀었을 때 후행 문제를 바로 풀도록 하였으나 WA를 받게 되었다. 그 후 heap 연산을 이용하여 heappop, heappush를 사용해 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> heapq
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">tree <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">inDegree <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    before<span class="token punctuation">,</span> after <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    tree<span class="token punctuation">[</span>before<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>after<span class="token punctuation">)</span>
</span><span class="code-line">    inDegree<span class="token punctuation">[</span>after<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">q <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> inDegree<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">        heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">    now <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>q<span class="token punctuation">)</span>
</span><span class="code-line">    ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>now<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> <span class="token builtin">next</span> <span class="token keyword">in</span> tree<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">        inDegree<span class="token punctuation">[</span><span class="token builtin">next</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>
</span><span class="code-line">        <span class="token keyword">if</span> inDegree<span class="token punctuation">[</span><span class="token builtin">next</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">            heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-17845 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-17845-Python</link>
    <pubDate>2021-03-07</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-17845-Python</guid>
    <description>
    <![CDATA[BOJ-17845-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>공부할 수 있는 시간, 공부할 수 있는 과목의 수가 주어진다. 그 이후에 과목별로 과목의 중요도, 필요한 공부시간이 주어질 때 최대가 되는 중요도를 출력하는 문제. 배낭 형식의 문제로, k에 대해서 모든 과목을, time에 대해서 모든 시간을 반복하였다. 담을 수 없을 때 저번 반복에서 계산한 동일 시간의 최대치를, 담을 수 있을 때 저번 반복에서 계산한 동일 시간의 최대치와, 현재 중요도 + 저번 물건의 반복 값에서의 시간 - 현재 과목의 시간을 뺀 최대값을 더하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">N<span class="token punctuation">,</span> K <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>K<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">impos <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">times <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>K<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    i<span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    impos<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</span><span class="code-line">    times<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>K<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">
</span><span class="code-line">    now_impo <span class="token operator">=</span> impos<span class="token punctuation">[</span>k<span class="token punctuation">]</span>
</span><span class="code-line">    now_time <span class="token operator">=</span> times<span class="token punctuation">[</span>k<span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">for</span> time <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> time <span class="token operator">&#x3C;</span> now_time<span class="token punctuation">:</span>
</span><span class="code-line">            dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>time<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>time<span class="token punctuation">]</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">            dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>time<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>time<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>time<span class="token operator">-</span>now_time<span class="token punctuation">]</span> <span class="token operator">+</span> now_impo<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-단어변환 - Python]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-단어변환-Python</link>
    <pubDate>2021-03-07</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-단어변환-Python</guid>
    <description>
    <![CDATA[프로그래머스-단어변환-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>두 개의 단어 begin, target과 단어의 집합 words가 있다. 한 번에 한 개의 알파벳만 바꿀 수 있으며, words에 있는 단어로만 변환할 수 있는 조건이 있을 때, 최소 몇 단계의 과정을 거쳐 begin을 traget으로 변환할 수 있는지 반환하는 문제. 모든 단어에 대해서 값을 비교하여 한개만 다른 것들을 모아 놓은 인접리스트 그래프를 만들었다. 그 후 단계를 저장하는 dist 역시 딕셔너리 자료형을 이용했으며 해당 값을 비교하여 bfs 연산을 통해 값을 반환, 초기 설정된 값과 동일하거나 딕셔너리에 존재하지 않을 시 0을 반환하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">make_graph</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> words<span class="token punctuation">,</span> words_length<span class="token punctuation">,</span> word_length<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> word_index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>words_length<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">for</span> compare_word_index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>words_length<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> word_index <span class="token operator">==</span> compare_word_index<span class="token punctuation">:</span>
</span><span class="code-line">                <span class="token keyword">continue</span>
</span><span class="code-line">
</span><span class="code-line">            cnt <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">            word <span class="token operator">=</span> words<span class="token punctuation">[</span>word_index<span class="token punctuation">]</span>
</span><span class="code-line">            compare_word <span class="token operator">=</span> words<span class="token punctuation">[</span>compare_word_index<span class="token punctuation">]</span>
</span><span class="code-line">            <span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>word_length<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">                <span class="token keyword">if</span> word<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">!=</span> compare_word<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">                    cnt <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">                <span class="token keyword">if</span> cnt <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">                    <span class="token keyword">break</span>
</span><span class="code-line">            <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">                graph<span class="token punctuation">[</span>word<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>compare_word<span class="token punctuation">)</span>
</span><span class="code-line">                graph<span class="token punctuation">[</span>compare_word<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>word<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">solution</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span> target<span class="token punctuation">,</span> words<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    words<span class="token punctuation">.</span>append<span class="token punctuation">(</span>begin<span class="token punctuation">)</span>
</span><span class="code-line">    word_length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>begin<span class="token punctuation">)</span>
</span><span class="code-line">    words_length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span>
</span><span class="code-line">    graph <span class="token operator">=</span> <span class="token punctuation">{</span>i<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> words<span class="token punctuation">}</span>
</span><span class="code-line">    dist <span class="token operator">=</span> <span class="token punctuation">{</span>i<span class="token punctuation">:</span> words_length <span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> words<span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">    make_graph<span class="token punctuation">(</span>graph<span class="token punctuation">,</span> words<span class="token punctuation">,</span> words_length<span class="token punctuation">,</span> word_length<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    q <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">[</span>begin<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    dist<span class="token punctuation">[</span>begin<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    <span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">        word_now <span class="token operator">=</span> q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">for</span> word_next <span class="token keyword">in</span> graph<span class="token punctuation">[</span>word_now<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> dist<span class="token punctuation">[</span>word_next<span class="token punctuation">]</span> <span class="token operator">&#x3C;</span> dist<span class="token punctuation">[</span>word_now<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">                <span class="token keyword">continue</span>
</span><span class="code-line">
</span><span class="code-line">            dist<span class="token punctuation">[</span>word_next<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>word_now<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>
</span><span class="code-line">            q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>word_next<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">if</span> target <span class="token keyword">in</span> dist<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> dist<span class="token punctuation">[</span>target<span class="token punctuation">]</span> <span class="token keyword">if</span> dist<span class="token punctuation">[</span>target<span class="token punctuation">]</span> <span class="token operator">!=</span> words_length <span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> <span class="token number">0</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1946 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1946-Python</link>
    <pubDate>2021-03-06</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1946-Python</guid>
    <description>
    <![CDATA[BOJ-1946-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>지원자의 서류, 면접 성적을 입력받는다. 다른 모든 지원자와 비교했을 때 두 성적 중 적어도 하나가 다른 지원자보다 떨어지지 않는 자만 선발한다. 이 때 뽑을 수 있는 신입사원의 최대 인원수를 출력하는 문제. 첫 번째 풀이는 첫 번째 성적을 통해 정렬 후, 두 번째 성적과 비교하여 순위가 높은 지원자일 때 재설정, 낮은 지원자일 때 정수형 변수의 크기를 늘려 탈락자의 수를 세어 풀었다. 두 번째 풀이는 첫 번째 성적의 순위를 인자로 배열에 넣어 정렬하는 과정을 없애도록 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># import sys</span>
</span><span class="code-line"><span class="token comment"># input = sys.stdin.readline</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># for _ in range(int(input())):</span>
</span><span class="code-line"><span class="token comment">#     n = int(input())</span>
</span><span class="code-line"><span class="token comment">#     l = []</span>
</span><span class="code-line"><span class="token comment">#     for _ in range(n): l.append(list(map(int, input().split())))</span>
</span><span class="code-line"><span class="token comment">#     l.sort()</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     cnt = 0</span>
</span><span class="code-line"><span class="token comment">#     m = l[0][1]</span>
</span><span class="code-line"><span class="token comment">#     for i in range(1, n):</span>
</span><span class="code-line"><span class="token comment">#         if m > l[i][1]:</span>
</span><span class="code-line"><span class="token comment">#             m = l[i][1]</span>
</span><span class="code-line"><span class="token comment">#         else:</span>
</span><span class="code-line"><span class="token comment">#             cnt += 1</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     print(n-cnt)</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">        l<span class="token punctuation">[</span>a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> b
</span><span class="code-line">
</span><span class="code-line">    cnt <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    m <span class="token operator">=</span> l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> m <span class="token operator">></span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span> m <span class="token operator">=</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span> cnt <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token operator">-</span>cnt<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2252 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2252-Python</link>
    <pubDate>2021-03-06</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2252-Python</guid>
    <description>
    <![CDATA[BOJ-2252-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n명의 학생들을 키 순서대로 줄을 세울 때, 두 학생의 키를 비교하여 세울려고 한다. 일부 학생들의 키를 비교한 결과가 주어졌을 때 해당 결과를 출력하는 문제. 위상정렬을 이용하여 풀었다. 위상정렬이란 방향성을 가지는 그래프인 유향 그래프이자 사이클이 없는 그래프에서 사용할 수 있다. 진입차수 그리고 스택나 큐를 이용하여 구현할 수 있는데 해당 문제에서는 큐를 이용하여 구현하였다. 입력되는 비교 결과를 이용해 인접 리스트 형태의 그래프를 구현, 진입차수를 저장하였다. 진입차수가 0인 (제익 작은) 학생을 기준으로 q를 형성, popleft한 후 해당 학생보다 큰 학생들의 진입차수를 감소, 진입차수가 0이 되었을 때 q에 추가하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">tree <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment"># 트리</span>
</span><span class="code-line">indegree <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment"># 진입차수</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    small<span class="token punctuation">,</span> big <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    tree<span class="token punctuation">[</span>small<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>big<span class="token punctuation">)</span>
</span><span class="code-line">    indegree<span class="token punctuation">[</span>big<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span> <span class="token comment"># 진입차수 추가</span>
</span><span class="code-line">
</span><span class="code-line">q <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment"># 정답</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> indegree<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token comment"># 진입차수가 0인 (제일 작은) 정점 추가</span>
</span><span class="code-line">        q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">    now <span class="token operator">=</span> q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">    ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>now<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">for</span> <span class="token builtin">next</span> <span class="token keyword">in</span> tree<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment"># 현재 노드보다 큰 정점들</span>
</span><span class="code-line">        indegree<span class="token punctuation">[</span><span class="token builtin">next</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span> <span class="token comment"># 해동 노드의 진입차수를 줄임</span>
</span><span class="code-line">        <span class="token keyword">if</span> indegree<span class="token punctuation">[</span><span class="token builtin">next</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token comment"># 줄였을 때 0일 시, 큐에 추가</span>
</span><span class="code-line">            q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-N으로표현 - Python]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-N으로표현-Python</link>
    <pubDate>2021-03-06</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-N으로표현-Python</guid>
    <description>
    <![CDATA[프로그래머스-N으로표현-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>숫자 N과 number가 주어질 때, N과 사칙연산만 사용해서 표현 할 수 있는 방법 중 N 사용횟수의 최솟값을 반환하는 문제. 최솟값이 8보다 클 시 -1을 반환하기 때문에 1부터 7까지의 경우의 수만을 확인하였다. set 자료형을 이용하여 1부터 8까지 n이 이어붙어져 있는 수들로 이루어진 배열을 만들었다. 그 후 i에 대해서 1부터 7까지, j에 대해서 0부터 i까지 반복을 수행한다. i가 4일 시, 1로 만들 수 있는 수 + 3으로 만들 수 있는 수, 2 + 2, 3 + 1의 규칙을 이용하여 각 sets에 들어있는 요소들을 사칙연산한 후, 해당 sets에 들어있을 시 i를 반환, 반복 종료 시 -1을 반환하여 풀었다. <a href="https://gurumee92.tistory.com/164" target="_blank" rel="noopener noreferer">해당 게시물</a>을 참고하였다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">solution</span><span class="token punctuation">(</span>N<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> N <span class="token operator">==</span> number<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">    sets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        t <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span> <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">        sets<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">for</span> i_set <span class="token keyword">in</span> sets<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">                <span class="token keyword">for</span> j_set <span class="token keyword">in</span> sets<span class="token punctuation">[</span>i<span class="token operator">-</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">                    sets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>add<span class="token punctuation">(</span>i_set <span class="token operator">+</span> j_set<span class="token punctuation">)</span>
</span><span class="code-line">                    sets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>add<span class="token punctuation">(</span>i_set <span class="token operator">-</span> j_set<span class="token punctuation">)</span>
</span><span class="code-line">                    sets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>add<span class="token punctuation">(</span>i_set <span class="token operator">*</span> j_set<span class="token punctuation">)</span>
</span><span class="code-line">                    <span class="token keyword">if</span> j_set <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">                        sets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>add<span class="token punctuation">(</span>i_set <span class="token operator">//</span> j_set<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">if</span> number <span class="token keyword">in</span> sets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-정수삼각형 - Python]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-정수삼각형-Python</link>
    <pubDate>2021-03-06</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-정수삼각형-Python</guid>
    <description>
    <![CDATA[프로그래머스-정수삼각형-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>정수로 이루어진 삼각형의 정보가 담긴 배열이 매개변수로 주어질 때, 거쳐간 숫자의 최댓값을 반환하는 문제. 백준에서 비슷한 유형을 풀어보아 쉽게 풀었다. 첫 번째 접근은 백준에서 푼 것과 유사하게 삼각형을 직사각형 모양의 빈 곳은 0으로 이루어진 배열이 되도록 만들려고 했으나, 생각을 해보니 굳이 만들 필요가 없을 것 같아 주어진 배열을 이용하여 풀었다. y에 대해서 1부터 높이까지 반복을, x에 대해서 y+1까지 반복을 하였다. 높이에 따라 삼각형에 있는 정수의 수가 다르기 때문이다. x가 0이거나 y의 값과 같을 때 고려할 수가 하나이기 때문에 에외처리 하였으며, 다른 경우는 <code>t[y][x] = max(t[y-1][x-1], t[y-1][x]) + t[y][x]</code>의 점화식을 이용하였다. 배열의 마지막 값 중 제일 큰 것을 반환하여 풀었다</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">solution</span><span class="token punctuation">(</span>triangle<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    height <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>triangle<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">                triangle<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> triangle<span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span> triangle<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span>
</span><span class="code-line">            <span class="token keyword">elif</span> x <span class="token operator">==</span> y<span class="token punctuation">:</span>
</span><span class="code-line">                triangle<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> triangle<span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> triangle<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span>
</span><span class="code-line">            <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">                triangle<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>triangle<span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> triangle<span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> triangle<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token builtin">max</span><span class="token punctuation">(</span>triangle<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-3055 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-3055-Python</link>
    <pubDate>2021-03-05</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-3055-Python</guid>
    <description>
    <![CDATA[BOJ-3055-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>S, D, "*", ".", X로 이루어진 y, x 크기의 그래프가 주어진다. S와 D는 출발점과 도착점이고 "."은 빈 공간, X는 벽, "*"은 물이다. 물은 1초마다 상하좌우로 퍼지며 물이 퍼진 곳과 곧 퍼질 곳 (같은 초)에는 이동할 수 없다. S에서 D까지 가장 빨리 도착했을 때의 시간을 출력하는 문제. 그래프와 같은 크기의 물이 퍼지는 시간을 저장하며 기본 값을 XY값인 배열을 만들어 사용하였다. dfs 연산을 통해 물의 최단 이동시간을 저장하였다. 동일한 조건의 배열과 동일한 조건에 물이 퍼지는 시간보다 작을 때의 조건을 추가하여 S에서 이동하는 거리를 dfs 연산을 통해 저장하였다. 그 후 S에서 이동한 거리 중 D의 값이 XY일 때는 도착할 수 없음을, 아닐 시 해당 값을 출력하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">dire <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">water_move</span><span class="token punctuation">(</span>wdist<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">while</span> water<span class="token punctuation">:</span>
</span><span class="code-line">        y<span class="token punctuation">,</span> x <span class="token operator">=</span> water<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">        now_value <span class="token operator">=</span> wdist<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">for</span> ty<span class="token punctuation">,</span> tx <span class="token keyword">in</span> dire<span class="token punctuation">:</span>
</span><span class="code-line">            ny<span class="token punctuation">,</span> nx <span class="token operator">=</span> y <span class="token operator">+</span> ty<span class="token punctuation">,</span> x <span class="token operator">+</span> tx
</span><span class="code-line">            <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> ny <span class="token operator">&#x3C;</span> Y <span class="token keyword">and</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> nx <span class="token operator">&#x3C;</span> X<span class="token punctuation">:</span>
</span><span class="code-line">                <span class="token keyword">if</span> wdist<span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>nx<span class="token punctuation">]</span> <span class="token operator">></span> now_value <span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">and</span> graph<span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>nx<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"."</span><span class="token punctuation">:</span>
</span><span class="code-line">                    wdist<span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>nx<span class="token punctuation">]</span> <span class="token operator">=</span> now_value <span class="token operator">+</span> <span class="token number">1</span>
</span><span class="code-line">                    water<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>ny<span class="token punctuation">,</span> nx<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">dochi_move</span><span class="token punctuation">(</span>dist<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">while</span> dochi<span class="token punctuation">:</span>
</span><span class="code-line">        y<span class="token punctuation">,</span> x <span class="token operator">=</span> dochi<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">        now_value <span class="token operator">=</span> dist<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">for</span> ty<span class="token punctuation">,</span> tx <span class="token keyword">in</span> dire<span class="token punctuation">:</span>
</span><span class="code-line">            ny<span class="token punctuation">,</span> nx <span class="token operator">=</span> y <span class="token operator">+</span> ty<span class="token punctuation">,</span> x <span class="token operator">+</span> tx
</span><span class="code-line">            <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> ny <span class="token operator">&#x3C;</span> Y <span class="token keyword">and</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> nx <span class="token operator">&#x3C;</span> X<span class="token punctuation">:</span>
</span><span class="code-line">                <span class="token keyword">if</span> wdist<span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>nx<span class="token punctuation">]</span> <span class="token operator">></span> now_value <span class="token operator">+</span> 1and <span class="token punctuation">(</span>graph<span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>nx<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"."</span> <span class="token keyword">or</span> graph<span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>nx<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">                    <span class="token keyword">if</span> dist<span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>nx<span class="token punctuation">]</span> <span class="token operator">></span> now_value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">                        dist<span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>nx<span class="token punctuation">]</span> <span class="token operator">=</span> now_value <span class="token operator">+</span> <span class="token number">1</span>
</span><span class="code-line">                        dochi<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>ny<span class="token punctuation">,</span> nx<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">Y<span class="token punctuation">,</span> X <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">wdist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>X<span class="token operator">*</span>Y <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">dist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>X<span class="token operator">*</span>Y <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">water <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">dochi <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> graph<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'*'</span><span class="token punctuation">:</span>
</span><span class="code-line">            water<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>y<span class="token punctuation">,</span> x<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">            wdist<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">        <span class="token keyword">elif</span> graph<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'S'</span><span class="token punctuation">:</span>
</span><span class="code-line">            dochi<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>y<span class="token punctuation">,</span> x<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">            dist<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">        <span class="token keyword">elif</span> graph<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'D'</span><span class="token punctuation">:</span>
</span><span class="code-line">            endY<span class="token punctuation">,</span> endX <span class="token operator">=</span> y<span class="token punctuation">,</span> x
</span><span class="code-line">
</span><span class="code-line">water_move<span class="token punctuation">(</span>wdist<span class="token punctuation">)</span>
</span><span class="code-line">dochi_move<span class="token punctuation">(</span>dist<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"KAKTUS"</span> <span class="token keyword">if</span> dist<span class="token punctuation">[</span>endY<span class="token punctuation">]</span><span class="token punctuation">[</span>endX<span class="token punctuation">]</span> <span class="token operator">==</span> Y <span class="token operator">*</span> X <span class="token keyword">else</span> dist<span class="token punctuation">[</span>endY<span class="token punctuation">]</span><span class="token punctuation">[</span>endX<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-4803 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-4803-Python</link>
    <pubDate>2021-03-05</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-4803-Python</guid>
    <description>
    <![CDATA[BOJ-4803-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>그래프의 정점의 수, 간선의 수가 주어진다. 그 후 간선을 잇는 두 정점이 주어진다. 해당 그래프에서 사이클이 없는 트리의 개수를 구하는 문제. 두 풀이 모두 유니온 파인드 방법을 이용하여 풀었다. 첫 번째 풀이는 유니온 시 두 부모 노드가 같을 시 해당 부모 노드의 값을 모두 0으로 바꿔주어 트리인 것을 처리할려했다. 그대로 제출했더니 RecursionError를, setrecursionlimit를 설정하여 제출시 메모리초과 결과를 받았다. 질문을 통해 알게 된 사실인데 0이 속한 그룹의 루트가 0이라는 보장이 없기 때문에 루프가 생기는 문제가 있었다. 사이클인 트리와 연결되는 다른 노드.. 가 있을 때 정도라고 이해했다. 두 번째 풀이는 해당 부모노드의 값이 사이클인 지 저장하는 배열을 이용하여 풀었다. 유니온 시 더욱 작은 값을 부모 노드에 저장하고, 큰 노드의 값이 사이클이면 작은 노드의 값도 사이클로 할당하였다. 또한 간선이 잇는 노드를 입력받을 시 두 노드의 부모 노드가 같을 시 사이클로 저장하였다. 출력시 사이클이지 않은 값을 세어 주었으며, 사이클이 아닐 시 해당 노드를 사이클로 다시 판명하여 중복되는 것을 막았다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># import sys</span>
</span><span class="code-line"><span class="token comment"># input = sys.stdin.readline</span>
</span><span class="code-line"><span class="token comment"># sys.setrecursionlimit(10**9)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># def find(node):</span>
</span><span class="code-line"><span class="token comment">#     if node == parents[node]:</span>
</span><span class="code-line"><span class="token comment">#         return node</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     p = find(parents[node])</span>
</span><span class="code-line"><span class="token comment">#     parents[node] = p</span>
</span><span class="code-line"><span class="token comment">#     return p</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># def union(a, b):</span>
</span><span class="code-line"><span class="token comment">#     pa, pb = find(a), find(b)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     if pa != pb:</span>
</span><span class="code-line"><span class="token comment">#         parents[pb] = pa</span>
</span><span class="code-line"><span class="token comment">#     else:</span>
</span><span class="code-line"><span class="token comment">#         parents[pa] = 0</span>
</span><span class="code-line"><span class="token comment">#         parents[pb] = 0</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># def output(i, n):</span>
</span><span class="code-line"><span class="token comment">#     if n == 0:</span>
</span><span class="code-line"><span class="token comment">#         print("Case %d: No trees." %i)</span>
</span><span class="code-line"><span class="token comment">#     elif n == 1:</span>
</span><span class="code-line"><span class="token comment">#         print("Case %d: There is one tree." %i)</span>
</span><span class="code-line"><span class="token comment">#     else:</span>
</span><span class="code-line"><span class="token comment">#         print("Case %d: A forest of %d trees." %(i, n))</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># index = 1</span>
</span><span class="code-line"><span class="token comment"># while True:</span>
</span><span class="code-line"><span class="token comment">#     n, m = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment">#     if n == m == 0: break</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     parents = [i for i in range(n+1)]</span>
</span><span class="code-line"><span class="token comment">#     for _ in range(m):</span>
</span><span class="code-line"><span class="token comment">#         a, b = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment">#         union(a, b)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     tree = set(find(i) for i in parents)</span>
</span><span class="code-line"><span class="token comment">#     output(index, len(tree)-1)</span>
</span><span class="code-line"><span class="token comment">#     index += 1</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> node <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> <span class="token number">0</span>
</span><span class="code-line">    <span class="token keyword">if</span> node <span class="token operator">==</span> parents<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> node
</span><span class="code-line">
</span><span class="code-line">    p <span class="token operator">=</span> find<span class="token punctuation">(</span>parents<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    parents<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> p
</span><span class="code-line">    <span class="token keyword">return</span> p
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">union</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> a <span class="token operator">&#x3C;</span> b<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> iscycle<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">:</span> iscycle<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">        parents<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> a
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> iscycle<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">:</span> iscycle<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">        parents<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> b
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">output</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Case %d: No trees."</span> <span class="token operator">%</span>i<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">elif</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Case %d: There is one tree."</span> <span class="token operator">%</span>i<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Case %d: A forest of %d trees."</span> <span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">index <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
</span><span class="code-line">    n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> n <span class="token operator">==</span> m <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">break</span>
</span><span class="code-line">
</span><span class="code-line">    parents <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    iscycle <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span>find<span class="token punctuation">,</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>
</span><span class="code-line">            iscycle<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">            union<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    ans <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        pi <span class="token operator">=</span> find<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">if</span> <span class="token keyword">not</span> iscycle<span class="token punctuation">[</span>pi<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            ans <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">            iscycle<span class="token punctuation">[</span>pi<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">
</span><span class="code-line">    output<span class="token punctuation">(</span>index<span class="token punctuation">,</span> ans<span class="token punctuation">)</span>
</span><span class="code-line">    index <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-9507 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-9507-Python</link>
    <pubDate>2021-03-05</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-9507-Python</guid>
    <description>
    <![CDATA[BOJ-9507-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p><code>dp[i] = dp[i-1] + dp[i-2] + dp[i-3] + dp[i-4]</code>의 수열의 i번 째를 출력하는 문제. 최대 입력 예제인 68까지 수열을 만든 후 입력되는 테스트케이스를 출력하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">69</span><span class="token punctuation">)</span><span class="token punctuation">:</span> dp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token punctuation">[</span><span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-다리를지나는트럭 - Python]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-다리를지나는트럭-Python</link>
    <pubDate>2021-03-04</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-다리를지나는트럭-Python</guid>
    <description>
    <![CDATA[프로그래머스-다리를지나는트럭-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>다리의 길이, 다리가 버틸 수 있는 무게, 트럭들의 무게가 주어진다. 트럭은 1초에 1만큼 움직일 때 몇 초가 지나야 모든 트럭이 다리를 지날 수 있는 지 출력하는 문제. 첫 번째 풀이는 다리의 길이만큼 0으로 이루어진 배열을 만든 후, 트럭들을 popleft한 값 - 다리의 마지막 값 + 현재 다리에 있는 총 값을 다리의 하중과 비교하여 추가적으로 트럭이 다리에 진입할 수 있을 때 appendleft를 이용하여 추가, 아닐 시 appendleft를 0으로 추가 후 마지막 값을 뺀 후, 마지막 값이 0이 아닐 시 다리를 지나간 트럭의 수를 계산하는 변수를 이용하여 비교하여 풀었다. 추가적으로 연산을 줄이기 위해 sum 함수가 아닌 현재 다리에 있는 총 값을 저장하는 변수를 만들어 사용하여 풀었다. 두 번째 풀이는 다른 사람의 풀이를 각색하여 풀었다. 다리의 길이 만큼 배열을 만든 후, 다리의 길이가 존재할 때까지 반복문을 수행한다. 가장 왼쪽에 있는 값을 뺀 후, 넘어가야하는 트럭이 존재할 때, 무게를 비교하여 다리에 값을 추가하여 풀었다. 마찬가지로 무게를 비교할 때 sum 함수가 아닌 변수를 선언하여 관리하였다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">solution</span><span class="token punctuation">(</span>bridge_length<span class="token punctuation">,</span> weight<span class="token punctuation">,</span> truck_weights<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    truck_weights <span class="token operator">=</span> deque<span class="token punctuation">(</span>truck_weights<span class="token punctuation">)</span>
</span><span class="code-line">    length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>truck_weights<span class="token punctuation">)</span>
</span><span class="code-line">    exit_length <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line">    bridge_now <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>bridge_length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    bridge_weight <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    answer <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">while</span> exit_length <span class="token operator">!=</span> length<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> truck_weights<span class="token punctuation">:</span>
</span><span class="code-line">            truck_now <span class="token operator">=</span> truck_weights<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">        last_truck <span class="token operator">=</span> bridge_now<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">if</span> bridge_weight <span class="token operator">+</span> truck_now <span class="token operator">-</span> last_truck <span class="token operator">&#x3C;=</span> weight<span class="token punctuation">:</span>
</span><span class="code-line">            bridge_now<span class="token punctuation">.</span>appendleft<span class="token punctuation">(</span>truck_now<span class="token punctuation">)</span>
</span><span class="code-line">            bridge_weight <span class="token operator">+=</span> truck_now
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">            bridge_now<span class="token punctuation">.</span>appendleft<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line">            truck_weights<span class="token punctuation">.</span>appendleft<span class="token punctuation">(</span>truck_now<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">        bridge_now<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">        bridge_weight <span class="token operator">-=</span> last_truck
</span><span class="code-line">        exit_length <span class="token operator">+=</span> <span class="token number">1</span> <span class="token keyword">if</span> last_truck <span class="token operator">!=</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">0</span>
</span><span class="code-line">        answer <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> answer
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># def solution(bride_length, weight, truck_weights):</span>
</span><span class="code-line"><span class="token comment">#     answer = 0</span>
</span><span class="code-line"><span class="token comment">#     truck_weights = deque(truck_weights)</span>
</span><span class="code-line"><span class="token comment">#     bridge_now = deque([0 for _ in range(bride_length)])</span>
</span><span class="code-line"><span class="token comment">#     bridge_total = 0</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     while bridge_now:</span>
</span><span class="code-line"><span class="token comment">#         answer += 1</span>
</span><span class="code-line"><span class="token comment">#         bridge_total -= bridge_now.popleft()</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#         if truck_weights:</span>
</span><span class="code-line"><span class="token comment">#             if bridge_total + truck_weights[0] &#x3C;= weight:</span>
</span><span class="code-line"><span class="token comment">#                 t = truck_weights.popleft()</span>
</span><span class="code-line"><span class="token comment">#                 bridge_now.append(t)</span>
</span><span class="code-line"><span class="token comment">#                 bridge_total += t</span>
</span><span class="code-line"><span class="token comment">#             else:</span>
</span><span class="code-line"><span class="token comment">#                 bridge_now.append(0)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     return answer</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-전화번호목록 - Python]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-전화번호목록-Python</link>
    <pubDate>2021-03-04</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-전화번호목록-Python</guid>
    <description>
    <![CDATA[프로그래머스-전화번호목록-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>문자열로 이루어진 배열이 주어진다. 한 번호가 다른 번호의 접두어인 경우 False를, 없을 시 True를 반환하는 문제. 첫 번째 접근은 startswith 메소드를 이용하여 풀려 했으나, 어떤 반례인 지 틀리는 경우가 존재하였다. 두 번째 풀이는 딕셔너리 자료형을 이용하여 저장 후 모든 문자열에 대해서 빈 문자열에 한 단어 씩 추가, 해당 문자열을 딕셔너리 자료형에 있는 지 비교하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">solution</span><span class="token punctuation">(</span>phone_book<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token builtin">hash</span> <span class="token operator">=</span> <span class="token punctuation">{</span>i<span class="token punctuation">:</span> <span class="token boolean">True</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> phone_book<span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> word <span class="token keyword">in</span> phone_book<span class="token punctuation">:</span>
</span><span class="code-line">        temp <span class="token operator">=</span> <span class="token string">""</span>
</span><span class="code-line">        <span class="token keyword">for</span> text <span class="token keyword">in</span> word<span class="token punctuation">:</span>
</span><span class="code-line">            temp <span class="token operator">+=</span> text
</span><span class="code-line">            <span class="token keyword">if</span> temp <span class="token keyword">in</span> <span class="token builtin">hash</span> <span class="token keyword">and</span> word <span class="token operator">!=</span> temp<span class="token punctuation">:</span>
</span><span class="code-line">                <span class="token keyword">return</span> <span class="token boolean">False</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token boolean">True</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-18223 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-18223-Python</link>
    <pubDate>2021-03-03</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-18223-Python</guid>
    <description>
    <![CDATA[BOJ-18223-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>V개의 정점, E개의 간선, 들려야할 정점 P가 주어진다. 1부터 V까지의 최단거리와 1부터 P를 들려 V에 도착하는 최단거리가 같을 시 "SAVE HIM"을, 다를 시 "GOOD BYE"를 출력하는 문제. 첫 번째 풀이는 플로이드 와샬 방법을 이용하여 모든 정점으로부터의 최단거리를 계산한 후, 1부터 V까지의 값과 1부터 P까지의 값 + P부터 V까지의 값을 비교하여 풀었으나 시간초과 결과를 받게 되었다. 두 번째 풀이는 INF와 heap을 사용하는 다익스트라를 구현하여 1부터의 최단거리들, P부터의 최단거리를 계산하여 위 공식을 대입해 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># import sys</span>
</span><span class="code-line"><span class="token comment"># INF = sys.maxsize</span>
</span><span class="code-line"><span class="token comment"># input = sys.stdin.readline</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># def floyd(graph):</span>
</span><span class="code-line"><span class="token comment">#     for k in range(1, V+1):</span>
</span><span class="code-line"><span class="token comment">#         graph[k][k] = 0</span>
</span><span class="code-line"><span class="token comment">#         for i in range(1, V+1):</span>
</span><span class="code-line"><span class="token comment">#             for j in range(1, V+1):</span>
</span><span class="code-line"><span class="token comment">#                 graph[i][j] = min(graph[i][k] + graph[k][j], graph[i][j])</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># V, E, P = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment"># graph = [[INF for _ in range(V+1)] for _ in range(V+1)]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># for _ in range(E):</span>
</span><span class="code-line"><span class="token comment">#     s, e, w = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment">#     graph[s][e] = min(graph[s][e], w)</span>
</span><span class="code-line"><span class="token comment">#     graph[e][s] = min(graph[e][s], w)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># floyd(graph)</span>
</span><span class="code-line"><span class="token comment"># print("SAVE HIME" if graph[1][V] == graph[1][P] + graph[P][V] else "GOOD BYE")</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">import</span> heapq
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line">INF <span class="token operator">=</span> sys<span class="token punctuation">.</span>maxsize
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    dist <span class="token operator">=</span> <span class="token punctuation">[</span>INF <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>V<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    dist<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line">    q <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">    heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> start<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">        w<span class="token punctuation">,</span> n <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>q<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">if</span> dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">&#x3C;</span> w<span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">continue</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">for</span> nn<span class="token punctuation">,</span> tw <span class="token keyword">in</span> graph<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            nw <span class="token operator">=</span> w <span class="token operator">+</span> tw
</span><span class="code-line">            <span class="token keyword">if</span> dist<span class="token punctuation">[</span>nn<span class="token punctuation">]</span> <span class="token operator">></span> nw<span class="token punctuation">:</span>
</span><span class="code-line">                dist<span class="token punctuation">[</span>nn<span class="token punctuation">]</span> <span class="token operator">=</span> nw
</span><span class="code-line">                heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token punctuation">[</span>nw<span class="token punctuation">,</span> nn<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> dist
</span><span class="code-line">
</span><span class="code-line">V<span class="token punctuation">,</span> E<span class="token punctuation">,</span> P <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">{</span>i<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>V<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>E<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    s<span class="token punctuation">,</span> e<span class="token punctuation">,</span> w <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    graph<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>e<span class="token punctuation">,</span> w<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    graph<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>s<span class="token punctuation">,</span> w<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">dist <span class="token operator">=</span> dijkstra<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">dist_p <span class="token operator">=</span> dijkstra<span class="token punctuation">(</span>P<span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"SAVE HIM"</span> <span class="token keyword">if</span> dist<span class="token punctuation">[</span>V<span class="token punctuation">]</span> <span class="token operator">==</span> dist<span class="token punctuation">[</span>P<span class="token punctuation">]</span> <span class="token operator">+</span> dist_p<span class="token punctuation">[</span>V<span class="token punctuation">]</span> <span class="token keyword">else</span> <span class="token string">"GOOD BYE"</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1915 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1915-Python</link>
    <pubDate>2021-03-03</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1915-Python</guid>
    <description>
    <![CDATA[BOJ-1915-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n, m의 크기 0, 1로 된 배열이 있다. 이 배열에서 1로 된 가장 큰 정사각형의 크기를 출력하는 문제. 1, 1 좌표부터 n, m까지 반복문을 수행하며 해당 좌표의 값이 1일 시, 왼쪽, 위쪽, 대각선 왼쪽 위와 값을 비교하여 제일 작은 값 + 1을 저장하였다. 저장된 값 중 제일 큰 것을 서로 곱한 후 출력하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">Y<span class="token punctuation">,</span> X <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token punctuation">:</span> graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">if</span> graph<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> Y<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> X<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> graph<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">continue</span>
</span><span class="code-line">        min_value <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>graph<span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> graph<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> graph<span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">        graph<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> min_value <span class="token operator">+</span> <span class="token number">1</span>
</span><span class="code-line">        ans <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> graph<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token operator">*</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-16562 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-16562-Python</link>
    <pubDate>2021-03-02</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-16562-Python</guid>
    <description>
    <![CDATA[BOJ-16562-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n명의 친구와 m개의 친구 관계도, k원이 있을 때 모든 친구들을 살 수 있는 최소 금액을 출력하며 살 수 없을 시 문자열을 출력하는 문제. 유니온 파인드 방법을 이용하여 풀었다. union 연산 시에 입력받는 친구의 가격을 비교하여 값이 작은 친구를 부모로 저장하였다. 그 후 모든 친구들의 부모를 set 자료형에 담은 후 해당 친구들의 값을 더하여 비교 후 출력하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> parents<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">==</span> node<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> node
</span><span class="code-line">
</span><span class="code-line">    p <span class="token operator">=</span> find<span class="token punctuation">(</span>parents<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    parents<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> p
</span><span class="code-line">    <span class="token keyword">return</span> p
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">union</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    pa<span class="token punctuation">,</span> pb <span class="token operator">=</span> find<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> find<span class="token punctuation">(</span>b<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">if</span> pa <span class="token operator">!=</span> pb<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> pay<span class="token punctuation">[</span>pa<span class="token punctuation">]</span> <span class="token operator">&#x3C;</span> pay<span class="token punctuation">[</span>pb<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            parents<span class="token punctuation">[</span>pb<span class="token punctuation">]</span> <span class="token operator">=</span> pa
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">            parents<span class="token punctuation">[</span>pa<span class="token punctuation">]</span> <span class="token operator">=</span> pb
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">pay <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">parents <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    union<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">set_parents <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    set_parents<span class="token punctuation">.</span>add<span class="token punctuation">(</span>find<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> pay<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> set_parents<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>ans <span class="token keyword">if</span> ans <span class="token operator">&#x3C;=</span> k <span class="token keyword">else</span> <span class="token string">"Oh no"</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-프린터 - Python]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-프린터-Python</link>
    <pubDate>2021-03-02</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-프린터-Python</guid>
    <description>
    <![CDATA[프로그래머스-프린터-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>프린터에 예약된 문서들의 중요도와 인덱스를 입력받는다. 해당 프린터는 제일 왼쪽의 문서의 중요도와 예약된 문서들의 중요도를 비교하여 더욱 높은 값이 있을 시 예약의 가장 오른쪽에 넣는다. 아닐 시 해당 문서를 출력한다. 주어진 인덱스의 문서가 몇 번째로 출력되는 지 반환하는 문제. 주어지는 중요도와 문서의 인덱스 값으로 이루어진 배열을 deque화 한 후, 위의 로직을 구현하여 popleft한 인덱스 값과 주어진 인덱스 값을 비교하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">solution</span><span class="token punctuation">(</span>pri<span class="token punctuation">,</span> loca<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    docs <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>pri<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    pri <span class="token operator">=</span> deque<span class="token punctuation">(</span>pri<span class="token punctuation">)</span>
</span><span class="code-line">    ans <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">while</span> docs<span class="token punctuation">:</span>
</span><span class="code-line">        n_doc <span class="token operator">=</span> docs<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">        n_pri <span class="token operator">=</span> pri<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">for</span> o_pri <span class="token keyword">in</span> pri<span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> o_pri <span class="token operator">></span> n_pri<span class="token punctuation">:</span>
</span><span class="code-line">                pri<span class="token punctuation">.</span>append<span class="token punctuation">(</span>n_pri<span class="token punctuation">)</span>
</span><span class="code-line">                docs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>n_doc<span class="token punctuation">)</span>
</span><span class="code-line">                <span class="token keyword">break</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> n_doc <span class="token operator">==</span> loca<span class="token punctuation">:</span>
</span><span class="code-line">                <span class="token keyword">return</span> ans
</span><span class="code-line">            ans <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-5972 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-5972-Python</link>
    <pubDate>2021-03-01</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-5972-Python</guid>
    <description>
    <![CDATA[BOJ-5972-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 지역, 양방향에 가중치가 있는 m개의 간선이 있을 때 1번 지역부터 n번 지역까지 이동할 떄 최소의 가중치를 출력하는 문제. INF와 heap 연산을 이용하는 다익스트라 방법을 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> heapq
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line">INF <span class="token operator">=</span> sys<span class="token punctuation">.</span>maxsize
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    dist <span class="token operator">=</span> <span class="token punctuation">[</span>INF <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    dist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line">    q <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">    heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">        now_weight<span class="token punctuation">,</span> now <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>q<span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">for</span> <span class="token builtin">next</span><span class="token punctuation">,</span> weight <span class="token keyword">in</span> graph<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            next_weight <span class="token operator">=</span> weight <span class="token operator">+</span> now_weight
</span><span class="code-line">            <span class="token keyword">if</span> dist<span class="token punctuation">[</span><span class="token builtin">next</span><span class="token punctuation">]</span> <span class="token operator">></span> next_weight<span class="token punctuation">:</span>
</span><span class="code-line">                heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token punctuation">[</span>next_weight<span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">                dist<span class="token punctuation">[</span><span class="token builtin">next</span><span class="token punctuation">]</span> <span class="token operator">=</span> next_weight
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> dist<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">{</span>i<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    s<span class="token punctuation">,</span> e<span class="token punctuation">,</span> w <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    graph<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>e<span class="token punctuation">,</span> w<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    graph<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>s<span class="token punctuation">,</span> w<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>dijkstra<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-스킬트리 - Python]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-스킬트리-Python</link>
    <pubDate>2021-03-01</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-스킬트리-Python</guid>
    <description>
    <![CDATA[프로그래머스-스킬트리-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>문자열로 이루어진 스킬 순서와 문자열로 이루어진 배열인 스킬 트리가 주어진다. 스킬 순서에 없는 스킬은 상관없으며 스킬 순서와 맞는 스킬 트리가 몇개인 지 출력하는 문제. 모든 스킬 트리를 반복으로 수행하며 입력받는 스킬 순서를 deque화 하였다. 스킬 순서에 존재하는 스킬이지만 스킬 순서를 popleft한 값과 동일하지 않을 시 break를, for else를 이용하여 for문의 반복이 끝까지 수행됐을 시 정수형 변수 값을 늘렸다. 모든 반복이 종료됐을 시 반환하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">solution</span><span class="token punctuation">(</span>skill<span class="token punctuation">,</span> skill_trees<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    skill_dict <span class="token operator">=</span> <span class="token punctuation">{</span>i<span class="token punctuation">:</span> <span class="token boolean">True</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> skill<span class="token punctuation">}</span>
</span><span class="code-line">    ans <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> skill_tree <span class="token keyword">in</span> skill_trees<span class="token punctuation">:</span>
</span><span class="code-line">        temp_skill <span class="token operator">=</span> deque<span class="token punctuation">(</span>skill<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">for</span> now_skill <span class="token keyword">in</span> skill_tree<span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> now_skill <span class="token keyword">in</span> skill_dict<span class="token punctuation">:</span>
</span><span class="code-line">                <span class="token keyword">if</span> now_skill <span class="token operator">!=</span> temp_skill<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">                    <span class="token keyword">break</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">            ans <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> ans
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1043 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1043-Python</link>
    <pubDate>2021-02-28</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1043-Python</guid>
    <description>
    <![CDATA[BOJ-1043-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>사람의 수 n, 파티의 수 m이 주어진다. 그리고 진실을 아는 사람의 수와 번호가 주어지고. m개의 줄만큼 파티에 오는 사람의 수와 번호가 주어진다. 파티에서 진실을 아는 사람이 없으며, 진실을 아는 사람과 같이 파티를 한 사람이 없는 파티의 수를 출력하는 문제. 유니온 파인드 방식을 이용하여 풀었으며 모든 파티에 오는 사람들을 union하였다. 진실을 아는 사람을 저장하는 배열을 관리하여 union시 부모노드들의 값을 관리하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> parents<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">==</span> node<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> node
</span><span class="code-line">
</span><span class="code-line">    p <span class="token operator">=</span> find<span class="token punctuation">(</span>parents<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    parents<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> p
</span><span class="code-line">    <span class="token keyword">return</span> p
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">union</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    pa<span class="token punctuation">,</span> pb <span class="token operator">=</span> find<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> find<span class="token punctuation">(</span>b<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> pa <span class="token operator">!=</span> pb<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> know<span class="token punctuation">[</span>pa<span class="token punctuation">]</span> <span class="token keyword">or</span> know<span class="token punctuation">[</span>pb<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            know<span class="token punctuation">[</span>pa<span class="token punctuation">]</span><span class="token punctuation">,</span> know<span class="token punctuation">[</span>pb<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">True</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">if</span> pb <span class="token operator">&#x3C;</span> pa<span class="token punctuation">:</span>
</span><span class="code-line">            parents<span class="token punctuation">[</span>pa<span class="token punctuation">]</span> <span class="token operator">=</span> pb
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">            parents<span class="token punctuation">[</span>pb<span class="token punctuation">]</span> <span class="token operator">=</span> pa
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">parents <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">know <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">party <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line">know_input <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">for</span> t <span class="token keyword">in</span> know_input<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">    know<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    p <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    party<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        union<span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    member <span class="token operator">=</span> party<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> member<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        pj <span class="token operator">=</span> find<span class="token punctuation">(</span>party<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">if</span> know<span class="token punctuation">[</span>pj<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">break</span>
</span><span class="code-line">        <span class="token keyword">if</span> <span class="token keyword">not</span> know<span class="token punctuation">[</span>pj<span class="token punctuation">]</span> <span class="token keyword">and</span> j <span class="token operator">==</span> member<span class="token punctuation">:</span> ans <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-기능개발 - Python]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-기능개발-Python</link>
    <pubDate>2021-02-28</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-기능개발-Python</guid>
    <description>
    <![CDATA[프로그래머스-기능개발-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>개발 진행도와 개발 속도, 두 배열을 입력받는다. 개발 진행도가 100 이상일 때 배포가 가능하며, 앞에 있는 것을 먼저 배포해야만 하며 뒤에 이미 개발 진행도가 100 이상인 것과 함께 배포가 된다. 각 배포마다 몇 개의 기닝이 배포되는 지를 반환하는 문제. 첫 번째 풀이는 for를 이용하여 각 기능들을, while을 이용해 days를 관리하여 풀었다. 두 번째 풀이는 입력받는 두 배열을 deque화한 후, while만을 이용하여 조건 충속시 popleft 되도록 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># def solution(pgrs, spds):</span>
</span><span class="code-line"><span class="token comment">#     n = len(pgrs)</span>
</span><span class="code-line"><span class="token comment">#     days = 1</span>
</span><span class="code-line"><span class="token comment">#     last_days = [0]</span>
</span><span class="code-line"><span class="token comment">#     ans = []</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     for i in range(n):</span>
</span><span class="code-line"><span class="token comment">#         while True:</span>
</span><span class="code-line"><span class="token comment">#             if pgrs[i] + days * spds[i] >= 100:</span>
</span><span class="code-line"><span class="token comment">#                 if last_days[-1] == days:</span>
</span><span class="code-line"><span class="token comment">#                     ans[-1] += 1</span>
</span><span class="code-line"><span class="token comment">#                 else:</span>
</span><span class="code-line"><span class="token comment">#                     last_days.append(days)</span>
</span><span class="code-line"><span class="token comment">#                     ans.append(1)</span>
</span><span class="code-line"><span class="token comment">#                 break</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#             days += 1</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     return ans</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">solution</span><span class="token punctuation">(</span>pgrs<span class="token punctuation">,</span> spds<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    pgrs <span class="token operator">=</span> deque<span class="token punctuation">(</span>pgrs<span class="token punctuation">)</span>
</span><span class="code-line">    spds <span class="token operator">=</span> deque<span class="token punctuation">(</span>spds<span class="token punctuation">)</span>
</span><span class="code-line">    answer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">    days<span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">while</span> pgrs<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> pgrs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> days <span class="token operator">*</span> spds<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">100</span><span class="token punctuation">:</span>
</span><span class="code-line">            pgrs<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">            spds<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">            count <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">            days <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">            <span class="token keyword">if</span> count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">                answer<span class="token punctuation">.</span>append<span class="token punctuation">(</span>count<span class="token punctuation">)</span>
</span><span class="code-line">                count <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line">    answer<span class="token punctuation">.</span>append<span class="token punctuation">(</span>count<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">return</span> answer
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-10974 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-10974-Python</link>
    <pubDate>2021-02-27</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-10974-Python</guid>
    <description>
    <![CDATA[BOJ-10974-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n이 주어졌을 때, 1부터 n까지의 수로 이루어진 순열을 사전순으로 출력하는 문제. 정수를 저장하는 배열과 방문확인을 위한 배열을 이용한 백트래킹 방법을 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">bt</span><span class="token punctuation">(</span>depth<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> depth <span class="token operator">==</span> n<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span>nl<span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">return</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> <span class="token keyword">not</span> visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">            nl<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">            bt<span class="token punctuation">(</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">            visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>
</span><span class="code-line">            nl<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">nl <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">visit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">bt<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2493 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2493-Python</link>
    <pubDate>2021-02-27</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2493-Python</guid>
    <description>
    <![CDATA[BOJ-2493-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 높이의 탑이 주어진다. 각 탑의 신호는 왼쪽으로 향하며 높이가 작은 탑은 신호를 수신할 수 없다. 가장 먼저 수신하는 신호의 번호를 공백으로 나누어 출력하는 문제. 첫 번째, 두 번째 풀이는 이중 반복문과 함수를 재귀적으로 이용해, 모든 경우의 수를 확인하여 풀었으나 당연히 시간초과 결과를 받게 되었다. 세번째 풀이는 값과 인덱스를 저장하는 스택을 이용하여, 처음부터 마지막까지 값을 비교하는데, 스택의 마지막 값이 현재 반복중인 값보다 클 시 해당 인덱스의 값을 인덱스 스택의 마지막 값에 할당한다. 값이 작거나 같을 시에는 스택의 값을 빼주어 비교할 연산을 줄여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># n = int(input())</span>
</span><span class="code-line"><span class="token comment"># l = list(map(int, input().split()))</span>
</span><span class="code-line"><span class="token comment"># rec = [0 for _ in range(n)]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># for i in range(n-1, -1, -1):</span>
</span><span class="code-line"><span class="token comment">#     for j in range(i-1, -1, -1):</span>
</span><span class="code-line"><span class="token comment">#         if l[i] &#x3C;= l[j]:</span>
</span><span class="code-line"><span class="token comment">#             rec[i] = j+1</span>
</span><span class="code-line"><span class="token comment">#             break</span>
</span><span class="code-line"><span class="token comment"># print(*rec)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># def solve(check_id, cur_id):</span>
</span><span class="code-line"><span class="token comment">#     if 0 &#x3C;= check_id &#x3C; n and 0 &#x3C;= cur_id &#x3C; n:</span>
</span><span class="code-line"><span class="token comment">#         if l[check_id] >= l[cur_id]:</span>
</span><span class="code-line"><span class="token comment">#             rec[cur_id] = check_id+1</span>
</span><span class="code-line"><span class="token comment">#         return</span>
</span><span class="code-line"><span class="token comment">#     if check_id > 0:</span>
</span><span class="code-line"><span class="token comment">#         solve(check_id-1, cur_id)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># n = int(input())</span>
</span><span class="code-line"><span class="token comment"># l = list(map(int, input().split()))</span>
</span><span class="code-line"><span class="token comment"># rec = [0 for _ in range(n)]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># for i in range(1, n):</span>
</span><span class="code-line"><span class="token comment">#     solve(i-1, i)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># print(*rec)</span>
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">value_stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">index_stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">answer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">while</span> value_stack<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> value_stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            answer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> index_stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>
</span><span class="code-line">            <span class="token keyword">break</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">            value_stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">            index_stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    value_stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    index_stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span>answer<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-4796 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-4796-Python</link>
    <pubDate>2021-02-27</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-4796-Python</guid>
    <description>
    <![CDATA[BOJ-4796-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>연속되는 p일 동안 l일만 캠핑장을 이용할 수 있다고 한다. 이 때 휴가 v일 동안 최대 캠핑장을 며칠간 이용할 수 있는 지 출력하는 문제. v // p * l 값을 변수에 저장 후, 남은 휴가 중 캠핑장을 이용할 수 있는 수(휴가 일 수 - v // p에 p를 곱한 값)과 l을 비교하여 l이 더 클 시 남은 휴가 중 캠핑장을 이용할 수 있는 수를 아닐 시 l을 더해주어 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">i <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
</span><span class="code-line">    l<span class="token punctuation">,</span> p<span class="token punctuation">,</span> v <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> l <span class="token operator">==</span> p <span class="token operator">==</span> v <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">break</span>
</span><span class="code-line">
</span><span class="code-line">    vp <span class="token operator">=</span> v <span class="token operator">//</span> p
</span><span class="code-line">    ans <span class="token operator">=</span> vp <span class="token operator">*</span> l
</span><span class="code-line">    ans <span class="token operator">+=</span> <span class="token punctuation">(</span>v <span class="token operator">-</span> vp <span class="token operator">*</span> p<span class="token punctuation">)</span> <span class="token keyword">if</span> l <span class="token operator">></span> <span class="token punctuation">(</span>v <span class="token operator">-</span> vp <span class="token operator">*</span> p<span class="token punctuation">)</span> <span class="token keyword">else</span> l
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Case %d: %d"</span> <span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    i <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-큰수만들기 - Python]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-큰수만들기-Python</link>
    <pubDate>2021-02-27</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-큰수만들기-Python</guid>
    <description>
    <![CDATA[프로그래머스-큰수만들기-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>문자열로 이루어진 정수가 주어진다. 해당 정수의 형태를 유지하여 k개의 숫자를 빼어 만들 수 있는 가장 큰 수를 출력하는 문제. 첫 번째 풀이는 백트래킹 방법을 이용하여 모든 경우의 수를 set 자료형에 저장하여, 제일 큰 값을 출력하여 풀었지만 시간초과 결과를 받게 되었다. 두 번째 풀이는 스택을 이용한 풀이로, 스택의 마지막 값들과 현재 반복중인 값을 비교하여 k를 감소, 스택에서 제외한 후 현재 반복중이였던 값을 스택에 추가한다. 앞에서부터 큰 수들이 들어감으로써 k가 0이 되지 않았을 시 감소한 k만큼 뒤에서 잘라주어 반환하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># def bt(n, depth, k, visit, answer, answers):</span>
</span><span class="code-line"><span class="token comment">#     if depth == k:</span>
</span><span class="code-line"><span class="token comment">#         t = "".join(answer)</span>
</span><span class="code-line"><span class="token comment">#         answers.add(int(t))</span>
</span><span class="code-line"><span class="token comment">#         return</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     for i in range(n):</span>
</span><span class="code-line"><span class="token comment">#         if not visit[i]:</span>
</span><span class="code-line"><span class="token comment">#             t = answer[i]</span>
</span><span class="code-line"><span class="token comment">#             answer[i] = ""</span>
</span><span class="code-line"><span class="token comment">#             visit[i] = True</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#             bt(n, depth+1, k, visit, answer, answers)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#             answer[i] = t</span>
</span><span class="code-line"><span class="token comment">#             visit[i] = False</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># def solution(number, k):</span>
</span><span class="code-line"><span class="token comment">#     n = len(number)</span>
</span><span class="code-line"><span class="token comment">#     number = list(number)</span>
</span><span class="code-line"><span class="token comment">#     visit = [False for _ in range(n)]</span>
</span><span class="code-line"><span class="token comment">#     answers = set()</span>
</span><span class="code-line"><span class="token comment">#     bt(n, 0, k, visit, number, answers)</span>
</span><span class="code-line"><span class="token comment">#     return str(max(answers))</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># print(solution(n, k))</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">nn <span class="token operator">=</span> <span class="token string">"4177252841"</span>
</span><span class="code-line">k <span class="token operator">=</span> <span class="token number">4</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">solution</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">for</span> n <span class="token keyword">in</span> number<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">while</span> stack <span class="token keyword">and</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&#x3C;</span> n <span class="token keyword">and</span> k <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">            k <span class="token operator">-=</span> <span class="token number">1</span>
</span><span class="code-line">            stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">        stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>n<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">if</span> k <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span> stack <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span>k<span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>stack<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>solution<span class="token punctuation">(</span>nn<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[Github 프로필 꾸미기]]></title>
    <link>https://www.hyesungoh.xyz/github_profile_make_up</link>
    <pubDate>2021-02-27</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/github_profile_make_up</guid>
    <description>
    <![CDATA[github_profile_make_up]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="github-프로필-꾸미기" class="heading">Github 프로필 꾸미기</h2>
<p>자신의 닉네임과 같은 repo를 이용하여 본인의 프로필을 꾸밀 수 있습니다.</p>
<p>꾸미며 알게된 다양한 방법을 한 눈에 볼 수 있도록 정리해보겠습니다.</p>
<p><img src="https://user-images.githubusercontent.com/26461307/109389248-28decf00-794f-11eb-9a14-c89611f650ff.png" alt="스크린샷 2021-02-27 오후 10 56 42"></p>
<p>21년 2월 기준 작성자의 <a href="https://github.com/hyesungoh/hyesungoh" target="_blank" rel="noopener noreferer">Github 프로필</a>입니다.</p>
<p><i>클론, 포크 환영입니다 :D</i></p>
<hr>
<h4 id="capsule-render"><a href="https://github.com/kyechan99/capsule-render" target="_blank" rel="noopener noreferer">Capsule render</a></h4>
<p><img src="https://user-images.githubusercontent.com/26461307/109389419-d9e56980-794f-11eb-81aa-da1aa43181b5.png" alt="스크린샷 2021-02-27 오후 11 02 19"></p>
<p>프로필에 간단한 디자인, 애니메이션이 추가됨 헤더, 푸터를 넣을 수 있습니다.</p>
<ul>
<li>
<h5 id="사용-방법">사용 방법</h5>
</li>
</ul>
<pre class="language-md"><code class="language-md code-highlight"><span class="code-line"><span class="token url"><span class="token operator">!</span>[<span class="token content">header</span>](<span class="token url">https://capsule-render.vercel.app/api?type=wave&#x26;color=auto&#x26;height=300&#x26;section=header&#x26;text=capsule%20render&#x26;fontSize=90</span>)</span>
</span></code></pre>
<h4 id="hits"><a href="https://hits.seeyoufarm.com/" target="_blank" rel="noopener noreferer">Hits</a></h4>
<p><img src="https://user-images.githubusercontent.com/26461307/109389569-62fca080-7950-11eb-8971-67a3676ef950.png" alt="스크린샷 2021-02-27 오후 11 06 09"></p>
<p>특정 url에 방문한 사람을 확인할 수 있습니다.</p>
<ul>
<li>
<h5 id="사용-방법-1">사용 방법</h5>
</li>
</ul>
<p>웹상에서 원하는 아이콘, 색, 텍스트, url을 설정 후 복사하여 사용할 수 있습니다.</p>
<pre class="language-md"><code class="language-md code-highlight"><span class="code-line"><span class="token url">[<span class="token content">![Hits</span>](<span class="token url">https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fgithub.com%2Fhyesungoh&#x26;count_bg=%2379C83D&#x26;title_bg=%23555555&#x26;icon=&#x26;icon_color=%23E7E7E7&#x26;title=hits&#x26;edge_flat=false</span>)</span>](https://hits.seeyoufarm.com)
</span></code></pre>
<h4 id="shields-io"><a href="https://shields.io/" target="_blank" rel="noopener noreferer">Shields IO</a></h4>
<p><img src="https://user-images.githubusercontent.com/26461307/109389705-d7cfda80-7950-11eb-85b0-bec0b2157df9.png" alt="스크린샷 2021-02-27 오후 11 09 25"></p>
<p>다양한 아이콘의 badge를 사용 가능합니다.</p>
<ul>
<li>
<h5 id="사용-방법-2">사용 방법</h5>
</li>
</ul>
<p>글자, 로고의 모양, 색과 전체적인 스타일을 설정하여 사용할 수 있습니다.</p>
<pre class="language-md"><code class="language-md code-highlight"><span class="code-line"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://img.shields.io/badge/Python-3776AB?style=flat-square&#x26;logo=Python&#x26;logoColor=white<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
</span></code></pre>
<h4 id="github-stats-card"><a href="https://github.com/anuraghazra/github-readme-stats#github-stats-card" target="_blank" rel="noopener noreferer">Github Stats Card</a></h4>
<p><img src="https://user-images.githubusercontent.com/26461307/109389828-8116d080-7951-11eb-8151-f0e673958eec.png" alt="스크린샷 2021-02-27 오후 11 14 10"></p>
<ul>
<li>
<h5 id="사용-방법-3">사용 방법</h5>
</li>
</ul>
<pre class="language-md"><code class="language-md code-highlight"><span class="code-line"><span class="token url">[<span class="token content">![Anurag's GitHub stats</span>](<span class="token url">https://github-readme-stats.vercel.app/api?username=anuraghazra</span>)</span>](https://github.com/anuraghazra/github-readme-stats)
</span></code></pre>
<h4 id="top-languages-card"><a href="https://github.com/anuraghazra/github-readme-stats#top-languages-card" target="_blank" rel="noopener noreferer">Top Languages Card</a></h4>
<p><img src="https://user-images.githubusercontent.com/26461307/109389894-d521b500-7951-11eb-9dbf-9b3e88867b67.png" alt="스크린샷 2021-02-27 오후 11 16 29"></p>
<ul>
<li>
<h5 id="사용-방법-4">사용 방법</h5>
</li>
</ul>
<pre class="language-md"><code class="language-md code-highlight"><span class="code-line"><span class="token url">[<span class="token content">![Top Langs</span>](<span class="token url">https://github-readme-stats.vercel.app/api/top-langs/?username=anuraghazra</span>)</span>](https://github.com/anuraghazra/github-readme-stats)
</span></code></pre>
<h4 id="wakatime-week-stats"><a href="https://github.com/anuraghazra/github-readme-stats#wakatime-week-stats" target="_blank" rel="noopener noreferer">Wakatime Week Stats</a></h4>
<p><img src="https://user-images.githubusercontent.com/26461307/109389949-2467e580-7952-11eb-9e5a-ddf9bfba8829.png" alt="스크린샷 2021-02-27 오후 11 18 44">
<img src="https://user-images.githubusercontent.com/26461307/109389983-4c574900-7952-11eb-9798-2a26e1f1c59b.png" alt="스크린샷 2021-02-27 오후 11 19 51"></p>
<ul>
<li>
<h5 id="사용-방법-5">사용 방법</h5>
</li>
</ul>
<p>사용을 위해서는 <a href="https://wakatime.com/dashboard" target="_blank" rel="noopener noreferer">WakaTime</a>을 사용중이여야 합니다.</p>
<pre class="language-md"><code class="language-md code-highlight"><span class="code-line"><span class="token url">[<span class="token content">![willianrod's wakatime stats</span>](<span class="token url">https://github-readme-stats.vercel.app/api/wakatime?username=willianrod</span>)</span>](https://github.com/anuraghazra/github-readme-stats)
</span></code></pre>
<h4 id="waka-readme-stats"><a href="https://github.com/anmol098/waka-readme-stats" target="_blank" rel="noopener noreferer">Waka readme stats</a></h4>
<p><img src="https://user-images.githubusercontent.com/26461307/109390034-9ccea680-7952-11eb-94d0-220f25155471.png" alt="스크린샷 2021-02-27 오후 11 22 06"></p>
<p>직접 사용은 해보지 않았지만, 참고하시면 좋을 것 같아 공유합니다.</p>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-올바른괄호 - Python]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-올바른괄호-Python</link>
    <pubDate>2021-02-25</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-올바른괄호-Python</guid>
    <description>
    <![CDATA[프로그래머스-올바른괄호-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>괄호가 바르게 짝지어졌다는 것은 ( 문자로 열렸으면 반드시 짝지어서 )로 닫혀야 한다는 뜻이다. 괄호로만 이루어진 문자열이 주어졌을 때 올바른 괄호이면 True를, 아닐 때 False를 반환하는 문제. 문자열의 각 문자가 )일 때 -1, (일 때 1을 더하는 정수형 변수를 이용하여 해당 변수가 0과 같은 지를 반환하며 반복문 중에 해당 변수가 0이며 )일 시 False를 반환하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">solution</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    answer <span class="token operator">=</span> <span class="token boolean">False</span>
</span><span class="code-line">    balance <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> t <span class="token keyword">in</span> s<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> t <span class="token operator">==</span> <span class="token string">")"</span> <span class="token keyword">and</span> balance <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">return</span> <span class="token boolean">False</span>
</span><span class="code-line">        balance <span class="token operator">+=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">if</span> t <span class="token operator">==</span> <span class="token string">")"</span> <span class="token keyword">else</span> <span class="token number">1</span>
</span><span class="code-line">        answer <span class="token operator">=</span> balance <span class="token operator">==</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> answer
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-H-index - Python]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-H-index-Python</link>
    <pubDate>2021-02-24</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-H-index-Python</guid>
    <description>
    <![CDATA[프로그래머스-H-index-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>어느 과학자가 발표한 논문 n편 중, h번 이상 인용된 논문이 h편 이상이고 나머지 논문이 h번 이하 인용되었다면, h의 최대값이 과학자의 H-index라고 한다. 어떤 과학자가 발표한 논문의 인용 횟수를 담은 배열이 주어질 때 H-index를 구하는 문제. 그리디 방식을 이용하여 내림차순으로 정렬 후, 0부터 n-1까지 반복문을 수행하였다. 인덱스 i가 정렬된 i번째 값보다 클 시 i를 반환하여 풀었다. 배열의 값이 모두 동일할 시 반환이 되지 않아 마지막에 길이를 반환해 주었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">solution</span><span class="token punctuation">(</span>cita<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>cita<span class="token punctuation">)</span>
</span><span class="code-line">    cita<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> i <span class="token operator">>=</span> cita<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">return</span> i
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> length
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-가장큰정사각형찾기 - Python]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-가장큰정사각형찾기-Python</link>
    <pubDate>2021-02-24</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-가장큰정사각형찾기-Python</guid>
    <description>
    <![CDATA[프로그래머스-가장큰정사각형찾기-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>0과 1로 이루어진 이차원 배열 board가 주어진 후, 해당 배열에서 가장 큰 정사각형의 넓이를 출력하는 문제. 좌표 1, 1부터 해당 값이 0이 아니며, 위, 왼쪽, 왼쪽 위 대각선의 값을 중 제일 작은 값 +1한 것을 저장한다. 그 중 제일 큰 값끼리 곱한 값을 반환하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">solution</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    ylen <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span>
</span><span class="code-line">    xlen <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    ans <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">if</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">else</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ylen<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> xlen<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> <span class="token keyword">not</span> board<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">                <span class="token keyword">continue</span>
</span><span class="code-line">
</span><span class="code-line">            up <span class="token operator">=</span> board<span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span>
</span><span class="code-line">            down <span class="token operator">=</span> board<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">            diag <span class="token operator">=</span> board<span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">            <span class="token keyword">if</span> up <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">and</span> down <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">and</span> diag <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">                board<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>up<span class="token punctuation">,</span> down<span class="token punctuation">,</span> diag<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
</span><span class="code-line">                ans <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> board<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> ans <span class="token operator">*</span> ans
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-10211 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-10211-Python</link>
    <pubDate>2021-02-23</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-10211-Python</guid>
    <description>
    <![CDATA[BOJ-10211-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>TC만큼 n개의 정수로 이루어진 배열을 입력받는다. 해당 배열 중 원소의 합이 제일 큰 부분 배열의 값을 출력하는 문제. 다이내믹 프로그래밍 방법을 이용하여 <code>dp[i] = max(dp[i], dp[i] + dp[i-1])</code>의 점화식을 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    dp <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2228 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2228-Python</link>
    <pubDate>2021-02-23</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2228-Python</guid>
    <description>
    <![CDATA[BOJ-2228-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>N개의 수로 이루어진 1차원 배열이 있다. 이 배열에서 M개의 구간을 선택해서 구간에 속한 수들의 총 합이 최대가 되도록 할 때, 각 구간은 한 개 이상의 수가 있어야하며, 구간끼리 겹치거나 인접해 있어선 안되며, 정확히 M개의 구간이 있어야할 때 최대값을 출력하는 문제. 첫번 째 풀이는 인접하면 안되는 조건을 보지 못하여 단순 반복문을 이용한 다이내믹 프로그래밍 방벙을 이용하였다. 두 번째 풀이는 구역별로 최대값을 저장하는 이차원배열을 이용하는 방법을 작성하였다. <a href="https://blog.naver.com/PostView.nhn?blogId=hands731&#x26;logNo=221927641787&#x26;categoryNo=14&#x26;parentCategoryNo=0&#x26;viewDate=&#x26;currentPage=1&#x26;postListTopCurrentPage=1&#x26;from=postView" target="_blank" rel="noopener noreferer">해당 게시물</a>을 참고하여 작성하였으며, dp1에는 선택을 하지 않는 경우의 수 중 제일 큰 값을, dp2에는 선택을 하는 경우에서 제일 큰 값을 저장한다. 구간이 인접하지 않아야하는 조건때문에 <code>dp2[i][j] = max(dp1[i-1][j-1] + l[i], dp2[i-1][j] + l[i])</code>의 점화식을 사용하는 것 같은데, 정확한 풀이는 아직 모르곘다. 나중에 다시 풀어봐야겠다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line">INF <span class="token operator">=</span> <span class="token operator">-</span>sys<span class="token punctuation">.</span>maxsize
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">dp1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>INF <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">dp2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>INF <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">dp1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">dp2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    dp1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    dp2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> INF
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">min</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        dp1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp1<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp2<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">        dp2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp1<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp2<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>dp1<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">,</span> dp2<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2563 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2563-Python</link>
    <pubDate>2021-02-23</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2563-Python</guid>
    <description>
    <![CDATA[BOJ-2563-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>100, 100 크기의 종이에 10, 10 크기의 색종이를 붙인다고 한다. 붙은 색종이의 수 n과 각 색종이들이 아랫변에서의 거리, 왼쪽변에서의 거리가 주어질 때 색종이가 붙은 영역의 크기를 출력하는 문제. 100, 100 크기의 배열을 만들어 붙어있는 지 확인하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">paper <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    y<span class="token punctuation">,</span> x <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> y<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> x<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">
</span><span class="code-line">            <span class="token keyword">if</span> <span class="token keyword">not</span> paper<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">                paper<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">                ans <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-14438 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-14438-Python</link>
    <pubDate>2021-02-22</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-14438-Python</guid>
    <description>
    <![CDATA[BOJ-14438-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>특정 구간 제일 작은 수를 구하며 업데이트하는 세그먼트 트리 문제. 업데이트 시 범위를 벗어 날 시 INF를 반환하였었는데 해당 부분 때문에 WA를 받았었다. 업데이트 시 해당 인덱스와 바꿔야하는 값을 이용하여 start == end일 시 바꿔야되는 값으로 바꾸어 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token keyword">from</span> math <span class="token keyword">import</span> log2<span class="token punctuation">,</span> ceil
</span><span class="code-line">
</span><span class="code-line">INF <span class="token operator">=</span> sys<span class="token punctuation">.</span>maxsize
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">init</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> start <span class="token operator">==</span> end<span class="token punctuation">:</span>
</span><span class="code-line">        tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">[</span>start<span class="token punctuation">]</span>
</span><span class="code-line">        <span class="token keyword">return</span> tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
</span><span class="code-line">    tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>init<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">,</span> init<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">return</span> tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">query</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> left <span class="token operator">></span> end <span class="token keyword">or</span> right <span class="token operator">&#x3C;</span> start<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> INF
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">if</span> left <span class="token operator">&#x3C;=</span> start <span class="token keyword">and</span> end <span class="token operator">&#x3C;=</span> right<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token builtin">min</span><span class="token punctuation">(</span>query<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">,</span> query<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> index<span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> index <span class="token operator">&#x3C;</span> start <span class="token keyword">or</span> end <span class="token operator">&#x3C;</span> index<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">if</span> start <span class="token operator">==</span> end<span class="token punctuation">:</span>
</span><span class="code-line">        tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> to
</span><span class="code-line">        <span class="token keyword">return</span> tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
</span><span class="code-line">    tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>update<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> index<span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">,</span> update<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> index<span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">return</span> tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">m <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">height <span class="token operator">=</span> ceil<span class="token punctuation">(</span>log2<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">size <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token punctuation">(</span>height <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">tree <span class="token operator">=</span> <span class="token punctuation">[</span>INF <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">init<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    q<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> q <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">        update<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span>query<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-124나라의숫자 - Python]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-124나라의숫자-Python</link>
    <pubDate>2021-02-22</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-124나라의숫자-Python</guid>
    <description>
    <![CDATA[프로그래머스-124나라의숫자-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>정수 n을 124만을 이용하여 표현하는 문제. 문자열 124의 인덱스를 이용하여 배열에 추가하는 방식을 이용하였으며, 해당 숫자는 n-1한 값의 3으로 나눈 나머지를 할당하여 풀었다. 쉬운 문제였으나 다소 시행착오를 겪었다. 낮은 난이도도 자주 풀어봐야겠다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">solution</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    s <span class="token operator">=</span> <span class="token string">"124"</span>
</span><span class="code-line">    dp <span class="token operator">=</span> <span class="token punctuation">[</span>s<span class="token punctuation">[</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">while</span> n <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">:</span>
</span><span class="code-line">        n <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">3</span>
</span><span class="code-line">        dp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">reversed</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-k번째수 - Python]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-k번째수-Python</link>
    <pubDate>2021-02-22</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-k번째수-Python</guid>
    <description>
    <![CDATA[프로그래머스-k번째수-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>정수로 이루어진 배열 array와 3개의 정수가 들어가 있는 배열들로 구성된 배열 commands를 입력받는다. 그 후 각 commands 마다 array s부터 e까지 수들 중 오름차순으로 정렬하여 k번째 수를 배열에 담아 해당 배열을 반환하면되는 문제. for in 문과 리스트 슬라이싱, sorted 메소드를 활용하여 간단히 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">solution</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> commands<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    answer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> s<span class="token punctuation">,</span> e<span class="token punctuation">,</span> k <span class="token keyword">in</span> commands<span class="token punctuation">:</span>
</span><span class="code-line">        tarr <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>s <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>e<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">        answer<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tarr<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> answer
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-17396 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-17396-Python</link>
    <pubDate>2021-02-21</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-17396-Python</guid>
    <description>
    <![CDATA[BOJ-17396-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>노드의 수와 간선의 수 n, m을 입력받는다. 그 후 노드를 지나칠 수 있는지에 대한 여부와 양방향 간선들을 입력받아 0번째 노드부터 n-1번째 노드에 도착하는 최소 시간을 출력하는 문제. 간선은 인접리스트 방식으로 저정하였으며, 지나칠 수 있는 지 여부에 따라 저장을 관리하였다. 그 후 힙을 이용한 다익스트라 방식을 사용해 풀었다. 바로 다음 간선들을 이용하여 추가하여 풀 시 시간초과 결과를 받기 때문에, 간선을 이용하기 전 현재 저장값보다 클 시 continue하여 풀었다. 덕분에 진짜 다익스트라 방식을 안 것만 같다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token keyword">import</span> heapq
</span><span class="code-line">INF <span class="token operator">=</span> sys<span class="token punctuation">.</span>maxsize
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    q <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">    dist <span class="token operator">=</span> <span class="token punctuation">[</span>INF <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    dist<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">        w<span class="token punctuation">,</span> now <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>q<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">if</span> w <span class="token operator">></span> dist<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">continue</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">for</span> tw<span class="token punctuation">,</span> nn <span class="token keyword">in</span> graph<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            nw <span class="token operator">=</span> w <span class="token operator">+</span> tw
</span><span class="code-line">            <span class="token keyword">if</span> dist<span class="token punctuation">[</span>nn<span class="token punctuation">]</span> <span class="token operator">></span> nw<span class="token punctuation">:</span>
</span><span class="code-line">                heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token punctuation">[</span>nw<span class="token punctuation">,</span> nn<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">                dist<span class="token punctuation">[</span>nn<span class="token punctuation">]</span> <span class="token operator">=</span> nw
</span><span class="code-line">    <span class="token keyword">return</span> dist<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">if</span> dist<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> INF <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">sight <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">sight<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">{</span>i<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    s<span class="token punctuation">,</span> e<span class="token punctuation">,</span> w <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> sight<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">or</span> sight<span class="token punctuation">[</span>e<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">continue</span>
</span><span class="code-line">    graph<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>w<span class="token punctuation">,</span> e<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    graph<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>w<span class="token punctuation">,</span> s<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>dijkstra<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-가장큰수 - Python]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-가장큰수-Python</link>
    <pubDate>2021-02-21</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-가장큰수-Python</guid>
    <description>
    <![CDATA[프로그래머스-가장큰수-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>0 또는 양의 정수가 주어졌을 때, 정수를 이어 붙여 만들 수 있는 가장 큰 수를 구하는 문제. 첫 번째 풀이는 백트래킹 방법을 이용하여 모든 경우의 수를 한 배열에 저장하여 해당 수 중 제일 큰 수를 출력하도록 풀었으나, 입력될 수 있는 수가 최대 100,000개임으로 시간초과 결과를 받게 되었다. 그리디 방법을 이용할려 했으나, 문자열을 기준으로 정렬시에 30과 3의 정렬에서 차질이 생겨 고민 중, 정렬 기준을 문자열화 한 것의 3을 곱한 풀이를 보았다. 303030과 333을 정렬하여 333이 더욱 높게 판단되게 하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># import sys</span>
</span><span class="code-line"><span class="token comment"># sys.setrecursionlimit(10**9)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># def bt(depth, now, length, numbers, visit, answers):</span>
</span><span class="code-line"><span class="token comment">#     if depth == length:</span>
</span><span class="code-line"><span class="token comment">#         answers.append(now)</span>
</span><span class="code-line"><span class="token comment">#         return</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     for i in range(length):</span>
</span><span class="code-line"><span class="token comment">#         if not visit[i]:</span>
</span><span class="code-line"><span class="token comment">#             visit[i] = True</span>
</span><span class="code-line"><span class="token comment">#             bt(depth+1, now+numbers[i], length, numbers, visit, answers)</span>
</span><span class="code-line"><span class="token comment">#             visit[i] = False</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># def solution(numbers):</span>
</span><span class="code-line"><span class="token comment">#     n = len(numbers)</span>
</span><span class="code-line"><span class="token comment">#     numbers = list(map(str, numbers))</span>
</span><span class="code-line"><span class="token comment">#     visit = [False for _ in range(n)]</span>
</span><span class="code-line"><span class="token comment">#     answers = []</span>
</span><span class="code-line"><span class="token comment">#     bt(0, "", n, numbers, visit, answers)</span>
</span><span class="code-line"><span class="token comment">#     answers = list(map(int, answers))</span>
</span><span class="code-line"><span class="token comment">#     print(answers)</span>
</span><span class="code-line"><span class="token comment">#     return str(max(answers))</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">solution</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    numbers <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> numbers<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>solution<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-멀쩡한사각형 - Python]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-멀쩡한사각형-Python</link>
    <pubDate>2021-02-21</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-멀쩡한사각형-Python</guid>
    <description>
    <![CDATA[프로그래머스-멀쩡한사각형-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>가로 길이가 W, 세로 길이가 H인 직사각형이 았다. 종이는 1, 1 크기의 격자 형태로 선이 그어져 있다. 대각선 꼭지점 2개를 잇는 방향으로 잘라 놓았을 때, 온전한 사각형의 수를 구하는 문제. 최대공약수를 이용해야하는 것은 알았지만 어떤 방식으로 이용해야되는 지 감을 잡기 어려웠다. <a href="https://taesan94.tistory.com/55F" target="_blank" rel="noopener noreferer">검색</a>을 통해 (w * h) - (w + h - gcd(w, h))가 공식인 것을 알게 됐다. 첫 번째 풀이는 유클리드 호제 방법을 이용하여 최대공약수를 구하는 것을 작성하여 풀었으며 두 번째 풀이는 내장 라이브러리의 gcd를 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">gcd</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">while</span> y<span class="token punctuation">:</span>
</span><span class="code-line">        x<span class="token punctuation">,</span> y <span class="token operator">=</span> y<span class="token punctuation">,</span> x <span class="token operator">%</span> y
</span><span class="code-line">    <span class="token keyword">return</span> x
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">solution</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    n <span class="token operator">=</span> gcd<span class="token punctuation">(</span>w<span class="token punctuation">,</span> h<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token punctuation">(</span>w <span class="token operator">*</span> h<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>w <span class="token operator">+</span> h <span class="token operator">-</span> n<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># from math import gcd</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># def solution(w, h):</span>
</span><span class="code-line"><span class="token comment">#     return (w * h) - (w + h - gcd(w, h))</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-10867 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-10867-Javascript</link>
    <pubDate>2021-02-20</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-10867-Javascript</guid>
    <description>
    <![CDATA[BOJ-10867-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 정수로 이루어진 수열을 입력받은 후 중복된 수를 제외하고 오름차순으로 정렬하여 출력하는 문제. Set을 이용하여 중복되는 수들을 지운 후 Array.from을 이용하여 다시 Array로 만든 후 compareFunction을 이용하여 오름차순으로 출력하여 풀었다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">10
</span></span></span><span class="code-line"><span class="token template-string"><span class="token string">1 4 2 3 1 4 2 3 1 2</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">.</span><span class="token method function property-access">split</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// const input = require("fs").readFileSync("/dev/stdin").toString().split("\n");</span>
</span><span class="code-line"><span class="token keyword">const</span> l <span class="token operator">=</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">.</span><span class="token keyword module">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Number</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span>
</span><span class="code-line">    <span class="token function">parseInt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
</span><span class="code-line"><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token spread operator">...</span>l<span class="token punctuation">.</span><span class="token method function property-access">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-14495 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-14495-Javascript</link>
    <pubDate>2021-02-20</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-14495-Javascript</guid>
    <description>
    <![CDATA[BOJ-14495-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>점화식이 문제에 써있는 단순 dp 구현 문제. Array의 크기를 먼저 생성후 하는 방법, Push하는 방법으로 풀어봤으나 모두 WA 결과를 받게되었다. 다른 사람의 풀이를 보니 n이 커질 시 BigInt형으로 연산을 해야 풀리는 문제였다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">10</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">.</span><span class="token method function property-access">split</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">readFileSync</span><span class="token punctuation">(</span><span class="token string">"/dev/stdin"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">split</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token known-class-name class-name">BigInt</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">const</span> <span class="token function-variable function">solve</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">tn</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">const</span> l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;=</span> tn<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        l<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token known-class-name class-name">BigInt</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token known-class-name class-name">BigInt</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword control-flow">return</span> l<span class="token punctuation">[</span>tn<span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token function">solve</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// const input = require("fs").readFileSync("/dev/stdin").toString().split("\n");</span>
</span><span class="code-line"><span class="token comment">// const n = BigInt(input[0]);</span>
</span><span class="code-line"><span class="token comment">// const l = [0, 1, 1, 1];</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// for (let i = 4; i &#x3C; n; i++) {</span>
</span><span class="code-line"><span class="token comment">//     l.push(l[i - 3] + l[i - 1]);</span>
</span><span class="code-line"><span class="token comment">// }</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// console.log(l[n].toString().trim());</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1463 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1463-Javascript</link>
    <pubDate>2021-02-20</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1463-Javascript</guid>
    <description>
    <![CDATA[BOJ-1463-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n을 3으로 나누고, 2로 나누고, 1로 뺄 수 있을 때 1로 만들 수 있는 최소 연산의 수를 출력하는 문제. 첫 번째 풀이는 i / t 값을 Number로 바꾼 후 연산하였으나 타입 에러를 받게 되었다. 두 번째 풀이는 평범하게 나누기 연산을 사용하여 풀었더니 CA 결과를 받았다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token comment">// const input = `2`.split("\n");</span>
</span><span class="code-line"><span class="token comment">// const input = require("fs").readFileSync("/dev/stdin").split("\n");</span>
</span><span class="code-line"><span class="token comment">// const n = Number(input[0]);</span>
</span><span class="code-line"><span class="token comment">// // const dp = Array.from(Array(n + 1), () => 0);</span>
</span><span class="code-line"><span class="token comment">// const dp = [0, 0];</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// for (let i = 2; i &#x3C; n + 1; i++) {</span>
</span><span class="code-line"><span class="token comment">//     dp.push(dp[i - 1] + 1);</span>
</span><span class="code-line"><span class="token comment">//     if (i % 2 === 0) {</span>
</span><span class="code-line"><span class="token comment">//         const t = Number(i / 2);</span>
</span><span class="code-line"><span class="token comment">//         dp[i] = Math.min(dp[i], dp[t] + 1);</span>
</span><span class="code-line"><span class="token comment">//     }</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">//     if (i % 3 === 0) {</span>
</span><span class="code-line"><span class="token comment">//         const t = Number(i / 3);</span>
</span><span class="code-line"><span class="token comment">//         dp[i] = Math.min(dp[i], dp[t] + 1);</span>
</span><span class="code-line"><span class="token comment">//     }</span>
</span><span class="code-line"><span class="token comment">// }</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// console.log(dp[n].toString());</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token known-class-name class-name">Number</span><span class="token punctuation">(</span>
</span><span class="code-line">    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">readFileSync</span><span class="token punctuation">(</span><span class="token string">"/dev/stdin"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token known-class-name class-name">Math</span><span class="token punctuation">.</span><span class="token method function property-access">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-18883 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-18883-Javascript</link>
    <pubDate>2021-02-20</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-18883-Javascript</guid>
    <description>
    <![CDATA[BOJ-18883-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>정수 n, m을 입력받은 후 n개의 줄을 출력한다. 각 줄에는 1부터 n*m까지 출력하며 각 줄에는 m개의 수가 있어야한다. 매우 간단한 문제지만 출력 부분 각 줄마다 좌우 공백이 없어야하는 조건 때문에 여러번 WA 결과를 받게 되었다. 결국 각 줄을 담당하는 문자열과 전체 정답을 담당하는 문자열형 배열을 만들어 trim한 값을 추가, 출력시에도 trim하여 CA를 받게 되었다. 두 번째 풀이는 각 줄 마다 출력하여 풀었다. console.log도 파이썬의 print와 마찬가지로 자동적으로 개행을 포함하는 것을 알았다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token comment">// const input = `3 4`.split("\n");</span>
</span><span class="code-line"><span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">readFileSync</span><span class="token punctuation">(</span><span class="token string">"/dev/stdin"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">split</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">const</span> <span class="token punctuation">[</span>n<span class="token punctuation">,</span> m<span class="token punctuation">]</span> <span class="token operator">=</span> input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token known-class-name class-name">Number</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;=</span> n <span class="token operator">*</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    temp <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> m <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        ans <span class="token operator">+=</span> temp<span class="token punctuation">.</span><span class="token method function property-access">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>
</span><span class="code-line">        temp <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token method function property-access">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// const input = require("fs").readFileSync("/dev/stdin").toString().split("\n");</span>
</span><span class="code-line"><span class="token comment">// const [n, m] = input[0].split(" ").map(Number);</span>
</span><span class="code-line"><span class="token comment">// let ans = "";</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// for (let i = 1; i &#x3C;= n * m; i++) {</span>
</span><span class="code-line"><span class="token comment">//     ans += `${i} `;</span>
</span><span class="code-line"><span class="token comment">//     if (i % m === 0) {</span>
</span><span class="code-line"><span class="token comment">//         console.log(`${ans.trim()}\n`);</span>
</span><span class="code-line"><span class="token comment">//         ans = "";</span>
</span><span class="code-line"><span class="token comment">//     }</span>
</span><span class="code-line"><span class="token comment">// }</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-9656 - Javascript]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-9656-Javascript</link>
    <pubDate>2021-02-20</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-9656-Javascript</guid>
    <description>
    <![CDATA[BOJ-9656-Javascript]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 돌을 1개 혹은 3개 가져가는 게임을 두 명이 한다. 모든 수를 완벽하게 할 시 이기는 사람의 이름을 출력하는 문제. 파이썬을 이용하여 풀었던 <code>돌 게임</code> 문제와 승패규칙만이 다른 문제. n이 홀수 짝수인지에 따라 정답이 달라져 나머지 값을 비교하여 풀었다.</p>
<pre class="language-javascript"><code class="language-javascript code-highlight"><span class="code-line"><span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">4</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">.</span><span class="token method function property-access">split</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token comment">// const input = require("fs").readFileSync("/dev/stdin").toString().split("\n");</span>
</span><span class="code-line"><span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"SK"</span> <span class="token operator">:</span> <span class="token string">"CY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-2x타일링 - Python]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-2x타일링-Python</link>
    <pubDate>2021-02-20</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-2x타일링-Python</guid>
    <description>
    <![CDATA[프로그래머스-2x타일링-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>가로 길이가 2이고 세로의 길이가 1인 직사각형 모양의 타일이 있다. 이 때 세로의 길이가 2이고 가로의 길이가 n인 바닥을 가득 채울 때 해당 경우의 수를 출력하는 문제. 첫 번째 풀이는 배열에 n일 떄의 값을 메모이제이션하여 활용하여 마지막 두 값을 더해주며 풀었다. 두 번쨰 풀이는 마지막 두 값만을 이용하는 것을 이용하여 변수 두 개를 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># def solution(n):</span>
</span><span class="code-line"><span class="token comment">#     dp = [0, 1, 2]</span>
</span><span class="code-line"><span class="token comment">#     for i in range(n-2):</span>
</span><span class="code-line"><span class="token comment">#         dp.append(sum(dp[-2:]) % 1000000007)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     return dp[n]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">solution</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span>
</span><span class="code-line">    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1000000007</span>
</span><span class="code-line">    <span class="token keyword">return</span> b
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-두개뽑아서더하기 - Python]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-두개뽑아서더하기-Python</link>
    <pubDate>2021-02-20</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-두개뽑아서더하기-Python</guid>
    <description>
    <![CDATA[프로그래머스-두개뽑아서더하기-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>정수로 이루어진 배열이 주어지고 해당 배열의 서로 다른 인덱스에 있는 두 개의 수를 뽑아 더해서 만들 수 있는 모든 수를 배열에 오름차순으로 담아 반환하는 문제 인덱스가 겹치지 않도록 이중 반복을 수행하며 set 자료형에 더하여 반복문 종료시 해당 set을 정렬한 list로 반환하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">solution</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    answers <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            answers<span class="token punctuation">.</span>add<span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> numbers<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>answers<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[프로그래머스-크레인인형뽑기게임 - Python]]></title>
    <link>https://www.hyesungoh.xyz/프로그래머스-크레인인형뽑기게임-Python</link>
    <pubDate>2021-02-20</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/프로그래머스-크레인인형뽑기게임-Python</guid>
    <description>
    <![CDATA[프로그래머스-크레인인형뽑기게임-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n x n 크기의 이차원 배열을 입력받는다. 해당 배열에는 다양한 인형들의 번호와 빈칸인 0으로 이루어져있다. 인형을 뽑는 인덱스로 이루어진 moves가 주어지며, 해당 순서대로 인형을 뽑아 바구니에 넣는다. 바구니에 넣은 인형의 종류가 같은 게 붙어있을 시 두 인형은 터져 없어진다. 터져 없어진 인형의 수를 출력하는 문제. 반복문을 이용하여 각 열의 인형들을 넣기 전에 마지막 요소와 비교하여 연산하였다. 터진 횟수 * 2를 반환하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">pang</span><span class="token punctuation">(</span>basket<span class="token punctuation">,</span> answer<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> basket<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> item<span class="token punctuation">:</span>
</span><span class="code-line">        basket<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">        answer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        basket<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">solution</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> moves<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    depth <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span>
</span><span class="code-line">    basket <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</span><span class="code-line">    answer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> move <span class="token keyword">in</span> moves<span class="token punctuation">:</span>
</span><span class="code-line">        move <span class="token operator">-=</span> <span class="token number">1</span>
</span><span class="code-line">        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>depth<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>move<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">                pang<span class="token punctuation">(</span>basket<span class="token punctuation">,</span> answer<span class="token punctuation">,</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>move<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">                board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>move<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">                <span class="token keyword">break</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> answer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-10026 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-10026-Python</link>
    <pubDate>2021-02-19</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-10026-Python</guid>
    <description>
    <![CDATA[BOJ-10026-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>RGB로 구분되는 n 크기의 이차원 배열을 입력받는다. 그 후 일반인이 느끼는 구역과 적록색약이 느끼는 구역을 출력하는 문제. 입력받는 이차원 배열을 일반인과 색약으로 구분하여 저장하고 각각 방문확인 배열을 만들어 dfs 연산을 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">dire <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">        <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>sy<span class="token punctuation">,</span> sx<span class="token punctuation">,</span> color<span class="token punctuation">,</span> tgraph<span class="token punctuation">,</span> tvisit<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    q <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>sy<span class="token punctuation">,</span> sx<span class="token punctuation">]</span><span class="token punctuation">]</span>
</span><span class="code-line">    tvisit<span class="token punctuation">[</span>sy<span class="token punctuation">]</span><span class="token punctuation">[</span>sx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">        y<span class="token punctuation">,</span> x <span class="token operator">=</span> q<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">for</span> ty<span class="token punctuation">,</span> tx <span class="token keyword">in</span> dire<span class="token punctuation">:</span>
</span><span class="code-line">            ny<span class="token punctuation">,</span> nx <span class="token operator">=</span> y <span class="token operator">+</span> ty<span class="token punctuation">,</span> x <span class="token operator">+</span> tx
</span><span class="code-line">            <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> ny <span class="token operator">&#x3C;</span> n <span class="token keyword">and</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> nx <span class="token operator">&#x3C;</span> n<span class="token punctuation">:</span>
</span><span class="code-line">                <span class="token keyword">if</span> <span class="token keyword">not</span> tvisit<span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>nx<span class="token punctuation">]</span> <span class="token keyword">and</span> tgraph<span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>nx<span class="token punctuation">]</span> <span class="token operator">==</span> color<span class="token punctuation">:</span>
</span><span class="code-line">                    q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>ny<span class="token punctuation">,</span> nx<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">                    tvisit<span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>nx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">colorweekgraph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    t <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">    graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
</span><span class="code-line">    colorweekgraph<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token string">'R'</span> <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token string">'G'</span> <span class="token keyword">else</span> x<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">visit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">False</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">colorweekvisit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">False</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">area<span class="token punctuation">,</span> colorweekarea <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
</span><span class="code-line"><span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> <span class="token keyword">not</span> visit<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            dfs<span class="token punctuation">(</span>y<span class="token punctuation">,</span> x<span class="token punctuation">,</span> graph<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> graph<span class="token punctuation">,</span> visit<span class="token punctuation">)</span>
</span><span class="code-line">            area <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">        <span class="token keyword">if</span> <span class="token keyword">not</span> colorweekvisit<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            dfs<span class="token punctuation">(</span>y<span class="token punctuation">,</span> x<span class="token punctuation">,</span> colorweekgraph<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> colorweekgraph<span class="token punctuation">,</span> colorweekvisit<span class="token punctuation">)</span>
</span><span class="code-line">            colorweekarea <span class="token operator">+=</span><span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>area<span class="token punctuation">,</span> colorweekarea<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-13699 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-13699-Python</link>
    <pubDate>2021-02-19</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-13699-Python</guid>
    <description>
    <![CDATA[BOJ-13699-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>다음의 점화식에 의해 정의된 수열이 있다. <code>t(0)=1, t(n)=t(0)*t(n-1)+t(1)*t(n-2)+...+t(n-1)*t(0)</code> 정수 n을 입력받은 후 t(n)을 출력하는 문제. 최대 크기인 35까지 i로 반복문을, i까지 j로 반복문을 수행하며 <code>dp[i] += dp[j] * dp[i-j-1]</code>의 점화식을 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1788 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1788-Python</link>
    <pubDate>2021-02-17</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1788-Python</guid>
    <description>
    <![CDATA[BOJ-1788-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>피보나치 수를 음수일 경우까지 확장한 문제. n &#x3C;= 1일 때고 f(n) = f(n-1) + f(n-2)가 성립되도록 확장한다. n이 주어진 후 해당 피보나치수가 양수일 때 1, 음수일 때 -1, 0일 때 0을 출력한 후, 해당 피보나치수의 절댓값을 출력하는 문제. 절댓값을 출력하는 부분에서 음수와 양수의 값이 다르지 않다는 것을 유추하게 되었다. 첫 접근은 -1보다 작은 수들을 -1로 출력한 후 최대 크기만큼 연산 후 절댓값 n의 피보나치 수를 출력하여 풀었으나, n이 홀수일 때는 양수가 나오게 되어 WA 결과를 받게되었다. 조건문에 해당 조건을 추가한 후 나머지 연산은 그대로 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">size <span class="token operator">=</span> <span class="token number">1000001</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"0\n0"</span><span class="token punctuation">)</span>
</span><span class="code-line">    exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">if</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> n <span class="token operator">&#x3C;</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1000000000</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1939 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1939-Python</link>
    <pubDate>2021-02-17</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1939-Python</guid>
    <description>
    <![CDATA[BOJ-1939-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 섬에 양방향 m개의 다리가 있다. 이 때 해당 다리가 옮길 수 있는 최대 무게가 주어진다. 출발 섬과 도착 섬이 주어질 때 옮길 수 있는 최대 무게를 출력하는 문제. 분리집합 방식으로 풀었다. 입력받는 다리들을 Max heap형태로 저장 후, 모든 입력이 끝나면 각 다리의 두 섬을 union 연산한다. 그 후 정답을 찾을 두 섬의 parent 노드를 find 연산을 이용하여 비교하여 같을 시 현재 반복중인 다리의 길이를 출력하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> heapq
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> node <span class="token operator">==</span> parent<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> node
</span><span class="code-line">
</span><span class="code-line">    p <span class="token operator">=</span> find<span class="token punctuation">(</span>parent<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    parent<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> p
</span><span class="code-line">    <span class="token keyword">return</span> p
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">union</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    pa<span class="token punctuation">,</span> pb <span class="token operator">=</span> find<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> find<span class="token punctuation">(</span>b<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">if</span> pa <span class="token operator">!=</span> pb<span class="token punctuation">:</span>
</span><span class="code-line">        parent<span class="token punctuation">[</span>pb<span class="token punctuation">]</span> <span class="token operator">=</span> pa
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">solve</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">while</span> bridges<span class="token punctuation">:</span>
</span><span class="code-line">        w<span class="token punctuation">,</span> n1<span class="token punctuation">,</span> n2 <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>bridges<span class="token punctuation">)</span>
</span><span class="code-line">        w <span class="token operator">=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span>
</span><span class="code-line">        union<span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">if</span> find<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">==</span> find<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">return</span> w
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">parent <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">bridges <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    s<span class="token punctuation">,</span> e<span class="token punctuation">,</span> w <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>bridges<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span>w<span class="token punctuation">,</span> s<span class="token punctuation">,</span> e<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">s<span class="token punctuation">,</span> e <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>solve<span class="token punctuation">(</span>s<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2268 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2268-Python</link>
    <pubDate>2021-02-16</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2268-Python</guid>
    <description>
    <![CDATA[BOJ-2268-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>세그먼트 트리를 이용해 sum과 modify를 구현하는 문제. sum을 구현할 때 i가 j보다 큰 경우가 있어 WA를 많이 받았다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token keyword">from</span> math <span class="token keyword">import</span> log2<span class="token punctuation">,</span> ceil
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">query</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> start <span class="token operator">></span> right <span class="token keyword">or</span> left <span class="token operator">></span> end<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> <span class="token number">0</span>
</span><span class="code-line">    <span class="token keyword">if</span> left <span class="token operator">&#x3C;=</span> start <span class="token keyword">and</span> right <span class="token operator">>=</span> end<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
</span><span class="code-line">    <span class="token keyword">return</span> query<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token operator">+</span> query<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> index<span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> index <span class="token operator">&#x3C;</span> start <span class="token keyword">or</span> end <span class="token operator">&#x3C;</span> index<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span>
</span><span class="code-line">    <span class="token keyword">if</span> start <span class="token operator">==</span> end<span class="token punctuation">:</span>
</span><span class="code-line">        tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> to
</span><span class="code-line">        <span class="token keyword">return</span>
</span><span class="code-line">    mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
</span><span class="code-line">    update<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> index<span class="token punctuation">,</span> to<span class="token punctuation">)</span>
</span><span class="code-line">    update<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> index<span class="token punctuation">,</span> to<span class="token punctuation">)</span>
</span><span class="code-line">    tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> tree<span class="token punctuation">[</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> tree<span class="token punctuation">[</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">height <span class="token operator">=</span> ceil<span class="token punctuation">(</span>log2<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">size <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token punctuation">(</span>height <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">tree <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    f<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> f<span class="token punctuation">:</span>
</span><span class="code-line">        update<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token keyword">if</span> i <span class="token operator">&#x3C;</span> j <span class="token keyword">else</span> <span class="token punctuation">(</span>j<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span>query<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2491 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2491-Python</link>
    <pubDate>2021-02-16</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2491-Python</guid>
    <description>
    <![CDATA[BOJ-2491-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 수가 나열된 수열이 있다. 그 수열 안에서 연속해서 커지거나 작아지는 수열 중 가장 길이가 긴 것을 찾아, 그 길이를 출력하는 문제. 커지는 것과 작아지는 것을 관리하는 두 배열을 만든 후 반복문을 이용하여 조건에 충족했을 때 <code>dp[i] = dp[i-1] + 1</code>의 점화식을 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">pdp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">ndp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> l<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pdp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pdp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>
</span><span class="code-line">    <span class="token keyword">if</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&#x3C;=</span> l<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ndp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ndp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>pdp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token punctuation">(</span>ndp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-18352 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-18352-Python</link>
    <pubDate>2021-02-15</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-18352-Python</guid>
    <description>
    <![CDATA[BOJ-18352-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 도시에 단방향이며 거리가 1인 m개의 도로가 있다. x 도시부터 출발하여 최단거리가 k인 도시들을 출력하는 문제. 힙과 INF를 이용하는 다익스트라 방법을 이용하여 풀었으며 입력되는 도로들을 인접리스트 형식으로 사용하였다. x로부터 모든 도시들의 이동 거리를 배열에 저장 후 filter을 사용하여 거리가 k인 도시들을 저장 후 출력하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> heapq
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">INF <span class="token operator">=</span> sys<span class="token punctuation">.</span>maxsize
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    dist <span class="token operator">=</span> <span class="token punctuation">[</span>INF <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    dist<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line">    q <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">    heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> x<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">        cnt<span class="token punctuation">,</span> now <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>q<span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">for</span> nn<span class="token punctuation">,</span> nd <span class="token keyword">in</span> graph<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            nextd <span class="token operator">=</span> nd <span class="token operator">+</span> cnt
</span><span class="code-line">            <span class="token keyword">if</span> dist<span class="token punctuation">[</span>nn<span class="token punctuation">]</span> <span class="token operator">></span> nextd<span class="token punctuation">:</span>
</span><span class="code-line">                heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token punctuation">[</span>nextd<span class="token punctuation">,</span> nn<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">                dist<span class="token punctuation">[</span>nn<span class="token punctuation">]</span> <span class="token operator">=</span> nextd
</span><span class="code-line">    <span class="token keyword">return</span> dist
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> k<span class="token punctuation">,</span> x <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">{</span>i<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    s<span class="token punctuation">,</span> e <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    graph<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>e<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">dist <span class="token operator">=</span> dijkstra<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> i<span class="token punctuation">:</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> k<span class="token punctuation">,</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token punctuation">[</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> ans<span class="token punctuation">]</span> <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2225 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2225-Python</link>
    <pubDate>2021-02-15</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2225-Python</guid>
    <description>
    <![CDATA[BOJ-2225-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>0부터 n까지의 정수 k개를 더해서 그 합이 n이 되는 경우의 수를 구하는 문제. 수의 순서만 다를 때도 다른 경우로 새며 한 개의 수를 여러 번 쓸 수도 있다. k가 1일 때는 모든 경우가 1이며, 2일 때는 i+1의 값들이 정답이다. 경우의 수를 나열해보니 1, 3 = (1, 2 + 1, 1)과 같은 dp[i] = dp[i] + dp[i-1]의 점화식이 도출되어 k+1과 n+1까지의 이중 반복문을 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1000000000</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-5585 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-5585-Python</link>
    <pubDate>2021-02-14</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-5585-Python</guid>
    <description>
    <![CDATA[BOJ-5585-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n원의 물건을 살 때 1000원을 냈다고 한다. 이 때 500, 100, 50, 10, 5, 1원으로 거스름돈의 개수가 최소가 될 떄의 개수를 출력하는 문제. 간단한 그리디 방법을 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">-</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">coins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line"><span class="token keyword">for</span> coin <span class="token keyword">in</span> coins<span class="token punctuation">:</span>
</span><span class="code-line">    t <span class="token operator">=</span> n <span class="token operator">//</span> coin
</span><span class="code-line">    n <span class="token operator">-=</span> t <span class="token operator">*</span> coin
</span><span class="code-line">    ans <span class="token operator">+=</span> t
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-10216 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-10216-Python</link>
    <pubDate>2021-02-13</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-10216-Python</guid>
    <description>
    <![CDATA[BOJ-10216-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>최대 5000의 값을 갖는 좌표 y, x와 반경 거리를 나타내는 r이 입력된다. n개의 좌표가 입력될 때 연결된 것을 계산하여 몇 개의 구역이 있는 지 출력하는 문제. 첫 번째 풀이는 5000의 크기를 갖는 2차원 배열을 이용하여 dfs를 사용해 풀었으나 메모리초과와 시간초과 결과를 받게 되었다. 입력되는 점과 방문확인을 위한 배열을 한 개로 사용하여도 같은 결과를 받았다. 두 번째 풀이는 유니온 파인드 방식을 이용하여 풀었다. 행렬, 리스트를 사용하지 않으며 n개의 배열을 만들어 x의 차이, y의 차이를 각각 곱한 값을 더한 값과 두 좌표의 r을 곱한 값을 비교하여 r을 곱한 값이 클 시 연결돼 있음을 판단하여 합집합 연산을 하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># import sys</span>
</span><span class="code-line"><span class="token comment"># from collections import deque</span>
</span><span class="code-line"><span class="token comment"># input = sys.stdin.readline</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># dire = [[0,1],[0,-1],[1,0],[-1,0]]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># def check(Y, X, r):</span>
</span><span class="code-line"><span class="token comment">#     for y in range(Y-r, Y+r):</span>
</span><span class="code-line"><span class="token comment">#         for x in range(X-r, X+r):</span>
</span><span class="code-line"><span class="token comment">#             if 0 &#x3C;= y &#x3C;= max_pos and 0 &#x3C;= x &#x3C;= max_pos:</span>
</span><span class="code-line"><span class="token comment">#                 graph[y][x] = 1</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># def dfs(Y, X, cnt):</span>
</span><span class="code-line"><span class="token comment">#     q = deque()</span>
</span><span class="code-line"><span class="token comment">#     q.append([Y, X])</span>
</span><span class="code-line"><span class="token comment">#     graph[Y][X] = cnt</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     while q:</span>
</span><span class="code-line"><span class="token comment">#         y, x = q.popleft()</span>
</span><span class="code-line"><span class="token comment">#         for ty, tx in dire:</span>
</span><span class="code-line"><span class="token comment">#             ny, nx = ty + y, tx + x</span>
</span><span class="code-line"><span class="token comment">#             if 0 &#x3C;= ny &#x3C;= max_pos and 0 &#x3C;= nx &#x3C;= max_pos:</span>
</span><span class="code-line"><span class="token comment">#                 if graph[ny][nx] == 1:</span>
</span><span class="code-line"><span class="token comment">#                     graph[ny][nx] = cnt</span>
</span><span class="code-line"><span class="token comment">#                     q.append([ny, nx])</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># for _ in range(int(input())):</span>
</span><span class="code-line"><span class="token comment">#     N = int(input())</span>
</span><span class="code-line"><span class="token comment">#     check_list = []</span>
</span><span class="code-line"><span class="token comment">#     max_pos = 0</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     for _ in range(N):</span>
</span><span class="code-line"><span class="token comment">#         y, x, r = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment">#         check_list.append([y, x, r])</span>
</span><span class="code-line"><span class="token comment">#         max_pos = max(max_pos, y, x)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     graph = [[-1 for _ in range(max_pos+1)] for _ in range(max_pos+1)]</span>
</span><span class="code-line"><span class="token comment">#     # visit = [[0 for _ in range(max_pos+1)] for _ in range(max_pos+1)]</span>
</span><span class="code-line"><span class="token comment">#     for y, x, r in check_list:</span>
</span><span class="code-line"><span class="token comment">#         check(y, x, r)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     cnt = 1</span>
</span><span class="code-line"><span class="token comment">#     for y in range(max_pos):</span>
</span><span class="code-line"><span class="token comment">#         for x in range(max_pos):</span>
</span><span class="code-line"><span class="token comment">#             if graph[y][x] == 1:</span>
</span><span class="code-line"><span class="token comment">#                 cnt += 1</span>
</span><span class="code-line"><span class="token comment">#                 dfs(y, x, cnt)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     print(cnt-1)</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">union</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    parent_a <span class="token operator">=</span> find<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
</span><span class="code-line">    parent_b <span class="token operator">=</span> find<span class="token punctuation">(</span>b<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">if</span> parent_a <span class="token operator">!=</span> parent_b<span class="token punctuation">:</span>
</span><span class="code-line">        parent<span class="token punctuation">[</span>parent_b<span class="token punctuation">]</span> <span class="token operator">=</span> parent_a
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> parent<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">==</span> node<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> node
</span><span class="code-line">
</span><span class="code-line">    p <span class="token operator">=</span> find<span class="token punctuation">(</span>parent<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    parent<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> p
</span><span class="code-line">    <span class="token keyword">return</span> p
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    parent <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    ypos <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    xpos <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    radius <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        y<span class="token punctuation">,</span> x<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">        ypos<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> y
</span><span class="code-line">        xpos<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x
</span><span class="code-line">        radius<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> r
</span><span class="code-line">
</span><span class="code-line">    ans <span class="token operator">=</span> n
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            ydif <span class="token operator">=</span> ypos<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> ypos<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
</span><span class="code-line">            xdif <span class="token operator">=</span> xpos<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> xpos<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
</span><span class="code-line">            r <span class="token operator">=</span> radius<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> radius<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>ydif<span class="token operator">*</span>ydif <span class="token operator">+</span> xdif<span class="token operator">*</span>xdif<span class="token punctuation">)</span> <span class="token operator">&#x3C;=</span> <span class="token punctuation">(</span>r<span class="token operator">*</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">                <span class="token keyword">if</span> find<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> find<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">                    union<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>
</span><span class="code-line">                    ans <span class="token operator">-=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[[Like Amazing Lion] Refactoring Log]]></title>
    <link>https://www.hyesungoh.xyz/likeamazinglion_refactoring_log</link>
    <pubDate>2021-02-13</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/likeamazinglion_refactoring_log</guid>
    <description>
    <![CDATA[likeamazinglion_refactoring_log]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="like-amazing-lion-프로젝트-리팩토링" class="heading">Like Amazing Lion 프로젝트 리팩토링</h2>
<ul>
<li>교외 동아리 멋쟁이사자처럼의 홍보용 이벤트 웹</li>
<li>Firebase와 React + TypeScript를 사용한 CSR 웹</li>
<li><a href="https://github.com/hyesungoh/Like_Amazing_Lion" target="_blank" rel="noopener noreferer">Github</a></li>
</ul>
<h2 id="log" class="heading">Log</h2>
<ul>
<li>
<p>Directory Structure</p>
<ul>
<li>공식 문서를 참고하여 너무 오래 고민하지 않으며 기존 형태를 유지하면서 더욱 가독성이 보기 좋게 나누도록</li>
<li>Router Directory 생성</li>
<li>App.tsx src 폴더에 위치</li>
<li>
<h5 id="추후-진행할-프로젝트에서는-container-presenter-패턴-atomic-패턴을-이용해-볼-예정">추후 진행할 프로젝트에서는 Container-Presenter 패턴, Atomic 패턴을 이용해 볼 예정</h5>
</li>
</ul>
</li>
<li>
<p>Router안의 Transition Group을 이용한 Transition Router 부분을 새로운 컴포넌트를 만들어 분리</p>
</li>
<li>
<p>Loading component의 timeout 시간을 변수로 빼어 수정, 확장, 가독성 부분에서 유리하도록 수정</p>
</li>
</ul>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token comment">// before</span>
</span><span class="code-line"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token function">setIsLoading</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1500</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// after</span>
</span><span class="code-line"><span class="token keyword">const</span> <span class="token constant">LOADING_TIME</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1500</span>
</span><span class="code-line"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token function">setIsLoading</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token constant">LOADING_TIME</span><span class="token punctuation">)</span>
</span></code></pre>
<ul>
<li>
<p>assets Directory를 만들어 Theme.ts와 images 폴더를 위치</p>
</li>
<li>
<p>Nav의 오른쪽 요소들을 NavElement component로 빼둠</p>
</li>
</ul>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">NavInterface</span> <span class="token punctuation">{</span>
</span><span class="code-line">  user<span class="token operator">:</span> firebase<span class="token punctuation">.</span>default<span class="token punctuation">.</span>User <span class="token operator">|</span> <span class="token keyword">null</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<ul>
<li>AuthForm component의 signUp, signIn을 함수로 빼어 더욱 간결하게 작성</li>
</ul>
<pre class="language-ts"><code class="language-ts code-highlight"><span class="code-line"><span class="token comment">// before</span>
</span><span class="code-line"><span class="token keyword">const</span> <span class="token function-variable function">onSubmit</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> React<span class="token punctuation">.</span>FormEvent<span class="token operator">&#x3C;</span>HTMLFormElement<span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">  event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">  <span class="token keyword">try</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>isSignUp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token keyword">await</span> authService<span class="token punctuation">.</span><span class="token function">createUserWithEmailAndPassword</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span> password<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
</span><span class="code-line">      <span class="token keyword">await</span> authService<span class="token punctuation">.</span><span class="token function">signInWithEmailAndPassword</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span> password<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> message <span class="token punctuation">}</span> <span class="token operator">=</span> error
</span><span class="code-line">    <span class="token function">setErrorMsg</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// after</span>
</span><span class="code-line"><span class="token keyword">const</span> <span class="token function-variable function">signUp</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> authService<span class="token punctuation">.</span><span class="token function">createUserWithEmailAndPassword</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span> password<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">const</span> <span class="token function-variable function">signIn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> authService<span class="token punctuation">.</span><span class="token function">signInWithEmailAndPassword</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span> password<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">const</span> <span class="token function-variable function">onSubmit</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> React<span class="token punctuation">.</span>FormEvent<span class="token operator">&#x3C;</span>HTMLFormElement<span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line">  event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">  <span class="token keyword">try</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">await</span> <span class="token punctuation">(</span>isSignUp <span class="token operator">?</span> <span class="token function">signUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">signIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> message <span class="token punctuation">}</span> <span class="token operator">=</span> error
</span><span class="code-line">    <span class="token function">setErrorMsg</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<ul>
<li>가독성을 위해 Waiting component의 다른 서비스 url 주소를 변수로 빼둠</li>
<li>target 속성과 rel 속성을 추가적으로 부여. target을 blank로 한 후 rel 속성을 noreferrer로 하지 않을 시 보안의 위협이 있다함</li>
</ul>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token comment">// before</span>
</span><span class="code-line"><span class="token punctuation">;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>someurl.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Button</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">맛집 보기</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>a</span><span class="token punctuation">></span></span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// after</span>
</span><span class="code-line"><span class="token keyword">const</span> <span class="token constant">LIKELION_FOOD_URL</span> <span class="token operator">=</span> <span class="token string">'someurl.com'</span>
</span><span class="code-line"><span class="token punctuation">;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>a</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>noreferrer<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token constant">LIKELION_FOOD_URL</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Button</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">맛집 보기</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span><span class="token class-name">Button</span></span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line"><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>a</span><span class="token punctuation">></span></span>
</span></code></pre>
<ul>
<li>QuizSlider의 classList 추가 부분을 반복적으로 작성하는 부분이 적게 변환</li>
</ul>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token comment">// before</span>
</span><span class="code-line"><span class="token keyword">if</span> <span class="token punctuation">(</span>currentQuizNum <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  leftButton<span class="token punctuation">.</span><span class="token property-access">current</span><span class="token punctuation">.</span><span class="token property-access">classList</span><span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token string">'slider__hide'</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>currentQuizNum <span class="token operator">===</span> maxQuizNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  rightButton<span class="token punctuation">.</span><span class="token property-access">current</span><span class="token punctuation">.</span><span class="token property-access">classList</span><span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token string">'slider__hide'</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// after</span>
</span><span class="code-line"><span class="token keyword">let</span> modifingButton<span class="token operator">:</span> <span class="token maybe-class-name">React</span><span class="token punctuation">.</span><span class="token property-access"><span class="token maybe-class-name">MutableRefObject</span></span><span class="token operator">&#x3C;</span><span class="token builtin">any</span><span class="token operator">></span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span>
</span><span class="code-line"><span class="token keyword">if</span> <span class="token punctuation">(</span>currentQuizNum <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  modifingButton <span class="token operator">=</span> leftButton
</span><span class="code-line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>currentQuizNum <span class="token operator">===</span> maxQuizNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  modifingButton <span class="token operator">=</span> rightButton
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">modifingButton<span class="token operator">?.</span>current<span class="token punctuation">.</span><span class="token property-access">classList</span><span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span><span class="token string">'slider__hide'</span><span class="token punctuation">)</span>
</span></code></pre>
<ul>
<li>QuizProgress의 classList를 저장하는 배열을 기존 빈 배열을 선언 후 추가하는 방법에서 모두 들어가는 class명을 넣은 상태에서 조건에 따라 추가하는 방식으로 수정</li>
</ul>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token comment">// before</span>
</span><span class="code-line"><span class="token keyword">const</span> tempProgress<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;=</span> maxQuizNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">const</span> tempElement <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">progress__element </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i <span class="token operator">===</span> currentQuizNum <span class="token operator">&#x26;&#x26;</span>
</span></span></span><span class="code-line"><span class="token template-string"><span class="token interpolation">    <span class="token string">'progress__selected'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>
</span><span class="code-line">  tempProgress<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>tempElement<span class="token punctuation">)</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// after</span>
</span><span class="code-line"><span class="token keyword">const</span> tempProgress<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">(</span>maxQuizNum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">fill</span><span class="token punctuation">(</span><span class="token string">'progress__element'</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;=</span> maxQuizNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> currentQuizNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    tempProgress<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token string">' progress__selected'</span>
</span><span class="code-line">  <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<ul>
<li>유지보수와 가독성을 위해 QuizProgress의 Class명을 변수로 선언</li>
</ul>
<pre class="language-tsx"><code class="language-tsx code-highlight"><span class="code-line"><span class="token comment">// before</span>
</span><span class="code-line"><span class="token keyword">const</span> tempProgress<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">(</span>maxQuizNum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">fill</span><span class="token punctuation">(</span><span class="token string">"progress__element"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;=</span> maxQuizNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> currentQuizNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        tempProgress<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token string">" progress__selected"</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">// after</span>
</span><span class="code-line"><span class="token keyword">const</span> <span class="token constant">PROGRESS_CN</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"progress__element"</span><span class="token punctuation">;</span>
</span><span class="code-line"><span class="token keyword">const</span> <span class="token constant">SELECTED_PROGRESS_CN</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">" progress__selected"</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token spread operator">...</span>
</span><span class="code-line"><span class="token keyword">const</span> tempProgress<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token known-class-name class-name">Array</span><span class="token punctuation">(</span>maxQuizNum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">fill</span><span class="token punctuation">(</span><span class="token constant">PROGRESS_CN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&#x3C;=</span> maxQuizNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> currentQuizNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">        tempProgress<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token constant">SELECTED_PROGRESS_CN</span><span class="token punctuation">;</span>
</span><span class="code-line">    <span class="token punctuation">}</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre>
<ul>
<li>
<p>components의 각 폴더에 있는 config 파일들을 configs 폴더에 위치</p>
</li>
<li>
<p>각 파일들에 있었던 interface들을 types/Types.ts 파일에 위치</p>
</li>
</ul>
<h2 id="느낀-점" class="heading">느낀 점</h2>
<ul>
<li>TypeScript의 Interface를 남용하진 않나 생각됨, Generics와 같은 추가적인 개념을 익혀야될 필요를 느낌</li>
<li>React.memo 등 최적화를 위한 방법을 더욱 공부해야될 것을 느낌</li>
<li>CSS, SCSS 등 스타일에 대한 Directory Structure 개념이 잡히지 않았다고 생각됨</li>
<li>스타일에 대하여 우겨넣기 식으로 하지 않는 지 고민되어 CSS 또한 더 공부 해야될 것을 느낌</li>
</ul>
<h2 id="배운-점" class="heading">배운 점</h2>
<ul>
<li>CSR 웹의 가능성을 알게 됨</li>
<li>Firebase를 사용하여 Query, Authentication, DB등의 사용 방법을 알게 됨</li>
<li>Material UI를 사용 및 커스텀 할 수 있게 됨 (아직은 많이 부족하지만)</li>
<li>React-Transition-Group을 더욱 다채롭게 사용할 수 있게 됨</li>
</ul>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-13424 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-13424-Python</link>
    <pubDate>2021-02-12</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-13424-Python</guid>
    <description>
    <![CDATA[BOJ-13424-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>N개의 방, M개의 길이 있으며 각 길은 두 방의 번호, 길이를 입력받는 양방향 길이다. K명의 사람이 다른 방에 있을 때 이동 거리의 총하빙 최소가 되는 방을 출력하는 문제. 인접행렬을 이용하여 초기화는 INF로, 입력 후에는 길이를 저장하였다. 모든 입력이 완료될 시 플로이드 와샬 방법을 이용하여 모든 노드에 대해서 최소 길이를 저장 후, K명의 이동 거리를 총합하는 배열을 관리하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line">INF <span class="token operator">=</span> sys<span class="token punctuation">.</span>maxsize
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">floyd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        graph<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">                graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> graph<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    N<span class="token punctuation">,</span> M <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>INF <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        s<span class="token punctuation">,</span> e<span class="token punctuation">,</span> w <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">        graph<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">[</span>e<span class="token punctuation">]</span> <span class="token operator">=</span> w
</span><span class="code-line">        graph<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> w
</span><span class="code-line">
</span><span class="code-line">    K <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    start <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    floyd<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> INF
</span><span class="code-line">    min_value <span class="token operator">=</span> INF
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> node <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">for</span> person <span class="token keyword">in</span> start<span class="token punctuation">:</span>
</span><span class="code-line">            values<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">+=</span> graph<span class="token punctuation">[</span>person<span class="token punctuation">]</span><span class="token punctuation">[</span>node<span class="token punctuation">]</span>
</span><span class="code-line">        min_value <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>min_value<span class="token punctuation">,</span> values<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>values<span class="token punctuation">.</span>index<span class="token punctuation">(</span>min_value<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[mac OS big sur 업데이트 후 Python version error]]></title>
    <link>https://www.hyesungoh.xyz/macOS-bigsur-python-version</link>
    <pubDate>2021-02-12</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/macOS-bigsur-python-version</guid>
    <description>
    <![CDATA[macOS-bigsur-python-version]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="mac-os-11-big-sur-update-후-기존-python-version-error-발생" class="heading">Mac OS 11, Big Sur Update 후, 기존 Python Version error 발생</h2>
<p>기존 사용하던 Python 3.7이 Big Sur Update 후, 실행되지 않아 알아본 결과</p>
<p>Python 3.9.1부터 Big Sur을 지원한다고 한다 ..</p>
<p><img src="https://user-images.githubusercontent.com/26461307/107739679-c7aedd00-6d4c-11eb-92e1-760a4014e85b.png" alt="스크린샷 2021-02-12 오후 4 09 24"></p>
<p><a href="https://www.python.org/downloads/release/python-391/" target="_blank" rel="noopener noreferer">해당 게시물</a></p>
<h4 id="python-공식-홈페이지에서-installer을-받아-간편하게-설치하여-사용-가능"><a href="https://www.python.org/downloads/mac-osx/" target="_blank" rel="noopener noreferer">Python 공식 홈페이지</a>에서 Installer을 받아 간편하게 설치하여 사용 가능</h4>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-11729 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-11729-Python</link>
    <pubDate>2021-02-11</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-11729-Python</guid>
    <description>
    <![CDATA[BOJ-11729-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>세 개의 장대가 있는 하노이 탑이며 n개의 첫 번째 장대에 있을 때 옮긴 횟수와 옮긴 위치를 출력하는 문제. 2의 n승 -1의 옮긴 횟수를 출력하며 재귀적으로 첫 번째 장대에 있는 원판의 수, 출발하는 장대, 안쓰는 장대, 도착하는 장대를 매개변수로 사용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">move</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> z<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        move<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> z<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> z<span class="token punctuation">)</span>
</span><span class="code-line">        move<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> x<span class="token punctuation">,</span> z<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> n<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">move<span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1520 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1520-Python</link>
    <pubDate>2021-02-11</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1520-Python</guid>
    <description>
    <![CDATA[BOJ-1520-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>Y, X 크기의 정수로 이루어진 2차원 배열이 입력된다. 0, 0 위치에서 Y-1, X-1까지 해당 자리의 정수가 낮은 곳으로만 이동할 때, Y-1, X-1에 도착하는 경우의 수가 몇가지인 지 출력하는 문제. 첫 번째 풀이는 단순 다이내믹 프로그래밍 방법을 이용하여 풀었으나 먼저 계산된 곳이 있을 시 연산이 안되는 부분이 있어 각 방향마다 연산을 더 하도록 하지 않는 이상 안될 것 같아 방향을 틀었다. 두 번째 풀이는 -1로 선언된 배열을 만든 후 해당 배열을 이용하여 방문확인과 함께 이동방향의 값을 더하는 것을 재귀적으로 연산하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># dire = [[1, 0],</span>
</span><span class="code-line"><span class="token comment">#         [-1, 0],</span>
</span><span class="code-line"><span class="token comment">#         [0, 1],</span>
</span><span class="code-line"><span class="token comment">#         [0, -1]]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># Y, X = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment"># graph = [[] for _ in range(Y)]</span>
</span><span class="code-line"><span class="token comment"># for i in range(Y): graph[i] = list(map(int, input().split()))</span>
</span><span class="code-line"><span class="token comment"># dp = [[0 for _ in range(X)] for _ in range(Y)]</span>
</span><span class="code-line"><span class="token comment"># dp[0][0] = 1</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># for y in range(Y):</span>
</span><span class="code-line"><span class="token comment">#     for x in range(X):</span>
</span><span class="code-line"><span class="token comment">#         for ty, tx in dire:</span>
</span><span class="code-line"><span class="token comment">#             ny = y + ty</span>
</span><span class="code-line"><span class="token comment">#             nx = x + tx</span>
</span><span class="code-line"><span class="token comment">#             if 0 &#x3C;= ny &#x3C; Y and 0 &#x3C;= nx &#x3C; X:</span>
</span><span class="code-line"><span class="token comment">#                 if graph[ny][nx] &#x3C; graph[y][x]:</span>
</span><span class="code-line"><span class="token comment">#                     dp[ny][nx] += dp[y][x]</span>
</span><span class="code-line"><span class="token comment">#                     print(y, x)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># for i in dp:</span>
</span><span class="code-line"><span class="token comment">#     print(i)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">sys<span class="token punctuation">.</span>setrecursionlimit<span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">9</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> Y<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> y <span class="token keyword">and</span> X<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> x<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">if</span> dp<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">        dp<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">        <span class="token keyword">for</span> ty<span class="token punctuation">,</span> tx <span class="token keyword">in</span> dire<span class="token punctuation">:</span>
</span><span class="code-line">            ny<span class="token punctuation">,</span> nx <span class="token operator">=</span> y <span class="token operator">+</span> ty<span class="token punctuation">,</span> x <span class="token operator">+</span> tx
</span><span class="code-line">            <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> ny <span class="token operator">&#x3C;</span> Y <span class="token keyword">and</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> nx <span class="token operator">&#x3C;</span> X<span class="token punctuation">:</span>
</span><span class="code-line">                <span class="token keyword">if</span> graph<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">></span> graph<span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">                    dp<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+=</span> dfs<span class="token punctuation">(</span>ny<span class="token punctuation">,</span> nx<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">dire <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</span><span class="code-line">Y<span class="token punctuation">,</span> X <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1914 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1914-Python</link>
    <pubDate>2021-02-10</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1914-Python</guid>
    <description>
    <![CDATA[BOJ-1914-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>세 개의 판에 n개의 원판이 있는 하노이 탑 문제. 옮긴 횟수를 출력한 후, n이 20 이하일 때만 이동하는 경로를 출력하는 문제. 2의 n승 - 1이 하노이 탑의 옮긴 횟수임에 먼저 출력한다. 그 후 1번 판에 있는 원판의 수, 출발할 곳, 안쓰는 곳, 도착할 곳을 매개 변수로 재귀적으로 호출하여 풀었다. 하노이탑 문제는 아직 이해도가 부족한 것 같다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">move</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> fr<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span>fr<span class="token punctuation">,</span> to<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        move<span class="token punctuation">(</span>num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> fr<span class="token punctuation">,</span> to<span class="token punctuation">,</span> temp<span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span>fr<span class="token punctuation">,</span> to<span class="token punctuation">)</span>
</span><span class="code-line">        move<span class="token punctuation">(</span>num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> temp<span class="token punctuation">,</span> fr<span class="token punctuation">,</span> to<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">N <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> N<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">if</span> N <span class="token operator">&#x3C;=</span> <span class="token number">20</span><span class="token punctuation">:</span> move<span class="token punctuation">(</span>N<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-9084 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-9084-Python</link>
    <pubDate>2021-02-10</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-9084-Python</guid>
    <description>
    <![CDATA[BOJ-9084-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>TC만큼 n개의 동전을 입력받고 m원을 해당 동전으로 몇가지 경우의 수로 나타낼 수 있는 지 출력하는 문제. n과 m+1까지를 이용하여 반복문을 수행하며 1원부터 m원까지의 경우의 수를 계산하였다. 현재 동전 i가 현재 가격 j를 이용하여 <code>dp[j] += dp[j-coins[i]]</code>의 점화식을 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    coins <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    m <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> j <span class="token operator">-</span> coins<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">                dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>j<span class="token operator">-</span>coins<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-12852 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-12852-Python</link>
    <pubDate>2021-02-09</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-12852-Python</guid>
    <description>
    <![CDATA[BOJ-12852-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>정수 n을 입력받은 후 해당 정수가 3으로 나누어 떨어지면 3으로 나누며, 2로 나누어 떨어지면 2로 나누기, 1을 빼기 3개의 연산이 가능할 때 이를 적절히 사용해 1로 만들 때 연산을 사용하는 횟수의 최솟값과 방법에 포함되어 있는 수를 출력하는 문제. 기본 1로 만들기에서 방법에 포함되어 있는 수를 추가한 문제. 첫 번째 풀이는 힙을 이용하여 그래프 탐색과 같은 방법으로 연산하며 1일 때 필요한 값을 반환하도록 풀었으나 시간초과 결과를 받게 되었다. 두 번째 풀이는 i가 1로 만들어질 때 필요한 값을 저장하는 배열을 이용하여 다이내믹 프로그래밍 방법을 이용하여 풀었다. 값이 갱신될 때 방법에 포함되어 있는 수를 저장하는 2차원 배열에 값을 추가하도록 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># import heapq</span>
</span><span class="code-line"><span class="token comment"># import sys</span>
</span><span class="code-line"><span class="token comment"># INF = sys.maxsize</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># def solve():</span>
</span><span class="code-line"><span class="token comment">#     q = []</span>
</span><span class="code-line"><span class="token comment">#     # cnt, visit, now</span>
</span><span class="code-line"><span class="token comment">#     heapq.heappush(q, [0, [n], n])</span>
</span><span class="code-line"><span class="token comment">#     visit = [INF for _ in range(n+1)]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     while q:</span>
</span><span class="code-line"><span class="token comment">#         cnt, route, now = heapq.heappop(q)</span>
</span><span class="code-line"><span class="token comment">#         if now == 1:</span>
</span><span class="code-line"><span class="token comment">#             return cnt, route</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#         visit[now] = cnt</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#         heapq.heappush(q, [cnt+1, route+[now-1], now-1])</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#         div3 = now // 3</span>
</span><span class="code-line"><span class="token comment">#         if now % 3 == 0:</span>
</span><span class="code-line"><span class="token comment">#             heapq.heappush(q, [cnt+1, route+[div3], div3])</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#         div2 = now // 2</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#         if now % 2 == 0:</span>
</span><span class="code-line"><span class="token comment">#             heapq.heappush(q, [cnt+1, route+[div2], div2])</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># n = int(input())</span>
</span><span class="code-line"><span class="token comment"># cnt, route = solve()</span>
</span><span class="code-line"><span class="token comment"># print(cnt)</span>
</span><span class="code-line"><span class="token comment"># print(*route)</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">paths <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">paths<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>
</span><span class="code-line">    paths<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> paths<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span>i<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    div3 <span class="token operator">=</span> i <span class="token operator">//</span> <span class="token number">3</span>
</span><span class="code-line">    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> dp<span class="token punctuation">[</span>div3<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>div3<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>
</span><span class="code-line">        paths<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> paths<span class="token punctuation">[</span>div3<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span>i<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    div2 <span class="token operator">=</span> i <span class="token operator">//</span> <span class="token number">2</span>
</span><span class="code-line">    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> dp<span class="token punctuation">[</span>div2<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>div2<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>
</span><span class="code-line">        paths<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> paths<span class="token punctuation">[</span>div2<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span>i<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">reversed</span><span class="token punctuation">(</span>paths<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-14938 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-14938-Python</link>
    <pubDate>2021-02-09</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-14938-Python</guid>
    <description>
    <![CDATA[BOJ-14938-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 도시, m의 수색 범위, r개의 길이 있다. 각 도시에 ni개의 아이템이 있을 때 수색 범위가 넘지 않는 선에서 아이템을 찾을 수 있는 최대 수를 출력하는 문제. 첫 풀이는 입력받는 길들을 인접 리스트 형식으로, 존재하지 않는 길은 INF로 입력을 받은 후 플로이드 와샬 방법을 이용하여 수색범위가 넘지 않았을 때 추가하는 방법으로 풀었으나 틀렸습니다 결과를 받게 되었다. 아마 추가적인 연산이 있지 않았을 까 의심된다. 두 번째 풀이는 인접 행렬을 이용한 다익스트라를 이용하여 풀었으며 수색 범위가 넘지 않았을 때 힙에 추가, 방문 확인 배열을 이용해 방문하지 않았던 도시들의 아이템만 연산하였다. 다익스트라 연산을 n번하여 찾은 최대값을 출력하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># import sys</span>
</span><span class="code-line"><span class="token comment"># INF = sys.maxsize</span>
</span><span class="code-line"><span class="token comment"># input = sys.stdin.readline</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># def floyd():</span>
</span><span class="code-line"><span class="token comment">#     get = [items[i] for i in range(n+1)]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     for k in range(1, n+1):</span>
</span><span class="code-line"><span class="token comment">#         for i in range(1, n+1):</span>
</span><span class="code-line"><span class="token comment">#             if graph[i][k] &#x3C;= m:</span>
</span><span class="code-line"><span class="token comment">#                 get[i] += items[k]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#             for j in range(1, n+1):</span>
</span><span class="code-line"><span class="token comment">#                 if graph[i][k] + graph[k][j] &#x3C;= m:</span>
</span><span class="code-line"><span class="token comment">#                     get[i] += items[j]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     return max(get)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># n, m, r = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment"># items = [0] + list(map(int, input().split()))</span>
</span><span class="code-line"><span class="token comment"># graph = [[INF for _ in range(n+1)] for _ in range(n+1)]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># for _ in range(r):</span>
</span><span class="code-line"><span class="token comment">#     s, e, w = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment">#     graph[s][e] = min(graph[s][e], w)</span>
</span><span class="code-line"><span class="token comment">#     graph[e][s] = min(graph[e][s], w)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># ans = floyd()</span>
</span><span class="code-line"><span class="token comment"># print(ans)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">import</span> heapq
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line">INF <span class="token operator">=</span> sys<span class="token punctuation">.</span>maxsize
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    q <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">    heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> start<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    visit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    visit<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">    item <span class="token operator">=</span> items<span class="token punctuation">[</span>start<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">        weight<span class="token punctuation">,</span> node <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>q<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">for</span> nn<span class="token punctuation">,</span> nw <span class="token keyword">in</span> graph<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            next_weight <span class="token operator">=</span> weight <span class="token operator">+</span> nw
</span><span class="code-line">            <span class="token keyword">if</span> next_weight <span class="token operator">&#x3C;=</span> m<span class="token punctuation">:</span>
</span><span class="code-line">                heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token punctuation">[</span>next_weight<span class="token punctuation">,</span> nn<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">                <span class="token keyword">if</span> <span class="token keyword">not</span> visit<span class="token punctuation">[</span>nn<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">                    visit<span class="token punctuation">[</span>nn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">                    item <span class="token operator">+=</span> items<span class="token punctuation">[</span>nn<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> item
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">{</span>i<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span>  i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    s<span class="token punctuation">,</span> e<span class="token punctuation">,</span> w <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    graph<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>e<span class="token punctuation">,</span> w<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    graph<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>s<span class="token punctuation">,</span> w<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    ans <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> dijkstra<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[axios와 fetch의 차이점]]></title>
    <link>https://www.hyesungoh.xyz/different-of-axios-fetch</link>
    <pubDate>2021-02-09</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/different-of-axios-fetch</guid>
    <description>
    <![CDATA[different-of-axios-fetch]]>
    </description>
    <content:encoded>
      <![CDATA[<h2 id="ajax-" class="heading">AJAX ?</h2>
<h6 id="asynchronous-javascript-and-xml">Asynchronous Javascript And Xml</h6>
<p>비동기적으로 클라이언트와 서버간 XML 데이터를 주고받는 기술</p>
<h2 id="xml-" class="heading">XML ?</h2>
<h6 id="extensible-markup-language">eXtensible Markup Language</h6>
<p>HTML과 같은 마크업 언어, HTML은 데이터를 <em>표현</em>하는 데, XML은 데이터를 <em>전달</em>하는 데 초점이 맞춰짐</p>
<h2 id="axios와-fetch의-차이점" class="heading">Axios와 Fetch의 차이점</h2>
<ul>
<li>
<h4 id="axios">Axios</h4>
<ul>
<li>HTTP 통신을 위한 JavaScript 라이브러리</li>
<li>구형 브라우저를 지원</li>
<li>JSON 데이터의 자동 변환이 가능</li>
<li>node.JS에서 사용 가능</li>
<li>request aborting 가능</li>
<li>reponse timeout을 쉽게 설정 가능</li>
<li>catch 시, then을 실행하지 않고 에러 로그를 보여줌</li>
<li>CSRF 보호 기능이 내장</li>
<li>upload progress 지원</li>
</ul>
</li>
<li>
<h4 id="fetch">Fetch</h4>
<ul>
<li>JavaScript 내장 라이브러리</li>
<li>네트워크 에러 발생 시 기다려야함
지원하지 않는 브라우저가 있음</li>
</ul>
</li>
</ul>
<h2 id="왜-axios가-인기가-많을까" class="heading">왜 Axios가 인기가 많을까?</h2>
<p>Fetch를 이용하여 Axios와 동일한 기능을 구현할 수는 있으나, Axios를 사용하여 해당 시간을 아껴 다른 곳에 투자하는 게 이득이라 생각된다.</p>
<blockquote>
<p>참고 : <a href="https://dream-frontend.tistory.com/382" target="_blank" rel="noopener noreferer">Ajax</a>, <a href="https://wonit.tistory.com/304" target="_blank" rel="noopener noreferer">axios</a>, <a href="https://helloworld-88.tistory.com/67" target="_blank" rel="noopener noreferer">XML</a></p>
</blockquote>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-14502 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-14502-Python</link>
    <pubDate>2021-02-08</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-14502-Python</guid>
    <description>
    <![CDATA[BOJ-14502-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>Y, X 크기의 연구실에 바이러스가 퍼졌다. 바이러스는 상하좌우로 퍼질 수 있으며 벽을 넘지 못한다. 3개의 벽을 세울 수 있을 때 바이러스가 퍼질 수 없는 영역의 최대 크기를 출력하는 문제. 바이러스는 2, 벽은 1, 빈 공간은 0으로 입력된다. 백트래킹 방식을 이용하여 재귀적으로 모든 경우에 벽을 세운 후 세운 벽이 3개가 될 시 바이러스가 퍼지는 함수를 이용하여 새로운 배열에 바이러스가 퍼진 상태로 만든다. 해당 배열을 기준으로 안전영역의 크기를 global로 값을 비교하여 풀었다. 브루트포스, 그래프 탐색, 백트래킹이 합쳐진 형태로 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">dist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">        <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">count_safezone</span><span class="token punctuation">(</span>graph<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">global</span> ans
</span><span class="code-line">    cnt <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> graph<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">                cnt <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">    ans <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> cnt<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">infection</span><span class="token punctuation">(</span>graph<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    temp_graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    q <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            temp_graph<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> graph<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span>
</span><span class="code-line">            <span class="token keyword">if</span> temp_graph<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>
</span><span class="code-line">                q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>y<span class="token punctuation">,</span> x<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">        y<span class="token punctuation">,</span> x <span class="token operator">=</span> q<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">for</span> dy<span class="token punctuation">,</span> dx <span class="token keyword">in</span> dist<span class="token punctuation">:</span>
</span><span class="code-line">            ny <span class="token operator">=</span> y <span class="token operator">+</span> dy
</span><span class="code-line">            nx <span class="token operator">=</span> x <span class="token operator">+</span> dx
</span><span class="code-line">
</span><span class="code-line">            <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> ny <span class="token operator">&#x3C;</span> Y <span class="token keyword">and</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> nx <span class="token operator">&#x3C;</span> X<span class="token punctuation">:</span>
</span><span class="code-line">                <span class="token keyword">if</span> temp_graph<span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>nx<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">                    temp_graph<span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>nx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>
</span><span class="code-line">                    q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>ny<span class="token punctuation">,</span> nx<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    count_safezone<span class="token punctuation">(</span>temp_graph<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">create_wall</span><span class="token punctuation">(</span>depth<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> depth <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>
</span><span class="code-line">        infection<span class="token punctuation">(</span>graph<span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">return</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> graph<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">                graph<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">                create_wall<span class="token punctuation">(</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">                graph<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">Y<span class="token punctuation">,</span> X <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">create_wall<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1744 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1744-Python</link>
    <pubDate>2021-02-08</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1744-Python</guid>
    <description>
    <![CDATA[BOJ-1744-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 수가 입력될 때, 그 수열의 합을 구하려고 한다. 하지만 그 수열의 합을 모두 더해서 구하는 것이 아니라, 수열의 두 수를 묶으려고 한다. 어떤 수를 묶을 때 위치와 상관없이 묶을 수 있으며 묶은 두 수는 서로 곱한 후에 더한다. 수열의 모든 수는 단 한번만 묶거나, 묶지 않아야할 때 그 합의 최대치를 출력하는 문제. 입력되는 수들을 1 이상의 정수들과 0과 음수들을 저장하는 두 배열에 나눠 저장한다. 정수들은 내림차순으로 정렬하여 큰 수들 먼저 두개씩 묶어 곱한 값을 더하며 이 때 두 수 중 1이 있을 때는 더하는 연산을 하여 저장하였다. 0과 정수들은 내림차순으로 정렬하여 작은 수들을 먼저 묶어 주어 연산된 값을 출력하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">positive <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">negative <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    t <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    positive<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token keyword">if</span> t <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">else</span> negative<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">positive<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</span><span class="code-line">negative<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">lp <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>positive<span class="token punctuation">)</span>
</span><span class="code-line">ln <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>negative<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> lp<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    t <span class="token operator">=</span> positive<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">if</span> i<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">>=</span> lp <span class="token keyword">else</span> positive<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> positive<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">if</span> positive<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">or</span> positive<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">else</span> positive<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> positive<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">    ans <span class="token operator">+=</span> t
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> ln<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    ans <span class="token operator">+=</span> negative<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">if</span> i<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">>=</span> ln <span class="token keyword">else</span> negative<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> negative<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-10775 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-10775-Python</link>
    <pubDate>2021-02-07</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-10775-Python</guid>
    <description>
    <![CDATA[BOJ-10775-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>G개의 게이트에 P개의 비행기가 순서대로 도착할 예정이다. 각 비행기는 1번부터 입력되는 gi번까지 도킹할 수 있을 때 최대한 많은 비행기가 도킹한 수를 출력하는 문제. 첫 번째 풀이는 그리디 방법을 이용하여 입력되는 gi부터 0까지 반복문을 이용하여 풀었으나 당연하게도 시간초과 결과를 받게 되었다. 입력되는 G와 P의 최대 수가 10의 5승이기 떄문. 두 번째 풀이는 유니온 파인드 방법을 이용하여 gi마다 루트 노드를 찾으며 해당 노드와 -1한 노드를 union한다. 위 연산을 반복하여 gi의 루트 노드가 0일 때 반복문을 종료하여 풀었다. 유니온 파인드를 이런 방법으로도 응용할 수 있는 지 알게 되었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># import sys</span>
</span><span class="code-line"><span class="token comment"># input = sys.stdin.readline</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># G = int(input())</span>
</span><span class="code-line"><span class="token comment"># P = int(input())</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># gates = [False for _ in range(G+1)]</span>
</span><span class="code-line"><span class="token comment"># for i in range(P):</span>
</span><span class="code-line"><span class="token comment">#     t = int(input())</span>
</span><span class="code-line"><span class="token comment">#     for j in range(t, 0, -1):</span>
</span><span class="code-line"><span class="token comment">#         if not gates[j]:</span>
</span><span class="code-line"><span class="token comment">#             gates[j] = True</span>
</span><span class="code-line"><span class="token comment">#             break</span>
</span><span class="code-line"><span class="token comment">#         elif j == 1:</span>
</span><span class="code-line"><span class="token comment">#             print(i)</span>
</span><span class="code-line"><span class="token comment">#             exit()</span>
</span><span class="code-line"><span class="token comment"># print(P)</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> node <span class="token operator">==</span> parent<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> node
</span><span class="code-line">    p <span class="token operator">=</span> find<span class="token punctuation">(</span>parent<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    parent<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> p
</span><span class="code-line">    <span class="token keyword">return</span> p
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">union</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    pa <span class="token operator">=</span> find<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
</span><span class="code-line">    pb <span class="token operator">=</span> find<span class="token punctuation">(</span>b<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">if</span> pa <span class="token operator">!=</span> pb<span class="token punctuation">:</span>
</span><span class="code-line">        parent<span class="token punctuation">[</span>pa<span class="token punctuation">]</span> <span class="token operator">=</span> pb
</span><span class="code-line">
</span><span class="code-line">G <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">P <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">parent <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>G<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    t <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    pt <span class="token operator">=</span> find<span class="token punctuation">(</span>t<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> pt <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</span><span class="code-line">        exit<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    union<span class="token punctuation">(</span>pt<span class="token punctuation">,</span> pt<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1976 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1976-Python</link>
    <pubDate>2021-02-07</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1976-Python</guid>
    <description>
    <![CDATA[BOJ-1976-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 도시마다 다른 도시들로 갈 수 있는지 입력받은 후, m개의 도시 루트를 입력받는다. 해당 루트대로 이동 할 수 있으면 YES, 아닐 시 NO를 출력하는 문제. 첫 번째 풀이는 플로이드 와샬 방법을 이용하여 완전 탐색하여 풀었다. 이번 풀이는 유니온 파인드 방법을 이용하여 풀었으며 입력되는 루트의 부모 루트가 모두 동일 시 YES를, 아닐 시 NO를 출력하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># import sys</span>
</span><span class="code-line"><span class="token comment"># input = sys.stdin.readline</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># def solve():</span>
</span><span class="code-line"><span class="token comment">#     for i in range(m - 1):</span>
</span><span class="code-line"><span class="token comment">#         now = dist[i]</span>
</span><span class="code-line"><span class="token comment">#         next = dist[i + 1]</span>
</span><span class="code-line"><span class="token comment">#         if not graph[now][next]:</span>
</span><span class="code-line"><span class="token comment">#             return False</span>
</span><span class="code-line"><span class="token comment">#     return True</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># n = int(input())</span>
</span><span class="code-line"><span class="token comment"># m = int(input())</span>
</span><span class="code-line"><span class="token comment"># graph = [list(map(int, input().split())) for _ in range(n)]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># for k in range(n):</span>
</span><span class="code-line"><span class="token comment">#     graph[k][k] = 1</span>
</span><span class="code-line"><span class="token comment">#     for i in range(n):</span>
</span><span class="code-line"><span class="token comment">#         for j in range(n):</span>
</span><span class="code-line"><span class="token comment">#                 if graph[i][k] and graph[k][j]:</span>
</span><span class="code-line"><span class="token comment">#                     graph[i][j] = 1</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># dist = list(map(lambda x: int(x)-1, input().split()))</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># print("YES" if solve() else "NO")</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> node <span class="token operator">==</span> parent<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> node
</span><span class="code-line">
</span><span class="code-line">    p <span class="token operator">=</span> find<span class="token punctuation">(</span>parent<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    parent<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> p
</span><span class="code-line">    <span class="token keyword">return</span> p
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">union</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    parent_a <span class="token operator">=</span> find<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
</span><span class="code-line">    parent_b <span class="token operator">=</span> find<span class="token punctuation">(</span>b<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">if</span> parent_a <span class="token operator">!=</span> parent_b<span class="token punctuation">:</span>
</span><span class="code-line">        parent<span class="token punctuation">[</span>parent_b<span class="token punctuation">]</span> <span class="token operator">=</span> parent_a
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">m <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">parent <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    linked <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> linked<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            union<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">plan <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span>find<span class="token punctuation">(</span>parent<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> plan<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"YES"</span> <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token string">"NO"</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1717 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1717-Python</link>
    <pubDate>2021-02-05</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1717-Python</guid>
    <description>
    <![CDATA[BOJ-1717-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 노드가 있을 때 각 노드들이 연결되어 있는 지 여부를 출력 및 합연산을 하는 유니온 파인드 문제. 기존 유니온 파인드로 풀 수 있는 문제들을 플로이드 와샬, DFSBFS 등의 방법으로 풀었으나 유니온 파인드 방법도 알아두면 좋을 것 같아 공부해보았다. 유니온 파인드는 주어진 노드 또는 집합을 합하는 Union과 노드의 루트 노드가 무엇인 지 반환하는 Find로 나뉜다. 자세한 사항은 주석을 참고. 해당 문제는 간단한 유니온 파인드의 구현으로 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token comment"># 현재 노드가 루트 노드일 시</span>
</span><span class="code-line">    <span class="token keyword">if</span> node <span class="token operator">==</span> parent<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token comment"># 루트 노드 값을 반환</span>
</span><span class="code-line">        <span class="token keyword">return</span> node
</span><span class="code-line">
</span><span class="code-line">    <span class="token comment"># 루트 노드가 아닐 시 재귀적으로 탐색</span>
</span><span class="code-line">    p <span class="token operator">=</span> find<span class="token punctuation">(</span>parent<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token comment"># 루트 노드를 현재 node 값에 저장</span>
</span><span class="code-line">    parent<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> p
</span><span class="code-line">    <span class="token keyword">return</span> p <span class="token comment"># 해당 루트 노드 값을 반환</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token comment"># 루트 노드가 아닐 시 탐색한 후 할당, 반환하는 과정을 경로 압축 최적화라고 한다</span>
</span><span class="code-line">    <span class="token comment"># return find(parent[u])와 같이 작성시 경로 압축 최적화가 안되었다고 할 수 있는데</span>
</span><span class="code-line">    <span class="token comment"># 이는 단순히 배열에 할당하지 않기 때문인가 ?</span>
</span><span class="code-line">    <span class="token comment"># 아무튼 사용 이유는 한 쪽으로 치우쳐진 트리일 때 걸리는 시간이라고 한다.</span>
</span><span class="code-line">    <span class="token comment"># 문제를 더 풀어가며 이해해야할 부분 같다.</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">union</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token comment"># a, b의 루트 노드를 찾는다.</span>
</span><span class="code-line">    parent_a <span class="token operator">=</span> find<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
</span><span class="code-line">    parent_b <span class="token operator">=</span> find<span class="token punctuation">(</span>b<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token comment"># 루트노드가 갖지 않을 시 b의 루트 노드에 a 루트 노드 값을 저장</span>
</span><span class="code-line">    <span class="token comment"># a의 루트 노드에 b 루트 노드 값을 저장해도 된다.</span>
</span><span class="code-line">    <span class="token keyword">if</span> parent_a <span class="token operator">!=</span> parent_b<span class="token punctuation">:</span>
</span><span class="code-line">        parent<span class="token punctuation">[</span>parent_b<span class="token punctuation">]</span> <span class="token operator">=</span> parent_a
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token comment"># 각 노드의 루트 노드를 저장할 배열</span>
</span><span class="code-line"><span class="token comment"># 처음에는 자기 자신을 루트 노드로 생성</span>
</span><span class="code-line">parent <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    c<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">        union<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        parent_a <span class="token operator">=</span> find<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
</span><span class="code-line">        parent_b <span class="token operator">=</span> find<span class="token punctuation">(</span>b<span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"YES"</span> <span class="token keyword">if</span> parent_a <span class="token operator">==</span> parent_b <span class="token keyword">else</span> <span class="token string">"NO"</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1850 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1850-Python</link>
    <pubDate>2021-02-05</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1850-Python</guid>
    <description>
    <![CDATA[BOJ-1850-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>두 수 n, m을 입력받은 후 각 수만큼 1로 이루어진 수의 최대공약수를 출력하는 문제. 첫 풀이는 1로 만든 수를 이용하여 유클리드 호제 방법을 이용하여 풀었으나 메모리초과 결과를 받게 되었다. 1로 바꾸지 않은 최대공약수의 규칙을 보니 해당 수를 1로 바꾸면 정답이 되는 것을 찾아 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># a, b = map(lambda x: int("1" * int(x)), input().split())</span>
</span><span class="code-line">a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">while</span> b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span> a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">%</span> b
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1"</span> <span class="token operator">*</span> a<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-4195 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-4195-Python</link>
    <pubDate>2021-02-05</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-4195-Python</guid>
    <description>
    <![CDATA[BOJ-4195-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 두 문자열이 공백으로 나눠져 입력된다. 해당 두 문자열은 서로 연결된 상태이며 매 입력마다 해당 관계의 연결된 모든 노드의 수를 입력하는 문제. 첫번째 풀이는 단순 DFS 탐색을 통해 풀었으나 예상했던 것 같이 시간초과결과를 받게 되었다. 입력되는 방문확인을 배열로 하며 in 메소드를 이용하여 확인한 것과 매 입력마다 DFS 연산을 수행하는 점이 작성하면서도 시간초과가 확실할 것으로 예상했다. 두 번째 풀이는 유니온 파인드 방법을 이용하여 풀었다. 부모 노드를 저장하는 딕셔너리, 해당 노드의 연결된 사람을 저장하는 딕셔너리 두개를 이용하여 union시 루트 노드의 값을 더해준 후 입력되는 문자열의 루트 노드의 수를 출력하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># import sys</span>
</span><span class="code-line"><span class="token comment"># input = sys.stdin.readline</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># def countFollow(node):</span>
</span><span class="code-line"><span class="token comment">#     q = [node]</span>
</span><span class="code-line"><span class="token comment">#     followers = [node]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     while q:</span>
</span><span class="code-line"><span class="token comment">#         now = q.pop()</span>
</span><span class="code-line"><span class="token comment">#         if now in graph:</span>
</span><span class="code-line"><span class="token comment">#             for next in graph[now]:</span>
</span><span class="code-line"><span class="token comment">#                 if not next in followers:</span>
</span><span class="code-line"><span class="token comment">#                     followers.append(next)</span>
</span><span class="code-line"><span class="token comment">#                     q.append(next)</span>
</span><span class="code-line"><span class="token comment">#     return len(followers)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># for _ in range(int(input())):</span>
</span><span class="code-line"><span class="token comment">#     n = int(input())</span>
</span><span class="code-line"><span class="token comment">#     graph = {}</span>
</span><span class="code-line"><span class="token comment">#     for _ in range(n):</span>
</span><span class="code-line"><span class="token comment">#         a, b = input().split()</span>
</span><span class="code-line"><span class="token comment">#         if a in graph: graph[a].append(b)</span>
</span><span class="code-line"><span class="token comment">#         else: graph[a] = [b]</span>
</span><span class="code-line"><span class="token comment">#         if b in graph: graph[b].append(a)</span>
</span><span class="code-line"><span class="token comment">#         else: graph[b] = [a]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#         print(countFollow(a))</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> node <span class="token operator">==</span> parent<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> node
</span><span class="code-line">
</span><span class="code-line">    p <span class="token operator">=</span> find<span class="token punctuation">(</span>parent<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    parent<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> p
</span><span class="code-line">    <span class="token keyword">return</span> p
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">union</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    parent_a <span class="token operator">=</span> find<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
</span><span class="code-line">    parent_b <span class="token operator">=</span> find<span class="token punctuation">(</span>b<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">if</span> parent_a <span class="token operator">!=</span> parent_b<span class="token punctuation">:</span>
</span><span class="code-line">        parent<span class="token punctuation">[</span>parent_b<span class="token punctuation">]</span> <span class="token operator">=</span> parent_a
</span><span class="code-line">        followers<span class="token punctuation">[</span>parent_a<span class="token punctuation">]</span> <span class="token operator">+=</span> followers<span class="token punctuation">[</span>parent_b<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    parent <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</span><span class="code-line">    followers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">if</span> a <span class="token keyword">not</span> <span class="token keyword">in</span> parent<span class="token punctuation">:</span>
</span><span class="code-line">            parent<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> a
</span><span class="code-line">            followers<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">        <span class="token keyword">if</span> b <span class="token keyword">not</span> <span class="token keyword">in</span> parent<span class="token punctuation">:</span>
</span><span class="code-line">            parent<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> b
</span><span class="code-line">            followers<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">        union<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span>followers<span class="token punctuation">[</span>find<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2749 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2749-Python</link>
    <pubDate>2021-02-01</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2749-Python</guid>
    <description>
    <![CDATA[BOJ-2749-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>1,000,000,000,000,000,000보다 작거나 같은 n이 주어질 때, n 번째 피보나치 수를 출력하는 문제. 첫 번째 풀이는 단순 DP 방법을 이용하여 풀었으나 당연하게도 메모리 초과 결과를 받게 되었다. 피보나치 수를 나눈 수는 주기를 갖는 특징, 피사노 주기를 계산하여 해당 값을 이용하여 피보나치 수를 계산, 해당 값을 출력하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># n = int(input())</span>
</span><span class="code-line"><span class="token comment"># dp = [0 for _ in range(n+1)]</span>
</span><span class="code-line"><span class="token comment"># dp[1] = 1</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># for i in range(2, n+1):</span>
</span><span class="code-line"><span class="token comment">#     dp[i] = (dp[i-1] + dp[i-2]) % 1000000</span>
</span><span class="code-line"><span class="token comment"># print(dp[i] % 1000000)</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">DIV <span class="token operator">=</span> <span class="token number">1000000</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">solve</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    n1<span class="token punctuation">,</span> n2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>
</span><span class="code-line">    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        n1<span class="token punctuation">,</span> n2 <span class="token operator">=</span> n2 <span class="token operator">%</span> DIV<span class="token punctuation">,</span> <span class="token punctuation">(</span>n1 <span class="token operator">+</span> n2<span class="token punctuation">)</span> <span class="token operator">%</span> DIV
</span><span class="code-line">    <span class="token keyword">return</span> n1
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>solve<span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-19622 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-19622-Python</link>
    <pubDate>2021-01-30</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-19622-Python</guid>
    <description>
    <![CDATA[BOJ-19622-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 회의 시작 시간, 종료 시간, 회의 인원이 주어진다. 임의의 회의 k는 k-1과 k+1과 시간이 겹치며 다른 회의와는 겹치지 않는 조건이 있다. 이 조건을 이용하여 점화식 l[i] = max(l[i-2], l[l-3]) + l[i]을 유추하여 풀었다. n이 2 이하일 때 max(l)을 출력 후 프로그램을 종료하여 예외처리하였다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    s<span class="token punctuation">,</span> e<span class="token punctuation">,</span> w <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> w
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">if</span> n <span class="token operator">&#x3C;=</span> <span class="token number">2</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">l<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+=</span> l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> l<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1965 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1965-Python</link>
    <pubDate>2021-01-30</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1965-Python</guid>
    <description>
    <![CDATA[BOJ-1965-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>상자의 크기가 주어졌을 때 앞의 상자는 뒤에 있는 상자보다 작을 때 들어갈 수 있다고 한다. n개의 상자의 크기가 주어질 때 한 번에 넣을 수 있는 최대 상자 개수를 출력하는 문제. 가장 긴 증가하는 수열 문제와 같이 수가 증가하는 부분이 제일 큰 것을 출력하는 문제. 첫 풀이는 입력되는 마지막 상자부터 첫 상자까지 반복을 수행하며 크기를 비교하여 <code>dp[j] = max(dp[i]+1, dp[j])</code>의 점화식을 이용하여 풀었다. 두 번째 풀이는 처음부터 마지막까지 반복하며 <code>dp[i] = max(dp[i], dp[j]+1)</code>의 점화식을 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># n = int(input())</span>
</span><span class="code-line"><span class="token comment"># l = list(map(int, input().split()))</span>
</span><span class="code-line"><span class="token comment"># dp = [1 for _ in range(n)]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># for i in range(n-1, -1, -1):</span>
</span><span class="code-line"><span class="token comment">#     for j in range(i-1, -1, -1):</span>
</span><span class="code-line"><span class="token comment">#         if l[i] > l[j]:</span>
</span><span class="code-line"><span class="token comment">#             dp[j] = max(dp[i]+1, dp[j])</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># print(max(dp))</span>
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> l<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1660 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1660-Python</link>
    <pubDate>2021-01-29</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1660-Python</guid>
    <description>
    <![CDATA[BOJ-1660-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>1, 4, 10, 20, 35의 순으로 커지는 동전이 있을 시 n원을 나타내는 최소한의 동전의 수를 출력하는 문제. n보다 작은 동전들을 구한 후 최대값으로 dp 배열을 선언 후 dp 배열의 동전 가격 인덱스를 1로 초기화하였다. 그 후 동전의 수와 동전부터 n까지 이중 반복문을 수행하며 <code>dp[j] = min(dp[j], dp[j - coins[i]] + 1)</code>의 점화식을 이용하여 풀었다. dp는 계속 풀어도 적응이 안되는 것만 같다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">coins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">coin<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> len_coin <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span>
</span><span class="code-line">total <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> total <span class="token operator">></span> n<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">break</span>
</span><span class="code-line">    coins<span class="token punctuation">.</span>append<span class="token punctuation">(</span>total<span class="token punctuation">)</span>
</span><span class="code-line">    coin <span class="token operator">+=</span> temp
</span><span class="code-line">    temp <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">    total <span class="token operator">+=</span> coin
</span><span class="code-line">
</span><span class="code-line">size <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>coins<span class="token punctuation">)</span>
</span><span class="code-line">dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">300001</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> coins<span class="token punctuation">:</span>
</span><span class="code-line">    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>coins<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> coins<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1719 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1719-Python</link>
    <pubDate>2021-01-28</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1719-Python</guid>
    <description>
    <![CDATA[BOJ-1719-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 노드, m개의 쌍방향 간선이 있을 때 최단거리로 다른 모든 노드들을 방문할 때 먼저 들리는 노드의 번호를 모든 노드에 대해서 출력하는 문제. 3중 반복문을 사용하는 플로이드 와샬 방법을 이용하여 풀었다. ik + kj 값으로 거리가 갱신될 시 첫번째로 방문하는 노드를 저장하는 배열의 값 ik를 ij에 저장하여 풀었다. 두 번째 풀이는 숏코딩으로 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line">INF <span class="token operator">=</span> sys<span class="token punctuation">.</span>maxsize
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    dist <span class="token operator">=</span> graph
</span><span class="code-line">    route <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        dist<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">        route<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"-"</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">                <span class="token builtin">next</span> <span class="token operator">=</span> graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> graph<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>
</span><span class="code-line">                <span class="token keyword">if</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token builtin">next</span><span class="token punctuation">:</span>
</span><span class="code-line">                    dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">next</span>
</span><span class="code-line">                    route<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> route<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> route
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>INF <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    s<span class="token punctuation">,</span> e<span class="token punctuation">,</span> w <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    graph<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">[</span>e<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>graph<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">)</span>
</span><span class="code-line">    graph<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>graph<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> r <span class="token keyword">in</span> solve<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># import sys</span>
</span><span class="code-line"><span class="token comment"># INF = sys.maxsize</span>
</span><span class="code-line"><span class="token comment"># r = sys.stdin.readline</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># n, m = map(int, r().split())</span>
</span><span class="code-line"><span class="token comment"># g = [[INF] * (n+1) for _ in range(n+1)]</span>
</span><span class="code-line"><span class="token comment"># ro = [[i for i in range(n+1)] for _ in range(n+1)]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># for _ in range(m):</span>
</span><span class="code-line"><span class="token comment">#     s, e, w = map(int, r().split())</span>
</span><span class="code-line"><span class="token comment">#     g[s][e] = min(g[s][e], w)</span>
</span><span class="code-line"><span class="token comment">#     g[e][s] = min(g[e][s], w)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># for k in range(1, n+1):</span>
</span><span class="code-line"><span class="token comment">#     g[k][k] = 0</span>
</span><span class="code-line"><span class="token comment">#     ro[k][k] = "-"</span>
</span><span class="code-line"><span class="token comment">#     for i in range(1, n+1):</span>
</span><span class="code-line"><span class="token comment">#         for j in range(1, n+1):</span>
</span><span class="code-line"><span class="token comment">#             ne = g[i][k] + g[k][j]</span>
</span><span class="code-line"><span class="token comment">#             if g[i][j] > ne:</span>
</span><span class="code-line"><span class="token comment">#                 g[i][j] = ne</span>
</span><span class="code-line"><span class="token comment">#                 ro[i][j] = ro[i][k]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># for s in ro[1:]:</span>
</span><span class="code-line"><span class="token comment">#     print(" ".join(map(lambda x: str(x), s[1:])))</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2606 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2606-Python</link>
    <pubDate>2021-01-28</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2606-Python</guid>
    <description>
    <![CDATA[BOJ-2606-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>그래프 탐색을 이용한 바이러스 문제를 다시 풀어보았다. 기존 방법인 현재 노드의 방문확인 후 연결된 노드들을 extend하는 방법을 유지하며 그래프의 선언 및 추가 부분을 깔끔하게 바꾼 방법으로 풀었으며 다른 방법은 요즘 주로 사용하는 자식 노드들을 기준으로 반복을 돌며 자식노드들의 방문 확인 후 q에 추가하는 방법이다. 두 방법 중 extend하는 방법이 시간이 백준 상 4ms 차이로 빠른데, 내장 함수 사용에서 나오는 차이갔다. 하지만 extend는 확장성이 떨어지기 때문에 간단한 문제에서만 쓰일 것 같은 내 예상이다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># def dfs(graph):</span>
</span><span class="code-line"><span class="token comment">#     visit = []</span>
</span><span class="code-line"><span class="token comment">#     stack = [1]</span>
</span><span class="code-line"><span class="token comment">#     while stack:</span>
</span><span class="code-line"><span class="token comment">#         node = stack.pop()</span>
</span><span class="code-line"><span class="token comment">#         if node not in visit:</span>
</span><span class="code-line"><span class="token comment">#             visit.append(node)</span>
</span><span class="code-line"><span class="token comment">#             if node in graph:</span>
</span><span class="code-line"><span class="token comment">#                 stack.extend(graph[node])</span>
</span><span class="code-line"><span class="token comment">#     return visit</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># graph = {}</span>
</span><span class="code-line"><span class="token comment"># input()</span>
</span><span class="code-line"><span class="token comment"># for _ in range(int(input())):</span>
</span><span class="code-line"><span class="token comment">#     x, y = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment">#     if x in graph:</span>
</span><span class="code-line"><span class="token comment">#         graph[x].append(y)</span>
</span><span class="code-line"><span class="token comment">#     else:</span>
</span><span class="code-line"><span class="token comment">#         graph[x] = [y]</span>
</span><span class="code-line"><span class="token comment">#     if y in graph:</span>
</span><span class="code-line"><span class="token comment">#         graph[y].append(x)</span>
</span><span class="code-line"><span class="token comment">#     else:</span>
</span><span class="code-line"><span class="token comment">#         graph[y] = [x]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># print(len(dfs(graph))-1)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># def solve():</span>
</span><span class="code-line"><span class="token comment">#     visit = [False for _ in range(n+1)]</span>
</span><span class="code-line"><span class="token comment">#     visit[1] = True</span>
</span><span class="code-line"><span class="token comment">#     q = [1]</span>
</span><span class="code-line"><span class="token comment">#     ans = 0</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     while q:</span>
</span><span class="code-line"><span class="token comment">#         node = q.pop()</span>
</span><span class="code-line"><span class="token comment">#         for next_node in graph[node]:</span>
</span><span class="code-line"><span class="token comment">#             if not visit[next_node]:</span>
</span><span class="code-line"><span class="token comment">#                 visit[next_node] = True</span>
</span><span class="code-line"><span class="token comment">#                 q.append(next_node)</span>
</span><span class="code-line"><span class="token comment">#                 ans += 1</span>
</span><span class="code-line"><span class="token comment">#     return ans</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># n = int(input())</span>
</span><span class="code-line"><span class="token comment"># m = int(input())</span>
</span><span class="code-line"><span class="token comment"># graph = {i: [] for i in range(1, n+1)}</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># for _ in range(m):</span>
</span><span class="code-line"><span class="token comment">#     s, e = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment">#     graph[s].append(e)</span>
</span><span class="code-line"><span class="token comment">#     graph[e].append(s)</span>
</span><span class="code-line"><span class="token comment"># print(solve())</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    visit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    q <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">        node <span class="token operator">=</span> q<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">if</span> <span class="token keyword">not</span> visit<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            visit<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">            q<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>graph<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> visit<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">m <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">{</span>i<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    s<span class="token punctuation">,</span> e <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    graph<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>e<span class="token punctuation">)</span>
</span><span class="code-line">    graph<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>solve<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-10282 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-10282-Python</link>
    <pubDate>2021-01-27</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-10282-Python</guid>
    <description>
    <![CDATA[BOJ-10282-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>a 컴퓨터가 b 컴퓨터를 의존할 시, b 컴퓨터가 해킹당하면 s초 후 a 컴퓨터가 감염된다고 한다. 컴퓨터 개수 n, 의존성 개수 d, 해킹당한 컴퓨터의 번호 c가 주어진 후 각각의 의존성이 주어질 때 총 감염되는 컴퓨터 수와 마지막 컴퓨터가 감염되기까지 걸리는 시간을 출력하는 문제. INF와 heap 연산을 이용하는 기본적인 다익스트라 방법을 이용하여 풀었다. 첫 접근은 다익스트라 연산중에 감염 컴퓨터 수와 마지막 컴퓨터가 감염되는 시간을 구할려 했으나 잘되지 않아 다익스트라 연산이 종료된 후 각각 컴퓨터들이 감염 경과 시간이 저장돼 있는 배열을 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token keyword">import</span> heapq
</span><span class="code-line">INF <span class="token operator">=</span> sys<span class="token punctuation">.</span>maxsize
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">solve</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> node_num<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    q <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">    heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> start<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    dist <span class="token operator">=</span> <span class="token punctuation">[</span>INF <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>node_num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    dist<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">        s<span class="token punctuation">,</span> n <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>q<span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">for</span> nn<span class="token punctuation">,</span> ts <span class="token keyword">in</span> graph<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            ns <span class="token operator">=</span> ts <span class="token operator">+</span> s
</span><span class="code-line">            <span class="token keyword">if</span> dist<span class="token punctuation">[</span>nn<span class="token punctuation">]</span> <span class="token operator">></span> ns<span class="token punctuation">:</span>
</span><span class="code-line">                dist<span class="token punctuation">[</span>nn<span class="token punctuation">]</span> <span class="token operator">=</span> ns
</span><span class="code-line">                heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token punctuation">[</span>ns<span class="token punctuation">,</span> nn<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> dist
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    n<span class="token punctuation">,</span> d<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> s <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">        graph<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> s<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    dist <span class="token operator">=</span> solve<span class="token punctuation">(</span>c<span class="token punctuation">,</span> n<span class="token punctuation">)</span>
</span><span class="code-line">    visited<span class="token punctuation">,</span> second <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
</span><span class="code-line">    <span class="token keyword">for</span> temp <span class="token keyword">in</span> dist<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> temp <span class="token operator">!=</span> INF<span class="token punctuation">:</span>
</span><span class="code-line">            visited <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">            second <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>second<span class="token punctuation">,</span> temp<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>visited<span class="token punctuation">,</span> second<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1309 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1309-Python</link>
    <pubDate>2021-01-26</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1309-Python</guid>
    <description>
    <![CDATA[BOJ-1309-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>가로 크기 2, 세로 크기 n의 우리가 있을 때, 사자를 넣으려 한다. 사자는 가로, 세로 모두 붙어 있게 배치할 수 없으며 사자가 없을 때도 경우의 수로 계산한다. 이 때 n이 주어진 후 사자를 배치하는 경우의 수가 몇가지인 지 출력하는 문제. n이 1일 때 맨 위의 좌측에 있는 경우 1, 우측에 있는 경우 1, 없는 경우 1을 초기값 설정을 한다. 그 후 2부터 n까지 좌측에 있는 경우의 수는 i-1의 우측 + 없는 경우의 수, 우측에 있는 경우의 수는 i-1의 좌측 + 없는 경우의 수, 없는 경우의 수는 좌측, 우측, 없는 경우의 수를 더하여 풀었다. dp는 더 많이 풀어봐야될 것 같다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">9901</span>
</span><span class="code-line">    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">9901</span>
</span><span class="code-line">    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">9901</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">9901</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1260 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1260-Python</link>
    <pubDate>2021-01-25</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1260-Python</guid>
    <description>
    <![CDATA[BOJ-1260-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>기존에는 dfs와 bfs 연산을 나누며, 방문한 노드들을 저장한 배열에서 확인하는 연산 방법에 확인하는 방법으로 풀었다. 이번 풀이는 한 함수에서 dfs와 bfs 연산을 구분하여 연산하며 방문확인 배열을 만들어 방문확인에 소요되는 연산을 줄였다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># from collections import deque</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># def dfs(gra, sta):</span>
</span><span class="code-line"><span class="token comment">#     vis = []</span>
</span><span class="code-line"><span class="token comment">#     stack = deque([sta])</span>
</span><span class="code-line"><span class="token comment">#     while stack:</span>
</span><span class="code-line"><span class="token comment">#         nod = stack.pop()</span>
</span><span class="code-line"><span class="token comment">#         if nod not in vis:</span>
</span><span class="code-line"><span class="token comment">#             vis.append(nod)</span>
</span><span class="code-line"><span class="token comment">#             if nod in gra:</span>
</span><span class="code-line"><span class="token comment">#                 stack.extend(sorted(gra[nod], reverse=True))</span>
</span><span class="code-line"><span class="token comment">#     return " ".join(str(i) for i in vis)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># def bfs(gra, sta):</span>
</span><span class="code-line"><span class="token comment">#     vis = []</span>
</span><span class="code-line"><span class="token comment">#     que = deque([sta])</span>
</span><span class="code-line"><span class="token comment">#     while que:</span>
</span><span class="code-line"><span class="token comment">#         nod = que.popleft()</span>
</span><span class="code-line"><span class="token comment">#         if nod not in vis:</span>
</span><span class="code-line"><span class="token comment">#             vis.append(nod)</span>
</span><span class="code-line"><span class="token comment">#             if nod in gra:</span>
</span><span class="code-line"><span class="token comment">#                 que.extend(sorted(gra[nod]))</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     return " ".join(str(i) for i in vis)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># graph = {}</span>
</span><span class="code-line"><span class="token comment"># n, m, start = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment"># for _ in range(m):</span>
</span><span class="code-line"><span class="token comment">#     x, y = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment">#     if x in graph:</span>
</span><span class="code-line"><span class="token comment">#         graph[x].append(y)</span>
</span><span class="code-line"><span class="token comment">#     else:</span>
</span><span class="code-line"><span class="token comment">#         graph[x] = [y]</span>
</span><span class="code-line"><span class="token comment">#     if y in graph:</span>
</span><span class="code-line"><span class="token comment">#         graph[y].append(x)</span>
</span><span class="code-line"><span class="token comment">#     else:</span>
</span><span class="code-line"><span class="token comment">#         graph[y] = [x]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># print(dfs(graph, start))</span>
</span><span class="code-line"><span class="token comment"># print(bfs(graph, start))</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">solve</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> is_bfs<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    q <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> is_bfs <span class="token keyword">else</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">    q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>start<span class="token punctuation">)</span>
</span><span class="code-line">    visit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">        now <span class="token operator">=</span> q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> is_bfs <span class="token keyword">else</span> q<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">if</span> <span class="token keyword">not</span> visit<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            visit<span class="token punctuation">[</span>now<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">            <span class="token keyword">if</span> now <span class="token keyword">in</span> graph<span class="token punctuation">:</span>
</span><span class="code-line">                q<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>graph<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> is_bfs <span class="token keyword">else</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>graph<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> v <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    s<span class="token punctuation">,</span> e <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> s <span class="token keyword">in</span> graph<span class="token punctuation">:</span> graph<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>e<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span> graph<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>e<span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">if</span> e <span class="token keyword">in</span> graph<span class="token punctuation">:</span> graph<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span> graph<span class="token punctuation">[</span>e<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>s<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>solve<span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>solve<span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2294 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2294-Python</link>
    <pubDate>2021-01-25</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2294-Python</guid>
    <description>
    <![CDATA[BOJ-2294-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 동전이 입력되며 합이 k원이 되도록 할 때 동전의 최소 개수를 출력하는 문제. 최댓값인 10001로 k+1 크기의 배열을 이용하여 다이내믹 프로그래밍 방법을 이용하여 풀었다. <code>dp[j] = min(dp[j], dp[j-coin]+1)</code>의 점화식을 이용하였으며 coin은 입력되는 동전의 크기이다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10001</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    t <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token operator">-</span>t<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token keyword">if</span> dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">10001</span> <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1987 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1987-Python</link>
    <pubDate>2021-01-24</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1987-Python</guid>
    <description>
    <![CDATA[BOJ-1987-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>알파벳으로 이루어진 2차원 배열을 입력받는다. 상하좌우로 움직일 수 있으나 방문했던 알파벳은 방문할 수 없는 조건을 가질 때, 최대한 방문할 수 있는 알파벳의 수를 출력하는 문제. 첫 번째 풀이는 아스키코드를 기준으로 방문확인 배열을 만들어서 dfs 연산을 수행하여 풀었으나. 다른 노드가 방문했던 노드까지 방문했다고 확인을 하여 틀렸습니다 결과를 받게 되었다. 이를 수정하고자 q에 방문했던 알파벳들로 이루어진 문자열을 넣어 방문확인을 했으나 시간, 메모리 초과결과를 얻게 되었다. 세 번째 풀이는 첫 번째 풀이를 바탕으로 백트래킹을 사용하여 방문확인 후 재귀적으로 호출, 방문확인 해제하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># from collections import deque</span>
</span><span class="code-line"><span class="token comment"># import sys</span>
</span><span class="code-line"><span class="token comment"># input = sys.stdin.readline</span>
</span><span class="code-line"><span class="token comment"># dire = [[0, 1],</span>
</span><span class="code-line"><span class="token comment">#         [0, -1],</span>
</span><span class="code-line"><span class="token comment">#         [1, 0],</span>
</span><span class="code-line"><span class="token comment">#         [-1, 0]]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># def return_ord(char):</span>
</span><span class="code-line"><span class="token comment">#     return ord(char) - 65</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># def check(char, visit, boolean):</span>
</span><span class="code-line"><span class="token comment">#     visit[return_ord(char)] = not visit[return_ord(char)]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># def solve():</span>
</span><span class="code-line"><span class="token comment">#     visit = [False for _ in range(26)]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     q = deque()</span>
</span><span class="code-line"><span class="token comment">#     # y, x, cnt</span>
</span><span class="code-line"><span class="token comment">#     q.append([0, 0, 1])</span>
</span><span class="code-line"><span class="token comment">#     check(graph[0][0], visit, True)</span>
</span><span class="code-line"><span class="token comment">#     ans = 0</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#    while q:</span>
</span><span class="code-line"><span class="token comment">#         y, x, cnt = q.popleft()</span>
</span><span class="code-line"><span class="token comment">#         ans = max(ans, cnt)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#         for dy, dx in dire:</span>
</span><span class="code-line"><span class="token comment">#             ny = y + dy</span>
</span><span class="code-line"><span class="token comment">#             nx = x + dx</span>
</span><span class="code-line"><span class="token comment">#             if 0 &#x3C;= ny &#x3C; r and 0 &#x3C;= nx &#x3C; c:</span>
</span><span class="code-line"><span class="token comment">#                 if not visit[return_ord(graph[ny][nx])]:</span>
</span><span class="code-line"><span class="token comment">#                     check(graph[ny][nx], visit, True)</span>
</span><span class="code-line"><span class="token comment">#                     q.append([ny, nx, cnt+1])</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     return ans</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># r, c = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment"># graph = [input() for _ in range(r)]</span>
</span><span class="code-line"><span class="token comment"># print(solve())</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># import sys</span>
</span><span class="code-line"><span class="token comment"># input = sys.stdin.readline</span>
</span><span class="code-line"><span class="token comment"># dire = [[0, 1],</span>
</span><span class="code-line"><span class="token comment">#         [0, -1],</span>
</span><span class="code-line"><span class="token comment">#         [1, 0],</span>
</span><span class="code-line"><span class="token comment">#         [-1, 0]]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># def solve():</span>
</span><span class="code-line"><span class="token comment">#     q = set([(0, 0, 1, graph[0][0])])</span>
</span><span class="code-line"><span class="token comment">#     ans = 0</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     while q:</span>
</span><span class="code-line"><span class="token comment">#         y, x, cnt, visited = q.pop()</span>
</span><span class="code-line"><span class="token comment">#         ans = max(ans, cnt)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#         for dy, dx in dire:</span>
</span><span class="code-line"><span class="token comment">#             ny = y + dy</span>
</span><span class="code-line"><span class="token comment">#             nx = x + dx</span>
</span><span class="code-line"><span class="token comment">#             if 0 &#x3C;= ny &#x3C; r and 0 &#x3C;= nx &#x3C; c:</span>
</span><span class="code-line"><span class="token comment">#                 if graph[ny][nx] not in visited:</span>
</span><span class="code-line"><span class="token comment">#                     q.add((ny, nx, cnt+1, visited + graph[ny][nx]))</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     return ans</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># r, c = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment"># graph = [input() for _ in range(r)]</span>
</span><span class="code-line"><span class="token comment"># print(solve())</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">dire <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">        <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">bt</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> x<span class="token punctuation">,</span> depth<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">global</span> ans
</span><span class="code-line">    ans <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> depth<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> ty<span class="token punctuation">,</span> tx <span class="token keyword">in</span> dire<span class="token punctuation">:</span>
</span><span class="code-line">        ny <span class="token operator">=</span> y <span class="token operator">+</span> ty
</span><span class="code-line">        nx <span class="token operator">=</span> x <span class="token operator">+</span> tx
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> ny <span class="token operator">&#x3C;</span> r <span class="token keyword">and</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> nx <span class="token operator">&#x3C;</span> c<span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> <span class="token keyword">not</span> visit<span class="token punctuation">[</span>graph<span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">                visit<span class="token punctuation">[</span>graph<span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">                bt<span class="token punctuation">(</span>ny<span class="token punctuation">,</span> nx<span class="token punctuation">,</span> depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">                visit<span class="token punctuation">[</span>graph<span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">r<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">visit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">visit<span class="token punctuation">[</span>graph<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">bt<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1890 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1890-Python</link>
    <pubDate>2021-01-23</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1890-Python</guid>
    <description>
    <![CDATA[BOJ-1890-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n x n 크기의 배열이 있다. 각 인덱스에는 아래, 오른쪽 방향으로 몇 칸갈 수 있는지 정수가 있다. 0, 0부터 n, n까지 가는 경로의 개수를 출력하는 문제. 첫번째 풀이는 queue를 이용한 DFS로 풀었으나 메모리초과 결과를 받게 되었다. 배열의 크기가 넘지 않았을 경우에는 재방문도 가능하게 구현을 하여 100 크기에 전부 1이 저장돼 있을 때 메모리초과 결과를 일으키는 것 같다. 두 번째 풀이는 n의 크기만큼 이중반복문을 수행하는 다이내믹 프로그래밍 방법을 이용하여 풀었다. 마지막 값은 저장돼 있는 값이 0이기 때문에 값이 중복되어 저장되기 때문에 마지막 값일 시 break하여 마지막 dp의 값을 출력하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># import sys</span>
</span><span class="code-line"><span class="token comment"># from collections import deque</span>
</span><span class="code-line"><span class="token comment"># input = sys.stdin.readline</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># def solve():</span>
</span><span class="code-line"><span class="token comment">#     q = deque()</span>
</span><span class="code-line"><span class="token comment">#     q.append([0, 0])</span>
</span><span class="code-line"><span class="token comment">#     dp[0][0] = 1</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     while q:</span>
</span><span class="code-line"><span class="token comment">#         y, x = q.popleft()</span>
</span><span class="code-line"><span class="token comment">#         move = graph[y][x]</span>
</span><span class="code-line"><span class="token comment">#         if move == 0:</span>
</span><span class="code-line"><span class="token comment">#             continue</span>
</span><span class="code-line"><span class="token comment">#         ny, nx = y + move, x + move</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#         if 0 &#x3C;= ny &#x3C; n:</span>
</span><span class="code-line"><span class="token comment">#             q.append([ny, x])</span>
</span><span class="code-line"><span class="token comment">#             dp[ny][x] += dp[y][x]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#         if 0 &#x3C;= nx &#x3C; n:</span>
</span><span class="code-line"><span class="token comment">#             q.append([y, nx])</span>
</span><span class="code-line"><span class="token comment">#             dp[y][nx] += dp[y][x]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># n = int(input())</span>
</span><span class="code-line"><span class="token comment"># graph = [[] for _ in range(n)]</span>
</span><span class="code-line"><span class="token comment"># dp = [[0 for _ in range(n)] for _ in range(n)]</span>
</span><span class="code-line"><span class="token comment"># for i in range(n): graph[i] = list(map(int, input().split()))</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># solve()</span>
</span><span class="code-line"><span class="token comment"># print(dp[n-1][n-1])</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> y <span class="token operator">==</span> n<span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">and</span> x <span class="token operator">==</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">                <span class="token keyword">break</span>
</span><span class="code-line">            move <span class="token operator">=</span> graph<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span>
</span><span class="code-line">            ny<span class="token punctuation">,</span> nx <span class="token operator">=</span> y <span class="token operator">+</span> move<span class="token punctuation">,</span> x <span class="token operator">+</span> move
</span><span class="code-line">
</span><span class="code-line">            <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> ny <span class="token operator">&#x3C;</span> n<span class="token punctuation">:</span>
</span><span class="code-line">                dp<span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">            <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> nx <span class="token operator">&#x3C;</span> n<span class="token punctuation">:</span>
</span><span class="code-line">                dp<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>nx<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span> graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">solve<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-10999 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-10999-Python</link>
    <pubDate>2021-01-22</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-10999-Python</guid>
    <description>
    <![CDATA[BOJ-10999-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>기존 구간합을 구하며, 특정 인덱스의 수를 바꾸는 세그먼트 트리문제에서 구간의 인덱스를 바꾸는 방식으로 바꾼 문제. 첫 접근은 단순히 업데이트 함수를 여러번 호출하면 될 것 같았으나 당연하게도 다른 방법이 존재하였다. lazy propagation이란 방법인데, 할 일을 나중으로 미루는 방법... 이다. <a href="https://www.acmicpc.net/blog/view/26" target="_blank" rel="noopener noreferer">해당 글</a>을 참고하여 풀었으나 아직도 어렵기만 하다. 다른 부분은 기존 세그먼트 트리 문제와 동일하며 query와 update_range 함수 호출 시 update_lazy를 호출하여 tree의 크기와 같은 lazy배열을 이용하여 나중에 더할 값을 저장하는 연산을 수행한다. 세그먼트 트리는 감을 잡기 시작한 것 같으나 lazy propagation은 아직 멀은 것 같다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token keyword">import</span> math
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">init</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> start <span class="token operator">==</span> end<span class="token punctuation">:</span>
</span><span class="code-line">        tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">[</span>start<span class="token punctuation">]</span>
</span><span class="code-line">        <span class="token keyword">return</span> tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span>
</span><span class="code-line">    mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
</span><span class="code-line">    tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> init<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">)</span> <span class="token operator">+</span> init<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">return</span> tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">query</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    update_lazy<span class="token punctuation">(</span>node<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> left <span class="token operator">></span> end <span class="token keyword">or</span> right <span class="token operator">&#x3C;</span> start<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">if</span> left <span class="token operator">&#x3C;=</span> start <span class="token keyword">and</span> right <span class="token operator">>=</span> end<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
</span><span class="code-line">    <span class="token keyword">return</span> query<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token operator">+</span> query<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">update_lazy</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> lazy<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">        tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> lazy<span class="token punctuation">[</span>node<span class="token punctuation">]</span>
</span><span class="code-line">        <span class="token keyword">if</span> start <span class="token operator">!=</span> end<span class="token punctuation">:</span>
</span><span class="code-line">            lazy<span class="token punctuation">[</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+=</span> lazy<span class="token punctuation">[</span>node<span class="token punctuation">]</span>
</span><span class="code-line">            lazy<span class="token punctuation">[</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> lazy<span class="token punctuation">[</span>node<span class="token punctuation">]</span>
</span><span class="code-line">        lazy<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">update_range</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> diff<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    update_lazy<span class="token punctuation">(</span>node<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> left <span class="token operator">></span> end <span class="token keyword">or</span> right <span class="token operator">&#x3C;</span> start<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> <span class="token number">0</span>
</span><span class="code-line">    <span class="token keyword">if</span> left <span class="token operator">&#x3C;=</span> start <span class="token keyword">and</span> right <span class="token operator">>=</span> end<span class="token punctuation">:</span>
</span><span class="code-line">        tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> diff
</span><span class="code-line">        <span class="token keyword">if</span> start <span class="token operator">!=</span> end<span class="token punctuation">:</span>
</span><span class="code-line">            lazy<span class="token punctuation">[</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+=</span> diff
</span><span class="code-line">            lazy<span class="token punctuation">[</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> diff
</span><span class="code-line">        <span class="token keyword">return</span>
</span><span class="code-line">    mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
</span><span class="code-line">    update_range<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> diff<span class="token punctuation">)</span>
</span><span class="code-line">    update_range<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> diff<span class="token punctuation">)</span>
</span><span class="code-line">    tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> tree<span class="token punctuation">[</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> tree<span class="token punctuation">[</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span> l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">heigth <span class="token operator">=</span> math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span>math<span class="token punctuation">.</span>log2<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">size <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token punctuation">(</span>heigth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">tree <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">lazy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">init<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token operator">+</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    t <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">        update_range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span>query<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-11779 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-11779-Python</link>
    <pubDate>2021-01-21</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-11779-Python</guid>
    <description>
    <![CDATA[BOJ-11779-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 도시, m개의 버스가 있다. 버스는 출발, 도착, 비용을 갖는다. 시작 도시와 도착 도시가 주어질 때, 최소 비용으로 이동했을 시 총 비용, 경로에 포함돼 있는 도시의 수, 경로를 방문하는 도시를 순서대로 출력하는 문제. 힙 자료구조를 이용한 다익스트라 방법을 이용하여 최소 비용을 구함과 동시에 방문지를 저장할 배열을 이용하여 초기화, 지금까지 방문했던 곳 추가, 다음 도시 추가 연산을 통해 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> heapq
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line">INF <span class="token operator">=</span> sys<span class="token punctuation">.</span>maxsize
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">solve</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> graph<span class="token punctuation">,</span> S<span class="token punctuation">,</span> E<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    dist <span class="token operator">=</span> <span class="token punctuation">[</span>INF <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    visited <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    q <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token comment"># cost, current position, visited position</span>
</span><span class="code-line">    heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> S<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    dist<span class="token punctuation">[</span>S<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    visited<span class="token punctuation">[</span>S<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>S<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">        cost<span class="token punctuation">,</span> now <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>q<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">if</span> cost <span class="token operator">></span> dist<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">continue</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">for</span> np<span class="token punctuation">,</span> tc <span class="token keyword">in</span> graph<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            nc <span class="token operator">=</span> cost <span class="token operator">+</span> tc
</span><span class="code-line">            <span class="token keyword">if</span> nc <span class="token operator">&#x3C;</span> dist<span class="token punctuation">[</span>np<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">                heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token punctuation">[</span>nc<span class="token punctuation">,</span> np<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">                dist<span class="token punctuation">[</span>np<span class="token punctuation">]</span> <span class="token operator">=</span> nc
</span><span class="code-line">
</span><span class="code-line">                visited<span class="token punctuation">[</span>np<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">                <span class="token keyword">for</span> v <span class="token keyword">in</span> visited<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">                    visited<span class="token punctuation">[</span>np<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>v<span class="token punctuation">)</span>
</span><span class="code-line">                visited<span class="token punctuation">[</span>np<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>np<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> dist<span class="token punctuation">[</span>E<span class="token punctuation">]</span><span class="token punctuation">,</span> visited<span class="token punctuation">[</span>E<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">m <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    s<span class="token punctuation">,</span> e<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    graph<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>e<span class="token punctuation">,</span> c<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">S<span class="token punctuation">,</span> E <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">d<span class="token punctuation">,</span> v <span class="token operator">=</span> solve<span class="token punctuation">(</span>n<span class="token punctuation">,</span> graph<span class="token punctuation">,</span> S<span class="token punctuation">,</span> E<span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span>v<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1854 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1854-Python</link>
    <pubDate>2021-01-21</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1854-Python</guid>
    <description>
    <![CDATA[BOJ-1854-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>제일 빠른 경로만을 찾던 다익스트라 문제들과는 달리 k번째로 빠른 경로를 찾는 문제. 첫 번째 시도는 n개의 heap을 이용하여 정렬하며 해당 배열의 크기가 k보다 작을 때만 q에 삽입하는 형식으로 풀었으나 틀렸습니다 결과를 받게 되었다. 내가 생각하는 반례로는 다른 지점들이 k 이상이 되어야 k번째 방문 이력이 생기는 경우이다. 두 번째 풀이는 k개의 INF로 이루어진 배열이 n+1개인 2차원 배열을 이용하였다. k-1번째 수와 비교하여 비용이 작을 때 q에 삽입한 후, k-1번째 수에 삽입, 해당 배열을 정렬하여 풀었다. heap을 이용하면 더욱 빠르게 풀 수 있을 것 같으나 INF로 초기화하는 과정때문에 오히려 연산이 늘어날 것만도 같다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> heapq
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line">INF <span class="token operator">=</span> sys<span class="token punctuation">.</span>maxsize
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">solve</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> graph<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">
</span><span class="code-line">    q <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">    heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token comment"># k개의 INF로 이루어진 배열이 n+1개</span>
</span><span class="code-line">    dists <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>INF <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    dists<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">        cnt<span class="token punctuation">,</span> now <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>q<span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">for</span> np<span class="token punctuation">,</span> tc <span class="token keyword">in</span> graph<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            nc <span class="token operator">=</span> tc <span class="token operator">+</span> cnt
</span><span class="code-line">
</span><span class="code-line">            <span class="token comment"># k번째 수와 비교</span>
</span><span class="code-line">            <span class="token keyword">if</span> dists<span class="token punctuation">[</span>np<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> nc<span class="token punctuation">:</span>
</span><span class="code-line">                heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token punctuation">[</span>nc<span class="token punctuation">,</span> np<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">                <span class="token comment"># k번째 수에 삽입 및 정렬</span>
</span><span class="code-line">                dists<span class="token punctuation">[</span>np<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nc
</span><span class="code-line">                dists<span class="token punctuation">[</span>np<span class="token punctuation">]</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> dists
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    s<span class="token punctuation">,</span> e<span class="token punctuation">,</span> w <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    graph<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>e<span class="token punctuation">,</span> w<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">dists <span class="token operator">=</span> solve<span class="token punctuation">(</span>n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> graph<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">if</span> dists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> INF <span class="token keyword">else</span> dists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2798 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2798-Python</link>
    <pubDate>2021-01-21</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2798-Python</guid>
    <description>
    <![CDATA[BOJ-2798-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>기존 3중 반복문을 이용하여 단순 최대 값을 출력하는 방법이 아닌, 입력되는 수들을 내림차순으로 정렬 후에 m보다 같거나 클 시 set 자료형에 추가하고 break한다. 그 후에 제일 큰 값을 출력하여 풀었다. 이 방법은 set 자료형을 이용하여 중복되는 수들의 연산을 제거, 오름차순으로 정렬 후 break를 통해 추가한 수보다 작은 수들을 비교하지 않는 방법으로 연산의 수를 줄였다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># n, m = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment"># l = list(map(int, input().split()))</span>
</span><span class="code-line"><span class="token comment"># ans = 0</span>
</span><span class="code-line"><span class="token comment"># for i in range(n-2):</span>
</span><span class="code-line"><span class="token comment">#     for j in range(i+1, n-1):</span>
</span><span class="code-line"><span class="token comment">#         for k in range(j+1, n):</span>
</span><span class="code-line"><span class="token comment">#             if l[i] + l[j] + l[k] &#x3C;= m:</span>
</span><span class="code-line"><span class="token comment">#                 ans = max(ans, l[i] + l[j] + l[k])</span>
</span><span class="code-line"><span class="token comment"># print(ans)</span>
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">s <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            t <span class="token operator">=</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> l<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> l<span class="token punctuation">[</span>k<span class="token punctuation">]</span>
</span><span class="code-line">            <span class="token keyword">if</span> t <span class="token operator">&#x3C;=</span> m<span class="token punctuation">:</span>
</span><span class="code-line">                s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>t<span class="token punctuation">)</span>
</span><span class="code-line">                <span class="token keyword">break</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-16172 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-16172-Python</link>
    <pubDate>2021-01-20</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-16172-Python</guid>
    <description>
    <![CDATA[BOJ-16172-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>숫자와 알파벳 대, 소문자로 이루어진 s에서 숫자를 지운 후 문자열 k가 있을 시 1, 없을 시 0을 출력하는 문제. s에서 k가 여러 개 있는 것을 확인하는 문제였으면 KMP 알고리즘을 사용하여 풀었을테지만 단순히 연속된 문자열이 있는 지 판단하는 문제라 첫 번째 풀이는 isdigit을 이용하여 숫자를 제외한 문자열을 만든 후 in 메소드를 사용하여 풀었다. 두 번째 풀이는 isdigit으로 확인이 아닌 0부터 9까지의 문자열을 기준으로 replace하여 풀었다. replace가 더욱 느릴 거 같아서 isdigit을 이용하여 풀었으나 아니였다. 역시 내장라이브러리가 짱인가보다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># s = input()</span>
</span><span class="code-line"><span class="token comment"># k = input()</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># no_num_s = []</span>
</span><span class="code-line"><span class="token comment"># for i in s:</span>
</span><span class="code-line"><span class="token comment">#     if not i.isdigit():</span>
</span><span class="code-line"><span class="token comment">#         no_num_s.append(i)</span>
</span><span class="code-line"><span class="token comment"># no_num_s = "".join(no_num_s)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># print(1 if k in no_num_s else 0)</span>
</span><span class="code-line">
</span><span class="code-line">s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">k <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token string">"0123456789"</span><span class="token punctuation">:</span>
</span><span class="code-line">    s <span class="token operator">=</span> s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">if</span> k <span class="token keyword">in</span> s <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2665 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2665-Python</link>
    <pubDate>2021-01-20</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2665-Python</guid>
    <description>
    <![CDATA[BOJ-2665-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>0과 1로 이루어진 n, n 크기의 2차원 배열을 입력받는다. 0, 0부터 n, n까지 상하좌우로 이동할 때 0은 이동하지 못하는 곳이라고 한다. 이 때 0을 1로 바꾸어 이동할 수 있는데, 0을 1로 바꾸는 동작을 최소화하여 n, n까지 도착했을 때 해당 값을 출력하는 문제. 힙 자료구조, INF를 사용하는 다익스트라 방법을 이용하여 풀었다. 저장된 값이 현재 값보다 클 때 힙에 넣도록 하였으며 0과 1을 판단하여 cnt의 크기를 연산하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token keyword">import</span> heapq
</span><span class="code-line">INF <span class="token operator">=</span> sys<span class="token punctuation">.</span>maxsize
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">dire <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">        <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">solve</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> graph<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    q <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token comment"># cnt, y, x</span>
</span><span class="code-line">    heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    dist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>INF <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    dist<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">        cnt<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>q<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">for</span> dy<span class="token punctuation">,</span> dx <span class="token keyword">in</span> dire<span class="token punctuation">:</span>
</span><span class="code-line">            ny <span class="token operator">=</span> y <span class="token operator">+</span> dy
</span><span class="code-line">            nx <span class="token operator">=</span> x <span class="token operator">+</span> dx
</span><span class="code-line">            <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> ny <span class="token operator">&#x3C;</span> n <span class="token keyword">and</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> nx <span class="token operator">&#x3C;</span> n<span class="token punctuation">:</span>
</span><span class="code-line">                <span class="token keyword">if</span> cnt <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&#x3C;</span> dist<span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">                    <span class="token keyword">if</span> graph<span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>nx<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">                        heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token punctuation">[</span>cnt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> ny<span class="token punctuation">,</span> nx<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">                        dist<span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>nx<span class="token punctuation">]</span> <span class="token operator">=</span> cnt <span class="token operator">+</span> <span class="token number">1</span>
</span><span class="code-line">                    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">                        heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token punctuation">[</span>cnt<span class="token punctuation">,</span> ny<span class="token punctuation">,</span> nx<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">                        dist<span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>nx<span class="token punctuation">]</span> <span class="token operator">=</span> cnt
</span><span class="code-line">    <span class="token keyword">return</span> dist<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>solve<span class="token punctuation">(</span>n<span class="token punctuation">,</span> graph<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-4781 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-4781-Python</link>
    <pubDate>2021-01-19</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-4781-Python</guid>
    <description>
    <![CDATA[BOJ-4781-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>한가지 물건을 여러 개 고를 수 있는 냅색 문제. TC만큼 물건의 종류 n, 가방의 크기 m이 주어진다. 이 때 m은 소수로, 소수점 둘째자리까지 주어진다. 다음 n개의 줄에는 각 물건의 값, 무게가 주어진다. 무게도 마찬가지로 소수이다. 기본 냅색 문제는 <code>dp[i-1][j]</code>, <code>value + dp[i-1][j-weight]</code> 위 두가지를 비교하면 되지만 이번 문제는 한가지 물건을 여러 개 고를 수도 있기 때문에 <code>dp[i][j-weight]</code> 또한 비교하여야 한다. 입력되는 무게가 소수점 둘째자리까지이기 때문에 100을 곱하여 <code>int</code>를 이용하여 형변환하여 풀었으나 시간초과 결과를 받게 되었는데, 이는 <code>round</code>로 수정하여 풀었다. 실수형을 형변환할 때 round가 더욱 빠른가보다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">solve</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> costs<span class="token punctuation">,</span> prices<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    m <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">    ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        cost <span class="token operator">=</span> costs<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
</span><span class="code-line">        price <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
</span><span class="code-line">        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> j <span class="token operator">&#x3C;</span> price<span class="token punctuation">:</span>
</span><span class="code-line">                ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>
</span><span class="code-line">            <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">                ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> cost <span class="token operator">+</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>price<span class="token punctuation">]</span><span class="token punctuation">,</span> cost <span class="token operator">+</span> ans<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> price<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> ans<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
</span><span class="code-line">    n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> m <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">break</span>
</span><span class="code-line">    n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
</span><span class="code-line">    m <span class="token operator">=</span> <span class="token builtin">round</span><span class="token punctuation">(</span>m <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">    costs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">    prices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        c<span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">        c <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
</span><span class="code-line">        p <span class="token operator">=</span> <span class="token builtin">round</span><span class="token punctuation">(</span>p <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span>
</span><span class="code-line">        costs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>c<span class="token punctuation">)</span>
</span><span class="code-line">        prices<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>solve<span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> costs<span class="token punctuation">,</span> prices<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-14728 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-14728-Python</link>
    <pubDate>2021-01-18</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-14728-Python</guid>
    <description>
    <![CDATA[BOJ-14728-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 물건, 배낭의 크기 t를 입력받은 후 n개의 무게와 값이 주어지는 냅색 문제. 위 문제와 동일한 방식으로 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">times <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">scores <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    tt<span class="token punctuation">,</span> ss <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    times<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tt<span class="token punctuation">)</span>
</span><span class="code-line">    scores<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ss<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        time <span class="token operator">=</span> times<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
</span><span class="code-line">        score <span class="token operator">=</span> scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
</span><span class="code-line">        <span class="token keyword">if</span> j <span class="token operator">&#x3C;</span> time<span class="token punctuation">:</span>
</span><span class="code-line">            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> score <span class="token operator">+</span> ans<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>time<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1535 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1535-Python</link>
    <pubDate>2021-01-18</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1535-Python</guid>
    <description>
    <![CDATA[BOJ-1535-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 값과 무게를 입력받은 후 가방의 크기가 99일 때 최대 값을 출력하는 문제. 이중 반복문을 이용하여 담을 수 없을 때 같은 무게, 저번 물건의 값을 할당, 담을 수 있을 때 같은 무게, 저번 물건의 값과 현재 물건의 값 + 반복중인 무게 - 현재 물건의 무게의 저번 물건의 값 중 큰 것을 할당하여 배열의 마지막 값을 출력하여 풀었다. n이 1이며 해당 무게가 99를 넘는 경우를 예외처리하지 못하여 여러번 틀린 문제.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">solve</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    weight <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    value <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> <span class="token number">0</span>
</span><span class="code-line">    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">if</span> weight<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&#x3C;=</span> <span class="token number">99</span> <span class="token keyword">else</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> v <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">for</span> w <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            val <span class="token operator">=</span> value<span class="token punctuation">[</span>v<span class="token punctuation">]</span>
</span><span class="code-line">            cost <span class="token operator">=</span> weight<span class="token punctuation">[</span>v<span class="token punctuation">]</span>
</span><span class="code-line">            <span class="token keyword">if</span> w <span class="token operator">&#x3C;</span> cost<span class="token punctuation">:</span>
</span><span class="code-line">                ans<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">[</span>v <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span>
</span><span class="code-line">            <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">                ans<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>v <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">,</span> val <span class="token operator">+</span> ans<span class="token punctuation">[</span>v <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>w <span class="token operator">-</span> cost<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> ans<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>solve<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2670 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2670-Python</link>
    <pubDate>2021-01-18</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2670-Python</guid>
    <description>
    <![CDATA[BOJ-2670-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 실수를 입력받아 한 개 이상의 연속된 수들의 곱이 최대가 되는 부분의 곱을 출력하는 문제. 첫 번째 풀이는 브루트포스 방식으로 2중 반복문을 이용하여 모든 값을 곱하여 비교하였지만 시간초과 결과를 받게 되었다. 두 번째 풀이는 리스트의 인덱스에 인덱스 -1 값과 비교하여 더욱 큰 값을 저장하는 다이내믹 프로그래밍 방식을 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> l<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    ans <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%.3f"</span> <span class="token operator">%</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-7579 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-7579-Python</link>
    <pubDate>2021-01-18</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-7579-Python</guid>
    <description>
    <![CDATA[BOJ-7579-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 물건, 배낭의 크기 m를 입력받은 후 n개의 무게와 값이 주어지는 기존 냅색 문제와 동일하지만, 기족 m 이하의 최대값을 출력하는 것이 아닌, m 이상이 되는 최소한의 값을 출력하는 문제. m은 최대 10,000,000의 크기를 갖기 때문에 모두 탐색을 하는 것은 불가능하여 입력되는 모든 무게들을 합한 값까지 반복을 수행하였으며 기존 냅색 문제와 동일하게 담을 수 있을 때 최대한의 값을 담았으며, 담은 값이 m보다 클 시 j를 비교, 저장하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">memories <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">costs <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">all_cost <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>costs<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>all_cost<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">result <span class="token operator">=</span> all_cost
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    memory <span class="token operator">=</span> memories<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
</span><span class="code-line">    cost <span class="token operator">=</span> costs<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>all_cost<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> j <span class="token operator">&#x3C;</span> cost<span class="token punctuation">:</span>
</span><span class="code-line">            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> memory <span class="token operator">+</span> ans<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>cost<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">if</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> m<span class="token punctuation">:</span>
</span><span class="code-line">            result <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> j<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-8394 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-8394-Python</link>
    <pubDate>2021-01-17</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-8394-Python</guid>
    <description>
    <![CDATA[BOJ-8394-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n명의 사람이 한 줄로 앉아있을 때, 자리를 벗어나지 않고 악수를 하는 방법의 수를 출력하는 문제. 안하는 경우를 포함해서 n-1, n-2명일 때의 경우를 더하면 n명일 때의 경우의 수를 구할 수 있다. 첫 번째 풀이는 입력받는 수 + 1까지 배열을 만들어 배열의 값을 참조하도록 풀었으며 마지막 자리의 수만 출력하면 되므로 10으로 나눈 나머지 값들을 저장하였다. 두 번째 풀이는 변수 i와 j를 이용하여 <code>i, j = j, (i + j) % 10</code>의 점화식을 사용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># n = int(input())</span>
</span><span class="code-line"><span class="token comment"># MAX = n + 1</span>
</span><span class="code-line"><span class="token comment"># dp = [0 for _ in range(MAX)]</span>
</span><span class="code-line"><span class="token comment"># dp[1], dp[2] = 1, 2</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># for i in range(3, MAX):</span>
</span><span class="code-line"><span class="token comment">#     dp[i] = (dp[i-1] + dp[i-2]) % 10</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># print(dp[n])</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    i<span class="token punctuation">,</span> j <span class="token operator">=</span> j<span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1106 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1106-Python</link>
    <pubDate>2021-01-16</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1106-Python</guid>
    <description>
    <![CDATA[BOJ-1106-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>광고의 비용과 광고로 인해 늘어나는 고객의 수가 n개 주어진다고 한다. 적어도 c명의 고객의 수를 늘리기 위해서 투자해야되는 최소한의 비용을 출력하는 문제. 첫 번째 풀이는 dp[비용]에 최대한 구할 수 있는 사람의 수를 저장한 후 최초로 c가 넘는 값을 출력하여 풀었다. 이 방법은 최대 비용 1000 * 100까지 비교를 수행해야 하므로 두 번째 풀이는 dp[고객의 수]에 최소한의 비용울 저장하여 풀었다. 가격과 고객의 수를 입력받은 후, 고객의 수부터 최대 고객의 수인 1100까지 반복을 수행하였다. 해당 인자 j를 이용하여 <code>dp[j] = min(dp[j], dp[j-customer] + cost)</code>의 점화식을 사용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># MAX = 1000 * 100 + 1</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># c, n = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment"># # dp[비용] = 최대한 구할 수 있는 사람의 수</span>
</span><span class="code-line"><span class="token comment"># dp = [0 for _ in range(MAX)]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># cost = [0 for _ in range(n)]</span>
</span><span class="code-line"><span class="token comment"># customer = [0 for _ in range(n)]</span>
</span><span class="code-line"><span class="token comment"># for i in range(n):</span>
</span><span class="code-line"><span class="token comment">#     cost[i], customer[i] = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># for i in range(n):</span>
</span><span class="code-line"><span class="token comment">#     for j in range(cost[i], MAX):</span>
</span><span class="code-line"><span class="token comment">#         dp[j] = max(dp[j], dp[j-cost[i]] + customer[i])</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># for i in range(MAX):</span>
</span><span class="code-line"><span class="token comment">#     if dp[i] >= c:</span>
</span><span class="code-line"><span class="token comment">#         print(i)</span>
</span><span class="code-line"><span class="token comment">#         exit(0)</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># 최대 1000명, 홍보 최대 비용 100</span>
</span><span class="code-line">MAX_COST <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">1</span>
</span><span class="code-line">MAX_CUSTOMER <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">+</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">c<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token comment"># dp[사람의 수] = 최소한의 비용</span>
</span><span class="code-line"><span class="token comment"># 최대 인원 + 홍보 최대 인원 100명까지 비교하면 됨</span>
</span><span class="code-line">dp <span class="token operator">=</span> <span class="token punctuation">[</span>MAX_COST <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>MAX_CUSTOMER<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    cost<span class="token punctuation">,</span> customer <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>customer<span class="token punctuation">,</span> MAX_CUSTOMER<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token operator">-</span>customer<span class="token punctuation">]</span> <span class="token operator">+</span> cost<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>c<span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1275 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1275-Python</link>
    <pubDate>2021-01-16</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1275-Python</guid>
    <description>
    <![CDATA[BOJ-1275-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 정수로 이루어진 수열을 입력받은 후, 구간합을 출력한 후, 인덱스 값을 바꾸는 연산을 수행해야하는 문제. 세그먼트 트리를 이용하여 풀었다. 아직은 이해도가 부족하다 생각된다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token keyword">import</span> math
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">init</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> start <span class="token operator">==</span> end<span class="token punctuation">:</span>
</span><span class="code-line">        tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">[</span>start<span class="token punctuation">]</span>
</span><span class="code-line">        <span class="token keyword">return</span> tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
</span><span class="code-line">    temp <span class="token operator">=</span> init<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">)</span> <span class="token operator">+</span> init<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span>
</span><span class="code-line">    tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> temp
</span><span class="code-line">    <span class="token keyword">return</span> tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">query</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> start <span class="token operator">></span> right <span class="token keyword">or</span> end <span class="token operator">&#x3C;</span> left<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> <span class="token number">0</span>
</span><span class="code-line">    <span class="token keyword">if</span> start <span class="token operator">>=</span> left <span class="token keyword">and</span> end <span class="token operator">&#x3C;=</span> right<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
</span><span class="code-line">    temp <span class="token operator">=</span> query<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token operator">+</span> query<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">return</span> temp
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> index<span class="token punctuation">,</span> diff<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> index <span class="token operator">&#x3C;</span> start <span class="token keyword">or</span> index <span class="token operator">></span> end<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line">    tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">+=</span> diff
</span><span class="code-line">    <span class="token keyword">if</span> start <span class="token operator">!=</span> end<span class="token punctuation">:</span>
</span><span class="code-line">        mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
</span><span class="code-line">        update<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> index<span class="token punctuation">,</span> diff<span class="token punctuation">)</span>
</span><span class="code-line">        update<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> index<span class="token punctuation">,</span> diff<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> q <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># 세그먼트 트리 크기</span>
</span><span class="code-line">height <span class="token operator">=</span> math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span>math<span class="token punctuation">.</span>log2<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">size <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token punctuation">(</span>height <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">tree <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">init<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> cindex<span class="token punctuation">,</span> cvalue <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> right <span class="token operator">&#x3C;</span> left<span class="token punctuation">:</span>
</span><span class="code-line">        left<span class="token punctuation">,</span> right <span class="token operator">=</span> right<span class="token punctuation">,</span> left
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>query<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    diff <span class="token operator">=</span> cvalue <span class="token operator">-</span> l<span class="token punctuation">[</span>cindex<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">    l<span class="token punctuation">[</span>cindex<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> cvalue
</span><span class="code-line">    update<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> cindex<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> diff<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-15988 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-15988-Python</link>
    <pubDate>2021-01-16</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-15988-Python</guid>
    <description>
    <![CDATA[BOJ-15988-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>정수 n을 1, 2, 3의 더하기로 나타내는 방법의 수를 출력하는 문제. i번째 수는 i-1번째 공식에 각각 1을 더하면 되며 i-2번째 공식에 각각 2를, i-3번째 공식에는 3을 더하면 되기 때문에 dp[i-3:i]의 수를 더한 값을 저장 및 출력하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000001</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>
</span><span class="code-line">dp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1000001</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1000000009</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">1000000009</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-15990 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-15990-Python</link>
    <pubDate>2021-01-16</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-15990-Python</guid>
    <description>
    <![CDATA[BOJ-15990-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>정수 n을 같은 숫자가 연속해서 나오면 안된다는 규칙을 지키며 1, 2, 3의 더하기로 나타낼 때, 방법의 수를 출력하는 문제. i번째 수는 i-1번째 공식에서 1로 시작하지 않는 방법에 1을 더하며, i-2번째 공식에서 2로 시작하지 않는 방법에 2를 더하며, i-3번째 공식에서 3으로 시작하지 않는 방법에 3을 더하는 식으로 2차원 배열을 만들어 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100001</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>
</span><span class="code-line">dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>
</span><span class="code-line">dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>
</span><span class="code-line">dp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">100001</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1000000009</span>
</span><span class="code-line">    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1000000009</span>
</span><span class="code-line">    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1000000009</span>
</span><span class="code-line">
</span><span class="code-line">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token punctuation">[</span>l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token punctuation">[</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1000000009</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> l<span class="token punctuation">]</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1633 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1633-Python</link>
    <pubDate>2021-01-16</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1633-Python</guid>
    <description>
    <![CDATA[BOJ-1633-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>30 ~ 1000개의 두 정수를 입력받는다. 중복되지 않으며 한 줄에 한 개의 수만 선택가능할 때, 앞 수 15개, 뒷 수 15개를 합친 최대 값을 출력하는 문제. 첫 풀이는 함수를 재귀적으로 활용하여 dp[정수의 길이][16][16]의 크기를 갖는 배열에 값을 할당, 비교하여 풀었으나 문제의 풀이가 길어져 두 번째 풀이는 3중 반복문을 이용하여 할당, 비교하여 풀었다. 다이내믹 프로그래밍 문제를 더 공부해야겠다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># def dfs(white, black, current_index, length):</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     if white == 0 and black == 0:</span>
</span><span class="code-line"><span class="token comment">#         return 0</span>
</span><span class="code-line"><span class="token comment">#     if current_index == length:</span>
</span><span class="code-line"><span class="token comment">#         return 0</span>
</span><span class="code-line"><span class="token comment">#     if dp[current_index][white][black] != 0:</span>
</span><span class="code-line"><span class="token comment">#         return dp[current_index][white][black]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     dp[current_index][white][black] = dfs(white, black, current_index+1, length)</span>
</span><span class="code-line"><span class="token comment">#     if white > 0:</span>
</span><span class="code-line"><span class="token comment">#         dp[current_index][white][black] = max(dp[current_index][white][black], dfs(white-1, black, current_index+1, length) + wl[current_index])</span>
</span><span class="code-line"><span class="token comment">#     if black > 0:</span>
</span><span class="code-line"><span class="token comment">#         dp[current_index][white][black] = max(dp[current_index][white][black], dfs(white, black-1, current_index+1, length) + bl[current_index])</span>
</span><span class="code-line"><span class="token comment">#     return dp[current_index][white][black]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># wl, bl = [], []</span>
</span><span class="code-line"><span class="token comment"># length = 0</span>
</span><span class="code-line"><span class="token comment"># total = 0</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># while True:</span>
</span><span class="code-line"><span class="token comment">#     try:</span>
</span><span class="code-line"><span class="token comment">#         w, b = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment">#         length += 1</span>
</span><span class="code-line"><span class="token comment">#     except:</span>
</span><span class="code-line"><span class="token comment">#         break</span>
</span><span class="code-line"><span class="token comment">#     wl.append(w)</span>
</span><span class="code-line"><span class="token comment">#     bl.append(b)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># dp = [[[0] * 16 for _ in range(16)] for _ in range(length+1)]</span>
</span><span class="code-line"><span class="token comment"># print(dfs(15, 15, 0, length))</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">wl<span class="token punctuation">,</span> bl <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</span><span class="code-line">length <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">try</span><span class="token punctuation">:</span>
</span><span class="code-line">        white<span class="token punctuation">,</span> black <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">        length <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">    <span class="token keyword">except</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">break</span>
</span><span class="code-line">    wl<span class="token punctuation">.</span>append<span class="token punctuation">(</span>white<span class="token punctuation">)</span>
</span><span class="code-line">    bl<span class="token punctuation">.</span>append<span class="token punctuation">(</span>black<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">16</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> idx <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> w <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">for</span> b <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            dp<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>idx<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span>
</span><span class="code-line">            <span class="token keyword">if</span> w <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">                dp<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>idx<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">+</span> wl<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">            <span class="token keyword">if</span> b <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">                dp<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>idx<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> bl<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1715 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1715-Python</link>
    <pubDate>2021-01-16</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1715-Python</guid>
    <description>
    <![CDATA[BOJ-1715-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n이 2 이상일 때 n-2, n-1을 재귀적으로 호출하며, n이 1 이하일 때 n을 반환하는 함수가 있다. n이 주어졌을 때 해당 함수가 몇 번 호출되는 지 출력하는 문제. 배열의 0, 1 인덱스에 1로 값을 초기화한 후 2부터 <code>dp[i] = 1 + dp[i-2] + dp[i-1]</code>의 점화식을 사용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">51</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1000000007</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">1000000007</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-4485 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-4485-Python</link>
    <pubDate>2021-01-14</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-4485-Python</guid>
    <description>
    <![CDATA[BOJ-4485-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n, n 크기의 정수로 이루어진 이차원 배열 graph를 입력받는다. 0, 0부터 n-1, n-1까지 해당 좌표의 정수를 합한 값이 최소가 되게 이동할 때, 해당 최소 값을 출력하는 문제. INF로 이루어진 같은 크기의 배열 dist를 만든 후 0, 0부터 현재 값 + graph에 저장된 다음 값을 더한 값이 dist에 저장된 값보다 작을 시 dist값 설정, 힙에 추가하도록 다익스트라 방법을 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token keyword">import</span> heapq
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">INF <span class="token operator">=</span> sys<span class="token punctuation">.</span>maxsize
</span><span class="code-line">
</span><span class="code-line">dire <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">        <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">dijk</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    dist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>INF <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    q <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    dist<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> graph<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</span><span class="code-line">    heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token punctuation">[</span>dist<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">        now_dist<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>q<span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">for</span> ty<span class="token punctuation">,</span> tx <span class="token keyword">in</span> dire<span class="token punctuation">:</span>
</span><span class="code-line">            ny <span class="token operator">=</span> y <span class="token operator">+</span> ty
</span><span class="code-line">            nx <span class="token operator">=</span> x <span class="token operator">+</span> tx
</span><span class="code-line">
</span><span class="code-line">            <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> ny <span class="token operator">&#x3C;</span> n <span class="token keyword">and</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> nx <span class="token operator">&#x3C;</span> n<span class="token punctuation">:</span>
</span><span class="code-line">                ndist <span class="token operator">=</span> now_dist <span class="token operator">+</span> graph<span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>nx<span class="token punctuation">]</span>
</span><span class="code-line">                <span class="token keyword">if</span> dist<span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>nx<span class="token punctuation">]</span> <span class="token operator">></span> ndist<span class="token punctuation">:</span>
</span><span class="code-line">                    dist<span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>nx<span class="token punctuation">]</span> <span class="token operator">=</span> ndist
</span><span class="code-line">                    heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token punctuation">[</span>ndist<span class="token punctuation">,</span> ny<span class="token punctuation">,</span> nx<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> dist<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">i <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
</span><span class="code-line">    n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">break</span>
</span><span class="code-line">
</span><span class="code-line">    graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        graph<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Problem %d: %d"</span> <span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> dijk<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    i <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-14495 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-14495-Python</link>
    <pubDate>2021-01-13</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-14495-Python</guid>
    <description>
    <![CDATA[BOJ-14495-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>f(n) = f(n-1) + f(n-3)의 점화식을 갖는 피보나치 비스무리한 수열의 n번째 수를 출력하는 문제. 주어진 점화식을 이용하여 간단히 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    dp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-17212 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-17212-Python</link>
    <pubDate>2021-01-13</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-17212-Python</guid>
    <description>
    <![CDATA[BOJ-17212-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>1, 2, 5, 7원의 동전을 이용하여 n원을 동전의 최소 개수로 만들었을 때 동전의 수를 출력하는 문제. 0 ~ 7원까지의 최소 수를 저장한 후 8부터 n원까지 반복을 수행하여 <code>min(dp[i-7], dp[i-5], dp[i-2], dp[i-1]) + 1</code> 점화식을 사용하여 저장 후 출력하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    m <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
</span><span class="code-line">    dp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>m<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-19947 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-19947-Python</link>
    <pubDate>2021-01-13</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-19947-Python</guid>
    <description>
    <![CDATA[BOJ-19947-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>h원과 투자기간 y가 주어진 후, 5% 1년, 20% 3년, 35% 5년의 이윤과 기간이 있는 투자 상품이 있다. 매번 이율은 소수점 이하를 버림해서 받으며 투자 방식은 매년 바꿀 수 있을 때, 가장 많은 이득을 얻었을 때의 총 자산을 소수점을 모두 버리고 정수로 출력하는 문제. 첫 풀이는 함수를 재귀적으로 사용하여 전역 변수와 값을 비교하여 풀었다. 두번째 풀이는 전역변수 사용이 아닌 재귀함수의 반환 값을 이용하여 비교, 출력하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># 19947</span>
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">investment</span><span class="token punctuation">(</span>money<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">global</span> ans
</span><span class="code-line">    <span class="token keyword">if</span> year <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">        ans <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> money<span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">return</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">if</span> year <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">        interest <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>money <span class="token operator">*</span> <span class="token number">1.05</span><span class="token punctuation">)</span>
</span><span class="code-line">        investment<span class="token punctuation">(</span>interest<span class="token punctuation">,</span> year <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> year <span class="token operator">-</span> <span class="token number">3</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">        interest <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>money <span class="token operator">*</span> <span class="token number">1.2</span><span class="token punctuation">)</span>
</span><span class="code-line">        investment<span class="token punctuation">(</span>interest<span class="token punctuation">,</span> year <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> year <span class="token operator">-</span> <span class="token number">5</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">        interest <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>money <span class="token operator">*</span> <span class="token number">1.35</span><span class="token punctuation">)</span>
</span><span class="code-line">        investment<span class="token punctuation">(</span>interest<span class="token punctuation">,</span> year <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">h<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">investment<span class="token punctuation">(</span>h<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># def invest(money, year):</span>
</span><span class="code-line"><span class="token comment">#     ans = money</span>
</span><span class="code-line"><span class="token comment">#     if year >= 1:</span>
</span><span class="code-line"><span class="token comment">#         ans = max(ans, invest(int(money * 1.05), year-1))</span>
</span><span class="code-line"><span class="token comment">#     if year >= 3:</span>
</span><span class="code-line"><span class="token comment">#         ans = max(ans, invest(int(money * 1.2), year-3))</span>
</span><span class="code-line"><span class="token comment">#     if year >= 5:</span>
</span><span class="code-line"><span class="token comment">#         ans = max(ans, invest(int(money * 1.35), year-5))</span>
</span><span class="code-line"><span class="token comment">#     return ans</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># h, y = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment"># print(invest(h, y))</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># def e(h, y):</span>
</span><span class="code-line"><span class="token comment">#     m=h</span>
</span><span class="code-line"><span class="token comment">#     if y>=1: m=max(m,e(int(h*1.05),y-1))</span>
</span><span class="code-line"><span class="token comment">#     if y>=3: m=max(m,e(int(h*1.2),y-3))</span>
</span><span class="code-line"><span class="token comment">#     if y>=5: m=max(m,e(int(h*1.35),y-5))</span>
</span><span class="code-line"><span class="token comment">#     return m</span>
</span><span class="code-line"><span class="token comment"># h, y = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment"># print(e(h,y))</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-14916 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-14916-Python</link>
    <pubDate>2021-01-12</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-14916-Python</guid>
    <description>
    <![CDATA[BOJ-14916-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n원을 5원, 2원으로 나누어줄 때 동전의 수를 최소로 돌려줬을 때, 동전의 수를 출력하는 문제. 그리디 방식을 이용하여 n을 5로 나눈 값부터 0까지 반복문을 수행하며 해당 값의 나머지가 2로 나누어질 때 동전의 수를 출력한 후 프로그램을 종료, 반복문 후에도 종료가 안됐을 시 -1을 출력하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">//</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    temp <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> i<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> temp <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span> temp <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span>
</span><span class="code-line">        exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-9625 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-9625-Python</link>
    <pubDate>2021-01-12</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-9625-Python</guid>
    <description>
    <![CDATA[BOJ-9625-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>문자열에서 버튼을 누를 시 A는 B로, B는 AB로 만든다고 한다. A의 문자열에서 버튼을 N번 눌렀을 때 A, B의 수를 출력하는 문제. 점화식 <code>dp[i] = [dp[i-1][1], dp[i-1][0] + dp[i-1][1]]</code>을 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-9655 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-9655-Python</link>
    <pubDate>2021-01-12</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-9655-Python</guid>
    <description>
    <![CDATA[BOJ-9655-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 돌이 있을 때 1개 혹은 3개를 가져가, 맨 마지막에 돌을 가져가는 사람이 이기는 게임이 있다. 상근이와 찬영이가 상근이부터 시작하여 게임을 진행할 시 n개의 돌일 때 누가 승리하는 지 출력하는 문제. 각 숫자들이 주어졌을 때 승자를 써보니 짝수와 홀수일 때 승자가 정해져있어 간단하게 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"CY"</span> <span class="token keyword">if</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token string">"SK"</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># print("CY" if int(input()) % 2 == 0 else "SK")</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2133 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2133-Python</link>
    <pubDate>2021-01-10</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2133-Python</guid>
    <description>
    <![CDATA[BOJ-2133-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>3xN의 크기를 갖는 배열에 2x1, 1x2 크기의 타일로 채우는 경우의 수를 출력하는 문제. 해당 문제는 홀수 일 때는 경우의 수가 0이 되며 짝수만 경우의 수를 갖는다. 2와 4의 경우의 수를 판단 시 각 3, 11이 되게 되는데 이를 통해 dp[n] = dp[n-2] + 2의 경우의 수를 갖는 다는 것을 알게 되었다. 더 큰 짝수들은 더해지는 값들이 2와 더불어 -4의 경우의 수와 x2를 해준 값을 더해야 함으로 dp[0]의 값을 1로 설정 후 반복문을 0부터 i-4의 값까지 x2하여 더해주어 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># def solve(n):</span>
</span><span class="code-line"><span class="token comment">#     dp = [0 for _ in range(31)]</span>
</span><span class="code-line"><span class="token comment">#     dp[0], dp[2] = 1, 3</span>
</span><span class="code-line"><span class="token comment">#     for i in range(4, n+1, 2):</span>
</span><span class="code-line"><span class="token comment">#         dp[i] = dp[i-2] * 3</span>
</span><span class="code-line"><span class="token comment">#         for j in range(i-4, -1, -2):</span>
</span><span class="code-line"><span class="token comment">#             dp[i] += dp[j] * 2</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     return dp[n]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># n = int(input())</span>
</span><span class="code-line"><span class="token comment"># print(solve(n))</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">solve</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span>
</span><span class="code-line">        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span>
</span><span class="code-line">    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>solve<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-5676 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-5676-Python</link>
    <pubDate>2021-01-10</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-5676-Python</guid>
    <description>
    <![CDATA[BOJ-5676-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>수열을 입력받은 후 해당 인덱스의 값을 변경, 구간곱을 계산하여 해당 구간곱의 값이 양수, 음수, 0인 경우에 따라 +, -, 0을 출력하는 두가지 입력이 존재하는 문제. 모든 풀이는 세그먼트 트리를 이용하여 풀었다. 첫 풀이는 입력 및 저장되는 값을 그대로 계산하여 출력을 요구할 때 0과 비교하여 풀었으나 오버플로우로 유발됐다고 예상되는 시간초과 결과를 얻게 되었다. 두번째 풀이는 입력되는 수를 0과 비교하여 1, 0, -1로 반환하는 함수를 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token keyword">import</span> math
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">init</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> start <span class="token operator">==</span> end<span class="token punctuation">:</span>
</span><span class="code-line">        tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">[</span>start<span class="token punctuation">]</span>
</span><span class="code-line">        <span class="token keyword">return</span> tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
</span><span class="code-line">    tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> init<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">)</span> <span class="token operator">*</span> init<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">return</span> tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">query</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> left <span class="token operator">></span> end <span class="token keyword">or</span> right <span class="token operator">&#x3C;</span> start<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> <span class="token number">1</span>
</span><span class="code-line">    <span class="token keyword">if</span> left <span class="token operator">&#x3C;=</span> start <span class="token keyword">and</span> right <span class="token operator">>=</span> end<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
</span><span class="code-line">    <span class="token keyword">return</span> query<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token operator">*</span> query<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> index<span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> index <span class="token operator">&#x3C;</span> start <span class="token keyword">or</span> index <span class="token operator">></span> end<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span>
</span><span class="code-line">    <span class="token keyword">if</span> start <span class="token operator">==</span> end<span class="token punctuation">:</span>
</span><span class="code-line">        tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> to
</span><span class="code-line">        <span class="token keyword">return</span>
</span><span class="code-line">
</span><span class="code-line">    mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
</span><span class="code-line">    update<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> index<span class="token punctuation">,</span> to<span class="token punctuation">)</span>
</span><span class="code-line">    update<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> index<span class="token punctuation">,</span> to<span class="token punctuation">)</span>
</span><span class="code-line">    tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> tree<span class="token punctuation">[</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> tree<span class="token punctuation">[</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">check_num</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">if</span> n <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">try</span><span class="token punctuation">:</span>
</span><span class="code-line">        n<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">except</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">break</span>
</span><span class="code-line">
</span><span class="code-line">    l <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span>check_num<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    height <span class="token operator">=</span> math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span>math<span class="token punctuation">.</span>log2<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    size <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token punctuation">(</span>height <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">    tree <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    init<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        method<span class="token punctuation">,</span> s<span class="token punctuation">,</span> e <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">        s<span class="token punctuation">,</span> e <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">if</span> method <span class="token operator">==</span> <span class="token string">"C"</span><span class="token punctuation">:</span>
</span><span class="code-line">            e <span class="token operator">=</span> check_num<span class="token punctuation">(</span>e<span class="token punctuation">)</span>
</span><span class="code-line">            update<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> s<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">            temp <span class="token operator">=</span> query<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> s<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> e<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">            <span class="token keyword">if</span> temp <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">                ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span>
</span><span class="code-line">            <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">                ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"+"</span> <span class="token keyword">if</span> temp <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token string">"-"</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-11060 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-11060-Python</link>
    <pubDate>2021-01-07</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-11060-Python</guid>
    <description>
    <![CDATA[BOJ-11060-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 정수로 이루어진 수열을 입력받는다. i번째 인덱스의 값을 A라고 했을 때 i ~ i+A까지 이동할 수 있다고 한다. 인덱스 0부터 시작해서 n까지 가는 최소 이동횟수를 출력하며 인덱스 n까지 갈 수 없을 때는 -1을 출력하는 문제. n+1의 수로 만들어진 새로운 배열을 생성하며 0부터 i까지 반복을 수행한다. 그 안에 i부터 i + l[i]까지 반복을 하며 dp[j]에 저장된 값과 현재 dp[i] + 1 값과 비교하여 작은 수를 저장한다. 반복문이 종료될 시 마지막에 저장된 값이 n + 1 (절대 나올 수 없는 수이기 때문에)일 시 -1을, 아닐 시 마지막에 저장된 값을 출력하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">dp <span class="token operator">=</span> <span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i <span class="token operator">+</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> j <span class="token operator">&#x3C;</span> n<span class="token punctuation">:</span>
</span><span class="code-line">            dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-1"</span> <span class="token keyword">if</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> n<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">else</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1725 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1725-Python</link>
    <pubDate>2021-01-06</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1725-Python</guid>
    <description>
    <![CDATA[BOJ-1725-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>히스토그램의 각 직사각형의 높이를 입력받은 후 가장 큰 직사각형의 넓이를 출력하는 문제. 위 문제와 TC 존재 여부만 다르다. 그렇기 때문에 동일한 스택을 사용하는 방법을 이용하여 풀었다. 자세한 풀이는 위 문제의 주석을 참고</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">checkArea</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    checked <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</span><span class="code-line">    area <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">while</span> checked <span class="token keyword">and</span> <span class="token punctuation">(</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&#x3C;</span> l<span class="token punctuation">[</span>checked<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            current_height <span class="token operator">=</span> checked<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">            area <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>area<span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> checked<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> l<span class="token punctuation">[</span>current_height<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">        checked<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> area
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>checkArea<span class="token punctuation">(</span>n<span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-10868 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-10868-Python</link>
    <pubDate>2021-01-05</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-10868-Python</guid>
    <description>
    <![CDATA[BOJ-10868-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 수가 주어진 후 정수 s, e가 주어진다. 입력된 수들의 인덱스 s부터 e까지 최솟값을 출력하는 문제. 위 문제와 같은 세그먼트 트리 방식을 이용하여 풀었으며 재귀적으로 반환 하는 값의 연산을 min 함수를 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line">INF <span class="token operator">=</span> sys<span class="token punctuation">.</span>maxsize
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">init</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> start <span class="token operator">==</span> end<span class="token punctuation">:</span>
</span><span class="code-line">        tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">[</span>start<span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
</span><span class="code-line">        tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>init<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">,</span> init<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">return</span> tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">query</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> left <span class="token operator">></span> end <span class="token keyword">or</span> right <span class="token operator">&#x3C;</span> start<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> INF
</span><span class="code-line">    <span class="token keyword">if</span> left <span class="token operator">&#x3C;=</span> start <span class="token keyword">and</span> right <span class="token operator">>=</span> end<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token builtin">min</span><span class="token punctuation">(</span>query<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">,</span> query<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">tree <span class="token operator">=</span> <span class="token punctuation">[</span>INF <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">333333</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">init<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    s<span class="token punctuation">,</span> e <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>query<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> s<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> e<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-6549 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-6549-Python</link>
    <pubDate>2021-01-05</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-6549-Python</guid>
    <description>
    <![CDATA[BOJ-6549-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>직사각형 여러 개가 아래쪽으로 정렬되어 있는 도형을 히스토그램이라 칭한다. 히스토그램의 길이, 각 직사각형들의 높이를 입력받은 후 해당 히스토그램에서 가장 큰 직사각형의 넓이를 출력하는 문제. 스택을 활용하여 풀었으며 입력되는 것을 1번 인덱스부터 끝까지 자른 배열을 함수에 전달한 후 첫 연산과 마지막 사각형을 확인하기 위해 맨 앞, 뒤에 0을 추가하였다. 그 후 확인했던 사각형의 인덱스가 들어갈 배열, 정답을 위한 변수를 생성하였다. 1부터 마지막 사각형을 위해 n+1까지 반복문을 수행하였으며 현재 확인 중인 사각형보다 이전 사각형의 높이가 클 시, 확인한 사각형의 인덱스의 마지막 값을 pop하였다. 해당 값 x 현재 시점 사이에 사각형의 수와 정답을 위한 변수 중 큰 것을 재저장하여 반복문이 끝날 시 반환하여 풀었다. 자세한 풀이는 주석을 참고</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">checkArea</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token comment"># 첫 연산과 마지막 사각형 확인을 위해 맨 앞과 뒤에 0 추가</span>
</span><span class="code-line">    l<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line">    l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token comment"># 확인헀던 사각형의 인덱스가 들어갈 배열</span>
</span><span class="code-line">    checked <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token comment"># 정담이 반환될 정수형 변수</span>
</span><span class="code-line">    area <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token comment"># l[i]는 현재 확인 중인 사각형의 높이</span>
</span><span class="code-line">        <span class="token comment"># l[checked[-1]은 이전에 확인했던 최대 높이</span>
</span><span class="code-line">        <span class="token comment"># checked에 값이 존재하며 현재 높이보다 이전 높이가 클 시</span>
</span><span class="code-line">        <span class="token keyword">while</span> checked <span class="token keyword">and</span> <span class="token punctuation">(</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&#x3C;</span> l<span class="token punctuation">[</span>checked<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token comment"># 비교할 사각형의 인덱스</span>
</span><span class="code-line">            current_index <span class="token operator">=</span> checked<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">            <span class="token comment"># i - 1 - checked[-1]은 현재 시점 사이에 몇 개의 사각형이 있는 지, 즉 가로 길이</span>
</span><span class="code-line">            area <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>area<span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> checked<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> l<span class="token punctuation">[</span>current_index<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">        checked<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> area
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
</span><span class="code-line">    l <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    n <span class="token operator">=</span> l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">break</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>checkArea<span class="token punctuation">(</span>n<span class="token punctuation">,</span> l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-11505 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-11505-Python</link>
    <pubDate>2021-01-04</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-11505-Python</guid>
    <description>
    <![CDATA[BOJ-11505-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 수가 주어진 후 수열의 값을 변경, 해당 수열의 구간 곱을 출력하는 문제. 위 문제와 동일한 세그먼트 트리 방식을 이용하여 풀었으며 곱한 값을 저장해야하는 만큼 재귀적으로 호출하여 값을 저장할 때 곱하기 연산을 사용하였으며 트리에 저장시에도 정해진 나누기 연산을 미리 수행하여 오버플로우 발생 및 연산을 빠르게 하였다. 또한 값을 변경 시에 리프노드일 시 tree의 값을 바꿔야하는 값으로 바꿔 주었으며 재귀 호출 후에 왼쪽, 오른쪽 자식 노드의 값을 곱한 값을 할당하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">init</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> start <span class="token operator">==</span> end<span class="token punctuation">:</span>
</span><span class="code-line">        tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">[</span>start<span class="token punctuation">]</span>
</span><span class="code-line">        <span class="token keyword">return</span> tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    mid <span class="token operator">=</span> <span class="token punctuation">(</span>start<span class="token operator">+</span>end<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>
</span><span class="code-line">    temp <span class="token operator">=</span> init<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">)</span> <span class="token operator">*</span> init<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span>
</span><span class="code-line">    tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> temp <span class="token operator">%</span> <span class="token number">1000000007</span>
</span><span class="code-line">    <span class="token keyword">return</span> tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">section_multi</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> left <span class="token operator">></span> end <span class="token keyword">or</span> right <span class="token operator">&#x3C;</span> start<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> <span class="token number">1</span>
</span><span class="code-line">    <span class="token keyword">if</span> left <span class="token operator">&#x3C;=</span> start <span class="token keyword">and</span> right <span class="token operator">>=</span> end<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    mid <span class="token operator">=</span> <span class="token punctuation">(</span>start<span class="token operator">+</span>end<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>
</span><span class="code-line">    temp <span class="token operator">=</span> section_multi<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token operator">*</span> section_multi<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">return</span> temp <span class="token operator">%</span> <span class="token number">1000000007</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> index<span class="token punctuation">,</span> diff<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> index <span class="token operator">&#x3C;</span> start <span class="token keyword">or</span> index <span class="token operator">></span> end<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">if</span> start <span class="token operator">==</span> end<span class="token punctuation">:</span>
</span><span class="code-line">        tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> diff
</span><span class="code-line">        <span class="token keyword">return</span>
</span><span class="code-line">
</span><span class="code-line">    mid <span class="token operator">=</span> <span class="token punctuation">(</span>start<span class="token operator">+</span>end<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>
</span><span class="code-line">    update<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> index<span class="token punctuation">,</span> diff<span class="token punctuation">)</span>
</span><span class="code-line">    update<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> index<span class="token punctuation">,</span> diff<span class="token punctuation">)</span>
</span><span class="code-line">    tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>tree<span class="token punctuation">[</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> tree<span class="token punctuation">[</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1000000007</span>
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">tree <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3000000</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">init<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token operator">+</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">        b <span class="token operator">-=</span> <span class="token number">1</span>
</span><span class="code-line">        l<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> c
</span><span class="code-line">        update<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span>section_multi<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> c<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2357 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2357-Python</link>
    <pubDate>2021-01-04</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2357-Python</guid>
    <description>
    <![CDATA[BOJ-2357-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 수가 주어진 후 정수 s, e가 주어진다. 입력된 수들의 인덱스 s부터 e까지 최소, 최대 값을 출력하는 문제. 첫 번째 접근은 리스트 슬라이싱을 이용하여 풀었으나 당연하게도 시간초과 결과를 받게 되었다. 두 번째 접근은 최소, 최대값을 저장하는 두개의 세그먼트 트리를 이용했다. 반환되는 값에 min과 max 함수를 사용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># import sys</span>
</span><span class="code-line"><span class="token comment"># input = sys.stdin.readline</span>
</span><span class="code-line"><span class="token comment"># n, m = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment"># l = [0]</span>
</span><span class="code-line"><span class="token comment"># for _ in range(n):</span>
</span><span class="code-line"><span class="token comment">#     l.append(int(input()))</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># for _ in range(m):</span>
</span><span class="code-line"><span class="token comment">#     s, e = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment">#     print(min(l[s:e+1]), max(l[s:e+1]))</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line">INF <span class="token operator">=</span> sys<span class="token punctuation">.</span>maxsize
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">min_tree <span class="token operator">=</span> <span class="token punctuation">[</span>INF <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">262144</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">max_tree <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">262144</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">min_init</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> start <span class="token operator">==</span> end<span class="token punctuation">:</span>
</span><span class="code-line">        min_tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">[</span>start<span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
</span><span class="code-line">        min_tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>min_init<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">,</span> min_init<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">return</span> min_tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">check_min</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> left <span class="token operator">></span> end <span class="token keyword">or</span> right <span class="token operator">&#x3C;</span> start<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> INF
</span><span class="code-line">    <span class="token keyword">if</span> left <span class="token operator">&#x3C;=</span> start <span class="token keyword">and</span> right <span class="token operator">>=</span> end<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> min_tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token builtin">min</span><span class="token punctuation">(</span>check_min<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">,</span> check_min<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">max_init</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> start <span class="token operator">==</span> end<span class="token punctuation">:</span>
</span><span class="code-line">        max_tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">[</span>start<span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
</span><span class="code-line">        max_tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>max_init<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">,</span> max_init<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">return</span> max_tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">check_max</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> left <span class="token operator">></span> end <span class="token keyword">or</span> right <span class="token operator">&#x3C;</span> start<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
</span><span class="code-line">    <span class="token keyword">if</span> left <span class="token operator">&#x3C;=</span> start <span class="token keyword">and</span> right <span class="token operator">>=</span> end<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> max_tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token builtin">max</span><span class="token punctuation">(</span>check_max<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">,</span> check_max<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">min_init<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">max_init<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    s<span class="token punctuation">,</span> e <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>check_min<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> s<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> e<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> check_max<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> s<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> e<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2042 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2042-Python</link>
    <pubDate>2021-01-03</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2042-Python</guid>
    <description>
    <![CDATA[BOJ-2042-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 수가 주어진 후 수열의 값을 변경, 해당 수열의 구간 합을 출력하는 문제. 세그먼트 트리 방식을 이용하여 풀었으며 입력되는 수들을 배열에 저장, 새로운 배열을 세그먼트 트리화하였다. init, sum, change 함수 모두 재귀적으로 호출하여 사용하였으며 중간 값 나누기 연산을 변수에 할당하여 작지만 연산을 줄여 풀었다. 자세한 풀이는 문제의 주석을 참고</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">init</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token comment"># start == end는 리프 노드일 때를 뜻함</span>
</span><span class="code-line">    <span class="token comment"># 리프 노드인 경우 배열의 원소 값을 반환</span>
</span><span class="code-line">    <span class="token keyword">if</span> start <span class="token operator">==</span> end<span class="token punctuation">:</span>
</span><span class="code-line">        tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">[</span>start<span class="token punctuation">]</span>
</span><span class="code-line">        <span class="token keyword">return</span> tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token comment"># 재귀적으로 왼쪽, 오른쪽 자식 트리를 만들고 합을 저장</span>
</span><span class="code-line">    middle <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
</span><span class="code-line">    tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> init<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> middle<span class="token punctuation">)</span> <span class="token operator">+</span> init<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> middle<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">return</span> tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># 트리의 구역 start, end</span>
</span><span class="code-line"><span class="token comment"># 합을 구할 구역 left, right</span>
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">section_sum</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token comment"># 합을 구해야하는 구역과 현재 탐색할 트리의 구역이 겹치지 않아 탐색할 필요가 없다</span>
</span><span class="code-line">    <span class="token keyword">if</span> left <span class="token operator">></span> end <span class="token keyword">or</span> right <span class="token operator">&#x3C;</span> start<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token comment"># 범위에 포함될 시 그 자식노드들도 포함이기 때문에 더 이상 호출하지 않아도 된다</span>
</span><span class="code-line">    <span class="token keyword">if</span> left <span class="token operator">&#x3C;=</span> start <span class="token keyword">and</span> right <span class="token operator">>=</span> end<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    middle <span class="token operator">=</span> <span class="token punctuation">(</span>start<span class="token operator">+</span>end<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>
</span><span class="code-line">    <span class="token comment"># 왼쪽, 오른쪽 자식을 루트로 하는 트리에서 재귀적으로 재탐색</span>
</span><span class="code-line">    <span class="token keyword">return</span> section_sum<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> middle<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token operator">+</span> section_sum<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> middle<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">change_num</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> index<span class="token punctuation">,</span> diff<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token comment"># 범위 외일 시 종료</span>
</span><span class="code-line">    <span class="token keyword">if</span> index <span class="token operator">&#x3C;</span> start <span class="token keyword">or</span> index <span class="token operator">></span> end<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token comment"># 트리의 값을 Update</span>
</span><span class="code-line">    tree<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">+=</span> diff
</span><span class="code-line">
</span><span class="code-line">    <span class="token comment"># 리프 노드가 아닐 경우 자식들도 값을 변경해야하기 때문에 재귀적으로 호출</span>
</span><span class="code-line">    <span class="token keyword">if</span> start <span class="token operator">!=</span> end<span class="token punctuation">:</span>
</span><span class="code-line">        middle <span class="token operator">=</span> <span class="token punctuation">(</span>start<span class="token operator">+</span>end<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>
</span><span class="code-line">        change_num<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> middle<span class="token punctuation">,</span> index<span class="token punctuation">,</span> diff<span class="token punctuation">)</span>
</span><span class="code-line">        change_num<span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> middle<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> index<span class="token punctuation">,</span> diff<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># 수의 개수, 수의 변경이 일어나는 횟수, 구간의 합을 구하는 횟수</span>
</span><span class="code-line">n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">tree <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3000000</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">init<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token operator">+</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">        b <span class="token operator">-=</span> <span class="token number">1</span>
</span><span class="code-line">        <span class="token comment"># 현재 인덱스에 있는 수와 바꿔야되는 수의 차이</span>
</span><span class="code-line">        diff <span class="token operator">=</span> c <span class="token operator">-</span> l<span class="token punctuation">[</span>b<span class="token punctuation">]</span>
</span><span class="code-line">        l<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> c
</span><span class="code-line">        change_num<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> diff<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span>section_sum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> c<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1018 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1018-Python</link>
    <pubDate>2021-01-02</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1018-Python</guid>
    <description>
    <![CDATA[BOJ-1018-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>y만큼 x 크기의 "W", "B"로 이루어진 문자열들을 입력받는다. 그 후 해당 문자열들을 8, 8 크기로 체스판처럼 만들 때 수정해야할 칸의 최솟값을 출력하는 문제. 0부터 y-7, x-7까지 반복문을 수행하며 시작점과 끝점을 함수의 매개변수로 사용하였다. 함수는 시작점부터 끝점까지 반복문을 수행하며 <code>(i + j) % 2</code>의 수식을 이용하여 임의의 "W", "B"를 판단하였으며 두가지 경우에 대하여 문자열이 다를 시 정수형 변수를 증가하여 해당 값을 계산하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">y<span class="token punctuation">,</span> x <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">board <span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">""</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">ans <span class="token operator">=</span> y <span class="token operator">*</span> x
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    board<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">check_diff</span><span class="token punctuation">(</span>sy<span class="token punctuation">,</span> ey<span class="token punctuation">,</span> sx<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">global</span> ans
</span><span class="code-line">    diff_white <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    diff_black <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>sy<span class="token punctuation">,</span> ey<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        cnt_white <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">        cnt_black <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>sx<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">                <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"W"</span><span class="token punctuation">:</span>
</span><span class="code-line">                    cnt_black <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">                <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">                    cnt_white <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">            <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">                <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"B"</span><span class="token punctuation">:</span>
</span><span class="code-line">                    cnt_black <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">                <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">                    cnt_white <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">        diff_black<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cnt_black
</span><span class="code-line">        diff_white<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cnt_white
</span><span class="code-line">
</span><span class="code-line">    ans <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>diff_black<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>diff_white<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> x<span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        check_diff<span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1389 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1389-Python</link>
    <pubDate>2021-01-01</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1389-Python</guid>
    <description>
    <![CDATA[BOJ-1389-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n명과 m개의 관계를 입력받은 후. 모든 사람을 기준으로 임의의 두 사람이 최소 몇 단계 만에 이어질 수 있는지 계산한 총합을 계산하여 그 값, 케빈 베이컨의 수가 가장 적은 사람을 출력하는 문제. n+1, n+1의 크기의 이차원 배열을 INF 값으로 만든 후 입력되는 관계를 쌍방향으로 1로 저장, 플로이드 와샬 방법을 사용하여 <code>graph[i][j] = min(graph[i][j], graph[i][k] + graph[k][j])</code>의 점화식을 사용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">INF <span class="token operator">=</span> sys<span class="token punctuation">.</span>maxsize
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>INF <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    graph<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">    graph<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    graph<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> graph<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">dist <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span> INF<span class="token punctuation">,</span> graph<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">MIN <span class="token operator">=</span> INF
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> MIN <span class="token operator">></span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">        MIN <span class="token operator">=</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
</span><span class="code-line">        ans <span class="token operator">=</span> i
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1541 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1541-Python</link>
    <pubDate>2020-12-30</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1541-Python</guid>
    <description>
    <![CDATA[BOJ-1541-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>정수, '+', '-'로만 이루어진 수식을 입력받은 후, 해당 수식에 괄호를 사용하여 연산한 값이 최소가 되도록 출력하는 문제. '-'로 split한 값들을 eval하여 다른 배열에 append한 후, 해당 배열을 '-'.join하여 eval한 값을 출력하여 풀었다. 주어지는 정수가 '05' 같은 경우가 있어 map을 이용하여 int로 바꾼 후 다시 str형으로 바꿔 join하도록 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> i<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">d <span class="token operator">=</span> <span class="token string">"-"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-11048 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-11048-Python</link>
    <pubDate>2020-12-29</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-11048-Python</guid>
    <description>
    <![CDATA[BOJ-11048-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>y, x 크기의 정수로 이루어진 이차원 배열이 주어진다. (0, 0)에서 (y, x)까지 대각선 아래, 오른쪽, 아래쪽 방향으로 이동할 수 있을 때 (y, x)까지 모든 정수를 더한 최대 값을 출력하는 문제. 첫번째 풀이는 bfs 연산을 이용하여 풀었으나 시간초과 결과를 받게 되었다. 두번째 풀이는 dp로 풀었으며, y+1, x+1 크기의 배열을 만들어 <code>graph[i-1][j-1] + max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])</code>의 점화식을 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># import sys</span>
</span><span class="code-line"><span class="token comment"># from collections import deque</span>
</span><span class="code-line"><span class="token comment"># input = sys.stdin.readline</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># dire = [[1, 0],</span>
</span><span class="code-line"><span class="token comment">#         [0, 1]]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># def bfs():</span>
</span><span class="code-line"><span class="token comment">#     q = deque()</span>
</span><span class="code-line"><span class="token comment">#     q.append([0, 0, graph[0][0]])</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     while q:</span>
</span><span class="code-line"><span class="token comment">#         y, x, cnt = q.popleft()</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#         for dy, dx in dire:</span>
</span><span class="code-line"><span class="token comment">#             ny = dy + y</span>
</span><span class="code-line"><span class="token comment">#             nx = dx + x</span>
</span><span class="code-line"><span class="token comment">#             if 0 &#x3C;= ny &#x3C; Y and 0 &#x3C;= nx &#x3C; X:</span>
</span><span class="code-line"><span class="token comment">#                 nv = cnt + graph[ny][nx]</span>
</span><span class="code-line"><span class="token comment">#                 if ans[ny][nx] &#x3C; nv:</span>
</span><span class="code-line"><span class="token comment">#                     ans[ny][nx] = nv</span>
</span><span class="code-line"><span class="token comment">#                     q.append([ny, nx, nv])</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># Y, X = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment"># ans = [[0 for _ in range(X)] for _ in range(Y)]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># graph = []</span>
</span><span class="code-line"><span class="token comment"># for _ in range(Y):</span>
</span><span class="code-line"><span class="token comment">#     graph.append(list(map(int, input().split())))</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># bfs()</span>
</span><span class="code-line"><span class="token comment"># print(ans[Y-1][X-1])</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">y<span class="token punctuation">,</span> x <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token punctuation">[</span>graph<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> graph<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-10819 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-10819-Python</link>
    <pubDate>2020-12-27</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-10819-Python</guid>
    <description>
    <![CDATA[BOJ-10819-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 정수로 이루어진 수열이 입력된다. 이 때 수열의 자리를 바꾸어 |l[0] - l[1]| + |l[1] - l[2]| + ... 의 식을 계산했을 시 나올 수 있는 최댓값을 출력하는 문제. 백트래킹 방법을 이용하여 모든 경우의 수를 배열에 저장 후, 배열의 길이가 n과 같아질 시 계산 후 값을 저장, 백트래킹이 끝난 후에 max값을 출력하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">calcur</span><span class="token punctuation">(</span>tl<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    t <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        t <span class="token operator">+=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>tl<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> tl<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">return</span> t
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">bt</span><span class="token punctuation">(</span>depth<span class="token punctuation">,</span> tl<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> depth <span class="token operator">==</span> n<span class="token punctuation">:</span>
</span><span class="code-line">        ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>calcur<span class="token punctuation">(</span>tl<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">return</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">continue</span>
</span><span class="code-line">
</span><span class="code-line">        visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">        tl<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">        bt<span class="token punctuation">(</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> tl<span class="token punctuation">)</span>
</span><span class="code-line">        visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>
</span><span class="code-line">        tl<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">visit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">tl <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">bt<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> tl<span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1182 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1182-Python</link>
    <pubDate>2020-12-26</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1182-Python</guid>
    <description>
    <![CDATA[BOJ-1182-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 정수로 이루어진 수열의 부분수열 중 합이 s인 경우의 수를 출력하는 문제. 백트래킹 방식을 이용하여 풀었으며 i+1부터 n까지 방문확인을 해제하여 순서가 다르지만 값은 같은 경우를 방지하였으며 방문한 리스트가 비어있지 않으며 합한 값이 s와 같을 때 CBR를 이용하여 값을 추가하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">bt</span><span class="token punctuation">(</span>depth<span class="token punctuation">,</span> temp_list<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span> <span class="token operator">==</span> s <span class="token keyword">and</span> temp_list <span class="token operator">!=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">        ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">elif</span> depth <span class="token operator">==</span> n<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> <span class="token keyword">not</span> visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">            temp_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">            bt<span class="token punctuation">(</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> temp_list<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">            temp_list<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">                visit<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> s <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">visit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">tl <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</span><span class="code-line">bt<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> tl<span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1874 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1874-Python</link>
    <pubDate>2020-12-22</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1874-Python</guid>
    <description>
    <![CDATA[BOJ-1874-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>스택에 수를 push 할 때 1부터 오름차순으로 할 때 주어지는 수열을 push와 pop을 이용하여 만들 수 있는 지 여부와 있을 때 연산의 과정을 출력하는 문제. 수열에 입력되는 수와 스택의 마지막 값과 비교하여 마지막 값보다 클 시 스택에 들어왔던 제일 큰 수부터 입력된 수까지 연산을, 마지막 값보다 작을 시는 마지막 값과 같은 지를 확인하여 만들 수 있는 여부를 확인하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">max_num <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    tn <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">if</span> max_num <span class="token operator">&#x3C;</span> tn<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>max_num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> tn<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            l<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</span><span class="code-line">            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">)</span>
</span><span class="code-line">        ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">)</span>
</span><span class="code-line">        ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span>
</span><span class="code-line">        max_num <span class="token operator">=</span> tn
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> l<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> tn<span class="token punctuation">:</span>
</span><span class="code-line">            l<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span>
</span><span class="code-line">            exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token punctuation">[</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> ans<span class="token punctuation">]</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2960 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2960-Python</link>
    <pubDate>2020-12-22</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2960-Python</guid>
    <description>
    <![CDATA[BOJ-2960-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>에라토스테네스의 체 방식으로 k번째로 소수가 아닌 것을 확인한 수를 출력하는 문제. 확인한 수를 저장하는 변수를 사용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">erato</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    cnt <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> <span class="token keyword">not</span> l<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">                l<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">                cnt <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">                <span class="token keyword">if</span> cnt <span class="token operator">==</span> k<span class="token punctuation">:</span>
</span><span class="code-line">                    <span class="token keyword">return</span> j
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>erato<span class="token punctuation">(</span>n<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-6588 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-6588-Python</link>
    <pubDate>2020-12-22</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-6588-Python</guid>
    <description>
    <![CDATA[BOJ-6588-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>위 문제와 동일한 골드바흐 파티션을 출력하는 문제. 다른 점은 n2 - n1이 제일 큰 조합을 출력하는 것과 골드바흐 파티션이 존재하지 않는 예외를 처리하는 것이다. 골드바흐 파티션을 찾는 즉시 반환하는 함수를 만들어 사용하였으며 반복문이 끝날 시 존재하지 않을 때 출력할 문장을 반환하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">get_prime</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    sieve <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">True</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    sieve<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>
</span><span class="code-line">    mn <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>n <span class="token operator">**</span> <span class="token number">0.5</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> mn<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> sieve<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span>i<span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">                sieve<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> sieve
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">goldbach</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    n1<span class="token punctuation">,</span> n2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>n <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">and</span> prime<span class="token punctuation">[</span>n<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            n1<span class="token punctuation">,</span> n2 <span class="token operator">=</span> i<span class="token punctuation">,</span> n<span class="token operator">-</span>i
</span><span class="code-line">            <span class="token keyword">return</span> <span class="token string">"%d = %d + %d"</span> <span class="token operator">%</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token string">"Goldbach's conjecture is wrong."</span>
</span><span class="code-line">
</span><span class="code-line">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
</span><span class="code-line">    n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">break</span>
</span><span class="code-line">    l<span class="token punctuation">.</span>append<span class="token punctuation">(</span>n<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">prime <span class="token operator">=</span> get_prime<span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> n <span class="token keyword">in</span> l<span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>goldbach<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-9020 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-9020-Python</link>
    <pubDate>2020-12-22</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-9020-Python</guid>
    <description>
    <![CDATA[BOJ-9020-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>골드바흐의 추측은 유명한 정수론의 미해결 문제로, 2보다 큰 모든 짝수는 두 소수의 합으로 나타낼 수 있다는 것이다. 이러한 수를 골드바흐 수라고 한다. 또, 짝수를 두 소수의 합으로 나타내는 표현을 그 수의 골드바흐 파티션이라고 한다. 2보다 큰 짝수 n이 주어졌을 때, n의 골드바흐 파티션을 출력하는 문제. 입력되는 수들 중 제일 큰 수를 기준으로 에라토스테네스 방식을 이용하여 소수인 수가 True로 저장돼 있는 리스트를 이용하여 n//2+1까지 n-i, i 둘 다 소수일 때를 저장하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">get_prime</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    sieve <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">True</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    sieve<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>
</span><span class="code-line">    mn <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>n <span class="token operator">**</span> <span class="token number">0.5</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> mn<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> sieve<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span>i<span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">                sieve<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> sieve
</span><span class="code-line">
</span><span class="code-line">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">prime <span class="token operator">=</span> get_prime<span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> n <span class="token keyword">in</span> l<span class="token punctuation">:</span>
</span><span class="code-line">    n1<span class="token punctuation">,</span> n2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>n<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">and</span> prime<span class="token punctuation">[</span>n<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            n1<span class="token punctuation">,</span> n2 <span class="token operator">=</span> i<span class="token punctuation">,</span> n<span class="token operator">-</span>i
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-11004 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-11004-Python</link>
    <pubDate>2020-12-21</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-11004-Python</guid>
    <description>
    <![CDATA[BOJ-11004-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>입력되는 수열을 올림차순으로 정렬하여 k번째 수를 출력하는 문제. sorted 메소를 이용하여 정렬 후 인덱스를 출력하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-17219 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-17219-Python</link>
    <pubDate>2020-12-19</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-17219-Python</guid>
    <description>
    <![CDATA[BOJ-17219-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 공백으로 나누어진 문자열을 입력받은 후 m개의 문자열로 앞서 입력받은 문자열에서 찾아 뒤의 문자열을 출력하는 문제. 딕셔너리 자료형을 이용하여 저장, 출력하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    s<span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">    d<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> p
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-9019 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-9019-Python</link>
    <pubDate>2020-12-19</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-9019-Python</guid>
    <description>
    <![CDATA[BOJ-9019-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>0000부터 9999까지의 범위에 두 수를 입력받는다. 자릿수를 왼쪽으로 이동시키는 연산은 L, 오른쪽으로 이동시키는 연산은 R, 두배로 만드는 것을 D, 1을 빼는 연산을 S라고 한다. 왼쪽에 있는 수를 오른쪽에 있는 수의 모습으로 바꾸는 최소 경우에 연산 과정을 출력하는 문제. BFS 연산을 이용하여 풀었으며 각 연산을 함수로 만들어 사용했다. 정답과 비교는 문자열로 하였으며 방문확인은 최대수까지의 배열을 만들어 비교했다. 리스트형의 인덱스를 이용해 L, R 연산을 했을 시 시간초과 결과를 얻게되어 연산하여 사용했다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">left</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">return</span> set_format<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> n <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">right</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">return</span> set_format<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1000</span> <span class="token operator">+</span> n <span class="token operator">//</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">double</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    t <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
</span><span class="code-line">    t <span class="token operator">=</span> <span class="token punctuation">(</span>t<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10000</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">(</span>set_format<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">minus</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token string">"0000"</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> <span class="token string">"9999"</span>
</span><span class="code-line">    t <span class="token operator">=</span> <span class="token string">"0000"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">    l <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">return</span> t<span class="token punctuation">[</span>l<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span>l<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">set_format</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    t <span class="token operator">=</span> <span class="token string">"0000"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
</span><span class="code-line">    l <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">return</span> t<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">:</span>l<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    q <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">    q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>s<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    visit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    visit<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">        now<span class="token punctuation">,</span> cnt <span class="token operator">=</span> q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">if</span> now <span class="token operator">==</span> e<span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">return</span> cnt
</span><span class="code-line">
</span><span class="code-line">        t <span class="token operator">=</span> double<span class="token punctuation">(</span>now<span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">if</span> <span class="token keyword">not</span> visit<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>t<span class="token punctuation">,</span> cnt <span class="token operator">+</span> <span class="token string">"D"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">            visit<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">
</span><span class="code-line">        t <span class="token operator">=</span> minus<span class="token punctuation">(</span>now<span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">if</span> <span class="token keyword">not</span> visit<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>t<span class="token punctuation">,</span> cnt <span class="token operator">+</span> <span class="token string">"S"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">            visit<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">
</span><span class="code-line">        t <span class="token operator">=</span> left<span class="token punctuation">(</span>now<span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">if</span> <span class="token keyword">not</span> visit<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>t<span class="token punctuation">,</span> cnt <span class="token operator">+</span> <span class="token string">"L"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">            visit<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">
</span><span class="code-line">        t <span class="token operator">=</span> right<span class="token punctuation">(</span>now<span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">if</span> <span class="token keyword">not</span> visit<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>t<span class="token punctuation">,</span> cnt <span class="token operator">+</span> <span class="token string">"R"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">            visit<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    s<span class="token punctuation">,</span> e <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span>set_format<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>check<span class="token punctuation">(</span>s<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1238 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1238-Python</link>
    <pubDate>2020-12-17</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1238-Python</guid>
    <description>
    <![CDATA[BOJ-1238-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n명의 사람, 단방향으로 출발지, 도착지, 가중치를 갖는 m개의 노선, 최종 도착지 x가 주어진다. 이 때 모든 사람들이 x에 도착하여 다시 도시 n으로 가는 최단시간 중 최대 값을 출력하는 문제. 다익스트라 알고리즘을 이용하여 접근했으며 첫 풀이는 n에서 x까지, x에서 n까지 이동하는 최소비용들을 더하여 풀었으나 메모리초과 결과를 받게 되었다. 두번째 풀이는 x부터 다른 도시들까지 이동하는 모든 최단 길이를 저장 후 노선을 반대로 저장한 것을 이용해 다른 도시들부터 x까지 가는 모든 최단 길이 두개를 더해 더한 값 중 최대 값을 출력하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> heapq
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line">INF <span class="token operator">=</span> sys<span class="token punctuation">.</span>maxsize
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> dist<span class="token punctuation">,</span> graph<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    dist<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    q <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">    heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> start<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">        cnt<span class="token punctuation">,</span> here <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>q<span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">if</span> dist<span class="token punctuation">[</span>here<span class="token punctuation">]</span> <span class="token operator">></span> cnt<span class="token punctuation">:</span>
</span><span class="code-line">            dist<span class="token punctuation">[</span>here<span class="token punctuation">]</span> <span class="token operator">=</span> cnt
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">for</span> there <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> dist<span class="token punctuation">[</span>there<span class="token punctuation">]</span> <span class="token operator">></span> cnt <span class="token operator">+</span> graph<span class="token punctuation">[</span>here<span class="token punctuation">]</span><span class="token punctuation">[</span>there<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">                heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token punctuation">[</span>cnt <span class="token operator">+</span> graph<span class="token punctuation">[</span>here<span class="token punctuation">]</span><span class="token punctuation">[</span>there<span class="token punctuation">]</span><span class="token punctuation">,</span> there<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> x <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>INF <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">graph_r <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>INF <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    s<span class="token punctuation">,</span> e<span class="token punctuation">,</span> w <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    graph<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">[</span>e<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>graph<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">)</span>
</span><span class="code-line">    graph_r<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>graph_r<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">dist_x <span class="token operator">=</span> <span class="token punctuation">[</span>INF <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">dist_r <span class="token operator">=</span> <span class="token punctuation">[</span>INF <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">dijkstra<span class="token punctuation">(</span>x<span class="token punctuation">,</span> dist_x<span class="token punctuation">,</span> graph<span class="token punctuation">)</span>
</span><span class="code-line">dijkstra<span class="token punctuation">(</span>x<span class="token punctuation">,</span> dist_r<span class="token punctuation">,</span> graph_r<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    ans <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> dist_x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> dist_r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1259 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1259-Python</link>
    <pubDate>2020-12-16</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1259-Python</guid>
    <description>
    <![CDATA[BOJ-1259-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>입력되는 수들이 팰린드롬 형식인지 여부를 출력하는 문제. 문자열의 길이를 이용하여 반복문을 수행하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">isPalin</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
</span><span class="code-line">    mid <span class="token operator">=</span> length <span class="token operator">//</span> <span class="token number">2</span>
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> s<span class="token punctuation">[</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">return</span> <span class="token string">"no"</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token string">"yes"</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
</span><span class="code-line">    s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token string">"0"</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">break</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>isPalin<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1261 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1261-Python</link>
    <pubDate>2020-12-16</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1261-Python</guid>
    <description>
    <![CDATA[BOJ-1261-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>(0, 0)부터 (y, x) 좌표까지 이동할 때 막힌 곳을 부신 후 지나갈 수 있다고 한다. 이 때 최소한의 개수로 부수며 갈 수 있는 경우의 부순 수를 출력하는 문제. 다익스트라 알고리즘을 사용하여 풀었으며, 이에 필요한 힙 자료구조, 방문확인 배열을 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token keyword">import</span> heapq
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">direc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">         <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">         <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">         <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    visit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    visit<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">    q <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">    heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">        cnt<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>q<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">if</span> y <span class="token operator">==</span> Y<span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">and</span> x <span class="token operator">==</span> X<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">return</span> cnt
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">for</span> dy<span class="token punctuation">,</span> dx <span class="token keyword">in</span> direc<span class="token punctuation">:</span>
</span><span class="code-line">            ny <span class="token operator">=</span> dy <span class="token operator">+</span> y
</span><span class="code-line">            nx <span class="token operator">=</span> dx <span class="token operator">+</span> x
</span><span class="code-line">            <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> ny <span class="token operator">&#x3C;</span> Y <span class="token keyword">and</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> nx <span class="token operator">&#x3C;</span> X <span class="token keyword">and</span> visit<span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>nx<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">                visit<span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>nx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">                <span class="token keyword">if</span> graph<span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>nx<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>
</span><span class="code-line">                    heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token punctuation">[</span>cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> ny<span class="token punctuation">,</span> nx<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">                <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">                    heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token punctuation">[</span>cnt<span class="token punctuation">,</span> ny<span class="token punctuation">,</span> nx<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">X<span class="token punctuation">,</span> Y <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    graph<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">ans <span class="token operator">=</span> dijkstra<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-10266 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-10266-Python</link>
    <pubDate>2020-12-15</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-10266-Python</guid>
    <description>
    <![CDATA[BOJ-10266-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>360000의 크기를 갖는 시계에 n개의 시계바늘이 있다. 동일한 시계 바늘을 갖고 있는 시계의 시계 바늘 각도가 주어질 때, 시계를 돌렸을 때 같은 시각을 나타낼 수 있는 지 여부를 출력하는 문제. 360000의 길이를 0으로 이루어진 배열 두개를 만든 후 각 시계마다 입력되는 각도를 1로 변경하였다. 한 시계의 배열을 2배로 한 것에 KMP 알고리즘을 이용하여 다른 시계 배열을 찾았으며 찾을 시와 못찾았을 시를 나누어 출력하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">MAX <span class="token operator">=</span> <span class="token number">360000</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">KMP</span><span class="token punctuation">(</span>ori<span class="token punctuation">,</span> pat<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    i <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    j <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    lps <span class="token operator">=</span> getLPS<span class="token punctuation">(</span>pat<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">while</span> i <span class="token operator">&#x3C;</span> MAX<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> ori<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> pat<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            i <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">            j <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> j <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">                j <span class="token operator">=</span> lps<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">            <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">                i <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">if</span> j <span class="token operator">==</span> MAX<span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">return</span> <span class="token string">"possible"</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token string">"impossible"</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">getLPS</span><span class="token punctuation">(</span>pat<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    i <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">    leng <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    lps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>MAX<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">while</span> i <span class="token operator">&#x3C;</span> MAX<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> pat<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> pat<span class="token punctuation">[</span>leng<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            leng <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">            lps<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> leng
</span><span class="code-line">            i <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> leng <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">                leng <span class="token operator">=</span> lps<span class="token punctuation">[</span>leng<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">            <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">                lps<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">                i <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">    <span class="token keyword">return</span> lps
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">checkin</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    l <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> l<span class="token punctuation">:</span>
</span><span class="code-line">        p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">pat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>MAX<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">ori <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>MAX<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">checkin<span class="token punctuation">(</span>pat<span class="token punctuation">)</span>
</span><span class="code-line">checkin<span class="token punctuation">(</span>ori<span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>KMP<span class="token punctuation">(</span>ori<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> pat<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-11585 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-11585-Python</link>
    <pubDate>2020-12-15</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-11585-Python</guid>
    <description>
    <![CDATA[BOJ-11585-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>환형 문자열에서 특정 문자열을 찾아 나올 수 있는 확률을 기약 분수 형태로 출력하는 문제. 두 문자열을 입력받은 후 한 문자열을 2배로 한 후, 마지막 문자를 제거한 문자열에서 다른 문자열을 KMP 알고리즘을 이용하여 찾도록 풀었다. 마지막 문자를 제거하는 이유는 입력되는 문자열이 동일 시 추가적으로 한 개가 더 늘기 때문이다. 기약분수화는 fractions의 Fraction을 이용하였으며 모든 경우에서 찾을 수 있을 때 1로 나오는 것을 예외처리하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">from</span> fractions <span class="token keyword">import</span> Fraction
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">KMP</span><span class="token punctuation">(</span>ori<span class="token punctuation">,</span> pat<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    lt <span class="token operator">=</span> n <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span>
</span><span class="code-line">    lp <span class="token operator">=</span> n
</span><span class="code-line">    lps <span class="token operator">=</span> getLPS<span class="token punctuation">(</span>pat<span class="token punctuation">,</span> n<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    ans <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line">    i <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    j <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    <span class="token keyword">while</span> i <span class="token operator">&#x3C;</span> lt<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> ori<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> pat<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            i <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">            j <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">        <span class="token keyword">elif</span> ori<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> pat<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> j <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">                j <span class="token operator">=</span> lps<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">            <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">                i <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">if</span> j <span class="token operator">==</span> lp<span class="token punctuation">:</span>
</span><span class="code-line">            ans <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">            j <span class="token operator">=</span> lps<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> ans
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">getLPS</span><span class="token punctuation">(</span>pat<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    lps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    j <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    i <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">    <span class="token keyword">while</span> i <span class="token operator">&#x3C;</span> length<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> pat<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> pat<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            j <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">            lps<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j
</span><span class="code-line">            i <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> j <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">                j <span class="token operator">=</span> lps<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">            <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">                lps<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">                i <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">    <span class="token keyword">return</span> lps
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">pat <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>
</span><span class="code-line">origin <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span>
</span><span class="code-line">
</span><span class="code-line">kmp <span class="token operator">=</span> KMP<span class="token punctuation">(</span>origin<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token operator">*</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pat<span class="token punctuation">)</span>
</span><span class="code-line">frac <span class="token operator">=</span> Fraction<span class="token punctuation">(</span>kmp<span class="token punctuation">,</span> n<span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1/1"</span> <span class="token keyword">if</span> frac <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">else</span> frac<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1699 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1699-Python</link>
    <pubDate>2020-12-14</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1699-Python</guid>
    <description>
    <![CDATA[BOJ-1699-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>정수 n이 주어질 때, 이 수를 제곱수의 합으로 나타낼 때, 제일 작은 제곱수의 수를 출력하는 문제. 다이내믹 프로그래밍 문제로 1부터 n까지 반복, 1부터 j*j가 i보다 작을 때 까지 반복한다. <code>dp[i], dp[i-(j*j)]+1</code> 중 작은 것을 배열데 대입하도록 점화식을 구성하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">dp <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> j <span class="token operator">*</span> j <span class="token operator">></span> i<span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">break</span>
</span><span class="code-line">        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span>j<span class="token operator">*</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2217 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2217-Python</link>
    <pubDate>2020-12-14</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2217-Python</guid>
    <description>
    <![CDATA[BOJ-2217-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 밧줄이 견딜 수 있는 무게가 주어진다. 밧줄은 여러줄 사용하여 무게 w를 밧줄의 수 k만큼 w/k의 중량으로 나누어 들 수 있을 때, 밧줄을 이용하여 들 수 있는 최대 무게를 구하는 문제. 입력되는 모든 밧줄을 오름차순으로 정렬 후 <code>해당 밧줄의 무게 * (n-i)</code>를 계산하여 최대값을 출력하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n<span class="token operator">-</span>i<span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-12015 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-12015-Python</link>
    <pubDate>2020-12-13</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-12015-Python</guid>
    <description>
    <![CDATA[BOJ-12015-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n의 길이를 갖는 수열을 입력받은 후, 해당 수열의 증가하는 부분 수열의 최대 길이를 출력하는 문제. 첫번째 풀이는 O(n^2)의 시간복잡도를 갖는 dp를 이용하여 풀었다. 하지만 시간초과 결과를 받게 되었는데 해당 문제는 n이 최대 백만인 경우까지 있기 때문이다. 두번째 풀이는 O(nlogn)의 시간복잡도를 갖는 이분탐색을 이용하여 풀었다. n까지 반복을 수행하며 n의 크기를 갖는 vt 배열의 마지막 값과 비교하여 클 때 길이를 늘린 후 추가, 작을 시 현재 크기만큼 탐색을 통해 같은 값이 있을 때는 연산을 안하며 큰 값이 나왔을 때 해당 인덱스의 값을 바꿔준다. 탐색이 끝난 후까지 함수가 종료 안됐을 시 첫번째 값과 비교하여 값을 할당하여 풀었다. / 시간초과로 재채점되어 내장 라이브러리 bisect, sys.stdin.readline을 이용하여 다시 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># n = int(input())</span>
</span><span class="code-line"><span class="token comment"># l = list(map(int, input().split()))</span>
</span><span class="code-line"><span class="token comment"># dp = [1 for _ in range(n)]</span>
</span><span class="code-line"><span class="token comment"># ans = 0</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># for i in range(n):</span>
</span><span class="code-line"><span class="token comment">#     for j in range(0, i):</span>
</span><span class="code-line"><span class="token comment">#         if l[i] > l[j]:</span>
</span><span class="code-line"><span class="token comment">#             dp[i] = max(dp[i], dp[j] + 1)</span>
</span><span class="code-line"><span class="token comment">#     ans = max(dp[i], ans)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># print(ans)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># def lower_bound(length, value):</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">#     for i in range(length):</span>
</span><span class="code-line"><span class="token comment">#         if vt[i] == value:</span>
</span><span class="code-line"><span class="token comment">#             return</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">#         elif vt[i] > value:</span>
</span><span class="code-line"><span class="token comment">#             vt[i] = value</span>
</span><span class="code-line"><span class="token comment">#             return</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment">#     if vt[0] > value:</span>
</span><span class="code-line"><span class="token comment">#         vt[0] = value</span>
</span><span class="code-line"><span class="token comment">#         return</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># n = int(input())</span>
</span><span class="code-line"><span class="token comment"># l = list(map(int, input().split()))</span>
</span><span class="code-line"><span class="token comment"># vt = [0 for _ in range(n)]</span>
</span><span class="code-line"><span class="token comment"># vt[0] = l[0]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># ans = 0</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># for i in range(n):</span>
</span><span class="code-line"><span class="token comment">#     if vt[ans] &#x3C; l[i]:</span>
</span><span class="code-line"><span class="token comment">#         ans += 1</span>
</span><span class="code-line"><span class="token comment">#         vt[ans] = l[i]</span>
</span><span class="code-line"><span class="token comment">#     else:</span>
</span><span class="code-line"><span class="token comment">#         lower_bound(ans+1, l[i])</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># print(ans+1)</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token keyword">from</span> bisect <span class="token keyword">import</span> bisect_left
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> l<span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&#x3C;</span> i<span class="token punctuation">:</span> stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span> stack<span class="token punctuation">[</span>bisect_left<span class="token punctuation">(</span>stack<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> i
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2644 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2644-Python</link>
    <pubDate>2020-12-13</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2644-Python</guid>
    <description>
    <![CDATA[BOJ-2644-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>여러 사람들의 부모 자식 관계가 주어질 때, ans_x와 ans_y의 관계가 몇 촌인지 출력하는 문제. ans_x부터 dfs 연산을 이용하여 queue에 촌 수를 저장하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    q <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>start<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">        node<span class="token punctuation">,</span> cnt <span class="token operator">=</span> q<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">        visit<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">if</span> node <span class="token operator">==</span> end<span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">return</span> cnt
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">for</span> <span class="token builtin">next</span> <span class="token keyword">in</span> graph<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> <span class="token keyword">not</span> visit<span class="token punctuation">[</span><span class="token builtin">next</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">                q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">next</span><span class="token punctuation">,</span> cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">ans_x<span class="token punctuation">,</span> ans_y <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">m <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">visit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    graph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>y<span class="token punctuation">)</span>
</span><span class="code-line">    graph<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">ans <span class="token operator">=</span> dfs<span class="token punctuation">(</span>ans_x<span class="token punctuation">,</span> ans_y<span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-11722 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-11722-Python</link>
    <pubDate>2020-12-10</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-11722-Python</guid>
    <description>
    <![CDATA[BOJ-11722-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n의 크기를 갖는 수열을 입력받은 후 해당 수열에서 가장 긴 감소하는 부분 수열의 길이를 출력하는 문제. 0부터 n까지 반복을 수행하며 0부터 i까지 반복한다. i의 값보다 j의 값이 클 때 dp[i] = max(dp[i], dp[j]+1)의 점화식을 사용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">m <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&#x3C;</span> l<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">    m <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-7562 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-7562-Python</link>
    <pubDate>2020-12-10</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-7562-Python</guid>
    <description>
    <![CDATA[BOJ-7562-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>체스 보드의 크기를 입력받은 후 나이트 말의 시작 좌표와 도착 좌표를 입력받는다. 최소 몇 번 말을 움직여야 도착 좌표까지 이동할 수 있는 지 출력하는 문제. 첫 풀이는 queue에 카운트를 넣으며, 2차원 배열은 방문 확인을 위해 사용하여 풀으며 두번째 풀이는 2차원 배열에 움직인 횟수를 저장하여 풀었다. 여러 방법으로 계속해서 풀었으나 틀렸습니다 결과를 받게되었는데 말이 갈 수 있는 방향을 저장해 놓은 배열이 잘못돼 있었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">dire <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment"># 상 좌</span>
</span><span class="code-line">        <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment"># 상 우</span>
</span><span class="code-line">        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment"># 우 상</span>
</span><span class="code-line">        <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment"># 우 하</span>
</span><span class="code-line">        <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment"># 하 우</span>
</span><span class="code-line">        <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment"># 하 좌</span>
</span><span class="code-line">        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment"># 좌 상</span>
</span><span class="code-line">        <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment"># 좌 하</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># def bfs(start, goal_y, goal_x):</span>
</span><span class="code-line"><span class="token comment">#     q = deque()</span>
</span><span class="code-line"><span class="token comment">#     q.append(start + [0])</span>
</span><span class="code-line"><span class="token comment">#     while q:</span>
</span><span class="code-line"><span class="token comment">#         now_y, now_x, cnt = q.popleft()</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#         if now_y == goal_y and now_x == goal_x:</span>
</span><span class="code-line"><span class="token comment">#             return cnt</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#         for dire_y, dire_x in dire:</span>
</span><span class="code-line"><span class="token comment">#             next_y = now_y + dire_y</span>
</span><span class="code-line"><span class="token comment">#             next_x = now_x + dire_x</span>
</span><span class="code-line"><span class="token comment">#             if 0 &#x3C;= next_y &#x3C; size and 0 &#x3C;= next_x &#x3C; size:</span>
</span><span class="code-line"><span class="token comment">#                 if not board[next_y][next_x]:</span>
</span><span class="code-line"><span class="token comment">#                     q.append([next_y, next_x, cnt+1])</span>
</span><span class="code-line"><span class="token comment">#                     board[next_y][next_x] = True</span>
</span><span class="code-line"><span class="token comment"># t = int(input())</span>
</span><span class="code-line"><span class="token comment"># for _ in range(t):</span>
</span><span class="code-line"><span class="token comment">#     size = int(input())</span>
</span><span class="code-line"><span class="token comment">#     board = [[False for _ in range(size)] for _ in range(size)]</span>
</span><span class="code-line"><span class="token comment">#     start_y, start_x = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment">#     goal_y, goal_x = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     ans = bfs([start_y, start_x], goal_y, goal_x)</span>
</span><span class="code-line"><span class="token comment">#     print(ans)</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">bfs</span><span class="token punctuation">(</span>start_y<span class="token punctuation">,</span> start_x<span class="token punctuation">,</span> goal_y<span class="token punctuation">,</span> goal_x<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    q <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">    q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>start_y<span class="token punctuation">,</span> start_x<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    board<span class="token punctuation">[</span>start_y<span class="token punctuation">]</span><span class="token punctuation">[</span>start_x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">        now_y<span class="token punctuation">,</span> now_x <span class="token operator">=</span> q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">if</span> now_y <span class="token operator">==</span> goal_y <span class="token keyword">and</span> now_x <span class="token operator">==</span> goal_x<span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">return</span> board<span class="token punctuation">[</span>now_y<span class="token punctuation">]</span><span class="token punctuation">[</span>now_x<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">for</span> dire_y<span class="token punctuation">,</span> dire_x <span class="token keyword">in</span> dire<span class="token punctuation">:</span>
</span><span class="code-line">            next_y <span class="token operator">=</span> now_y <span class="token operator">+</span> dire_y
</span><span class="code-line">            next_x <span class="token operator">=</span> now_x <span class="token operator">+</span> dire_x
</span><span class="code-line">            <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> next_y <span class="token operator">&#x3C;</span> size <span class="token keyword">and</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> next_x <span class="token operator">&#x3C;</span> size<span class="token punctuation">:</span>
</span><span class="code-line">                <span class="token keyword">if</span> board<span class="token punctuation">[</span>next_y<span class="token punctuation">]</span><span class="token punctuation">[</span>next_x<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">                    q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>next_y<span class="token punctuation">,</span> next_x<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">                    board<span class="token punctuation">[</span>next_y<span class="token punctuation">]</span><span class="token punctuation">[</span>next_x<span class="token punctuation">]</span> <span class="token operator">=</span> board<span class="token punctuation">[</span>now_y<span class="token punctuation">]</span><span class="token punctuation">[</span>now_x<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">t <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    size <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    board <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    start_y<span class="token punctuation">,</span> start_x <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    goal_y<span class="token punctuation">,</span> goal_x <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">if</span> start_y <span class="token operator">==</span> goal_y <span class="token keyword">and</span> start_x <span class="token operator">==</span> goal_x<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">continue</span>
</span><span class="code-line">
</span><span class="code-line">    ans <span class="token operator">=</span> bfs<span class="token punctuation">(</span>start_y<span class="token punctuation">,</span> start_x<span class="token punctuation">,</span> goal_y<span class="token punctuation">,</span> goal_x<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-11055 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-11055-Python</link>
    <pubDate>2020-12-09</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-11055-Python</guid>
    <description>
    <![CDATA[BOJ-11055-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>가장 큰 부분 수열 문제. 수열이 주어졌을 때 오름차 부분 수열의 최대합을 출력하는 문제. 첫 풀이는 탑다운 형식으로 최대 값을 저장하는 형식으로 풀었으나 2개 이상 띄워져 있는 부분 수열에는 적용하지 않는 문제가 있어 이중 반복문을 이용하여 풀었다. 0부터 i까지 반복문을 수행하며 수열의 i보다 j가 작을 때 dp[i]에 dp[i], dp[j] + l[i]의 값 중 큰 것을 할당하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># 11055</span>
</span><span class="code-line"><span class="token comment"># n = int(input())</span>
</span><span class="code-line"><span class="token comment"># l = list(map(int, input().split()))</span>
</span><span class="code-line"><span class="token comment"># dp = l + [0]</span>
</span><span class="code-line"><span class="token comment"># temp = 1001</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># for i in range(n-1, -1, -1):</span>
</span><span class="code-line"><span class="token comment">#     if l[i] &#x3C; temp:</span>
</span><span class="code-line"><span class="token comment">#         temp = l[i]</span>
</span><span class="code-line"><span class="token comment">#         dp[i] = dp[i+1] + l[i]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     if dp[i+1] &#x3C;= l[i]:</span>
</span><span class="code-line"><span class="token comment">#         temp = l[i]</span>
</span><span class="code-line"><span class="token comment">#         dp[i] = l[i]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     dp[i] = max(dp[i], dp[i+1])</span>
</span><span class="code-line"><span class="token comment"># print(dp[0])</span>
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">m <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> l<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    m <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1904 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1904-Python</link>
    <pubDate>2020-12-09</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1904-Python</guid>
    <description>
    <![CDATA[BOJ-1904-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>00과 1의 모양을 한 타일이 있다. 이 때 자릿수 n이 주어질 때 나타낼 수 있는 모습의 가짓수를 15746으로 나눈 나머지를 출력하는 문제. dp[i] = dp[i-1] + dp[i-2]의 점화식을 도출하여 풀었다. 결과값에 나머지 연산을 한 값을 출력하는 방식으로 풀 시 메모리초과 결과를 받기 때문에 매 연산마다 나머지 연산을 하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> l<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">15746</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2583 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2583-Python</link>
    <pubDate>2020-12-08</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2583-Python</guid>
    <description>
    <![CDATA[BOJ-2583-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>y, x의 크기를 갖는 배열에 k개의 직사각형이 위치한다. 도형의 위치는 왼쪽 아래 좌표, 오른쪽 위 좌표를 입력받으며 도형이 위치하지 않는 구역의 수와 구역의 크기를 출력하는 문제. 동일한 크기의 boolean 배열을 이용하여 확인을 하여 dfs 연산을 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>sy<span class="token punctuation">,</span> sx<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    q <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>sy<span class="token punctuation">,</span> sx<span class="token punctuation">]</span><span class="token punctuation">]</span>
</span><span class="code-line">    check<span class="token punctuation">[</span>sy<span class="token punctuation">]</span><span class="token punctuation">[</span>sx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">    cnt <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">    <span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">        y<span class="token punctuation">,</span> x <span class="token operator">=</span> q<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">for</span> ny<span class="token punctuation">,</span> nx <span class="token keyword">in</span> dire<span class="token punctuation">:</span>
</span><span class="code-line">            next_y <span class="token operator">=</span> ny <span class="token operator">+</span> y
</span><span class="code-line">            next_x <span class="token operator">=</span> nx <span class="token operator">+</span> x
</span><span class="code-line">            <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> next_y <span class="token operator">&#x3C;</span> Y <span class="token keyword">and</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> next_x <span class="token operator">&#x3C;</span> X<span class="token punctuation">:</span>
</span><span class="code-line">                <span class="token keyword">if</span> <span class="token keyword">not</span> check<span class="token punctuation">[</span>next_y<span class="token punctuation">]</span><span class="token punctuation">[</span>next_x<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">                    q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>next_y<span class="token punctuation">,</span> next_x<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">                    check<span class="token punctuation">[</span>next_y<span class="token punctuation">]</span><span class="token punctuation">[</span>next_x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">                    cnt <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">    <span class="token keyword">return</span> cnt
</span><span class="code-line">
</span><span class="code-line">dire <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">        <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">Y<span class="token punctuation">,</span> X<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">check <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">False</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2 <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">for</span> vx <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">for</span> vy <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>y1<span class="token punctuation">,</span> y2<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            check<span class="token punctuation">[</span>vy<span class="token punctuation">]</span><span class="token punctuation">[</span>vx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">ans_l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> ny <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> nx <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> <span class="token keyword">not</span> check<span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            ans_l<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dfs<span class="token punctuation">(</span>ny<span class="token punctuation">,</span> nx<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">            ans <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>ans_l<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1068 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1068-Python</link>
    <pubDate>2020-12-03</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1068-Python</guid>
    <description>
    <![CDATA[BOJ-1068-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 노드로 이루어진 트리를 각 노드의 부모들의 번호를 입력받으며 주어진다. 그 후 지울 노드 번호를 입력받으며 해당 트리의 리프 노드의 수를 출력하는 문제. 첫 풀이는 지워지지 않은 노드들을 저장하는 배열을 이용하여 확인하여 수를 세는 방식으로 하였으나, 지운 노드를 유일한 자식으로 가지고 있는 노드의 반례를 풀지 못했으며 dfs 연산을 두 번하는 과정이 필요없을 것 같아 다시 풀게 되었다. 두번째 풀이는 dfs을 하며 노드의 자식이 없을 때 리프 노드라고 판단, 자식 노드를 큐에 추가할 때 삭제할 노드가 있으며 해당 노드의 길이가 1일 때도 리프 노드로 판단하는 부분을 넣어 풀었다. 수차례 괴롭히던 런타임 에러는 그래프를 먼저 생성하는 방식으로 해결하였다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># def dfs(start):</span>
</span><span class="code-line"><span class="token comment">#     q = [start]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     while q:</span>
</span><span class="code-line"><span class="token comment">#         node = q.pop()</span>
</span><span class="code-line"><span class="token comment">#         is_alive[node] = False</span>
</span><span class="code-line"><span class="token comment">#         for next in graph[node]:</span>
</span><span class="code-line"><span class="token comment">#             q.append(next)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># def lif(root):</span>
</span><span class="code-line"><span class="token comment">#     global ans</span>
</span><span class="code-line"><span class="token comment">#     q = [root]</span>
</span><span class="code-line"><span class="token comment">#     while q:</span>
</span><span class="code-line"><span class="token comment">#         node = q.pop()</span>
</span><span class="code-line"><span class="token comment">#         if graph[node] == [] and is_alive[node]:</span>
</span><span class="code-line"><span class="token comment">#             ans += 1</span>
</span><span class="code-line"><span class="token comment">#         elif len(graph[node]) and not is_alive[node]:</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#         else:</span>
</span><span class="code-line"><span class="token comment">#             for next in graph[node]:</span>
</span><span class="code-line"><span class="token comment">#                 q.append(next)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># n = int(input())</span>
</span><span class="code-line"><span class="token comment"># l = list(map(int, input().split()))</span>
</span><span class="code-line"><span class="token comment"># del_node = int(input())</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># is_alive = [True for _ in range(n)]</span>
</span><span class="code-line"><span class="token comment"># ans = 0</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># graph = {}</span>
</span><span class="code-line"><span class="token comment"># root = 0</span>
</span><span class="code-line"><span class="token comment"># for i in range(n):</span>
</span><span class="code-line"><span class="token comment">#     graph[i] = []</span>
</span><span class="code-line"><span class="token comment">#     if l[i] != -1:</span>
</span><span class="code-line"><span class="token comment">#         graph[l[i]].append(i)</span>
</span><span class="code-line"><span class="token comment">#     else:</span>
</span><span class="code-line"><span class="token comment">#         root = i</span>
</span><span class="code-line"><span class="token comment"># dfs(del_node)</span>
</span><span class="code-line"><span class="token comment"># lif(root)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># print(graph)</span>
</span><span class="code-line"><span class="token comment"># print(is_alive)</span>
</span><span class="code-line"><span class="token comment"># print(ans)</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">count_lif</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> del_node<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">global</span> ans
</span><span class="code-line">    q <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">if</span> del_node <span class="token operator">!=</span> root<span class="token punctuation">:</span>
</span><span class="code-line">        q <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">        node <span class="token operator">=</span> q<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">if</span> graph<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            ans <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">for</span> <span class="token builtin">next</span> <span class="token keyword">in</span> graph<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> <span class="token builtin">next</span> <span class="token operator">==</span> del_node<span class="token punctuation">:</span>
</span><span class="code-line">                <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>graph<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">                    ans <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">            <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">                q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">del_node <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</span><span class="code-line">root <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">        graph<span class="token punctuation">[</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        root <span class="token operator">=</span> i
</span><span class="code-line">
</span><span class="code-line">count_lif<span class="token punctuation">(</span>root<span class="token punctuation">,</span> del_node<span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2263 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2263-Python</link>
    <pubDate>2020-12-03</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2263-Python</guid>
    <description>
    <![CDATA[BOJ-2263-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>트리의 정점의 수와 중위 순회, 후위 순휘를 입력받은 후 해당 트리를 전위 순회하여 출력한 결과를 출력하는 문제. 후위 순회의 마지막을 기준으로 해당 노드를 출력 후, 중위 순회한 결과에서 해당 노드의 위치를 기준으로 왼쪽에 있는 노드를 후위 순회한 것 뒤에 위치한 후 해당 연산을 반복하면 전위 순회한 결과과 되는 것을 깨달은 후 새로운 리스트를 만들어서 재귀적으로 호출하여 풀었으나 메모리 초과 결과를 받게 되었다. 새로운 리스트를 계속해서 만들었기 때문이다. 두번째 풀이는 중위 순회, 후위 순회 각각 시작점과 끝점을 함수의 매개변수로 사용하여 재귀적으로 호출하였다. 후위 순회의 끝점을 출력한 후 <code>후위 시작점 + 해당 노드의 중위 순회 결과의 위치 - 중위 순회 시작점</code>을 계산 및 이용하여 해당 노드의 후위 순회 결과의 좌측, 우측을 나누는데 사용하였다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># import sys</span>
</span><span class="code-line"><span class="token comment"># sys.setrecursionlimit(10**9)</span>
</span><span class="code-line"><span class="token comment"># input = sys.stdin.readline</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># def getPre(i, l):</span>
</span><span class="code-line"><span class="token comment">#     if i == 0:</span>
</span><span class="code-line"><span class="token comment">#         return</span>
</span><span class="code-line"><span class="token comment">#     num = l.pop()</span>
</span><span class="code-line"><span class="token comment">#     print(num, end=" ")</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     index = inor.index(num)</span>
</span><span class="code-line"><span class="token comment">#     visit[index] = True</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     next_l = []</span>
</span><span class="code-line"><span class="token comment">#     for node in range(index, n):</span>
</span><span class="code-line"><span class="token comment">#         if not visit[node]:</span>
</span><span class="code-line"><span class="token comment">#             next_l.append(inor[node])</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     for node in range(0, index):</span>
</span><span class="code-line"><span class="token comment">#         if not visit[node]:</span>
</span><span class="code-line"><span class="token comment">#             next_l.append(inor[node])</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     getPre(i-1, next_l)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># n = int(input())</span>
</span><span class="code-line"><span class="token comment"># inor = list(map(int, input().split()))</span>
</span><span class="code-line"><span class="token comment"># postor = list(map(int, input().split()))</span>
</span><span class="code-line"><span class="token comment"># visit = [False for _ in range(n)]</span>
</span><span class="code-line"><span class="token comment"># getPre(n, postor)</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line">sys<span class="token punctuation">.</span>setrecursionlimit<span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">9</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">getPre</span><span class="token punctuation">(</span>in_start<span class="token punctuation">,</span> in_end<span class="token punctuation">,</span> post_start<span class="token punctuation">,</span> post_end<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> in_start <span class="token operator">></span> in_end <span class="token keyword">or</span> post_start <span class="token operator">></span> post_end<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span>
</span><span class="code-line">
</span><span class="code-line">    now <span class="token operator">=</span> postor<span class="token punctuation">[</span>post_end<span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>now<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>
</span><span class="code-line">    index <span class="token operator">=</span> p<span class="token punctuation">[</span>now<span class="token punctuation">]</span>
</span><span class="code-line">    left <span class="token operator">=</span> post_start <span class="token operator">+</span> index <span class="token operator">-</span> in_start
</span><span class="code-line">    getPre<span class="token punctuation">(</span>in_start<span class="token punctuation">,</span> index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> post_start<span class="token punctuation">,</span> left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">    getPre<span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> in_end<span class="token punctuation">,</span> left<span class="token punctuation">,</span> post_end<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">inor <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">postor <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">p <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    p<span class="token punctuation">[</span>inor<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i
</span><span class="code-line">getPre<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-5639 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-5639-Python</link>
    <pubDate>2020-12-02</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-5639-Python</guid>
    <description>
    <![CDATA[BOJ-5639-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>노드의 데이터보다 작은 노드를 왼쪽에, 큰 노드를 오른쪽에 배치한 이진 검색 트리를 전위 순회한 결과룰 입력받은 후, 후위 순회한 결과를 출력하는 문제. 입력의 끝이 정해져 있지 않음으로 stdin.readlines를 이용하여 입력을 받았으며 클래스를 이용하여 노드, 이전검색트리를 만들어 이진 검색트리에 위치시킨 후 후위순회를 하여 결과를 출력하여 풀었으나 시간초과 결과를 받게 되었다. 그 후 <a href="https://developmentdiary.tistory.com/442" target="_blank" rel="noopener noreferer">해당</a> 게시물을 참고하여 리스트의 인덱스를 이용하여 후위순회하는 방법을 참고하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># import sys</span>
</span><span class="code-line"><span class="token comment"># sys.setrecursionlimit(10**9)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># class Node:</span>
</span><span class="code-line"><span class="token comment">#     def __init__(self, data):</span>
</span><span class="code-line"><span class="token comment">#         self.data = data</span>
</span><span class="code-line"><span class="token comment">#         self.left = self.right = None</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     def __str__(self):</span>
</span><span class="code-line"><span class="token comment">#         return str(self.data)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># class Binary:</span>
</span><span class="code-line"><span class="token comment">#     def __init__(self):</span>
</span><span class="code-line"><span class="token comment">#         self.root = None</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     def insert(self, data):</span>
</span><span class="code-line"><span class="token comment">#         self.root = self.insert_req(self.root, data)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     def insert_req(self, node, data):</span>
</span><span class="code-line"><span class="token comment">#         if node == None:</span>
</span><span class="code-line"><span class="token comment">#             node = Node(data)</span>
</span><span class="code-line"><span class="token comment">#         else:</span>
</span><span class="code-line"><span class="token comment">#             if node.data &#x3C; data:</span>
</span><span class="code-line"><span class="token comment">#                 node.right = self.insert_req(node.right, data)</span>
</span><span class="code-line"><span class="token comment">#             else:</span>
</span><span class="code-line"><span class="token comment">#                 node.left = self.insert_req(node.left, data)</span>
</span><span class="code-line"><span class="token comment">#         return node</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     def postorder(self, node):</span>
</span><span class="code-line"><span class="token comment">#         if node != None:</span>
</span><span class="code-line"><span class="token comment">#             self.postorder(node.left)</span>
</span><span class="code-line"><span class="token comment">#             self.postorder(node.right)</span>
</span><span class="code-line"><span class="token comment">#             print(node)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># l = list(map(int, sys.stdin.readlines()))</span>
</span><span class="code-line"><span class="token comment"># b = Binary()</span>
</span><span class="code-line"><span class="token comment"># for i in l:</span>
</span><span class="code-line"><span class="token comment">#     b.insert(i)</span>
</span><span class="code-line"><span class="token comment"># b.postorder(b.root)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line">sys<span class="token punctuation">.</span>setrecursionlimit<span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">9</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">postorder</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> start <span class="token operator">></span> end<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span>
</span><span class="code-line">
</span><span class="code-line">    division <span class="token operator">=</span> end <span class="token operator">+</span> <span class="token number">1</span>  <span class="token comment"># 나눌위치</span>
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> l<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">&#x3C;</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            division <span class="token operator">=</span> i
</span><span class="code-line">            <span class="token keyword">break</span>
</span><span class="code-line">
</span><span class="code-line">    postorder<span class="token punctuation">(</span>start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> division <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 분할 왼쪽</span>
</span><span class="code-line">    postorder<span class="token punctuation">(</span>division<span class="token punctuation">,</span> end<span class="token punctuation">)</span>  <span class="token comment"># 분할 오른쪽</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">l <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">postorder<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-11057 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-11057-Python</link>
    <pubDate>2020-12-01</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-11057-Python</guid>
    <description>
    <![CDATA[BOJ-11057-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>오르막 수는 수의 자리가 오름차순을 이루는 수를 말하며 인접한 수가 같아도 오름차순으로 친다. 이 때 수의 길이 n이 주어질 때 오르막 수의 개수를 구하는 문제. [n+1][10]의 크기로 이루어진 배열을 만든 후 [1]의 값을 모두 1로 초기화한다. 그 후 up은 j보다 같으며 큰 수로 반복을 하게 작성 후 <code>dp[i][j] += dp[i-1][up]</code>의 점화식을 사용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">for</span> up <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>up<span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10007</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-16916 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-16916-Python</link>
    <pubDate>2020-12-01</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-16916-Python</guid>
    <description>
    <![CDATA[BOJ-16916-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>문자열 s와 p를 입력받은 후 s안에 p가 있을 시 1을, 없을 시 0을 출력하는 문제. KMP 알고리즘을 이용하여 풀었으며 한 번 찾은 후 연산을 종료하도록 하였다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">KMP</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    ls <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
</span><span class="code-line">    lp <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
</span><span class="code-line">    lps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>lp<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    getLPS<span class="token punctuation">(</span>p<span class="token punctuation">,</span> lps<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    i <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    j <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    <span class="token keyword">while</span> i <span class="token operator">&#x3C;</span> ls<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            i <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">            j <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> j <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">                j <span class="token operator">=</span> lps<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">            <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">                i <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">if</span> j <span class="token operator">==</span> lp<span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">return</span> <span class="token number">1</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">getLPS</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> lps<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    leng <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    i <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">    <span class="token keyword">while</span> i <span class="token operator">&#x3C;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>leng<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            leng <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">            lps<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> leng
</span><span class="code-line">            i <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> leng <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">                leng <span class="token operator">=</span> lps<span class="token punctuation">[</span>leng<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">            <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">                lps<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">                i <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">p <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>KMP<span class="token punctuation">(</span>s<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2293 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2293-Python</link>
    <pubDate>2020-12-01</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2293-Python</guid>
    <description>
    <![CDATA[BOJ-2293-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n가지 종류의 동전으로 k원을 나타내는 경우의 수를 구하는 문제. [k+1]의 리스트를 만든 후 딱 떨어지는 경우를 위해 [0]을 1로 초기화한다. 그 후 1원부터 k원까지 반복을 수행하며 입력받은 cost - coin이 0보다 크거나 같을 때 <code>dp[cost] += dp[cost-coin]</code>을 하여 경우의 수를 계속 더하도록 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> coin <span class="token keyword">in</span> l<span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> cost <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> cost<span class="token operator">-</span>coin <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">            dp<span class="token punctuation">[</span>cost<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>cost<span class="token operator">-</span>coin<span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-4354 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-4354-Python</link>
    <pubDate>2020-12-01</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-4354-Python</guid>
    <description>
    <![CDATA[BOJ-4354-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>문자열 s가 주어진 후 어떤 문자열 a에 대하여 s = a^n으로 나타낼 때 가장 큰 n을 출력하는 문제. LPS를 이용하여 풀었으며 예제를 보는 중 식을 도출해 내어 풀게 되었다. s의 길이를 ls라 할 때 <code>ls // ls - lps[-1]</code>을 계산하여 풀었다. 하지만 lps의 마지막 값이 높으나 나누어 떨어지지 않는 예외가 있어 나누어 떨어지지 않을 때는 1을 출력하는 조건을 추가하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">getLPS</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> ls<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    lps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    leng <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    i <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">    <span class="token keyword">while</span> i <span class="token operator">&#x3C;</span> ls<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>leng<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            leng <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">            lps<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> leng
</span><span class="code-line">            i <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> leng <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">                leng <span class="token operator">=</span> lps<span class="token punctuation">[</span>leng <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">            <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">                lps<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">                i <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">    <span class="token keyword">return</span> lps
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
</span><span class="code-line">    s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token string">"."</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">break</span>
</span><span class="code-line">    ls <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
</span><span class="code-line">    lps <span class="token operator">=</span> getLPS<span class="token punctuation">(</span>s<span class="token punctuation">,</span> ls<span class="token punctuation">)</span>
</span><span class="code-line">    pat_len <span class="token operator">=</span> ls <span class="token operator">-</span> lps<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>ls <span class="token operator">//</span> pat_len <span class="token keyword">if</span> ls <span class="token operator">%</span> pat_len <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1305 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1305-Python</link>
    <pubDate>2020-11-30</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1305-Python</guid>
    <description>
    <![CDATA[BOJ-1305-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>길이가 n인 전광판에 광고 문구가 반복되어 나타나 있다고 한다. 이 때 광고 문구의 최소 길이를 출력하는 문제. KMP 알고리즘을 공부하며 배웠던 LPS를 이용하였다. 주어진 문자열을 이용하여 LPS 배열을 만든 후 <code>n - lps[n-1]</code>을 계산하여 출력하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">getLPS</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> lps<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    leng <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    i <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">while</span> i <span class="token operator">&#x3C;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> t<span class="token punctuation">[</span>leng<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            leng <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">            lps<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> leng
</span><span class="code-line">            i <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> leng <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">                leng <span class="token operator">=</span> lps<span class="token punctuation">[</span>leng<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">            <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">                lps<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">                i <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">t <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">lps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">getLPS<span class="token punctuation">(</span>t<span class="token punctuation">,</span> lps<span class="token punctuation">)</span>
</span><span class="code-line">ans <span class="token operator">=</span> n <span class="token operator">-</span> lps<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1701 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1701-Python</link>
    <pubDate>2020-11-30</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1701-Python</guid>
    <description>
    <![CDATA[BOJ-1701-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>문자열 s가 주어진 후 2번 이상 들어가는 부분문자열의 최대 길이를 출력하는 문제. 첫번째 풀이는 처음부터 s의 길이 -1부터 2까지 문자열을 슬라이싱하여 LPS를 계산 후 KMP 알고리즘을 이용하여 2번 이상 존재할 시 return 및 break를 이용하여 해당 결과를 출력하여 풀었다. 시간제한이 0.5초이며 처음부터 시작하기 때문에 시간초과 및 틀렸습니다 결과를 받았다. 문제의 2번 이상 존재하는 경우를 통해 LPS만을 이용하여 계산하면 될 것 같아 0부터 s의 길이만큼 index를 이동하여 슬라이싱한 값을 이용하여 LPS 중 최대값을 저장 및 갱신하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># def KMP(t, p, lps):</span>
</span><span class="code-line"><span class="token comment">#     lt = len(t)</span>
</span><span class="code-line"><span class="token comment">#     lp = len(p)</span>
</span><span class="code-line"><span class="token comment">#     ans = 0</span>
</span><span class="code-line"><span class="token comment">#     i = 0</span>
</span><span class="code-line"><span class="token comment">#     j = 0</span>
</span><span class="code-line"><span class="token comment">#     while i &#x3C; lt:</span>
</span><span class="code-line"><span class="token comment">#         if t[i] == p[j]:</span>
</span><span class="code-line"><span class="token comment">#             i += 1</span>
</span><span class="code-line"><span class="token comment">#             j += 1</span>
</span><span class="code-line"><span class="token comment">#         elif t[i] != p[j]:</span>
</span><span class="code-line"><span class="token comment">#             if j != 0:</span>
</span><span class="code-line"><span class="token comment">#                 j = lps[j-1]</span>
</span><span class="code-line"><span class="token comment">#             else:</span>
</span><span class="code-line"><span class="token comment">#                 i += 1</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#         if j == lp:</span>
</span><span class="code-line"><span class="token comment">#             ans += 1</span>
</span><span class="code-line"><span class="token comment">#             if ans >= 2:</span>
</span><span class="code-line"><span class="token comment">#                 return True</span>
</span><span class="code-line"><span class="token comment">#             j = lps[j-1]</span>
</span><span class="code-line"><span class="token comment">#     return False</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># def getLPS(p, lps):</span>
</span><span class="code-line"><span class="token comment">#     leng = 0</span>
</span><span class="code-line"><span class="token comment">#     i = 1</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     while i &#x3C; len(p):</span>
</span><span class="code-line"><span class="token comment">#         if p[i] == p[leng]:</span>
</span><span class="code-line"><span class="token comment">#             leng += 1</span>
</span><span class="code-line"><span class="token comment">#             lps[i] = leng</span>
</span><span class="code-line"><span class="token comment">#             i += 1</span>
</span><span class="code-line"><span class="token comment">#         else:</span>
</span><span class="code-line"><span class="token comment">#             if leng != 0:</span>
</span><span class="code-line"><span class="token comment">#                 leng = lps[leng-1]</span>
</span><span class="code-line"><span class="token comment">#             else:</span>
</span><span class="code-line"><span class="token comment">#                 lps[i] = 0</span>
</span><span class="code-line"><span class="token comment">#                 i += 1</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># s = input()</span>
</span><span class="code-line"><span class="token comment"># ls = len(s)</span>
</span><span class="code-line"><span class="token comment"># for i in range(ls-1, 1, -1):</span>
</span><span class="code-line"><span class="token comment">#     pat = s[0:i]</span>
</span><span class="code-line"><span class="token comment">#     lps = [0 for _ in range(i)]</span>
</span><span class="code-line"><span class="token comment">#     getLPS(pat, lps)</span>
</span><span class="code-line"><span class="token comment">#     if KMP(s, pat, lps):</span>
</span><span class="code-line"><span class="token comment">#         print(i)</span>
</span><span class="code-line"><span class="token comment">#         break</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">getLpsMax</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    lps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    leng <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    i <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">while</span> i <span class="token operator">&#x3C;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>leng<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            leng <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">            lps<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> leng
</span><span class="code-line">            i <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> leng <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">                leng <span class="token operator">=</span> lps<span class="token punctuation">[</span>leng <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">            <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">                lps<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">                i <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token builtin">max</span><span class="token punctuation">(</span>lps<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">ls <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    p <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">:</span>ls<span class="token punctuation">]</span>
</span><span class="code-line">    ans <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>getLpsMax<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1786 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1786-Python</link>
    <pubDate>2020-11-30</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1786-Python</guid>
    <description>
    <![CDATA[BOJ-1786-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>문자열 t 안에 문자열 p가 몇개 들어있는 지, 시작하는 인덱스는 어디인 지 출력하는 문제. 단순히 모든 문자열을 비교할 시 <code>O(len(t)*len(p))</code>가 되어 길이가 길어질 시 기하급수적으로 커지게 된다. 이를 해소하고자 KMP 방식을 공부 및 적용하여 풀었는데, p에 대한 LPS(최장길이 접미사 and 접두사)를 저장하여 문자열 비교간에 LPS를 이용하여 p에 대한 인덱스 값을 수정하여 비교를 줄이는 방식이며 시간복잡도는 <code>O(len(t)+len(p))</code>이다. 자세한 설명은 주석을 참고.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">KMP</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    lt <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
</span><span class="code-line">    lp <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
</span><span class="code-line">    lps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>lp<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    findLPS<span class="token punctuation">(</span>p<span class="token punctuation">,</span> lps<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ans_l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment"># 일치하는 수와 일치하는 곳의 index를 저장할 변수</span>
</span><span class="code-line">
</span><span class="code-line">    i <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment"># 텍스트와 비교할 변수</span>
</span><span class="code-line">    j <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment"># 패턴과 비교할 변수</span>
</span><span class="code-line">    <span class="token keyword">while</span> i <span class="token operator">&#x3C;</span> lt<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token comment"># 문자가 같을 시 i와 j 둘 다 상승</span>
</span><span class="code-line">            i <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">            j <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">        <span class="token keyword">elif</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token comment"># 같지 않지만</span>
</span><span class="code-line">            <span class="token keyword">if</span> j <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">                <span class="token comment"># 전에 문자가 같았을 시</span>
</span><span class="code-line">                <span class="token comment"># lps를 이용하여 j의 값을 수정 후 재비교</span>
</span><span class="code-line">                j <span class="token operator">=</span> lps<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">            <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">                <span class="token comment"># 전에 문자가 같지 않았을 시 index 이동</span>
</span><span class="code-line">                i <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">if</span> j <span class="token operator">==</span> lp<span class="token punctuation">:</span> <span class="token comment"># 패턴의 끝까지 동일 시</span>
</span><span class="code-line">            <span class="token comment"># 정답을 위한 변수 수정</span>
</span><span class="code-line">            ans <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">            ans_l<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i <span class="token operator">-</span> lp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">            <span class="token comment"># lps를 이용하여 j의 값을 수정 후 재비교</span>
</span><span class="code-line">            j <span class="token operator">=</span> lps<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> ans<span class="token punctuation">,</span> ans_l
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">findLPS</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> lps<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token comment"># 패턴을 이용하여 LPS( Longest proper prefix which is suffix, 접두사 이자 접미사의 최장길이 )</span>
</span><span class="code-line">    <span class="token comment"># 를 찾음</span>
</span><span class="code-line">
</span><span class="code-line">    leng <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    i <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">    <span class="token keyword">while</span> i <span class="token operator">&#x3C;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token comment"># 문자가 같을 시</span>
</span><span class="code-line">        <span class="token keyword">if</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>leng<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token comment"># 길이를 늘린 후 lsp 배열에 저장한 후 다음 인덱스로 넘어감</span>
</span><span class="code-line">            leng <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">            lps<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> leng
</span><span class="code-line">            i <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">        <span class="token comment"># 문자가 같지 않을 시</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> leng <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">                <span class="token comment"># 전에 같았으면</span>
</span><span class="code-line">                <span class="token comment"># 해당 길이로 변경 후 재 비교</span>
</span><span class="code-line">                leng <span class="token operator">=</span> lps<span class="token punctuation">[</span>leng<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">            <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">                <span class="token comment"># 전에도 같지 않을 시</span>
</span><span class="code-line">                <span class="token comment"># lps의 값을 0으로 저장 후 index 이동</span>
</span><span class="code-line">                lps<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">                i <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">t <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">p <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 찾아야 할 패턴</span>
</span><span class="code-line">ans<span class="token punctuation">,</span> ans_l <span class="token operator">=</span> KMP<span class="token punctuation">(</span>t<span class="token punctuation">,</span> p<span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span>ans_l<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-7575 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-7575-Python</link>
    <pubDate>2020-11-30</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-7575-Python</guid>
    <description>
    <![CDATA[BOJ-7575-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>수열의 수 n과 확인할 수열의 길이 k를 입력받은 후, 각 수열의 길이, 수열을 입력받는다. k 길이만큼의 반복되는 부분 수열과 해당 부분 수열을 거꾸로한 것이 모든 수열에 존재 시 YES를, 아닐 시 NO를 출력하는 문제. 제일 짧은 수열을 기준으로 k 길이만큼 슬라이싱 후 KMP 알고리즘을 통해 수열에 확인하는 지 확인하여 풀었다. 자세한 설명은 주석을 참고.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">KMP</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> suspect<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    lt <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>
</span><span class="code-line">    ls <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>suspect<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    i <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    j <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    <span class="token keyword">while</span> i <span class="token operator">&#x3C;</span> lt<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> text<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> suspect<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            i <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">            j <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">        <span class="token keyword">elif</span> text<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> suspect<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> j <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">                j <span class="token operator">=</span> lps<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">            <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">                i <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">if</span> j <span class="token operator">==</span> ls<span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token comment"># 동일한 부분이 존재 시 return</span>
</span><span class="code-line">            <span class="token keyword">return</span> <span class="token boolean">True</span>
</span><span class="code-line">    <span class="token comment"># 없을 시</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token boolean">False</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">getLPS</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> lps<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    leng <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    i <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">    <span class="token keyword">while</span> i <span class="token operator">&#x3C;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>leng<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            leng <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">            lps<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> leng
</span><span class="code-line">            i <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> leng <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">                leng <span class="token operator">=</span> lps<span class="token punctuation">[</span>leng<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">            <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">                lps<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">                i <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">text_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">min_n<span class="token punctuation">,</span> min_index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    t_len <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token comment"># 제일 짧은 수열의 길이와 인덱스를 저장</span>
</span><span class="code-line">    <span class="token keyword">if</span> min_n <span class="token operator">&#x3C;</span> t_len<span class="token punctuation">:</span>
</span><span class="code-line">        min_n <span class="token operator">=</span> t_len
</span><span class="code-line">        min_index <span class="token operator">=</span> i
</span><span class="code-line">
</span><span class="code-line">    text_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># 0부터 제일 짧은 수열의 길이 - k + 1만큼 반복</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>text_list<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token comment"># i부터 k 길이를 갖도록 슬라이싱</span>
</span><span class="code-line">    suspect <span class="token operator">=</span> text_list<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span>k<span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token comment"># LPS 계산하여 저장</span>
</span><span class="code-line">    lps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    getLPS<span class="token punctuation">(</span>suspect<span class="token punctuation">,</span> lps<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token comment"># 정답 여부를 확인 할 변수 ans</span>
</span><span class="code-line">    ans <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token comment"># 다른 문자열들을 기준으로 반복</span>
</span><span class="code-line">    <span class="token keyword">for</span> text_index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token comment"># 제일 짧은 문자열과 동일 시 확인하지 않음</span>
</span><span class="code-line">        <span class="token keyword">if</span> text_index <span class="token operator">==</span> min_index<span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">continue</span>
</span><span class="code-line">        <span class="token comment"># suspect 수열과 동일한 부분이 존재 시</span>
</span><span class="code-line">        <span class="token keyword">if</span> KMP<span class="token punctuation">(</span>text_list<span class="token punctuation">[</span>text_index<span class="token punctuation">]</span><span class="token punctuation">,</span> suspect<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            ans <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">        <span class="token comment"># suspect 수열을 반대로 한 것과 동일한 부분이 존재 시</span>
</span><span class="code-line">        <span class="token keyword">elif</span> KMP<span class="token punctuation">(</span>text_list<span class="token punctuation">[</span>text_index<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">reversed</span><span class="token punctuation">(</span>suspect<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            ans <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token comment"># 다른 문자열들 모두 동일한 수열이 존재할 시</span>
</span><span class="code-line">    <span class="token keyword">if</span> ans <span class="token operator">==</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"YES"</span><span class="token punctuation">)</span>
</span><span class="code-line">        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-10773 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-10773-Python</link>
    <pubDate>2020-11-29</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-10773-Python</guid>
    <description>
    <![CDATA[BOJ-10773-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 수를 입력받는다. n이 0일 때 제일 최근에 입력받은 수를 지운다고 할 때 입력되는 수들의 총합을 구하는 문제. 리스트의 append와 pop을 이용하여 스택 자료구조의 모습을 간단히 구현하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">        l<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">continue</span>
</span><span class="code-line">    l<span class="token punctuation">.</span>append<span class="token punctuation">(</span>n<span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1475 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1475-Python</link>
    <pubDate>2020-11-29</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1475-Python</guid>
    <description>
    <![CDATA[BOJ-1475-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>6과 9를 같이 쓸 수 있을 때 방번호를 꾸밀 때 필요한 0부터 9까지 들은 세트의 수를 출력하는 문제. 입력되는 수를 기준으로 반복하여 개수를 저장할 때, 9와 6을 동시에 저장하며 반복이 끝난 후 2로 나눈 값을 올림하여 저장한다. 그 후 리스트에 저장된 값 중 제일 큰 값을 출력하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">from</span> math <span class="token keyword">import</span> ceil
</span><span class="code-line">
</span><span class="code-line">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> n<span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">:</span>
</span><span class="code-line">        l<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">        <span class="token keyword">continue</span>
</span><span class="code-line">    l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">l<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> ceil<span class="token punctuation">(</span>l<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-11404 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-11404-Python</link>
    <pubDate>2020-11-27</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-11404-Python</guid>
    <description>
    <![CDATA[BOJ-11404-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 정점과 m개의 간선이 있으며 간선은 가중치를 갖고 있다. 모든 정점에서 다른 정점으로 갈 때 최소 비용을 출력하는 문제. 모든 정점을 기준으로 3중 반복문을 수행하여 비교하는 플로이드 와샬 방법을 이용하여 풀었다. i부터 j까지 가는 비용과 i에서 k, k에서 j까지 가는 비용을 더한 것을 비교하는 방식으로 풀었다. 다익스트라와 플로이드 와샬은 시작점으로부터 다른 정점의 거리를 비교할 때 다익스트라, 모든 정점의 거리를 비교할 때는 플로이드 와샬을 사용한다고 한다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">INF <span class="token operator">=</span> sys<span class="token punctuation">.</span>maxsize
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">m <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">dist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>INF <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    s<span class="token punctuation">,</span> e<span class="token punctuation">,</span> w <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    dist<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">[</span>e<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> dist<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        ans <span class="token operator">=</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token keyword">if</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> INF <span class="token keyword">else</span> <span class="token number">0</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2458 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2458-Python</link>
    <pubDate>2020-11-27</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2458-Python</guid>
    <description>
    <![CDATA[BOJ-2458-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 정점이 있으며 m개의 방향이 있는 간선이 있다. 이 때 모든 정점들과 연결된 정점의 수를 출력하는 문제. 첫번째 풀이는 결과를 저장하는 리스트와 간선을 저장하는 리스트를 이용하여 플로이드 와샬 방법을 이용하여 간선 i,k 와 k,j의 값이 True일 때 결과를 저장하는 리스트를 쌍방향으로 True로 값을 바꿔준 후 리스트의 모든 값이 True인 리스트를 count하여 풀었으나 시간초과 결과와 틀렸습니다 결과를 받게 되었다. 두번째 풀이는 리스트 한개를 이용했으며 플로이드 와샬 방법을 이용하여 ik, kj를 비교 후 ij의 값만 True로 수정해 주었다. 그 후 True인 간선은 i와 j의 값을 추가하여 값을 n과 비교하여 count하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># import sys</span>
</span><span class="code-line"><span class="token comment"># input = sys.stdin.readline</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># n, m = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment"># compare = [[False for _ in range(n+1)] for _ in range(n+1)]</span>
</span><span class="code-line"><span class="token comment"># d = [[False for _ in range(n+1)] for _ in range(n+1)]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># for _ in range(m):</span>
</span><span class="code-line"><span class="token comment">#     s, e = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment">#     compare[s][e] = True</span>
</span><span class="code-line"><span class="token comment">#     compare[e][s] = True</span>
</span><span class="code-line"><span class="token comment">#     d[s][e] = True</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># for k in range(1, n+1):</span>
</span><span class="code-line"><span class="token comment">#     compare[k][k] = True</span>
</span><span class="code-line"><span class="token comment">#     for i in range(1, n+1):</span>
</span><span class="code-line"><span class="token comment">#         for j in range(1, n+1):</span>
</span><span class="code-line"><span class="token comment">#             if d[i][k] and d[k][j]:</span>
</span><span class="code-line"><span class="token comment">#                 compare[i][j] = True</span>
</span><span class="code-line"><span class="token comment">#                 compare[j][i] = True</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># ans = 0</span>
</span><span class="code-line"><span class="token comment"># for i in range(1, n+1):</span>
</span><span class="code-line"><span class="token comment">#     if compare[i][1:n+1].count(False) == 0:</span>
</span><span class="code-line"><span class="token comment">#         ans += 1</span>
</span><span class="code-line"><span class="token comment"># print(ans)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">compare <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">False</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    s<span class="token punctuation">,</span> e <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    compare<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">[</span>e<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> compare<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token keyword">and</span> compare<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">                compare<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> compare<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">            ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span>count<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-4948 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-4948-Python</link>
    <pubDate>2020-11-26</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-4948-Python</guid>
    <description>
    <![CDATA[BOJ-4948-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>베르트랑 공준이란 임의의 자연수 n은 n보다 크며 2n과 같거나 작은 수중에 적어도 하나의 소수가 존재한다는 내용이다. 0이 입력되기 까지 정수를 입력받은 후 각 수들보다 크며 2n보다 같으며 작은 소수들의 수를 출력하는 문제. 입력받은 수들을 리스트에 저장하며 제일 큰 수를 저장한다. 그 후 에라토스테네스의 체 방법을 이용하여 제일 큰 수 * 2한 값까지의 소수를 확인 후 리스트에 든 값을 이용하여 슬라이싱 후 count하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">erato</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    sieve <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">True</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    sieve<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>
</span><span class="code-line">    m <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>n <span class="token operator">**</span> <span class="token number">0.5</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> sieve<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span>i<span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">                sieve<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> sieve
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">mn <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
</span><span class="code-line">    n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> <span class="token keyword">not</span> n<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">break</span>
</span><span class="code-line">    l<span class="token punctuation">.</span>append<span class="token punctuation">(</span>n<span class="token punctuation">)</span>
</span><span class="code-line">    mn <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>mn<span class="token punctuation">,</span> n<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">sieve <span class="token operator">=</span> erato<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> mn<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> l<span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>sieve<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[CF-4A - Python]]></title>
    <link>https://www.hyesungoh.xyz/CF-4A-Python</link>
    <pubDate>2020-11-26</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/CF-4A-Python</guid>
    <description>
    <![CDATA[CF-4A-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>코드포스에서 푼 첫 문제. 정수가 주어진 후 짝수로 나눌 수 있는 지 여부를 출력하는 문제. 문제가 영어인 탓에 입력과 출력을 보고 문제를 유출해 내는 방식으로 푸는 것 같다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"YES"</span> <span class="token keyword">if</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> n <span class="token operator">!=</span> <span class="token number">2</span> <span class="token keyword">else</span> <span class="token string">"NO"</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[CF-71A - Python]]></title>
    <link>https://www.hyesungoh.xyz/CF-71A-Python</link>
    <pubDate>2020-11-26</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/CF-71A-Python</guid>
    <description>
    <![CDATA[CF-71A-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>문자열을 입력받은 후 길이가 10 이상일 시 첫 글자와 마지막 글자 사이에 길이를 출력하는 문제. len을 이용하여 간단히 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">    l <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> l <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>l<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span>s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2468 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2468-Python</link>
    <pubDate>2020-11-25</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2468-Python</guid>
    <description>
    <![CDATA[BOJ-2468-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>1 ~ 100 크기의 정수로 이루어진 n x n 크기의 2차원 배열을 입력받는다. 강수량이 n일 때 n 이하의 지역이 침수된다. 침수되지 않은 상하좌우 기준으로 붙어있는 지역을 한 개의 안전지역이라고 한다. 이 때 임의의 강수량으로 만들어진 안전지역 중 최대 수를 출력하는 문제. 높이의 최대치인 100까지 반복을 수행하며 방문확인 리스트와 높이를 비교하여 dfs 연산을 통해 방문확인하며 안전지역의 수를 세도록 작성하였으며 모든 지역이 잠길 때 반복문을 끝내도록 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">dire <span class="token operator">=</span> <span class="token punctuation">[</span>
</span><span class="code-line">    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">    <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> x<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    q <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>y<span class="token punctuation">,</span> x<span class="token punctuation">]</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">        hy<span class="token punctuation">,</span> hx <span class="token operator">=</span> q<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">        visit<span class="token punctuation">[</span>hy<span class="token punctuation">]</span><span class="token punctuation">[</span>hx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">for</span> ny<span class="token punctuation">,</span> nx <span class="token keyword">in</span> dire<span class="token punctuation">:</span>
</span><span class="code-line">            next_y<span class="token punctuation">,</span> next_x <span class="token operator">=</span> ny <span class="token operator">+</span> hy<span class="token punctuation">,</span> nx <span class="token operator">+</span> hx
</span><span class="code-line">            <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> next_y <span class="token operator">&#x3C;</span> n <span class="token keyword">and</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> next_x <span class="token operator">&#x3C;</span> n<span class="token punctuation">:</span>
</span><span class="code-line">                <span class="token keyword">if</span> graph<span class="token punctuation">[</span>next_y<span class="token punctuation">]</span><span class="token punctuation">[</span>next_x<span class="token punctuation">]</span> <span class="token operator">></span> i <span class="token keyword">and</span> <span class="token keyword">not</span> visit<span class="token punctuation">[</span>next_y<span class="token punctuation">]</span><span class="token punctuation">[</span>next_x<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">                    q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>next_y<span class="token punctuation">,</span> next_x<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    graph<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    cnt <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    visit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">False</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> graph<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">></span> i <span class="token keyword">and</span> <span class="token keyword">not</span> visit<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">                dfs<span class="token punctuation">(</span>y<span class="token punctuation">,</span> x<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
</span><span class="code-line">                cnt <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">    <span class="token keyword">if</span> cnt <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">break</span>
</span><span class="code-line">    <span class="token keyword">if</span> ans <span class="token operator">&#x3C;=</span> cnt<span class="token punctuation">:</span>
</span><span class="code-line">        ans <span class="token operator">=</span> cnt
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-6603 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-6603-Python</link>
    <pubDate>2020-11-25</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-6603-Python</guid>
    <description>
    <![CDATA[BOJ-6603-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 수열을 입력받은 후 그 중 6개를 고를 때 순서가 상관없는 모든 경우의 수를 출력하는 문제. 백트래킹 방법을 이용하여 풀었으며, 방문확인을 해제할 때 자신보다 큰 수들의 방문 확인을 해제하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">sys<span class="token punctuation">.</span>setrecursionlimit<span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">9</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">bt</span><span class="token punctuation">(</span>depth<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> depth <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">return</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> <span class="token keyword">not</span> visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">            visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">            bt<span class="token punctuation">(</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">            ans<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">                visit<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
</span><span class="code-line">    s <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">break</span>
</span><span class="code-line">    n <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</span><span class="code-line">    l <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">    visit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">    bt<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-14888 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-14888-Python</link>
    <pubDate>2020-11-24</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-14888-Python</guid>
    <description>
    <![CDATA[BOJ-14888-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 수열과 n-1개로 이루어진 사칙연산자의 수를 입력받는다. 입력받은 사칙연산자를 이용하여 모든 경우의 수로 계산을 하였을 때 최대값과 최소값을 출력하는 문제. 사칙연산자로 이루어진 리스트를 만든 후 해당 사칙연산자를 이용해 eval 함수를 이용하여 계산, 방문 확인 리스트를 사용하여 백트래킹하였지만 시간초과 결과를 받게 되었다. 두번째 풀이는 각 연산자들의 수를 기준으로 백트래킹시 재귀적으로 호출하는 함수의 매개변수의 값을 빼주어 해당 연산을 해주는 식으로 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># import sys</span>
</span><span class="code-line"><span class="token comment"># sys.setrecursionlimit(10**9)</span>
</span><span class="code-line"><span class="token comment"># input = sys.stdin.readline</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># def bt(depth, val):</span>
</span><span class="code-line"><span class="token comment">#     global MAX, MIN, visit_op</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     if depth == n-1:</span>
</span><span class="code-line"><span class="token comment">#         if val > MAX:</span>
</span><span class="code-line"><span class="token comment">#             MAX = val</span>
</span><span class="code-line"><span class="token comment">#         if val &#x3C; MIN:</span>
</span><span class="code-line"><span class="token comment">#             MIN = val</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#         return</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     for i in range(n-1):</span>
</span><span class="code-line"><span class="token comment">#         if not visit_op[i]:</span>
</span><span class="code-line"><span class="token comment">#             t_val = str(val) + lop[i] + str(ln[depth + 1])</span>
</span><span class="code-line"><span class="token comment">#             visit_op[i] = True</span>
</span><span class="code-line"><span class="token comment">#             bt(depth+1, int(eval(t_val)))</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#             visit_op[i] = False</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># n = int(input())</span>
</span><span class="code-line"><span class="token comment"># ln = list(map(int, input().split()))</span>
</span><span class="code-line"><span class="token comment"># t_lop = ['+', '-', '*', '/']</span>
</span><span class="code-line"><span class="token comment"># op = list(map(int, input().split()))</span>
</span><span class="code-line"><span class="token comment"># lop = []</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># visit_op = [False for _ in range(n)]</span>
</span><span class="code-line"><span class="token comment"># MIN = 100000000</span>
</span><span class="code-line"><span class="token comment"># MAX = -100000000</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># for i in range(4):</span>
</span><span class="code-line"><span class="token comment">#     [lop.append(t_lop[i]) for _ in range(op[i])]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># bt(0, ln[0])</span>
</span><span class="code-line"><span class="token comment"># print(MAX)</span>
</span><span class="code-line"><span class="token comment"># print(MIN)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">bt</span><span class="token punctuation">(</span>depth<span class="token punctuation">,</span> val<span class="token punctuation">,</span> p<span class="token punctuation">,</span> m<span class="token punctuation">,</span> mul<span class="token punctuation">,</span> div<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">global</span> MAX<span class="token punctuation">,</span> MIN
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">if</span> depth <span class="token operator">==</span> n<span class="token punctuation">:</span>
</span><span class="code-line">        MAX <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>MAX<span class="token punctuation">,</span> val<span class="token punctuation">)</span>
</span><span class="code-line">        MIN <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>MIN<span class="token punctuation">,</span> val<span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">return</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">if</span> p<span class="token punctuation">:</span>
</span><span class="code-line">        bt<span class="token punctuation">(</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> val <span class="token operator">+</span> l<span class="token punctuation">[</span>depth<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token punctuation">,</span> mul<span class="token punctuation">,</span> div<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> m<span class="token punctuation">:</span>
</span><span class="code-line">        bt<span class="token punctuation">(</span>depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> val <span class="token operator">-</span> l<span class="token punctuation">[</span>depth<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> mul<span class="token punctuation">,</span> div<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> mul<span class="token punctuation">:</span>
</span><span class="code-line">        bt<span class="token punctuation">(</span>depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> val <span class="token operator">*</span> l<span class="token punctuation">[</span>depth<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> m<span class="token punctuation">,</span> mul <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> div<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> div<span class="token punctuation">:</span>
</span><span class="code-line">        bt<span class="token punctuation">(</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token operator">-</span>val <span class="token operator">//</span> l<span class="token punctuation">[</span>depth<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> val <span class="token operator">&#x3C;</span> <span class="token number">0</span> <span class="token keyword">else</span> val <span class="token operator">//</span> l<span class="token punctuation">[</span>depth<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> m<span class="token punctuation">,</span> mul<span class="token punctuation">,</span> div <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">op <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">MAX <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1000000001</span>
</span><span class="code-line">MIN <span class="token operator">=</span> <span class="token number">1000000001</span>
</span><span class="code-line">
</span><span class="code-line">bt<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> op<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> op<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> op<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> op<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>MAX<span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>MIN<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-11052 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-11052-Python</link>
    <pubDate>2020-11-23</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-11052-Python</guid>
    <description>
    <![CDATA[BOJ-11052-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n장의 카드를 사야할 때, 1장부터 n장까지 카드가 들어있는 카드팩의 가격이 주어진다. 이 때 n장의 카드를 사는 최대한 비싼 가격을 출력하는 문제. 첫 풀이는 1부터 10까지 반복을 수행하여 가격이 저장된 리스트 l을 이용해 <code>((n // i) * l[i]) + l[n % i]</code>을 이용하여 제일 큰 값을 출력했지만 풀이에 작성된 반례로 인해 틀리게 되었다. 이후 다이내믹 프로그래밍을 이용하여 2부터 n까지 반복을 수행하며 1부터 i를 2로 나눈 값까지 반복을 수행하며 <code>max(l[i], dp[i], dp[j] + dp[i-j])</code>의 점화식을 사용하여 모든 장 수의 최대 값을 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># n = int(input())</span>
</span><span class="code-line"><span class="token comment"># l = [0] + list(map(int, input().split()))</span>
</span><span class="code-line"><span class="token comment"># max = 0</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># for i in range(1, n+1):</span>
</span><span class="code-line"><span class="token comment">#     cost = ((n // i) * l[i]) + l[n % i]</span>
</span><span class="code-line"><span class="token comment">#     if max &#x3C; cost:</span>
</span><span class="code-line"><span class="token comment">#         max = cost</span>
</span><span class="code-line"><span class="token comment"># print(max)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># 10</span>
</span><span class="code-line"><span class="token comment"># 1 100 160 1 1 1 1 1 1 1</span>
</span><span class="code-line"><span class="token comment"># 위 반례에서 실패</span>
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-11403 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-11403-Python</link>
    <pubDate>2020-11-23</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-11403-Python</guid>
    <description>
    <![CDATA[BOJ-11403-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>방향 없는 그래프가 i번째 줄에 입력된 0과 1로 구분지어 갈 수 있는 정점을 판달할 때 각 정점별로 갈 수 있는 정점은 1, 없는 정점은 0으로 구분지어 출력하는 문제. dfs 연산을 통해 방문확인 리스트를 반환하는 함수를 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    q <span class="token operator">=</span> <span class="token punctuation">[</span>start<span class="token punctuation">]</span>
</span><span class="code-line">    v <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">        here <span class="token operator">=</span> q<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> graph<span class="token punctuation">[</span>here<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">and</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">                v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">                q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">return</span> v
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">visit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    temp <span class="token operator">=</span> dfs<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</span><span class="code-line">    visit<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token punctuation">[</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> visit<span class="token punctuation">]</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1934 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1934-Python</link>
    <pubDate>2020-11-23</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1934-Python</guid>
    <description>
    <![CDATA[BOJ-1934-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>테스트케이스만큼 두 수를 입력받은 후 두 수의 최소공배수를 출력하는 문제. <code>a, b = b, a % b</code>인 유클리드 호제법을 이용해 최대공약수를 구한 후 x * y를 위 방법을 통해 구한 최대공약수로 나눈 값을 출력하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">uc</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">while</span> y<span class="token punctuation">:</span>
</span><span class="code-line">        x<span class="token punctuation">,</span> y <span class="token operator">=</span> y<span class="token punctuation">,</span> x<span class="token operator">%</span>y
</span><span class="code-line">    <span class="token keyword">return</span> x
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">lcm</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> y <span class="token operator">//</span>uc<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>lcm<span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-7568 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-7568-Python</link>
    <pubDate>2020-11-23</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-7568-Python</guid>
    <description>
    <![CDATA[BOJ-7568-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n명의 몸무게, 키를 입력받은 후 덩치의 등수를 출력하는 문제. A는 몸무게가 B보다 크고, B는 키가 A보다 크거나 반대의 경우에는 등수가 똑같은 조건이 있다. 모든 사람에 대하여 비교를하여 몸무게와 키 둘 다 큰 경우에 1부터 1씩 더 하여 저장한 값을 출력하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">rank <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    now_w<span class="token punctuation">,</span> now_h <span class="token operator">=</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">    r <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        com_w<span class="token punctuation">,</span> com_h <span class="token operator">=</span> l<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> l<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">        <span class="token keyword">if</span> now_w <span class="token operator">&#x3C;</span> com_w <span class="token keyword">and</span> now_h <span class="token operator">&#x3C;</span> com_h<span class="token punctuation">:</span>
</span><span class="code-line">            r <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">    rank<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> r
</span><span class="code-line">
</span><span class="code-line"><span class="token punctuation">[</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> rank<span class="token punctuation">]</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1929 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1929-Python</link>
    <pubDate>2020-11-21</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1929-Python</guid>
    <description>
    <![CDATA[BOJ-1929-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>정수 n, m을 입력받은 후 n 이상, m 이하의 수들 중에 소수인 것을 출력하는 문제. m까지 소수인 수를 True로 저장하는 리스트를 에라토스테네스의 체 방법을 사용하여 저장 후 n부터 m까지 반복을 수행하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">erato</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    sieve <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">True</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    sieve<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>
</span><span class="code-line">    max_n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>m <span class="token operator">**</span> <span class="token number">0.5</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> max_n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> sieve<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span>i<span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">                sieve<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> sieve
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> erato<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2581 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2581-Python</link>
    <pubDate>2020-11-20</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2581-Python</guid>
    <description>
    <![CDATA[BOJ-2581-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n 이상 m 이하의 수 중에 소수의 합과 제일 작은 소수를 출력하며 소수가 없을 시 -1을 출력하는 문제. 에라토스테네스의 체를 이용하여 m 이하의 소수 리스트를 만든 후 n부터 m까지를 기준으로 반복문을 돌아 연산하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">erato</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    sieve <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">True</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    sieve<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>
</span><span class="code-line">    max_n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>m <span class="token operator">**</span> <span class="token number">0.5</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> max_n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> sieve<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span>i<span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">                sieve<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>
</span><span class="code-line">    <span class="token keyword">return</span> sieve
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">m <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">min_n <span class="token operator">=</span> <span class="token boolean">False</span>
</span><span class="code-line">prime_list <span class="token operator">=</span> erato<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> prime_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">        ans <span class="token operator">+=</span> i
</span><span class="code-line">        <span class="token keyword">if</span> <span class="token keyword">not</span> min_n<span class="token punctuation">:</span>
</span><span class="code-line">            min_n <span class="token operator">=</span> i
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"%d\n%d"</span> <span class="token operator">%</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> min_n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">if</span> ans <span class="token operator">!=</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-4963 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-4963-Python</link>
    <pubDate>2020-11-20</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-4963-Python</guid>
    <description>
    <![CDATA[BOJ-4963-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>x, y 크기의 0과 1로 이루어진 그래프를 입력 받는다. 1은 상하좌우와 대각선으로 근접해있을 시 같은 '섬'이라 판단할 때 섬의 수를 출력하는 문제. y, x 크기의 2차원배열을 만들어 방문 확인을 하며 2중 반복문을 수행하며 그래프의 값이 1이며 방문한 적이 없을 때 dfs 연산을 이용해 방문 확인을 한 후 섬의 수를 저장하는 변수의 값을 추가해 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">dire <span class="token operator">=</span> <span class="token punctuation">[</span>
</span><span class="code-line">    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">    <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">    <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">    <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>hy<span class="token punctuation">,</span> hx<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">global</span> land
</span><span class="code-line">
</span><span class="code-line">    visit<span class="token punctuation">[</span>hy<span class="token punctuation">]</span><span class="token punctuation">[</span>hx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">    q <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>hy<span class="token punctuation">,</span> hx<span class="token punctuation">]</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">        ty<span class="token punctuation">,</span> tx <span class="token operator">=</span> q<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">for</span> ny<span class="token punctuation">,</span> nx <span class="token keyword">in</span> dire<span class="token punctuation">:</span>
</span><span class="code-line">            next_y<span class="token punctuation">,</span> next_x <span class="token operator">=</span> ty<span class="token operator">+</span>ny<span class="token punctuation">,</span> tx<span class="token operator">+</span>nx
</span><span class="code-line">            <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> next_y <span class="token operator">&#x3C;</span> y <span class="token keyword">and</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> next_x <span class="token operator">&#x3C;</span> x<span class="token punctuation">:</span>
</span><span class="code-line">                <span class="token keyword">if</span> visit<span class="token punctuation">[</span>next_y<span class="token punctuation">]</span><span class="token punctuation">[</span>next_x<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">False</span> <span class="token keyword">and</span> graph<span class="token punctuation">[</span>next_y<span class="token punctuation">]</span><span class="token punctuation">[</span>next_x<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">                    visit<span class="token punctuation">[</span>next_y<span class="token punctuation">]</span><span class="token punctuation">[</span>next_x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">                    graph<span class="token punctuation">[</span>next_y<span class="token punctuation">]</span><span class="token punctuation">[</span>next_x<span class="token punctuation">]</span> <span class="token operator">=</span> land
</span><span class="code-line">                    q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>next_y<span class="token punctuation">,</span> next_x<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
</span><span class="code-line">    x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">break</span>
</span><span class="code-line">
</span><span class="code-line">    graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        graph<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    visit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">False</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    land <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> ty <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">for</span> tx <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> visit<span class="token punctuation">[</span>ty<span class="token punctuation">]</span><span class="token punctuation">[</span>tx<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">False</span> <span class="token keyword">and</span> graph<span class="token punctuation">[</span>ty<span class="token punctuation">]</span><span class="token punctuation">[</span>tx<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">                dfs<span class="token punctuation">(</span>ty<span class="token punctuation">,</span> tx<span class="token punctuation">)</span>
</span><span class="code-line">                land <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>land<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-11727 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-11727-Python</link>
    <pubDate>2020-11-19</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-11727-Python</guid>
    <description>
    <![CDATA[BOJ-11727-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>2xn 직사각형을 1×2, 2×1과 2×2 타일로 채우는 방법의 수를 구하는 문제. 점화식 dp[i-1] + (dp[i-2]*2)를 사용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    dp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">10007</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1978 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1978-Python</link>
    <pubDate>2020-11-19</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1978-Python</guid>
    <description>
    <![CDATA[BOJ-1978-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 수를 입력받은 후, 소수가 몇개인지 출력하는 문제. 에라토스테네스의 체를 이용하여 입력된 수 중 가장 큰 수까지 소수 리스트를 만든 후 입력된 수들을 기준으로 반복을 수행해 수를 세는 방식으로 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">erato</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    m <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>n <span class="token operator">**</span> <span class="token number">0.5</span><span class="token punctuation">)</span>
</span><span class="code-line">    sieve <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">True</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    sieve<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> sieve<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span>i<span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">                sieve<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>
</span><span class="code-line">    <span class="token keyword">return</span> sieve
</span><span class="code-line">
</span><span class="code-line"><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">max_n <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>
</span><span class="code-line">prime_l <span class="token operator">=</span> erato<span class="token punctuation">(</span>max_n<span class="token punctuation">)</span>
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> l<span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> prime_l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">        ans <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2156 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2156-Python</link>
    <pubDate>2020-11-19</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2156-Python</guid>
    <description>
    <![CDATA[BOJ-2156-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 수들이 입력되고 연속으로 3개의 수를 합칠 수 없는 조건이 있을 때, 수들을 합친 최대의 수를 출력하는 문제. 합한 값을 저장하는 dp, 입력되는 수를 저장하는 l을 이용하여 아래 점화식을 도출해 풀었다.<code>pythonmax(l[i] + l[i-1] + dp[i-3], l[i] + dp[i-2], dp[i-1])</code></p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    t <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    dp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">)</span>
</span><span class="code-line">    l<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> l<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-14501 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-14501-Python</link>
    <pubDate>2020-11-18</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-14501-Python</guid>
    <description>
    <![CDATA[BOJ-14501-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n일 동안 t일이 걸리는 보수 p가 주어지는 일을 받는다. 한 번에 한가지 일 밖에 할 수 없을 때 n일 동안 얻을 수 있는 보수의 최대치를 출력하는 문제. 보수와 시간을 각각 다른 리스트 p, t에 저장하였다. 그 후 n+1의 길이만큼 dp를 만든 후 n부터 0까지 점화식을 사용하여 풀었다. 점화식은 index + t[index]가 n보다 클 시 dp[index + 1], 아닐 시 max(dp[index + 1], p[index] + dp[index + t[index])이다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">t <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">p <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    ti<span class="token punctuation">,</span> pi <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ti
</span><span class="code-line">    p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pi<span class="token punctuation">,</span> pi
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> n <span class="token operator">&#x3C;</span> i <span class="token operator">+</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">        <span class="token keyword">continue</span>
</span><span class="code-line">    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-9461 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-9461-Python</link>
    <pubDate>2020-11-18</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-9461-Python</guid>
    <description>
    <![CDATA[BOJ-9461-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>1, 1, 1, 2, 2, 3, 4, 5, 7, 9 ... 와 같은 형태인 파도반 수열을 테스트케이스만큼 n번째 파도반 수열의 값을 출력하는 문제. [1, 1, 1, 2, 2]의 list를 저장한 후 n의 최대값인 100만큼 점화식 l(i-5) + l(i-1)을 이용하여 list를 확장한 후 입력되는 n마다 해당 값을 출력하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    l<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">+</span> l<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-10844 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-10844-Python</link>
    <pubDate>2020-11-16</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-10844-Python</guid>
    <description>
    <![CDATA[BOJ-10844-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>자리수 n이 주어질 때, 모든 자리수의 차이가 1인 수를 계단 수라고 한다. 모든 자리수 개수를 1000000000으로 나눈 수를 출력하는 다이내믹 프로그래밍 문제. n이 1일 때, 각 수로 끝나는 경우는 1부터 9까지 모두 1이다. n이 2일 때, 각 수로 끝나는 경우는 0과 9를 제외하고 n-1의 자릿수 -1과 +1이다. 이를 점화식으로 사용하여 0과 9를 예외처리한 후 dp[y-1][x-1] + dp[y-1][x+1]을 사용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">            dp<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">        <span class="token keyword">elif</span> x <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">:</span>
</span><span class="code-line">            dp<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">            dp<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1000000000</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-10102 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-10102-Python</link>
    <pubDate>2020-11-15</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-10102-Python</guid>
    <description>
    <![CDATA[BOJ-10102-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>길이 n의 문자열은 A와 B로 이루어져 있으며 문자열을 이루고 있는 더 많은 알파벳을 출력하는 문제. str.count를 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">a<span class="token punctuation">,</span> b <span class="token operator">=</span> s<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Tie"</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"A"</span> <span class="token keyword">if</span> a <span class="token operator">></span> b <span class="token keyword">else</span> <span class="token string">"B"</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1159 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1159-Python</link>
    <pubDate>2020-11-15</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1159-Python</guid>
    <description>
    <![CDATA[BOJ-1159-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 문자열을 입력받고 문자열의 첫번째 글자가 5개 이상 동일할 때 해당 문자를 사전순으로 정렬하여 출력하는 문제. 딕셔너리와 집합 자료형을 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</span><span class="code-line">se <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">if</span> s <span class="token keyword">in</span> d<span class="token punctuation">:</span>
</span><span class="code-line">        d<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">        <span class="token keyword">if</span> d<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">:</span>
</span><span class="code-line">            se<span class="token punctuation">.</span>add<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        d<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"PREDAJA"</span> <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>se<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>se<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-5656 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-5656-Python</link>
    <pubDate>2020-11-15</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-5656-Python</guid>
    <description>
    <![CDATA[BOJ-5656-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>숫자와 함께 비교 연산자로 이루어진 식을 입력받은 후 결과를 출력하는 문제. 문자열을 실행하는 eval을 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">i <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
</span><span class="code-line">    n1<span class="token punctuation">,</span> oper<span class="token punctuation">,</span> n2 <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> oper <span class="token operator">==</span> <span class="token string">'E'</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">break</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Case %s: "</span> <span class="token operator">%</span>i<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>
</span><span class="code-line">    s <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>n1 <span class="token operator">+</span> oper <span class="token operator">+</span> n2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
</span><span class="code-line">    i <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2193 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2193-Python</link>
    <pubDate>2020-11-14</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2193-Python</guid>
    <description>
    <![CDATA[BOJ-2193-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>2진수 중에 처음이 1로 시작하며 1과 1이 붙어있지 않은 수를 이친수라 할 때, n자리수에 이친수가 몇 개가 있는 지 출력하는 문제. 첫번째 풀이는 반복문을 이용하여 i-1 자리수가 0일 때 1로 수정하여 집합 자료형에 추가하는 방식으로 하였으나 수가 커질 때는 연산의 수가 많아져 이 방법은 포기하게 되었다. 고민 중 이친수의 수가 피보나치 수와 같다는 것을 깨닫고 피보나치 수를 반환하는 함수를 만들어 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># 2193</span>
</span><span class="code-line"><span class="token comment"># n = int(input())</span>
</span><span class="code-line"><span class="token comment"># if n &#x3C;= 2:</span>
</span><span class="code-line"><span class="token comment">#     print(1)</span>
</span><span class="code-line"><span class="token comment">#     exit(0)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># first = ('1' + ('0' * (n-1)))</span>
</span><span class="code-line"><span class="token comment"># s = {first}</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># for i in range(n-1, 1, -1):</span>
</span><span class="code-line"><span class="token comment">#     temp = list(first)</span>
</span><span class="code-line"><span class="token comment">#     if temp[i - 1] == '0':</span>
</span><span class="code-line"><span class="token comment">#         temp[i] = '1'</span>
</span><span class="code-line"><span class="token comment">#         s.add(''.join(temp))</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     for j in range(n-1, i-1, -1):</span>
</span><span class="code-line"><span class="token comment">#         if temp[j - 1] == '0':</span>
</span><span class="code-line"><span class="token comment">#             temp[j] = '1'</span>
</span><span class="code-line"><span class="token comment">#             s.add(''.join(temp))</span>
</span><span class="code-line"><span class="token comment">#             temp[j] = '0'</span>
</span><span class="code-line"><span class="token comment">#             continue</span>
</span><span class="code-line"><span class="token comment"># print(len(s))</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> n <span class="token operator">&#x3C;=</span> <span class="token number">2</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> <span class="token number">1</span>
</span><span class="code-line">    o<span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span>
</span><span class="code-line">    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        temp <span class="token operator">=</span> o <span class="token operator">+</span> t
</span><span class="code-line">        o <span class="token operator">=</span> t
</span><span class="code-line">        t <span class="token operator">=</span> temp
</span><span class="code-line">    <span class="token keyword">return</span> temp
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2206 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2206-Python</link>
    <pubDate>2020-11-14</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2206-Python</guid>
    <description>
    <![CDATA[BOJ-2206-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>y, x 크기의 0과 1로 이루어진 행렬을 입력받는다. 0은 이동할 수 있는 곳, 1은 이동할 수 없는 벽일 때, 벽을 한 번만 부술 수 있는 조건을 이용하여 좌표 (0, 0)에서 (y, x)까지 최단 거리를 출력하는 문제. 첫 번째 풀이는 벽을 부셨는 지 판단하는 변수를 이용하여 함수를 재귀적으로 호출하여 풀었으나 메모리 초과 결과를 받게 되었다. 두번째 풀이는 deque를 이용한 bfs를 이용하여 풀었다. 거리 및 방문을 확인하는 2차원 배열을 이용하여 풀었으나 한 번 부신 후 <a href="https://www.acmicpc.net/board/view/44061" target="_blank" rel="noopener noreferer">돌아가는 길이 존재할 때</a> 풀어지지 않았다. 이를 해결하기 위해 방문 및 거리를 확인하는 배열을 3차원으로 만든 후 [is_break][y][x]의 형태로 사용, 대입 시 한번 부쉈을 때의 다음 좌표 = 안부쉈을 때의 좌표 + 1의 형태로 작성하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># 재귀 형식으로 구현 > 메모리 초과 결과</span>
</span><span class="code-line"><span class="token comment"># import sys</span>
</span><span class="code-line"><span class="token comment"># sys.setrecursionlimit(10**9)</span>
</span><span class="code-line"><span class="token comment"># input = sys.stdin.readline</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># def find(y, x, isBreak):</span>
</span><span class="code-line"><span class="token comment">#     if y == Y-1 and x == X-1:</span>
</span><span class="code-line"><span class="token comment">#         return</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     for h, w in direc:</span>
</span><span class="code-line"><span class="token comment">#         ty = y + h</span>
</span><span class="code-line"><span class="token comment">#         tx = x + w</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#         if 0 &#x3C;= ty &#x3C; Y and 0 &#x3C;= tx &#x3C; X:</span>
</span><span class="code-line"><span class="token comment">#             if graph[ty][tx] == 0 and dist[ty][tx] > dist[y][x]+1:</span>
</span><span class="code-line"><span class="token comment">#                 dist[ty][tx] = dist[y][x]+1</span>
</span><span class="code-line"><span class="token comment">#                 find(ty, tx, isBreak)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#             elif graph[ty][tx] == 1 and isBreak == False and dist[ty][tx] > dist[y][x]+1:</span>
</span><span class="code-line"><span class="token comment">#                 dist[ty][tx] = dist[y][x]+1</span>
</span><span class="code-line"><span class="token comment">#                 isBreak = True</span>
</span><span class="code-line"><span class="token comment">#                 find(ty, tx, isBreak)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># MS = 1000001</span>
</span><span class="code-line"><span class="token comment"># Y, X = map(int, input().strip().split())</span>
</span><span class="code-line"><span class="token comment"># graph = []</span>
</span><span class="code-line"><span class="token comment"># dist = [[MS for _ in range(X)] for _ in range(Y)]</span>
</span><span class="code-line"><span class="token comment"># dist[0][0] = 1</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># direc = [[0, 1],</span>
</span><span class="code-line"><span class="token comment">#          [0, -1],</span>
</span><span class="code-line"><span class="token comment">#          [1, 0],</span>
</span><span class="code-line"><span class="token comment">#          [-1, 0]]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># for i in range(Y):</span>
</span><span class="code-line"><span class="token comment">#     graph.append(list(map(int, input().strip())))</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># find(0, 0, False)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># print(dist[Y-1][X-1] if dist[Y-1][X-1] != MS else -1)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># deque로 구현</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    q <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">    q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">        y<span class="token punctuation">,</span> x<span class="token punctuation">,</span> is_break <span class="token operator">=</span> q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">if</span> y <span class="token operator">==</span> Y<span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">and</span> x <span class="token operator">==</span> X<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">return</span> dist<span class="token punctuation">[</span>is_break<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">for</span> h<span class="token punctuation">,</span> w <span class="token keyword">in</span> direc<span class="token punctuation">:</span>
</span><span class="code-line">            ty <span class="token operator">=</span> y <span class="token operator">+</span> h
</span><span class="code-line">            tx <span class="token operator">=</span> x <span class="token operator">+</span> w
</span><span class="code-line">
</span><span class="code-line">            <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> ty <span class="token operator">&#x3C;</span> Y <span class="token keyword">and</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> tx <span class="token operator">&#x3C;</span> X<span class="token punctuation">:</span>
</span><span class="code-line">                <span class="token keyword">if</span> graph<span class="token punctuation">[</span>ty<span class="token punctuation">]</span><span class="token punctuation">[</span>tx<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> dist<span class="token punctuation">[</span>is_break<span class="token punctuation">]</span><span class="token punctuation">[</span>ty<span class="token punctuation">]</span><span class="token punctuation">[</span>tx<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">                    dist<span class="token punctuation">[</span>is_break<span class="token punctuation">]</span><span class="token punctuation">[</span>ty<span class="token punctuation">]</span><span class="token punctuation">[</span>tx<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>is_break<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span>
</span><span class="code-line">                    q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>ty<span class="token punctuation">,</span> tx<span class="token punctuation">,</span> is_break<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">                <span class="token keyword">elif</span> graph<span class="token punctuation">[</span>ty<span class="token punctuation">]</span><span class="token punctuation">[</span>tx<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">and</span> is_break <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">                    dist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ty<span class="token punctuation">]</span><span class="token punctuation">[</span>tx<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span>
</span><span class="code-line">                    q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>ty<span class="token punctuation">,</span> tx<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">Y<span class="token punctuation">,</span> X <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">dist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">dist<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">direc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">         <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">         <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">         <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    graph<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>bfs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1918 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1918-Python</link>
    <pubDate>2020-11-13</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1918-Python</guid>
    <description>
    <![CDATA[BOJ-1918-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>일반적으로 사용하는 중위 표기식을 입력받은 후. 해당 식을 후위 표기식으로 만든 후 출력하는 문제. 입력된 문자열을 괄호로 감싸 반복문을 수행하고 반복 수행중인 값이 isupper을 이용하여 대문자일 때 출력. '('일 때 스택에 추가. ')'일 때 스택을 pop한 값이 '('일 때까지 출력한다. 그리고 연산자일 때 스택의 마지막 값이 '('가 아니며 스택의 마지막 값을 딕셔너리에 저장된 우선순위로 비교하여 현재 연산자보다 우선순위가 높은 연산자들을 먼저 출력 후 해당 연산자를 스택에 append하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">priority <span class="token operator">=</span> <span class="token punctuation">{</span>
</span><span class="code-line">    <span class="token string">'*'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
</span><span class="code-line">    <span class="token string">'/'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
</span><span class="code-line">    <span class="token string">'+'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
</span><span class="code-line">    <span class="token string">'-'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
</span><span class="code-line">    <span class="token string">'('</span><span class="token punctuation">:</span> <span class="token number">0</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> ch <span class="token keyword">in</span> <span class="token string">'('</span><span class="token operator">+</span>s<span class="token operator">+</span><span class="token string">')'</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> ch<span class="token punctuation">.</span>isupper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">elif</span> ch <span class="token operator">==</span> <span class="token string">"("</span><span class="token punctuation">:</span>
</span><span class="code-line">        stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ch<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">elif</span> ch <span class="token operator">==</span> <span class="token string">")"</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
</span><span class="code-line">            c <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">            <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token string">"("</span><span class="token punctuation">:</span>
</span><span class="code-line">                <span class="token keyword">break</span>
</span><span class="code-line">            <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">while</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"("</span> <span class="token keyword">and</span> priority<span class="token punctuation">[</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">>=</span> priority<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">print</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>
</span><span class="code-line">        stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ch<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-11657 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-11657-Python</link>
    <pubDate>2020-11-12</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-11657-Python</guid>
    <description>
    <![CDATA[BOJ-11657-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n, m 각각 정점, 간선의 수를 입력받은 후에 m만큼 s, e, w, 시작점, 도착점, 가중치를 입력받으며 가중치는 음수가 입력될 수도 있다. 시작점은 1이며 다른 정점까지 도착하는 최소 가중치를 출력하되, 네거티브 사이클이 있을 때는 -1을, 도착하지 못하는 정점은 -1을 출력하는 문제. 첫풀이는 벨만포드 알고리즘을 이용하여 모든 간선을 수행한 거리 값을 저장한 후 다시 모든 간선을 수행할 때 값의 차이가 보일 때 네거티브 사이클이 있다 판명하도록 풀었으나 틀렸습니다 결과를 받게되어 <a href="../master/python/BOJ_1865.py">BOJ 1865</a>와 같이 3중 반복문을 수행하여 풀었다. i가 마지막 정점인 것만 확인 시에 1과 이어져있지 않은 정점이지만 네거티브 사이클이 있는 예외 경우가 존재하여 최대 간선의 수와 가중치의 최대 값을 곱한 값보다 작으며 계속해서 줄어들 경우만 예외처리하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># import sys</span>
</span><span class="code-line"><span class="token comment"># INF = sys.maxsize</span>
</span><span class="code-line"><span class="token comment"># input = sys.stdin.readline</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># def relax():</span>
</span><span class="code-line"><span class="token comment">#     for start in range(n+1):</span>
</span><span class="code-line"><span class="token comment">#         for end, weight in graph[start]:</span>
</span><span class="code-line"><span class="token comment">#             next_weight = dist[start] + weight</span>
</span><span class="code-line"><span class="token comment">#             if dist[end] > next_weight:</span>
</span><span class="code-line"><span class="token comment">#                 dist[end] = next_weight</span>
</span><span class="code-line"><span class="token comment">#     return dist</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># def bellman():</span>
</span><span class="code-line"><span class="token comment">#     for start in range(n+1):</span>
</span><span class="code-line"><span class="token comment">#         for end, weight in graph[start]:</span>
</span><span class="code-line"><span class="token comment">#             next_weight = dist[start] + weight</span>
</span><span class="code-line"><span class="token comment">#             if dist[end] > next_weight:</span>
</span><span class="code-line"><span class="token comment">#                 return False</span>
</span><span class="code-line"><span class="token comment">#     return True</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># n, m = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment"># graph = [[] for _ in range(n+1)]</span>
</span><span class="code-line"><span class="token comment"># dist = [INF for _ in range(n+1)]</span>
</span><span class="code-line"><span class="token comment"># dist[1] = 0</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># for _ in range(m):</span>
</span><span class="code-line"><span class="token comment">#     s, e, w = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment">#     graph[s].append([e, w])</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># short = relax()</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># if bellman():</span>
</span><span class="code-line"><span class="token comment">#     for i in range(2, n+1):</span>
</span><span class="code-line"><span class="token comment">#         print(short[i] if short[i] != INF else -1)</span>
</span><span class="code-line"><span class="token comment"># else:</span>
</span><span class="code-line"><span class="token comment">#     print(-1)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line">INF <span class="token operator">=</span> sys<span class="token punctuation">.</span>maxsize
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">bellman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">for</span> start <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">for</span> end<span class="token punctuation">,</span> weight <span class="token keyword">in</span> graph<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">                next_weight <span class="token operator">=</span> weight <span class="token operator">+</span> dist<span class="token punctuation">[</span>start<span class="token punctuation">]</span>
</span><span class="code-line">                <span class="token keyword">if</span> dist<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">></span> next_weight<span class="token punctuation">:</span>
</span><span class="code-line">                    <span class="token keyword">if</span> i <span class="token operator">==</span> n <span class="token keyword">and</span> next_weight <span class="token operator">&#x3C;</span> <span class="token number">60000001</span><span class="token punctuation">:</span>
</span><span class="code-line">                        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">                        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line">                    dist<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> next_weight
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">dist <span class="token operator">=</span> <span class="token punctuation">[</span>INF <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">dist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    s<span class="token punctuation">,</span> e<span class="token punctuation">,</span> w <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    graph<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>e<span class="token punctuation">,</span> w<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">bellman<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> dist<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>i <span class="token keyword">if</span> i <span class="token operator">&#x3C;</span> <span class="token number">60000001</span> <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2579 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2579-Python</link>
    <pubDate>2020-11-12</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2579-Python</guid>
    <description>
    <![CDATA[BOJ-2579-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>다이내믹 프로그래밍 문제. n개의 수열이 주어지고 인덱스 +1, +2 값을 더할 수 있으나 연속하여 3개의 인덱스 값을 더할 수 없을 때 마지막 인덱스 값을 포함한 최대 값을 출력하는 문제. 합한 값을 저장할 dp, 인덱스의 값을 저장할 l, 리스트 2개를 사용했다. dp 0, 1, 2의 값은 수동적으로 작성 후 3부터 n까지 반복문을 이용하였다. i번째 값은 i-2의 합한 값 (+2), i-3의 합한 값 + i-1(+2+1)의 인덱스 값 중 더욱 큰 것을 비교하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">301</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">301</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</span><span class="code-line">dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> l<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> l<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-15666 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-15666-Python</link>
    <pubDate>2020-11-10</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-15666-Python</guid>
    <description>
    <![CDATA[BOJ-15666-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 수 중에 m개의 수를 비내림차순으로 만든 수열을 출력하는 백트래킹 문제. 같은 수가 여러번 입력되며 동일한 수열은 출력하면 안되는 조건이 있기에 제일 최근 리스트에 추가한 수를 비교, 전 재귀에서 사용한 값과 비교하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">bt</span><span class="token punctuation">(</span>depth<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> depth <span class="token operator">==</span> m<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">return</span>
</span><span class="code-line">
</span><span class="code-line">    temp <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> l<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> index <span class="token operator">&#x3C;=</span> i <span class="token keyword">and</span> temp <span class="token operator">!=</span> i<span class="token punctuation">:</span>
</span><span class="code-line">            temp <span class="token operator">=</span> i
</span><span class="code-line">            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</span><span class="code-line">            bt<span class="token punctuation">(</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">            ans<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">bt<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1865 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1865-Python</link>
    <pubDate>2020-11-10</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1865-Python</guid>
    <description>
    <![CDATA[BOJ-1865-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>도로는 방향이 없는 양의 가중치를 갖는 간선이며 웜홀은 방향이 있는 음의 가중치를 갖는 간선일 때, 다시 시작점으로 왔을 때 음의 값을 갖을 수 있는지, 즉 negative cycle이 존재하는 지 출력하는 문제. 첫풀이는 기존에 사용하던 다익스트라 방법을 이용하여 현재 정점이 출발 정점이며 값이 음수일 때 return, 정점의 수만큼 함수를 실행하여 풀었으나 시간초과 결과를 받게 되었다. 두번째 풀이는 정점의 수 _ (정점의 수 _ 모든 간선)을 수행하며 반복되는 정점이 마지막 정점이며 값이 갱신될 때를 확인하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># 1865</span>
</span><span class="code-line"><span class="token comment"># import heapq</span>
</span><span class="code-line"><span class="token comment"># import sys</span>
</span><span class="code-line"><span class="token comment"># INF = sys.maxsize</span>
</span><span class="code-line"><span class="token comment"># input = sys.stdin.readline</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># def dijkstra(start):</span>
</span><span class="code-line"><span class="token comment">#     q = []</span>
</span><span class="code-line"><span class="token comment">#     heapq.heappush(q, [0, start])</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     dist = [INF for _ in range(n+1)]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     while q:</span>
</span><span class="code-line"><span class="token comment">#         weight, here = heapq.heappop(q)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#         if here == start and weight &#x3C; 0:</span>
</span><span class="code-line"><span class="token comment">#             dist[start] = -1</span>
</span><span class="code-line"><span class="token comment">#             return dist</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#         for there, w in road[here]:</span>
</span><span class="code-line"><span class="token comment">#             next_weight = w + weight</span>
</span><span class="code-line"><span class="token comment">#             if dist[there] > next_weight:</span>
</span><span class="code-line"><span class="token comment">#                 dist[there] = next_weight</span>
</span><span class="code-line"><span class="token comment">#                 heapq.heappush(q, [next_weight, there])</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#         for there, w in worm[here]:</span>
</span><span class="code-line"><span class="token comment">#             next_weight = (-1 * w) + weight</span>
</span><span class="code-line"><span class="token comment">#             if dist[there] > next_weight:</span>
</span><span class="code-line"><span class="token comment">#                 dist[there] = next_weight</span>
</span><span class="code-line"><span class="token comment">#                 heapq.heappush(q, [next_weight, there])</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     return dist</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># for _ in range(int(input())):</span>
</span><span class="code-line"><span class="token comment">#     # n = 지점 수, m = 도로 수, w = 웜홀 수</span>
</span><span class="code-line"><span class="token comment">#     # 도로는 쌍방향</span>
</span><span class="code-line"><span class="token comment">#     # 웜홀은 방향 존재</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     n, m, w = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment">#     road = [[] for _ in range(n+1)]</span>
</span><span class="code-line"><span class="token comment">#     worm = [[] for _ in range(n+1)]</span>
</span><span class="code-line"><span class="token comment">#     for _ in range(m):</span>
</span><span class="code-line"><span class="token comment">#         s, e, t = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment">#         road[s].append([e, t])</span>
</span><span class="code-line"><span class="token comment">#         road[e].append([s, t])</span>
</span><span class="code-line"><span class="token comment">#     for _ in range(w):</span>
</span><span class="code-line"><span class="token comment">#         s, e, t = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment">#         worm[s].append([e, t])</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     for i in range(1, n+1):</span>
</span><span class="code-line"><span class="token comment">#         if dijkstra(i)[i] == -1:</span>
</span><span class="code-line"><span class="token comment">#             print("YES")</span>
</span><span class="code-line"><span class="token comment">#             break</span>
</span><span class="code-line"><span class="token comment">#         if i == n:</span>
</span><span class="code-line"><span class="token comment">#             print("NO")</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line">INF <span class="token operator">=</span> sys<span class="token punctuation">.</span>maxsize
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">belman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    dist <span class="token operator">=</span> <span class="token punctuation">[</span>INF <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    dist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> compare_with_n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">for</span> here <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">for</span> there<span class="token punctuation">,</span> weight <span class="token keyword">in</span> graph<span class="token punctuation">[</span>here<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">                next_weight <span class="token operator">=</span> weight <span class="token operator">+</span> dist<span class="token punctuation">[</span>here<span class="token punctuation">]</span>
</span><span class="code-line">                <span class="token keyword">if</span> dist<span class="token punctuation">[</span>there<span class="token punctuation">]</span> <span class="token operator">></span> next_weight<span class="token punctuation">:</span>
</span><span class="code-line">                    dist<span class="token punctuation">[</span>there<span class="token punctuation">]</span> <span class="token operator">=</span> next_weight
</span><span class="code-line">                    <span class="token keyword">if</span> compare_with_n <span class="token operator">==</span> n<span class="token punctuation">:</span>
</span><span class="code-line">                        <span class="token keyword">return</span> <span class="token string">"YES"</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token string">"NO"</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> w <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        s<span class="token punctuation">,</span> e<span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">        graph<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>e<span class="token punctuation">,</span> t<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">        graph<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>s<span class="token punctuation">,</span> t<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        s<span class="token punctuation">,</span> e<span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">        graph<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>e<span class="token punctuation">,</span> <span class="token operator">-</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>belman<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1339 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1339-Python</link>
    <pubDate>2020-11-09</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1339-Python</guid>
    <description>
    <![CDATA[BOJ-1339-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 알파벳으로 이루어진 문장을 입력받는다. 각 알파벳을 숫자로 바꾼 후 합하였을 때 최대값이 무엇인지 출력하는 문제. 첫 풀이는 문자열을 거꾸로 배열에 삽입한 후 자리수가 클 수록 알파벳에 해당되는 수가 커야하는 것을 이용하여 딕셔너리에 저장 여부를 확인하여 값을 할당 후 배열에 값 수정을 하였다. 그 후 배열을 뒤집어 int형으로 형변환하여 더한 값을 출력하여 풀었다. 하지만 자리수 이외에 빈도수 또한 중요도에 영향을 미치기 때문에 틀렸습니다 결과를 받게 되었다. 두번째 풀이는 길이 26의 배열을 만든 후 문자열의 자릿수 만큼 해달 배열의 값을 더해주어 중요도를 저장, 내림차순으로 정렬한 배열에 9부터 중요도를 곱하여 더한 값을 출력하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># 1339</span>
</span><span class="code-line"><span class="token comment"># n = int(input())</span>
</span><span class="code-line"><span class="token comment"># l = [[0 for _ in range(10)] for _ in range(n)]</span>
</span><span class="code-line"><span class="token comment"># d = {}</span>
</span><span class="code-line"><span class="token comment"># index = 9</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># for i in range(n):</span>
</span><span class="code-line"><span class="token comment">#     s = input()</span>
</span><span class="code-line"><span class="token comment">#     ls = len(s)</span>
</span><span class="code-line"><span class="token comment">#     for j in range(ls):</span>
</span><span class="code-line"><span class="token comment">#         l[i][ls-j-1] = s[j]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># for i in range(9, -1, -1):</span>
</span><span class="code-line"><span class="token comment">#     for y in range(n):</span>
</span><span class="code-line"><span class="token comment">#         if l[y][i] != 0 and l[y][i] not in d:</span>
</span><span class="code-line"><span class="token comment">#             d[l[y][i]] = index</span>
</span><span class="code-line"><span class="token comment">#             l[y][i] = index</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#             index -= 1</span>
</span><span class="code-line"><span class="token comment">#         elif l[y][i] in d:</span>
</span><span class="code-line"><span class="token comment">#             l[y][i] = d[l[y][i]]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># ans = 0</span>
</span><span class="code-line"><span class="token comment"># for i in range(n):</span>
</span><span class="code-line"><span class="token comment">#     rev_l = list(reversed(l[i]))</span>
</span><span class="code-line"><span class="token comment">#     s = ''.join(map(str, rev_l))</span>
</span><span class="code-line"><span class="token comment">#     ans += int(s)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># print(ans)</span>
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> ans <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">alpha <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> s <span class="token keyword">in</span> l<span class="token punctuation">:</span>
</span><span class="code-line">    i <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    <span class="token keyword">while</span> s<span class="token punctuation">:</span>
</span><span class="code-line">        now <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">        alpha<span class="token punctuation">[</span><span class="token builtin">ord</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
</span><span class="code-line">        i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span> s <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">alpha<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    ans <span class="token operator">+=</span> alpha<span class="token punctuation">[</span><span class="token number">9</span><span class="token operator">-</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> i
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-15663 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-15663-Python</link>
    <pubDate>2020-11-08</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-15663-Python</guid>
    <description>
    <![CDATA[BOJ-15663-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 수를 m개의 수열로 만들어서 출력하되 n개의 수 중에 중복된 수가 있으며, 중복된 수열은 출력하지 않는 조건이 있는 백트래킹 문제. 깊이를 비교하여 출력하며 반복문의 현재 값과 다음 값이 같지 않을 때를 확인하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">bt</span><span class="token punctuation">(</span>depth<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> depth <span class="token operator">==</span> m<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">return</span>
</span><span class="code-line">
</span><span class="code-line">    temp <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> <span class="token keyword">not</span> visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">and</span> temp <span class="token operator">!=</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">            temp <span class="token operator">=</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
</span><span class="code-line">            bt<span class="token punctuation">(</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">            visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>
</span><span class="code-line">            ans<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">visit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">bt<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1504 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1504-Python</link>
    <pubDate>2020-11-05</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1504-Python</guid>
    <description>
    <![CDATA[BOJ-1504-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>정점의 개수 n, 간선의 개수 e를 입력받은 후 e의 개수만큼 "출발지 도착지 가중치"를 입력받는다. 그 후 정점의 두개 v1, v2를 입력받은 후 정점 1부터 n까지 v1, v2를 반드시 통과한 최단거리를 출력하는 문제. 첫 접근은 deque의 appendleft를 이용하여 다음 방문지가 v1 혹은 v2일 때 우선순위를 높이는 방식이였으나 실패하게 되었다. 접근을 바꾸어 시작, v1, v2에서 출발하는 최단거리 리스트를 저장하고 s > v1 > v2 > n과 s > v2 > v1 > n을 계산 및 비교하여 출력하여 풀었다. 간선을 저장할 때 유무를 찾아 추가하는 방식에서 런타임 에러가 일어나, 수정하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># import heapq</span>
</span><span class="code-line"><span class="token comment"># import sys</span>
</span><span class="code-line"><span class="token comment"># input = sys.stdin.readline</span>
</span><span class="code-line"><span class="token comment"># INF = sys.maxsize</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># def dijkstra(start):</span>
</span><span class="code-line"><span class="token comment">#     dist = [INF for _ in range(n+1)]</span>
</span><span class="code-line"><span class="token comment">#     dist[start] = 0</span>
</span><span class="code-line"><span class="token comment">#     q = []</span>
</span><span class="code-line"><span class="token comment">#     heapq.heappush(q, [0, start])</span>
</span><span class="code-line"><span class="token comment">#     while q:</span>
</span><span class="code-line"><span class="token comment">#         weight, here = heapq.heappop(q)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#         for there, w in graph[here]:</span>
</span><span class="code-line"><span class="token comment">#             next_weight = weight + w</span>
</span><span class="code-line"><span class="token comment">#             if dist[there] > next_weight:</span>
</span><span class="code-line"><span class="token comment">#                 dist[there] = next_weight</span>
</span><span class="code-line"><span class="token comment">#                 heapq.heappush(q, [next_weight, there])</span>
</span><span class="code-line"><span class="token comment">#     return dist</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># n, e = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment"># graph = {}</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># for _ in range(e):</span>
</span><span class="code-line"><span class="token comment">#     u, v, w = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment">#     if u not in graph:</span>
</span><span class="code-line"><span class="token comment">#         graph[u] = [[v, w]]</span>
</span><span class="code-line"><span class="token comment">#     else:</span>
</span><span class="code-line"><span class="token comment">#         graph[u].append([v, w])</span>
</span><span class="code-line"><span class="token comment">#     if v not in graph:</span>
</span><span class="code-line"><span class="token comment">#         graph[v] = [[u, w]]</span>
</span><span class="code-line"><span class="token comment">#     else:</span>
</span><span class="code-line"><span class="token comment">#         graph[v].append([u, w])</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># v1, v2 = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment"># s = dijkstra(1)</span>
</span><span class="code-line"><span class="token comment"># s_v1 = dijkstra(v1)</span>
</span><span class="code-line"><span class="token comment"># s_v2 = dijkstra(v2)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># ans = min(s[v1] + s_v1[v2] + s_v2[n],</span>
</span><span class="code-line"><span class="token comment">#           s[v2] + s_v2[v1] + s_v1[n])</span>
</span><span class="code-line"><span class="token comment"># print(ans if ans &#x3C; INF else -1)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">import</span> heapq
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">INF <span class="token operator">=</span> sys<span class="token punctuation">.</span>maxsize
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    dist <span class="token operator">=</span> <span class="token punctuation">[</span>INF <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    dist<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    q <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">    heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> start<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">        weight<span class="token punctuation">,</span> here <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>q<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">for</span> there<span class="token punctuation">,</span> w <span class="token keyword">in</span> graph<span class="token punctuation">[</span>here<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            next_weight <span class="token operator">=</span> weight <span class="token operator">+</span> w
</span><span class="code-line">            <span class="token keyword">if</span> dist<span class="token punctuation">[</span>there<span class="token punctuation">]</span> <span class="token operator">></span> next_weight<span class="token punctuation">:</span>
</span><span class="code-line">                dist<span class="token punctuation">[</span>there<span class="token punctuation">]</span> <span class="token operator">=</span> next_weight
</span><span class="code-line">                heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token punctuation">[</span>next_weight<span class="token punctuation">,</span> there<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">return</span> dist
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> e <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>v<span class="token punctuation">,</span> w<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    graph<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>u<span class="token punctuation">,</span> w<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">v1<span class="token punctuation">,</span> v2 <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">s <span class="token operator">=</span> dijkstra<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">s_v1 <span class="token operator">=</span> dijkstra<span class="token punctuation">(</span>v1<span class="token punctuation">)</span>
</span><span class="code-line">s_v2 <span class="token operator">=</span> dijkstra<span class="token punctuation">(</span>v2<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"> <span class="token comment"># s > v1 > v2 > n과 s > v2 > v1 > n 을 비교</span>
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token operator">+</span> s_v1<span class="token punctuation">[</span>v2<span class="token punctuation">]</span> <span class="token operator">+</span> s_v2<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line">          s<span class="token punctuation">[</span>v2<span class="token punctuation">]</span> <span class="token operator">+</span> s_v2<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token operator">+</span> s_v1<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>ans <span class="token keyword">if</span> ans <span class="token operator">&#x3C;</span> INF <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-16953 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-16953-Python</link>
    <pubDate>2020-11-05</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-16953-Python</guid>
    <description>
    <![CDATA[BOJ-16953-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>a는 a * 2, a의 왼쪽에 1붙이기의 연산이 가능할 때 b가 되는 연산의 최솟값을 출력하는 문제. bfs를 이용하여 풀었으며 q에 추가할 때 b와 크기를 비교하였으며 반복문이 종료시까지 return이 안됐을 때 -1을 return하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    q <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">        node<span class="token punctuation">,</span> sec <span class="token operator">=</span> q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">if</span> node <span class="token operator">==</span> b<span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">return</span> sec
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">for</span> <span class="token builtin">next</span> <span class="token keyword">in</span> <span class="token punctuation">[</span>node<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> <span class="token builtin">next</span> <span class="token operator">&#x3C;=</span> b<span class="token punctuation">:</span>
</span><span class="code-line">                q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">next</span><span class="token punctuation">,</span> sec<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
</span><span class="code-line">a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>bfs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-12851 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-12851-Python</link>
    <pubDate>2020-11-04</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-12851-Python</guid>
    <description>
    <![CDATA[BOJ-12851-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>현재 위치 n과 이동해야 할 목적지 k가 주어질 때, 1초 후에 n+1, n-1, n*2로 이동할 수 있다. 이 때 k까지 가는 최소 시간을 출력하고 동일한 시간으로 갈 수 있는 방법의 수까지 출력하는 문제. 최소 시간은 간단히 풀었으나 방법까지 구하는 데 시간이 상당히 소요되었다. 첫 풀이는 시간을 기준으로 힙연산을 통해 풀었으나 시간초과 결과를 받게 되었다. 두번째 풀이는 bfs 연산을 하였으며 방문확인으로 0으로 이루어진 리스트를 사용했다. 목적지에 처음 방문 했을 때 방문 리스트에 현재 소모된 시간을 저장하였으며, 첫 방문이 아니며 시간이 똑같을 때는 횟수를 저장하는 정수형 변수 ans의 값을 추가해 주었다. 그리고 큐에 추가하는 연산을 실행할 때, 첫 방문 혹은 방문지에 저장된 시간이 다음에 저장될 시간보다 클 때 추가하였다. 목적지에 저장된 값 그리고 다음 연산될 시간이 다음 값에 저장된 값보다 클 때를 예외처리 하여 풀었다. 자세한 풀이는 주석에 설명해 놓았다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># 12851</span>
</span><span class="code-line"><span class="token comment"># import heapq</span>
</span><span class="code-line"><span class="token comment"># import sys</span>
</span><span class="code-line"><span class="token comment"># INF = sys.maxsize</span>
</span><span class="code-line"><span class="token comment"># input = sys.stdin.readline</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># def bfs(start):</span>
</span><span class="code-line"><span class="token comment">#     q = []</span>
</span><span class="code-line"><span class="token comment">#     heapq.heappush(q, [0, start])</span>
</span><span class="code-line"><span class="token comment">#     ans = [0, INF]</span>
</span><span class="code-line"><span class="token comment">#     while q:</span>
</span><span class="code-line"><span class="token comment">#         sec, place = heapq.heappop(q)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#         if place == k:</span>
</span><span class="code-line"><span class="token comment">#             ans[0] += 1</span>
</span><span class="code-line"><span class="token comment">#             ans[1] = sec</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#         if sec > ans[1]:</span>
</span><span class="code-line"><span class="token comment">#             return ans</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#         if 0 &#x3C; sec + 1 &#x3C;= 100000:</span>
</span><span class="code-line"><span class="token comment">#             heapq.heappush(q, [sec + 1, place + 1])</span>
</span><span class="code-line"><span class="token comment">#             heapq.heappush(q, [sec + 1, place - 1])</span>
</span><span class="code-line"><span class="token comment">#             heapq.heappush(q, [sec + 1, place * 2])</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># n, k = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment"># ans = bfs(n)</span>
</span><span class="code-line"><span class="token comment"># print(ans[1])</span>
</span><span class="code-line"><span class="token comment"># print(ans[0])</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">MAX <span class="token operator">=</span> <span class="token number">100001</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">bfs</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    q <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>start<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    ans <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">        place<span class="token punctuation">,</span> sec <span class="token operator">=</span> q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">if</span> place <span class="token operator">==</span> k<span class="token punctuation">:</span> <span class="token comment"># 현재 목표 지점일 때</span>
</span><span class="code-line">            <span class="token keyword">if</span> <span class="token keyword">not</span> visit<span class="token punctuation">[</span>place<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment"># 첫 방문일 때</span>
</span><span class="code-line">                visit<span class="token punctuation">[</span>place<span class="token punctuation">]</span> <span class="token operator">=</span> sec <span class="token comment"># 현재 시간을 저장</span>
</span><span class="code-line">                ans <span class="token operator">+=</span> <span class="token number">1</span> <span class="token comment"># 카운트 변수에 +1</span>
</span><span class="code-line">            <span class="token keyword">elif</span> sec <span class="token operator">==</span> visit<span class="token punctuation">[</span>place<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment"># 첫방문은 아니지만 시간이 같을 때</span>
</span><span class="code-line">                ans <span class="token operator">+=</span> <span class="token number">1</span> <span class="token comment"># 카운트 변수에 +1</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">for</span> <span class="token builtin">next</span> <span class="token keyword">in</span> <span class="token punctuation">[</span>place<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> place<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> place<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> <span class="token builtin">next</span> <span class="token operator">&#x3C;</span> MAX<span class="token punctuation">:</span> <span class="token comment"># 범위를 안넘었을 때</span>
</span><span class="code-line">                <span class="token comment"># 다음으로 갈 곳이 첫 방문 혹은 배정될 시간보다 클 때</span>
</span><span class="code-line">                <span class="token keyword">if</span> visit<span class="token punctuation">[</span><span class="token builtin">next</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">or</span> visit<span class="token punctuation">[</span><span class="token builtin">next</span><span class="token punctuation">]</span> <span class="token operator">>=</span> sec<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">                    <span class="token comment"># 목적지에 저장된 값과 배정될 시간이 다음으로 갈 곳에 저장된 값보다 크면?</span>
</span><span class="code-line">                    <span class="token keyword">if</span> visit<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token keyword">and</span> sec<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">></span> visit<span class="token punctuation">[</span><span class="token builtin">next</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">                        <span class="token comment"># 큐에 추가를 안하여 시간 단축</span>
</span><span class="code-line">                        <span class="token comment"># 목적지의 시간과 다음에 연산될 시긴이 더 크면 연산이 불필요하기 때문</span>
</span><span class="code-line">                        <span class="token keyword">continue</span>
</span><span class="code-line">
</span><span class="code-line">                    visit<span class="token punctuation">[</span><span class="token builtin">next</span><span class="token punctuation">]</span> <span class="token operator">=</span> sec <span class="token operator">+</span> <span class="token number">1</span>
</span><span class="code-line">                    q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">next</span><span class="token punctuation">,</span> sec<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>visit<span class="token punctuation">[</span>place<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">visit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>MAX<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">if</span> n <span class="token operator">>=</span> k<span class="token punctuation">:</span> <span class="token comment"># 처음 시작 지점이 목표 지점보다 같거나 클 때</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token operator">-</span>k<span class="token punctuation">)</span> <span class="token comment"># 시작 지점 - 목표 지점 (동일 시 0)</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># -1되는 방법밖에 없음 (동일 시는 아무 연산 안하는 방법 1개)</span>
</span><span class="code-line">    exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 프로그램 종료</span>
</span><span class="code-line">
</span><span class="code-line">bfs<span class="token punctuation">(</span>n<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2851 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2851-Python</link>
    <pubDate>2020-11-04</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2851-Python</guid>
    <description>
    <![CDATA[BOJ-2851-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>10개의 수열이 입력되며 순서대로 합을 계산할 수 있다. 이 때 처음부터 합할 때 100과 제일 가까운 수를 출력하는 문제. 매 입력마다 절댓값을 이용하여 저번 합과 현재 입력된 값 + 저번 합을 100과의 차이를 이용하여 비교해 저장 후 출력하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">s<span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> <span class="token builtin">abs</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">-</span> s<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">-</span> s <span class="token operator">-</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        ans <span class="token operator">=</span> s <span class="token operator">+</span> n
</span><span class="code-line">    s <span class="token operator">+=</span> n
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-11047 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-11047-Python</link>
    <pubDate>2020-11-03</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-11047-Python</guid>
    <description>
    <![CDATA[BOJ-11047-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n가지 종류의 동전으로 금액 k를 맞출 때 동전의 최소 개수를 출력하는 그리디 알고리즘 문제. n가지 동전은 오름차순으로 입력되기 때문에 reversed를 이용하여 높은 금액부터 나머지와 몫을 계산하는 연산자를 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">reversed</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> k <span class="token operator">>=</span> i<span class="token punctuation">:</span>
</span><span class="code-line">        ans <span class="token operator">+=</span> k<span class="token operator">//</span>i
</span><span class="code-line">        k <span class="token operator">%=</span> i
</span><span class="code-line">    <span class="token keyword">if</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">break</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-3020 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-3020-Python</link>
    <pubDate>2020-11-03</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-3020-Python</guid>
    <description>
    <![CDATA[BOJ-3020-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>석순과 종유석이 번갈아 있는 길이가 n, 높이가 h인 터널이 있다. 이때 1~h 높이의 구간으로 지나갈 때 만나는 석순 혹은 종유석의 개수 중 최소와 동일한 개수를 갖는 구간의 수를 출력하는 문제. 첫풀이는 석순 혹은 종유석의 길이를 입력할 때 마다 이차원배열의 [길이][높이]에 [길이-1][높이]의 값을 이용하여 연산하여 풀었으나 메모리 초과 결과를 받게 되었다. 두번째 풀이는 누적합을 이용한 연산으로 높이의 종유석, 석순의 개수를 누적합으로 계산 후 각 높이마다 석수 + 종유석의 값을 계산하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># 3020</span>
</span><span class="code-line"><span class="token comment"># import sys</span>
</span><span class="code-line"><span class="token comment"># input = sys.stdin.readline</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># n, h = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment"># dist = [[0 for _ in range(h)] for _ in range(n+1)]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># for i in range(1, n+1):</span>
</span><span class="code-line"><span class="token comment">#     t = int(input())</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     if i % 2 == 1:</span>
</span><span class="code-line"><span class="token comment">#         for j in range(h):</span>
</span><span class="code-line"><span class="token comment">#             dist[i][j] = dist[i-1][j] + 1 if j &#x3C; t else dist[i - 1][j]</span>
</span><span class="code-line"><span class="token comment">#     else:</span>
</span><span class="code-line"><span class="token comment">#         for j in range(h):</span>
</span><span class="code-line"><span class="token comment">#             dist[i][j] = dist[i-1][j] + 1 if j >= t-1 else dist[i - 1][j]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># m = min(dist[-1])</span>
</span><span class="code-line"><span class="token comment"># print(m, dist[-1].count(m))</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> h <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">btm <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>h<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">high <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>h<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">dist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>h<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">        btm<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        high<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>h<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    btm<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> btm<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> btm<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
</span><span class="code-line">    high<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> high<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> high<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> h<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> btm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>high<span class="token punctuation">[</span>h<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">dist <span class="token operator">=</span> dist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
</span><span class="code-line">m <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> dist<span class="token punctuation">.</span>count<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-9251 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-9251-Python</link>
    <pubDate>2020-11-03</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-9251-Python</guid>
    <description>
    <![CDATA[BOJ-9251-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>두 문자열을 입력받은 후 최장 공통 부분 수열의 길이를 출력하는 문제. 다이내믹 프로그래밍 방법을 이용하여 풀었다. 현재 문자가 동일 시에 현재 문자가 포함되지 않은 최장 공통 부분 수열의 길이 + 1, 포함되지 않을 시 현재 문자가 포함하지 않은 y문자, x문자의 값 중 큰 것을 배정, 배열의 마지막 값을 출력하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">s1 <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> l1 <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>
</span><span class="code-line">s2 <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> l2 <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>
</span><span class="code-line">dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>l2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>l1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> l1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> l2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token comment"># dp[y][x] = dp[y-1][x-1] + 1 if s1[y-1] == s2[x-1] else max(dp[y-1][x], dp[y][x-1])</span>
</span><span class="code-line">        <span class="token keyword">if</span> s1<span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> s2<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            dp<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">            dp<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1158 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1158-Python</link>
    <pubDate>2020-11-01</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1158-Python</guid>
    <description>
    <![CDATA[BOJ-1158-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>1번부터 n번까지의 사람들이 원을 이루며 앉아있을 때 순서대로 k번째 사람들을 제거한다. 제거된 사람의 순서를 출력하는 '요세푸스 순열' 문제. 1부터 n까지의 리스트와 정답이 들어갈 빈 리스트, 몇번째 요소를 pop할지를 관리할 정수형 변수를 이용했다. 정답 리스트의 길이가 n이 아닐 때까지 반복, 'i = (i + (k-1)) % n까지 들어있는 리스트의 길이'를 계산하여 pop한 값을 빈리스트에 넣어 출력하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">n_l <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">i <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token operator">!=</span> n<span class="token punctuation">:</span>
</span><span class="code-line">    i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token punctuation">(</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>n_l<span class="token punctuation">)</span>
</span><span class="code-line">    l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>n_l<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#x3C;%s>"</span><span class="token operator">%</span><span class="token string">', '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1916 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1916-Python</link>
    <pubDate>2020-11-01</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1916-Python</guid>
    <description>
    <![CDATA[BOJ-1916-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>도시 n개, 버스 노선 m개를 입력 받은 후, m개의 노선들을 '출발지 도착지 비용'과 같이 입력받은 후 '출발지 도착지'를 입력받아 출발지에서 도착지까지 가는 최소비용을 출력하는 문제. 다익스트라 문제로써 그래프에 [{도착지1: 비용1}, {도착지2: 비용2, 도착지3: 비용3}]과 같이 저장하여 인덱스를 출발지로 사용하였다. 그 후 힙연산, 각 노드마다 최소 비용을 저장하는 리스트를 이용하여 풀었으나 백준상에서 메모리 초과 결과를 받게 되었다. 그래프의 아이템들을 이용하는 반복문전에 저장돼 있는 값과 비교하는 부분을 넣어 메모리 초과를 해결하여 풀었다.재채점 결과 메모리초과가 되어 동일한 방법으로 문법만 편해진 방법으로 작성하여 풀었더니 CA 결과를 다시 받았다. 4달전에 비해서 많이 성장했다고 느꼈다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># import sys</span>
</span><span class="code-line"><span class="token comment"># import heapq</span>
</span><span class="code-line"><span class="token comment"># input = sys.stdin.readline</span>
</span><span class="code-line"><span class="token comment"># INF = sys.maxsize</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># def dijkstra(graph, s): # 그래프와 시작점</span>
</span><span class="code-line"><span class="token comment">#     q = []</span>
</span><span class="code-line"><span class="token comment">#     heapq.heappush(q, [0, s]) # 리스트 q에 [가중치, 도착지]와 같은 형태로 사용</span>
</span><span class="code-line"><span class="token comment">#     dist = [INF for _ in range(len(graph))] # 각 도착지까지의 최소 거리를 저장할 리스트</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     while q:</span>
</span><span class="code-line"><span class="token comment">#         weight, here = heapq.heappop(q)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#         if weight > dist[here]: # 현재 가중치가 저장돼 있는 가중치보다 클 시</span>
</span><span class="code-line"><span class="token comment">#             continue</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#         for there, next_weight in graph[here].items():</span>
</span><span class="code-line"><span class="token comment">#             # 그래프는 [{}, {도착지: 가중치, 도착지1: 가중치1}]과 같이 저장</span>
</span><span class="code-line"><span class="token comment">#             next = weight + next_weight # 현재 가중치와 그래프에 저장된 가중치를 더함</span>
</span><span class="code-line"><span class="token comment">#             dist[there] = min(dist[there], next) # 저장돼 있는 것과 비교하여 저장</span>
</span><span class="code-line"><span class="token comment">#             heapq.heappush(q, [next, there]) # 리스트 q에 [다음 가중치, 다음 도착지]를 힙 연산을 통해 넣음</span>
</span><span class="code-line"><span class="token comment">#     return dist</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># n = int(input())</span>
</span><span class="code-line"><span class="token comment"># m = int(input())</span>
</span><span class="code-line"><span class="token comment"># graph = [{} for _ in range(n+1)]</span>
</span><span class="code-line"><span class="token comment"># for _ in range(m):</span>
</span><span class="code-line"><span class="token comment">#     u, v, w = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment">#     # 출발지, 도착지가 같을 때 더욱 작은 값을 저장</span>
</span><span class="code-line"><span class="token comment">#     if v in graph[u]:</span>
</span><span class="code-line"><span class="token comment">#         graph[u][v] = min(w, graph[u][v])</span>
</span><span class="code-line"><span class="token comment">#     else:</span>
</span><span class="code-line"><span class="token comment">#         graph[u][v] = w</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># start, end = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment"># print(dijkstra(graph, start)[end])</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">INF <span class="token operator">=</span> sys<span class="token punctuation">.</span>maxsize
</span><span class="code-line"><span class="token keyword">import</span> heapq
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    dist <span class="token operator">=</span> <span class="token punctuation">[</span>INF <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    dist<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    q <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">    heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> start<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">        now_weight<span class="token punctuation">,</span> now <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>q<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">if</span> dist<span class="token punctuation">[</span>now<span class="token punctuation">]</span> <span class="token operator">&#x3C;</span> now_weight<span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">continue</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">for</span> <span class="token builtin">next</span><span class="token punctuation">,</span> weight <span class="token keyword">in</span> graph<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            next_weight <span class="token operator">=</span> now_weight <span class="token operator">+</span> weight
</span><span class="code-line">            <span class="token keyword">if</span> dist<span class="token punctuation">[</span><span class="token builtin">next</span><span class="token punctuation">]</span> <span class="token operator">></span> next_weight<span class="token punctuation">:</span>
</span><span class="code-line">                heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token punctuation">[</span>next_weight<span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">                dist<span class="token punctuation">[</span><span class="token builtin">next</span><span class="token punctuation">]</span> <span class="token operator">=</span> next_weight
</span><span class="code-line">    <span class="token keyword">return</span> dist
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">m <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">{</span>i<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    s<span class="token punctuation">,</span> e<span class="token punctuation">,</span> w <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    graph<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>e<span class="token punctuation">,</span> w<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">start<span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">dist <span class="token operator">=</span> dijkstra<span class="token punctuation">(</span>start<span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-15657 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-15657-Python</link>
    <pubDate>2020-10-31</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-15657-Python</guid>
    <description>
    <![CDATA[BOJ-15657-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>백트래킹 문제. n개의 자연수들을 같은 수를 여러 번 골라도 되며, 비내림차순으로 정렬된 길이가 m인 수열들을 출력하는 문제. 입력되는 자연수들을 sorted를 사용하여 정렬 후 배열의 마지막 값과 비교하여 배열에 추가하는 연산을 재귀적으로 활용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">sys<span class="token punctuation">.</span>setrecursionlimit<span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">9</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">bt</span><span class="token punctuation">(</span>depth<span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> depth <span class="token operator">==</span> m<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span>ans<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">return</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> l<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> ans<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&#x3C;=</span> i<span class="token punctuation">:</span>
</span><span class="code-line">            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</span><span class="code-line">            bt<span class="token punctuation">(</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span>
</span><span class="code-line">            ans<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">bt<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1167 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1167-Python</link>
    <pubDate>2020-10-30</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1167-Python</guid>
    <description>
    <![CDATA[BOJ-1167-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>위와 같이 '트리의 지름'을 구하는 문제. 다른 점은 트리를 입력받을 때 '시작점 도착지1 거리1 도착지2 거리2 -1'과 같은 형태로 입력되는 것 이다. 입력되는 줄을 1부터 길이-1까지 2칸씩 진행하여 {시작점: [[도착지, 거리], [도착지1, 거리1]]}과 같은 형태로 저장하였다. 트리를 이동하는 연산은 <a href="../master/python/BOJ_1967.py">위 문제</a>와 동일하게 풀었다. 자세한 풀이는 위 문제의 주석에 설명해 놓았다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    q <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>start<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    visit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>graph<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    visit<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">    max_value <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    max_node <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">        node<span class="token punctuation">,</span> weight <span class="token operator">=</span> q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">if</span> max_value <span class="token operator">&#x3C;</span> weight<span class="token punctuation">:</span>
</span><span class="code-line">            max_value <span class="token operator">=</span> weight
</span><span class="code-line">            max_node <span class="token operator">=</span> node
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">for</span> <span class="token builtin">next</span> <span class="token keyword">in</span> graph<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> <span class="token keyword">not</span> visit<span class="token punctuation">[</span><span class="token builtin">next</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">                visit<span class="token punctuation">[</span><span class="token builtin">next</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">                q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">next</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> weight <span class="token operator">+</span> <span class="token builtin">next</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> max_node<span class="token punctuation">,</span> max_value
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    l <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    start <span class="token operator">=</span> l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> start <span class="token keyword">not</span> <span class="token keyword">in</span> graph<span class="token punctuation">:</span>
</span><span class="code-line">            graph<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> l<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">            graph<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> l<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">mn<span class="token punctuation">,</span> mv <span class="token operator">=</span> dijkstra<span class="token punctuation">(</span>graph<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>dijkstra<span class="token punctuation">(</span>graph<span class="token punctuation">,</span> mn<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1967 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1967-Python</link>
    <pubDate>2020-10-30</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1967-Python</guid>
    <description>
    <![CDATA[BOJ-1967-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>노드의 수 n과 n-1만큼의 '출발지 도착지 거리'를 입력 받는다. 이 때 노드와 노드의 거리가 최대인 일명 '트리의 지름'을 출력하는 문제. 첫번째 풀이는 힙을 사용할 때 '-가중치'하여 max 힙을 이용하여 루트 1부터 모든 노드까지의 거리를 이용할려 했으나 다시 처음부터 풀기로 하였다. 두번째 풀이는 큐를 이용하여 시작 노드부터 다른 모든 노드들까지의 최대 거리와 최대 거리를 갖는 노드를 반환하는 함수를 작성하여 위 함수를 두번 호출하여 풀었다. 자세한 풀이는 주석에 설명해 놓았다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># import sys</span>
</span><span class="code-line"><span class="token comment"># import heapq</span>
</span><span class="code-line"><span class="token comment"># INF = sys.maxsize</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># 다익스트라를 이용하여 1번 노드부터 각 노드까지 가는 거리 중 최대 값을 반환</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># def dijkstra(graph):</span>
</span><span class="code-line"><span class="token comment">#     q = []</span>
</span><span class="code-line"><span class="token comment">#     dist = [0 for _ in range(len(graph))]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     max_val = 0</span>
</span><span class="code-line"><span class="token comment">#     max_index = 0</span>
</span><span class="code-line"><span class="token comment">#     heapq.heappush(q, [0, 0, 1])</span>
</span><span class="code-line"><span class="token comment">#     while q:</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token comment"># 거리에 -을 붙여 max heapq으로 사용</span>
</span><span class="code-line"><span class="token comment">#         reverse_weight, weight, here = heapq.heappop(q)</span>
</span><span class="code-line"><span class="token comment">#         for there, next_weight in graph[here].items():</span>
</span><span class="code-line"><span class="token comment">#             total_weight = next_weight + weight</span>
</span><span class="code-line"><span class="token comment">#             # dist[there] = max(total_weight, dist[there])</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#             temp_max = max(total_weight, dist[there])</span>
</span><span class="code-line"><span class="token comment">#             if max_val &#x3C; temp_max:</span>
</span><span class="code-line"><span class="token comment">#                 max_val = temp_max</span>
</span><span class="code-line"><span class="token comment">#                 max_index = there</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#             heapq.heappush(q, [-total_weight, total_weight, there])</span>
</span><span class="code-line"><span class="token comment">#     return max_index</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># 최대 거리를 갖는 노드를 기준으로 계산하는 함수를 작성할려 했으나</span>
</span><span class="code-line"><span class="token comment"># 처음부터 다시 풀기로 함</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># def diameter(graph, k):</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># n = int(input())</span>
</span><span class="code-line"><span class="token comment"># graph = [{} for _ in range(n+1)]</span>
</span><span class="code-line"><span class="token comment"># for _ in range(n-1):</span>
</span><span class="code-line"><span class="token comment">#     u, v, w = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment">#     if v in graph[u]:</span>
</span><span class="code-line"><span class="token comment">#         graph[u][v] = max(graph[u][v], w)</span>
</span><span class="code-line"><span class="token comment">#     else:</span>
</span><span class="code-line"><span class="token comment">#         graph[u][v] = w</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># print(graph)</span>
</span><span class="code-line"><span class="token comment"># print(dijkstra(graph))</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># 2번쨰 풀이</span>
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># {1: [[2, 3], [3, 2]], 2: [[4, 2]]}</span>
</span><span class="code-line"><span class="token comment"># {시작점: [[도착지, 거리], [도착지1, 거리1]]}과 같이 그래프 저장</span>
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    q <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>start<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 시작점과 거리 0을 큐에 삼입</span>
</span><span class="code-line">    visit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>graph<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment"># 방문 확인을 위한 리스트</span>
</span><span class="code-line">    visit<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span> <span class="token comment"># 시작점 방문 확인 처리</span>
</span><span class="code-line">    max_value <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment"># 최대 값을 저장할 변수</span>
</span><span class="code-line">    max_node <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment"># 최대 값을 갖는 노드를 저장할 변수</span>
</span><span class="code-line">    <span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">        node<span class="token punctuation">,</span> weight <span class="token operator">=</span> q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">if</span> max_value <span class="token operator">&#x3C;</span> weight<span class="token punctuation">:</span> <span class="token comment"># 최대값 갱신 시</span>
</span><span class="code-line">            max_value <span class="token operator">=</span> weight
</span><span class="code-line">            max_node <span class="token operator">=</span> node
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">for</span> next_node <span class="token keyword">in</span> graph<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment"># next_node = [노드, 거리]</span>
</span><span class="code-line">            <span class="token keyword">if</span> <span class="token keyword">not</span> visit<span class="token punctuation">[</span>next_node<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment"># 방문한 적이 없는 노드일 때</span>
</span><span class="code-line">                visit<span class="token punctuation">[</span>next_node<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span> <span class="token comment"># 방문 처리</span>
</span><span class="code-line">                <span class="token comment"># 현재 보유 거리와 다음 노드까지의 거리를 합산하여 큐에 추가</span>
</span><span class="code-line">                q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>next_node<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> weight <span class="token operator">+</span> next_node<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token comment"># 최대 값을 갖는 노드와 최대 값을 반환</span>
</span><span class="code-line">    <span class="token keyword">return</span> max_node<span class="token punctuation">,</span> max_value
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># 노드의 수가 1일 때 정답은 0</span>
</span><span class="code-line"><span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line">    exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token comment"># 쌍방향으로 저장</span>
</span><span class="code-line">    <span class="token keyword">if</span> u <span class="token keyword">not</span> <span class="token keyword">in</span> graph<span class="token punctuation">:</span>
</span><span class="code-line">        graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>v<span class="token punctuation">,</span> w<span class="token punctuation">]</span><span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>v<span class="token punctuation">,</span> w<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> v <span class="token keyword">not</span> <span class="token keyword">in</span> graph<span class="token punctuation">:</span>
</span><span class="code-line">        graph<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>u<span class="token punctuation">,</span> w<span class="token punctuation">]</span><span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        graph<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>u<span class="token punctuation">,</span> w<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># 루트 1부터 시작 했을 때 최대 값과 그 노드를 저장</span>
</span><span class="code-line">mn<span class="token punctuation">,</span> mv <span class="token operator">=</span> dijkstra<span class="token punctuation">(</span>graph<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token comment"># 최대 값을 갖는 노드부터 시작하여 최대 값을 출력</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>dijkstra<span class="token punctuation">(</span>graph<span class="token punctuation">,</span> mn<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1446 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1446-Python</link>
    <pubDate>2020-10-29</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1446-Python</guid>
    <description>
    <![CDATA[BOJ-1446-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>다익스트라 문제인 줄 알았던 다이내믹 프로그래밍 문제. 지름길의 수 n과 도착지의 거리 d가 주어진다. 그 후 u, v, w 각각 시작점, 도착점, 소모시간이 주어진다. 뒤로 돌아갈 순 없을 때 도착지까지 걸리는 최소 소모시간을 출력하는 문제. 지름길을 {시작점: [[도착지, 소모시간], [도착지1, 소모시간1]]} 형태로 저장하였다. d의 최대 크기인 10000까지의 배열을 생성 후 입력된 정수현 변수 count가 d와 같을 때까지 반복을 수행한다. 그 후 현재 count가 시작점인 지름길이 있을 때 도착지의 값을 현재 값과 소모시간 값을 더한 것과 현재 저장된 값 중 작은 것을 할당한다. 그 후 배열의 다음 값을 저장된 값고 현재 값 + 1중 작은 것을 할당하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># import sys</span>
</span><span class="code-line"><span class="token comment"># input = sys.stdin.readline</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># def dijkstra(graph, d):</span>
</span><span class="code-line"><span class="token comment">#     total = [i for i in range(d+1)]</span>
</span><span class="code-line"><span class="token comment">#     count = 0</span>
</span><span class="code-line"><span class="token comment">#     value = 0</span>
</span><span class="code-line"><span class="token comment">#     while count &#x3C;= d:</span>
</span><span class="code-line"><span class="token comment">#         if count in graph:</span>
</span><span class="code-line"><span class="token comment">#             for short in graph[count]:</span>
</span><span class="code-line"><span class="token comment">#                 total[short[0]] = min(total[short[0]], short[1] + total[count])</span>
</span><span class="code-line"><span class="token comment">#         else:</span>
</span><span class="code-line"><span class="token comment">#             value = min(total[count], value)</span>
</span><span class="code-line"><span class="token comment">#             total[count] = value</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#         value += 1</span>
</span><span class="code-line"><span class="token comment">#         count += 1</span>
</span><span class="code-line"><span class="token comment">#     return total</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># n, d = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment"># graph = {}</span>
</span><span class="code-line"><span class="token comment"># for _ in range(n):</span>
</span><span class="code-line"><span class="token comment">#     u, v, w = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment">#     if d >= v and v-u > w: # 지름길을 이용할 필요가 없을 때</span>
</span><span class="code-line"><span class="token comment">#         if u in graph:</span>
</span><span class="code-line"><span class="token comment">#             graph[u].append([v, w])</span>
</span><span class="code-line"><span class="token comment">#         else:</span>
</span><span class="code-line"><span class="token comment">#             graph[u] = [[v, w]]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># total = dijkstra(graph, d)</span>
</span><span class="code-line"><span class="token comment"># print(total[d])</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">dp</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    l <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    count <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    value <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    <span class="token keyword">while</span> count <span class="token operator">&#x3C;=</span> d<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> value <span class="token keyword">in</span> graph<span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">for</span> short_cut <span class="token keyword">in</span> graph<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">                l<span class="token punctuation">[</span>short_cut<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span>short_cut<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> short_cut<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> l<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">        l<span class="token punctuation">[</span>value<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span>value<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> l<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">        value <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">        count <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">    <span class="token keyword">return</span> l
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> d <span class="token operator">>=</span> v <span class="token keyword">and</span> v <span class="token operator">-</span> u <span class="token operator">></span> w<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> u <span class="token keyword">in</span> graph<span class="token punctuation">:</span>
</span><span class="code-line">            graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>v<span class="token punctuation">,</span> w<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">            graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>v<span class="token punctuation">,</span> w<span class="token punctuation">]</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">l <span class="token operator">=</span> dp<span class="token punctuation">(</span>graph<span class="token punctuation">,</span> d<span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1753 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1753-Python</link>
    <pubDate>2020-10-28</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1753-Python</guid>
    <description>
    <![CDATA[BOJ-1753-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>정점의 개수 v, 간선의 개수 e, 시작 정점 k를 입력받은 후 각 '출발지 도착지 거리'를 u, v, w로 입력받은 후 1부터 v까지 모든 정점을 가는 데 걸리는 최단 경로 값을 출력하는 다익스트라 문제. graph[출발지] = {도착지: 거리, 도착지1: 거리}와 같이 입력받아 사용하였다. 두 풀이 모두 힙을 사용하여 최소 거리를 먼저 연산하였다. 첫번째 풀이는 큐에 [거리, 도착지, 출발지]와 같이 넣어 출발지가 시작 노드가 아닐 때 dist[출발지] 값과 거리를 계산하여 넣어 풀었으나 시간초과 결과를 받게 되었다. 두번째 풀이는 큐에 넣는 연산을 하는 반복문에서 dist에 값을 할당하여 풀었다. 자세한 풀이는 주석에 설명해 놓았다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># import heapq</span>
</span><span class="code-line"><span class="token comment"># import sys</span>
</span><span class="code-line"><span class="token comment"># input = sys.stdin.readline</span>
</span><span class="code-line"><span class="token comment"># INF = sys.maxsize</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># def dijkstra(k, graph):</span>
</span><span class="code-line"><span class="token comment">#     dist = [INF for _ in range(len(graph))]</span>
</span><span class="code-line"><span class="token comment">#     q = []</span>
</span><span class="code-line"><span class="token comment">#     heapq.heappush(q, [0, k, k])</span>
</span><span class="code-line"><span class="token comment">#     weight = 0</span>
</span><span class="code-line"><span class="token comment">#     while q:</span>
</span><span class="code-line"><span class="token comment">#         weight, here, start = heapq.heappop(q)</span>
</span><span class="code-line"><span class="token comment">#         if start == k:</span>
</span><span class="code-line"><span class="token comment">#             dist[here] = min(dist[here], weight)</span>
</span><span class="code-line"><span class="token comment">#         else:</span>
</span><span class="code-line"><span class="token comment">#             dist[here] = min(dist[here], weight + dist[start])</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#         for there, distance in graph[here].items():</span>
</span><span class="code-line"><span class="token comment">#             heapq.heappush(q, [distance, there, here])</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     return dist</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># v, e = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment"># graph = [{} for _ in range(v+1)]</span>
</span><span class="code-line"><span class="token comment"># k = int(input())</span>
</span><span class="code-line"><span class="token comment"># for _ in range(e):</span>
</span><span class="code-line"><span class="token comment">#     u, v, w = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment">#     if v in graph[u]:</span>
</span><span class="code-line"><span class="token comment">#         graph[u][v] = min(w, graph[u][v])</span>
</span><span class="code-line"><span class="token comment">#     else:</span>
</span><span class="code-line"><span class="token comment">#         graph[u][v] = w</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># dist = dijkstra(k, graph)</span>
</span><span class="code-line"><span class="token comment"># for i in dist[1:]:</span>
</span><span class="code-line"><span class="token comment">#     print(i if i != INF else 'INF')</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">import</span> heapq <span class="token comment"># 거리가 짧은 순으로 계산해야하기 때문에 힙 사용</span>
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">INF <span class="token operator">=</span> sys<span class="token punctuation">.</span>maxsize
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> graph<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token comment"># 노드의 수 + 1 만큼 최대 크기로 이루어진 거리를 저장할 리스트</span>
</span><span class="code-line">    dist <span class="token operator">=</span> <span class="token punctuation">[</span>INF <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>graph<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token comment"># 시작 노드의 거리는 0으로</span>
</span><span class="code-line">    dist<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line">    q <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token comment"># 거리, 행선지 순으로 리스트에 힙 연산으로 push</span>
</span><span class="code-line">    heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> k<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token comment"># 거리 weight, 행선지 here을 힙 연산으로 pop</span>
</span><span class="code-line">        weight<span class="token punctuation">,</span> here <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>q<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token comment"># graph[행선지] = {도착지: 거리} 순으로 저장돼 있음</span>
</span><span class="code-line">        <span class="token keyword">for</span> there<span class="token punctuation">,</span> distance <span class="token keyword">in</span> graph<span class="token punctuation">[</span>here<span class="token punctuation">]</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token comment"># 다음 간선까지 길이는 현재 길이 + 저장된 거리</span>
</span><span class="code-line">            next_dist <span class="token operator">=</span> distance <span class="token operator">+</span> weight
</span><span class="code-line">
</span><span class="code-line">            <span class="token comment"># 현재 dist에 저장된 거리보다 작을 시</span>
</span><span class="code-line">            <span class="token keyword">if</span> dist<span class="token punctuation">[</span>there<span class="token punctuation">]</span> <span class="token operator">></span> next_dist<span class="token punctuation">:</span>
</span><span class="code-line">                <span class="token comment"># 저장 후 [거리, 행선지]를 리스트에 힙 연산으로 push</span>
</span><span class="code-line">                dist<span class="token punctuation">[</span>there<span class="token punctuation">]</span> <span class="token operator">=</span> next_dist
</span><span class="code-line">                heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token punctuation">[</span>next_dist<span class="token punctuation">,</span> there<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> dist
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">v<span class="token punctuation">,</span> e <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token comment"># graph[출발지] = {도착지: 거리, 도착지1: 거리1}</span>
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>v<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">k <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> v <span class="token keyword">in</span> graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">        graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> w
</span><span class="code-line">
</span><span class="code-line">dist <span class="token operator">=</span> dijkstra<span class="token punctuation">(</span>k<span class="token punctuation">,</span> graph<span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> dist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>i <span class="token keyword">if</span> i <span class="token operator">!=</span> INF <span class="token keyword">else</span> <span class="token string">'INF'</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-11659 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-11659-Python</link>
    <pubDate>2020-10-27</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-11659-Python</guid>
    <description>
    <![CDATA[BOJ-11659-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n과 m을 입력받은 후 n만큼의 크기의 일차원 배열을 입력받는다. 그 후 m번만큼 인덱스 i, j까지의 합을 출력하는 문제. 완전 탐색을 사용하여 풀 경우 시간초과 결과를 받게되어 누적합을 이용하여 풀었다. l_add 리스트에 n만큼 반복을 하는 i를 이용하여 l_add의 마지막 값과 입력받은 일차원 배열의 i번째 값을 더하여 누적합 리스트를 구현했다. i가 1일 때 누적합 리스트의 j번째 요소를 출력, 아닐 때 누적합 리스트의 j번째 값에 i-1째 값을 빼 출력하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l_add <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span> l_add<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l_add<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>l_add<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">else</span> l_add<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> l_add<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-11660 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-11660-Python</link>
    <pubDate>2020-10-27</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-11660-Python</guid>
    <description>
    <![CDATA[BOJ-11660-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n과 m을 입력받은 후 n*n의 크기의 이차원 배열을 입력받는다. 그 후 m번만큼 (y1, x1), (y2, x2)의 합을 구하는 문제. 완전 탐색을 사용하여 풀 경우 시간초과 결과를 받게되어 누적합을 이용하여 풀었다. n을 이용하여 2중 반복문을 수행하며 열마다 누적합 리스트를 만들었다. 그 후 y1-1부터 y2까지 반복하여 정수형 변수 ans에 누적합 결과를 더한 후 출력하여 풀었다. 2차원 누적합을 공부 및 구현할 필요를 느꼈다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># import sys</span>
</span><span class="code-line"><span class="token comment"># input = sys.stdin.readline</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># n, m = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment"># l = []</span>
</span><span class="code-line"><span class="token comment"># for _ in range(n):</span>
</span><span class="code-line"><span class="token comment">#     l.append(list(map(int, input().split())))</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># for _ in range(m):</span>
</span><span class="code-line"><span class="token comment">#     ans = 0</span>
</span><span class="code-line"><span class="token comment">#     y1, x1, y2, x2 = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment">#     for y in range(y1-1, y2):</span>
</span><span class="code-line"><span class="token comment">#         for x in range(x1-1, x2):</span>
</span><span class="code-line"><span class="token comment">#             ans += l[y][x]</span>
</span><span class="code-line"><span class="token comment">#     print(ans)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># O(n^2)라 시간초과</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">l_add <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># 2차원 배열 입력</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span> l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># 누적합 계산</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        l_add<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>l_add<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    y1<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> x2 <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    ans <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>y1<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> y2<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        ans <span class="token operator">+=</span> l_add<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>x2<span class="token punctuation">]</span> <span class="token keyword">if</span> x1 <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">else</span> l_add<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>x2<span class="token punctuation">]</span> <span class="token operator">-</span> l_add<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>x1<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1991 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1991-Python</link>
    <pubDate>2020-10-27</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1991-Python</guid>
    <description>
    <![CDATA[BOJ-1991-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>이진 트리를 '부모 왼쪽자식 오른쪽자식' 형태의 문자열로 입력받은 후 전위, 중위, 후위 순회한 결과값을 출력하는 문제. 딕셔너리 형태로 graph[부모] = [왼쪽자식, 오른쪽자식] 형태로 저장했다. 모든 순회는 재귀형식으로 작동하며 전위 순회는 출력 후 왼쪽, 오른쪽자식 순으로 재귀적으로 호출. 중위는 왼쪽 자식 호출 후 출력, 오른쪽 자식 호출. 후위는 왼쪽, 오른쪽 자식 호출 후 출력하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">sys<span class="token punctuation">.</span>setrecursionlimit<span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">9</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">front</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> graph<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> root <span class="token keyword">in</span> graph<span class="token punctuation">:</span>
</span><span class="code-line">        l<span class="token punctuation">,</span> r <span class="token operator">=</span> graph<span class="token punctuation">[</span>root<span class="token punctuation">]</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>
</span><span class="code-line">        front<span class="token punctuation">(</span>l<span class="token punctuation">,</span> graph<span class="token punctuation">)</span>
</span><span class="code-line">        front<span class="token punctuation">(</span>r<span class="token punctuation">,</span> graph<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">return</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">middle</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> graph<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> root <span class="token keyword">in</span> graph<span class="token punctuation">:</span>
</span><span class="code-line">        l<span class="token punctuation">,</span> r <span class="token operator">=</span> graph<span class="token punctuation">[</span>root<span class="token punctuation">]</span>
</span><span class="code-line">        middle<span class="token punctuation">(</span>l<span class="token punctuation">,</span> graph<span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>
</span><span class="code-line">        middle<span class="token punctuation">(</span>r<span class="token punctuation">,</span> graph<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">return</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">last</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> graph<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> root <span class="token keyword">in</span> graph<span class="token punctuation">:</span>
</span><span class="code-line">        l<span class="token punctuation">,</span> r <span class="token operator">=</span> graph<span class="token punctuation">[</span>root<span class="token punctuation">]</span>
</span><span class="code-line">        last<span class="token punctuation">(</span>l<span class="token punctuation">,</span> graph<span class="token punctuation">)</span>
</span><span class="code-line">        last<span class="token punctuation">(</span>r<span class="token punctuation">,</span> graph<span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">return</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    d<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">    graph<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>l<span class="token punctuation">,</span> r<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">front<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> graph<span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">middle<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> graph<span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">last<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> graph<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-12865 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-12865-Python</link>
    <pubDate>2020-10-26</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-12865-Python</guid>
    <description>
    <![CDATA[BOJ-12865-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>정해진 무게 한도에 맞춰서 최대의 가치를 출력하는 배낭, 다이내믹 프로그래밍 문제. [물건의 수][무게의 크기] 만큼 배열을 만든 후 물건 > 무게순으로 반복을 수행한다. 그 후 현재 반복중인 무게에 따라 넣을 수 없으면 같은 무게, 저번 반복 배열 값을 할당. '들 수 있으면 같은 무게, 저번 반복' 값과 '현재 물건의 가치 + 저번 물건의 현재 반복 무게 - 현재 물건의 무게 배열' 값 중 큰 것을 할당하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">w_v <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    w_v<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        w <span class="token operator">=</span> w_v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment"># 무게</span>
</span><span class="code-line">        v <span class="token operator">=</span> w_v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment"># 가치</span>
</span><span class="code-line">        <span class="token keyword">if</span> j <span class="token operator">&#x3C;</span> w<span class="token punctuation">:</span> <span class="token comment"># 들 수 없으면 ?</span>
</span><span class="code-line">            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token comment"># 같은 무게, 저번 반복된 물건의 값</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment"># 들 수 있다면?</span>
</span><span class="code-line">            <span class="token comment"># 같은 무게, 저번 반복된 물건의 값과</span>
</span><span class="code-line">            <span class="token comment"># 현재 물건의 가치 + 저번 반복된 물건의 현재 반복된 무게 - 현재 물건의 무게의 값을 더한 값을</span>
</span><span class="code-line">            <span class="token comment"># 비교해서 더욱 큰 것을 배열에 할당</span>
</span><span class="code-line">            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> v <span class="token operator">+</span> ans<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-10995 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-10995-Python</link>
    <pubDate>2020-10-25</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-10995-Python</guid>
    <description>
    <![CDATA[BOJ-10995-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>별 찍기 문제. 열에 따라 ' *'와 '* '을 나누어 곱한 값을 출력하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># n = int(input())</span>
</span><span class="code-line"><span class="token comment"># for i in range(n):</span>
</span><span class="code-line"><span class="token comment">#     print('* '*n if i % 2 == 0 else " *"*n)</span>
</span><span class="code-line">
</span><span class="code-line">n<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token punctuation">[</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'* '</span><span class="token operator">*</span>n <span class="token keyword">if</span> i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">else</span> <span class="token string">" *"</span><span class="token operator">*</span>n<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1932 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1932-Python</link>
    <pubDate>2020-10-25</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1932-Python</guid>
    <description>
    <![CDATA[BOJ-1932-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>다이내믹 프로그래밍 문제. n개의 층으로 이루어진 삼각형을 입력받은 후. 맨 위층부터 시작해서 아래에 있는 수 중 하나를 선택하여 아래층으로 내려올 때, 이제까지 선택된 수의 합의 최대를 출력하는 문제. 아래층에 있는 수는 현재 층에서 선택된 수의 대각선 왼쪽 또는 대각선 오른쪽에 있는 것 중에서만 선택할 수 있는 조건이 있다. 0~n층까지 i라고 했을 때. 각 층은 i+1개의 요소로 이루어져 있는 것을 이용하여 [i-1][j]에 [i][j]와 [i][j+1] 중 큰 것을 더하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        l<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-13549 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-13549-Python</link>
    <pubDate>2020-10-23</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-13549-Python</guid>
    <description>
    <![CDATA[BOJ-13549-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p><a href="../master/python/BOJ_1697.py">BOJ 1697</a>의 변형 문제. 기존 좌표 x*2에는 1초가 추가됐으나 이번 문제에서는 초가 추가되지 않는다. 문제에서 n이 k의 좌표까지 가는 가장 빠른 시간을 요구하기 때문에 queue에 추가할 때 왼쪽에 추가하여 우선도를 높여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">q <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">visit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">100001</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">    loca<span class="token punctuation">,</span> sec <span class="token operator">=</span> q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> loca <span class="token operator">==</span> k<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span>sec<span class="token punctuation">)</span>
</span><span class="code-line">        exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">if</span> <span class="token keyword">not</span> visit<span class="token punctuation">[</span>loca<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">        visit<span class="token punctuation">[</span>loca<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">        t <span class="token operator">=</span> <span class="token punctuation">[</span>loca<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> loca<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> loca<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&#x3C;=</span> <span class="token number">100000</span><span class="token punctuation">:</span>
</span><span class="code-line">            q<span class="token punctuation">.</span>appendleft<span class="token punctuation">(</span><span class="token punctuation">[</span>loca<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> sec<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&#x3C;=</span> <span class="token number">100000</span><span class="token punctuation">:</span>
</span><span class="code-line">            q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>loca<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> sec<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&#x3C;=</span> <span class="token number">100000</span><span class="token punctuation">:</span>
</span><span class="code-line">            q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>loca<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> sec<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># from collections import deque</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># def f(n, k):</span>
</span><span class="code-line"><span class="token comment">#     q = deque([[n, 0]])</span>
</span><span class="code-line"><span class="token comment">#     while q:</span>
</span><span class="code-line"><span class="token comment">#         loca, sec = q.popleft()</span>
</span><span class="code-line"><span class="token comment">#         if loca == k:</span>
</span><span class="code-line"><span class="token comment">#             return sec</span>
</span><span class="code-line"><span class="token comment">#         for i in [loca*2, loca+1, loca-1]:</span>
</span><span class="code-line"><span class="token comment">#             if 0 &#x3C;= i &#x3C;= 100000 and not visit[i]:</span>
</span><span class="code-line"><span class="token comment">#                 if i == loca*2 and i != 0:</span>
</span><span class="code-line"><span class="token comment">#                     q.appendleft([i, sec])</span>
</span><span class="code-line"><span class="token comment">#                 else:</span>
</span><span class="code-line"><span class="token comment">#                     q.append([i, sec+1])</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># n, k = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment"># visit = [False] * 100001</span>
</span><span class="code-line"><span class="token comment"># print(f(n, k))</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-11725 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-11725-Python</link>
    <pubDate>2020-10-22</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-11725-Python</guid>
    <description>
    <![CDATA[BOJ-11725-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>그래프의 루트가 1일 때 n개의 노드들을 입력받은 후 2번째 노드부터 부모 노드를 출력하는 문제. n의 길이만큼 0으로 이루어진 리스트를 만든 후 노드를 쌍방향으로 저정한다. 자식 노드를 찾고 리스트의 해당 자식 노드 -1 인덱스의 값이 0일 때 현재 노드의 값을 저장하는 함수를 만들고 재귀적으로 호출한다. 리스트의 2번째 인자부터 출력하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line">sys<span class="token punctuation">.</span>setrecursionlimit<span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">**</span><span class="token number">9</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> x <span class="token keyword">in</span> graph<span class="token punctuation">:</span>
</span><span class="code-line">        graph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>y<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        graph<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>y<span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">if</span> y <span class="token keyword">in</span> graph<span class="token punctuation">:</span>
</span><span class="code-line">        graph<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        graph<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">fp</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> graph<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> l<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">            l<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> n
</span><span class="code-line">            fp<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</span><span class="code-line">fp<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token punctuation">[</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1225 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1225-Python</link>
    <pubDate>2020-10-21</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1225-Python</guid>
    <description>
    <![CDATA[BOJ-1225-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>12 과 34가 입력 됐을 때, 1x3 + 1x4 + 2x3 + 2x4처럼 두 수의 각 자리수를 곱하여 더한 값을 출력하는 문제. 0을 replace로 없애 시간을 줄였으며 그 후 이중반복문을 이용하여 계산하였다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ans <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">n <span class="token operator">=</span> n<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>
</span><span class="code-line">m <span class="token operator">=</span> m<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> n<span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> j <span class="token keyword">in</span> m<span class="token punctuation">:</span>
</span><span class="code-line">        ans <span class="token operator">+=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-14425 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-14425-Python</link>
    <pubDate>2020-10-21</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-14425-Python</guid>
    <description>
    <![CDATA[BOJ-14425-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>정수 i와 j를 입력받은 후 j개의 문자열 중에 i개의 문자열에 몇 개 있는지 출력하는 문제. i개의 문자열을 중복되지 않고 리스트보다 찾을 때 빠른 집합 자료형을 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line">s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">in</span> s<span class="token punctuation">:</span>
</span><span class="code-line">        ans <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2083 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2083-Python</link>
    <pubDate>2020-10-21</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2083-Python</guid>
    <description>
    <![CDATA[BOJ-2083-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>이름과 키, 몸무게가 입력됐을 때 조건에 맞게 고급반, 초급반을 나누어 출력하는 문제. map과 비교 연산자를 이용하여 간단히 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
</span><span class="code-line">    n<span class="token punctuation">,</span> a<span class="token punctuation">,</span> w <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">    a<span class="token punctuation">,</span> w <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> w<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token string">'#'</span><span class="token punctuation">:</span> <span class="token keyword">break</span>
</span><span class="code-line">    <span class="token keyword">elif</span> a <span class="token operator">></span> <span class="token number">17</span> <span class="token keyword">or</span> w <span class="token operator">>=</span> <span class="token number">80</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token string">'Senior'</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token string">'Junior'</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2522 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2522-Python</link>
    <pubDate>2020-10-21</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2522-Python</guid>
    <description>
    <![CDATA[BOJ-2522-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>별찍기 문제. 3이 입력됐을 때 공백2개 별 1개, 공백 1개 별 2개, 별 3개, 그리고 다시 공백 2개 별 1개까지 찍으면 되는 문제. -n부터 n까지 반복문을 작성하고 절댓값을 사용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token operator">-</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" "</span> <span class="token operator">*</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*"</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token builtin">abs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-9663 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-9663-Python</link>
    <pubDate>2020-10-20</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-9663-Python</guid>
    <description>
    <![CDATA[BOJ-9663-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>[n][n] 크기의 체스판에서 n개의 퀸이 있을 때 서로 공격할 수 없는 자리의 경우의 수를 출력하는 문제. 첫 풀이는 False로 이루어진 2차원 배열을 사용하였다. 2중 반복문을 수행하고 False일 때 해당하는 상하좌우와 대각선을 체크해주는 함수를 만들어 값을 변환시킨 후 재귀적으로 호출하였다. 하지만 이 방법은 성공한 풀이가 되지 못했다. 값을 false로 바꿀 때 현재 반복중인 퀸이 체크한 부분만 false를 해야하는데 해당 방법을 해결하지 못했다. 두번째 풀이는 좌표를 압축하여 사용할 3가지 1차원 배열을 만들었다. 대각선 배열의 길이는 2*n-1의 수식을 사용하였다. 백트래킹의 기본적인 부분은 똑같으나 n과 비교하는 depth를 하나의 행으로 사용하며 해당 대각선을 계산하는 공식이 나는 유추해내지 못했을 것 같다. 오른쪽 위로 향하는 대각선은 depth + 현재 반복 인자인 i이며 왼쪽 위의 인덱스가 0이다. 오른쪽 아래로 향하는 대각선은 depth - i + n - 1의 수식을 사용하며 오른쪽 위의 인덱스가 0이... 더 열심히 해야겠다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># import sys</span>
</span><span class="code-line"><span class="token comment"># input = sys.stdin.readline</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># n = int(input())</span>
</span><span class="code-line"><span class="token comment"># ans = 0</span>
</span><span class="code-line"><span class="token comment"># l = [[False for _ in range(n)] for _ in range(n)]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># def bt(depth):</span>
</span><span class="code-line"><span class="token comment">#     global ans</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     if n == depth:</span>
</span><span class="code-line"><span class="token comment">#         ans += 1</span>
</span><span class="code-line"><span class="token comment">#         return</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     for i in range(n):</span>
</span><span class="code-line"><span class="token comment">#         for j in range(n):</span>
</span><span class="code-line"><span class="token comment">#             if not l[i][j]:</span>
</span><span class="code-line"><span class="token comment">#                 check_true(l, i, j)</span>
</span><span class="code-line"><span class="token comment">#                 bt(depth+1)</span>
</span><span class="code-line"><span class="token comment">#                 check_false(l, i, j)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># def check_true(l, i, j):</span>
</span><span class="code-line"><span class="token comment">#     for y in range(n): # 직선 체크</span>
</span><span class="code-line"><span class="token comment">#         if 0 &#x3C;= y &#x3C; n:</span>
</span><span class="code-line"><span class="token comment">#             l[y][j] = True</span>
</span><span class="code-line"><span class="token comment">#             l[i][y] = True</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#         if 0 &#x3C;= i-y &#x3C; n and 0 &#x3C;= j-y &#x3C; n:</span>
</span><span class="code-line"><span class="token comment">#             l[i - y][j - y] = True</span>
</span><span class="code-line"><span class="token comment">#         if 0 &#x3C;= i+y &#x3C; n and 0 &#x3C;= j+y &#x3C; n:</span>
</span><span class="code-line"><span class="token comment">#             l[i + y][j + y] = True</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#         if 0 &#x3C;= i-y &#x3C; n and 0 &#x3C;= j+y &#x3C; n:</span>
</span><span class="code-line"><span class="token comment">#             l[i - y][j + y] = True</span>
</span><span class="code-line"><span class="token comment">#         if 0 &#x3C;= i+y &#x3C; n and 0 &#x3C;= j-y &#x3C; n:</span>
</span><span class="code-line"><span class="token comment">#             l[i + y][j - y] = True</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># def check_false(l, i, j):</span>
</span><span class="code-line"><span class="token comment">#     for y in range(n): # 직선 체크</span>
</span><span class="code-line"><span class="token comment">#         if 0 &#x3C;= y &#x3C; n:</span>
</span><span class="code-line"><span class="token comment">#             l[y][j] = False</span>
</span><span class="code-line"><span class="token comment">#             l[i][y] = False</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#         if 0 &#x3C;= i-y &#x3C; n and 0 &#x3C;= j-y &#x3C; n:</span>
</span><span class="code-line"><span class="token comment">#             l[i - y][j - y] = False</span>
</span><span class="code-line"><span class="token comment">#         if 0 &#x3C;= i+y &#x3C; n and 0 &#x3C;= j+y &#x3C; n:</span>
</span><span class="code-line"><span class="token comment">#             l[i + y][j + y] = False</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#         if 0 &#x3C;= i-y &#x3C; n and 0 &#x3C;= j+y &#x3C; n:</span>
</span><span class="code-line"><span class="token comment">#             l[i - y][j + y] = False</span>
</span><span class="code-line"><span class="token comment">#         if 0 &#x3C;= i+y &#x3C; n and 0 &#x3C;= j-y &#x3C;n:</span>
</span><span class="code-line"><span class="token comment">#             l[i + y][j - y] = False</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># bt(0)</span>
</span><span class="code-line"><span class="token comment"># print(ans)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line">st <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> n
</span><span class="code-line"><span class="token comment"># 대각선 좌표를 압축하여 저장하기 위해 최대 길이 설장 ex) 3 = 4, 4 = 6, 5 = 8</span>
</span><span class="code-line">pl <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">mi <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">bt</span><span class="token punctuation">(</span>depth<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">global</span> ans
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">if</span> depth <span class="token operator">==</span> n<span class="token punctuation">:</span>
</span><span class="code-line">        ans <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">        <span class="token keyword">return</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token comment"># pl은 오른쪽 위로 향하는 대각선, 왼쪽 위의 인덱스가 0</span>
</span><span class="code-line">        <span class="token comment"># mi는 오른쪽 아래로 향하는 대각선, 오른쪽 위의 인덱스가 0</span>
</span><span class="code-line">        <span class="token keyword">if</span> <span class="token keyword">not</span> st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">and</span> <span class="token keyword">not</span> pl<span class="token punctuation">[</span>depth<span class="token operator">+</span>i<span class="token punctuation">]</span> <span class="token keyword">and</span> <span class="token keyword">not</span> mi<span class="token punctuation">[</span>depth<span class="token operator">-</span>i<span class="token operator">+</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pl<span class="token punctuation">[</span>depth<span class="token operator">+</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> mi<span class="token punctuation">[</span>depth<span class="token operator">-</span>i<span class="token operator">+</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">            bt<span class="token punctuation">(</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">            st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pl<span class="token punctuation">[</span>depth <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> mi<span class="token punctuation">[</span>depth <span class="token operator">-</span> i <span class="token operator">+</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>
</span><span class="code-line">
</span><span class="code-line">bt<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1149 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1149-Python</link>
    <pubDate>2020-10-19</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1149-Python</guid>
    <description>
    <![CDATA[BOJ-1149-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 줄만큼 3개의 정수들이 입력된다. 앞뒤로 같은 인덱스에 있는 값을 선택하지 못하는 조건을 지키며 각 줄마다 한 개의 정수를 더한 최솟값을 출력하는 문제. 간단한 dp 문제로써 2차원 배열을 사용하여 풀었다. 1부터 n-1까지 반복을 수행하며 dp[i][0]에 dp[i-1][1]과 dp[i-1][2] 중 작은 값들 더하는 행위를 반복하였다. 마지막에 dp[n-1]중 제일 작은 값을 출력하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    dp<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-9465 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-9465-Python</link>
    <pubDate>2020-10-18</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-9465-Python</guid>
    <description>
    <![CDATA[BOJ-9465-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>자연수로 이루어진 2행 n열의 배열이 주어질 때 상하좌우의 값은 더하지 못하는 조건하에 더한 최대 값을 출력하는 문제. 인덱스 1의 값은 왼쪽 대각선의 값을 더한 후, 인덱스 2부터 n-1까지 왼쪽 대각선 값과 그 왼쪽의 값을 비교해 더 큰 값을 해당 인덱스의 값과 더한 것을 저장했다. n-1의 상하 값 중에 큰 것을 비교하여 출력해 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">    l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment"># 두번째 값에 왼쪽 대각선 값을 더함</span>
</span><span class="code-line">    l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 두번째부터 배열의 n번째까지</span>
</span><span class="code-line">        l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 왼쪽 대각선값과 그 왼쪽의 값의 크기를 비교해서 큰 것을 더</span>
</span><span class="code-line">        l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 배열의 마지막 값 중 큰 것을 출력</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-15652 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-15652-Python</link>
    <pubDate>2020-10-17</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-15652-Python</guid>
    <description>
    <![CDATA[BOJ-15652-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>자연수 n, m이 입력된 후 '1부터 N까지 자연수 중에서 M개를 고른 수열', '같은 수를 여러 번 골라도 된다', '고른 수열은 비내림차순이어야 한다'. 위 세 조건을 만족시키는 수열을 모두 구하는 문제. 백트래킹 문제로써 방문 확인을 하지 않고 함수의 매개변수 index를 추가 및 판단하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">bt</span><span class="token punctuation">(</span>depth<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> depth <span class="token operator">==</span> m<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">return</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> index<span class="token punctuation">:</span>
</span><span class="code-line">            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">            bt<span class="token punctuation">(</span>depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">            ans<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">bt<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-5555 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-5555-Python</link>
    <pubDate>2020-10-16</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-5555-Python</guid>
    <description>
    <![CDATA[BOJ-5555-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>길이가 최대 10인 문자열이 s가 입력되며 n만큼 길이가 최대 10인 문자열들 l이 입력된다. l의 문자열은 끝에서부터 처음으로 이어서 읽을 수 있을 때 s가 들어있는 l의 수를 출력하는 문제. s의 길이가 더욱 클 수 있다면 s의 길이에 따라 l을 계속 곱해야겠지만 둘의 최대 길이가 같다. 그렇기 때문에 l * 2한 값에 s가 있는지 in을 사용하여 간단히 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># 5555</span>
</span><span class="code-line"><span class="token comment"># import sys</span>
</span><span class="code-line"><span class="token comment"># input = sys.stdin.readline</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># s = input()[0:-1]</span>
</span><span class="code-line"><span class="token comment"># ans = 0</span>
</span><span class="code-line"><span class="token comment"># for _ in range(int(input())):</span>
</span><span class="code-line"><span class="token comment">#     l = input()[0:-1] * 2</span>
</span><span class="code-line"><span class="token comment">#     if s in l: ans += 1</span>
</span><span class="code-line"><span class="token comment"># print(ans)</span>
</span><span class="code-line">
</span><span class="code-line">s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    l <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span>
</span><span class="code-line">    <span class="token keyword">if</span> s <span class="token keyword">in</span> l<span class="token punctuation">:</span> ans <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-15649 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-15649-Python</link>
    <pubDate>2020-10-15</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-15649-Python</guid>
    <description>
    <![CDATA[BOJ-15649-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>자연수 n, m이 입력될 때 1부터 n까지 자연수 중에서 중복 없이 m개를 고른 수열들을 출력하는 문제. 방문 확인 배열을 사용했으며 매개변수로 길이를 확인하여 출력 및 return으로 함수를 종료하였다. n까지 반복문을 수행하고 방문 확인을하여 넘어가도록 하였다. 그 후 배열에 추가 및 방문 확인 배열을 수정한 후 재귀적으로 함수를 호출하였다. 그 후 다음 반복을 위해 방문 확인 배열을 재수정, 방금 들어간 배열의 요소를 삭제하기 위해 pop하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">visit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> n
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">bt</span><span class="token punctuation">(</span>depth<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> depth <span class="token operator">==</span> m<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">return</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">continue</span>
</span><span class="code-line">
</span><span class="code-line">        ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">        visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">        bt<span class="token punctuation">(</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">        visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>
</span><span class="code-line">        ans<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">bt<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-15651 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-15651-Python</link>
    <pubDate>2020-10-15</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-15651-Python</guid>
    <description>
    <![CDATA[BOJ-15651-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>자연수 n, m이 입력될 때 1부터 n까지 자연수 중에서 m개를 고른 수열을 같은 수를 여러 번 골라도 되는 조건하에 출력하는 문제. 이전 백트래킹 문제과 같이 길이를 비교하여 출력 및 종료, 배열에 추가, 재귀적으로 호출, 배열 pop을 동일하게 사용하여 풀었으며 같은 수를 여러 번 골라도 되기에 방문 확인을 빼서 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">bt</span><span class="token punctuation">(</span>depth<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> depth <span class="token operator">==</span> m<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">return</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">        bt<span class="token punctuation">(</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">        ans<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">bt<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-15654 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-15654-Python</link>
    <pubDate>2020-10-15</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-15654-Python</guid>
    <description>
    <![CDATA[BOJ-15654-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>자연수 n, m이 입력된 후 n개로 이루어진 수열이 입력된다. 이 때 중복 없이 m개를 고른 수열들을 출력하는 문제. sorted를 이용하여 입력되는 수열을 정렬하여 저장하였다. 위에 백트래킹 문제들은 리스트를 사용하여 방문 확인을 하였지만 이번 문제에서는 수열에 규칙이 없어 딕셔너리 자료형을 이용하여 방문 확인을 하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">visit <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> l<span class="token punctuation">:</span>
</span><span class="code-line">    visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">bt</span><span class="token punctuation">(</span>depth<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> depth <span class="token operator">==</span> m<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">return</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> l<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">continue</span>
</span><span class="code-line">
</span><span class="code-line">        ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</span><span class="code-line">        visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">        bt<span class="token punctuation">(</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">        visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>
</span><span class="code-line">        ans<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">bt<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-5218 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-5218-Python</link>
    <pubDate>2020-10-15</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-5218-Python</guid>
    <description>
    <![CDATA[BOJ-5218-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>테스트 케이스가 주어진 후 공백으로 구분된 길이가 똑같은 단어가 입력된다. 각 단어의 자릿수마다 차이값을 출력하는 문제. 'B'와 'D' 사이의 거리는 4 - 2 = 2이고, 'D'와 'B' 사이의 거리는 (2+26) - 4 = 24처럼 차이값을 계산하면 된다. 계산을 위한 함수를 구현했으며 아스키코드 값을 반환하는 ord 함수를 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">cal</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> n <span class="token operator">&#x3C;=</span> m<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> m <span class="token operator">-</span> n
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> m <span class="token operator">+</span> <span class="token number">26</span> <span class="token operator">-</span> n
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    l1<span class="token punctuation">,</span> l2 <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Distances: '</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span>cal<span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>l1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>l2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-15650 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-15650-Python</link>
    <pubDate>2020-10-14</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-15650-Python</guid>
    <description>
    <![CDATA[BOJ-15650-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>자연수 n, m이 입력될 때 1부터 n까지 자연수 중에서 중복 없이 m개를 고른 수열, 고른 수열은 오름차순. 위 두개의 조건을 만족하는 수열들을 출력하는 문제. 두가지 풀이 모두 m과 비교를 하여 출력과 return으로 함수의 종료를 작성하였다. 첫번째 풀이는 한 개의 매개변수를 사용하여 풀었으며 반복문 안에서 i보다 큰 수들의 방문 확인 배열 값들을 바꿔주는 2중 반복문을 사용하였다. 두번째 풀이는 크기와 현재 인덱스 값을 저장할 매개변수 두 개를 사용하였다. 인덱스값부터 n까지 반복문을 실행하고 방문하지 않은 값일 때 방문 확인, 배열에 추가 후 현재 반복중인 i를 이용하여 재귀적으로 호출하였다. 그 후 다음 반복을 위해 현재 i값만 방문 확인 값을 바꿔주었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">visit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> n
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># def bt(index):</span>
</span><span class="code-line"><span class="token comment">#     if index == m: # 크기가 같을 떄</span>
</span><span class="code-line"><span class="token comment">#         print(*ans)</span>
</span><span class="code-line"><span class="token comment">#         return</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     for i in range(n): # 입력받은 수-1 까지 반복</span>
</span><span class="code-line"><span class="token comment">#         if visit[i]: # 이미 사용한 수일 때 넘어감</span>
</span><span class="code-line"><span class="token comment">#             continue</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#         ans.append(l[i]) # 배열에 해당 값 추가</span>
</span><span class="code-line"><span class="token comment">#         visit[i] = True # 방문 확인 배열에 값 수정</span>
</span><span class="code-line"><span class="token comment">#         bt(index+1) # 크기를 늘려 재귀적 호출</span>
</span><span class="code-line"><span class="token comment">#         ans.pop() # 다음 반복을 위해 배열의 마지막 값 제거</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#         for j in range(i+1, n): # 현재 수보다 큰 수들을 전부 미방문 처리</span>
</span><span class="code-line"><span class="token comment">#             visit[j] = False</span>
</span><span class="code-line"><span class="token comment"># bt(0)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">bt</span><span class="token punctuation">(</span>depth<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> depth <span class="token operator">==</span> m<span class="token punctuation">:</span> <span class="token comment"># 크기와 같을 떄 출력하고 함수 종료</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">return</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 이미 들어간 값이 있다면 해당 값보다 큰 것만 반복</span>
</span><span class="code-line">        <span class="token keyword">if</span> <span class="token keyword">not</span> visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment"># 방문하지 않았던 것일 때</span>
</span><span class="code-line">            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">            visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">            bt<span class="token punctuation">(</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 현재 반복중인 i를 index로</span>
</span><span class="code-line">            visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>
</span><span class="code-line">            ans<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 재귀적으로 호출할 때를 위해 맨 뒤에 append한 값을 삭제</span>
</span><span class="code-line">bt<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1913 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1913-Python</link>
    <pubDate>2020-10-13</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1913-Python</guid>
    <description>
    <![CDATA[BOJ-1913-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>홀수 n의 크기를 갖는 달팽이 모양의 2차원 배열을 출력하고 n*n 이하의 입력받는 정수의 위치를 출력하는 문제. 반복문 도중 배열의 마지막 값일 때 exit을 이용하여 코드를 중단하도록 풀었다. 방향은 2차원 배열을 이용하여 관리해 주었으며, 같은 방향으로 진행되는 값이 추가되는 조건을 확인하여 방향을 관리하는 반복문 안에 넣어 같은 방향으로 반복되게 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">dist <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">count <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">y<span class="token punctuation">,</span> x <span class="token operator">=</span> n <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> n <span class="token operator">//</span> <span class="token number">2</span>  <span class="token comment"># 시작 지점</span>
</span><span class="code-line">dire <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token comment"># 방향</span>
</span><span class="code-line">
</span><span class="code-line">temp_count <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 해당 방향으로 몇 번 찍어야되는지</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 4가지 방향으로</span>
</span><span class="code-line">        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>temp_count<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> count <span class="token operator">==</span> dist<span class="token punctuation">:</span>  <span class="token comment"># 목표일 때 좌표 저장</span>
</span><span class="code-line">                ans <span class="token operator">=</span> <span class="token punctuation">[</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">            l<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> count
</span><span class="code-line">            y <span class="token operator">+=</span> dire<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># 현재 방향만큼 수정</span>
</span><span class="code-line">            x <span class="token operator">+=</span> dire<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">            <span class="token keyword">if</span> count <span class="token operator">==</span> n <span class="token operator">*</span> n<span class="token punctuation">:</span>  <span class="token comment"># 배열의 마지막 값일 때</span>
</span><span class="code-line">                <span class="token punctuation">[</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span>t<span class="token punctuation">)</span> <span class="token keyword">for</span> t <span class="token keyword">in</span> l<span class="token punctuation">]</span>
</span><span class="code-line">                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">                exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 종료</span>
</span><span class="code-line">
</span><span class="code-line">            count <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>  <span class="token comment"># 같은 방향으로 진행되는 값 추가</span>
</span><span class="code-line">            temp_count <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1074 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1074-Python</link>
    <pubDate>2020-10-12</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1074-Python</guid>
    <description>
    <![CDATA[BOJ-1074-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n, r, c를 입력받은 후 2^N * 2^N 크기의 배열을 Z모양으로 탐색할 때, 쪽 위에 있는 칸이 하나가 아니라면, 배열을 4등분 한 후에 (크기가 같은 2^(N-1)로) 재귀적으로 순서대로 방문하면 (r, c)를 몇 번째로 방문하는지 출력하는 문제. 첫 풀이는 배열의 크기, 좌표 4등분을 재귀적으로 사용하는 함수를 구현하여 풀었으나 런타임 에러 결과를 받게 되었다. 재귀의 제한을 늘리니 메모리 초과 결과를 받게 되었다. 두번째 풀이는 목표 좌표가 어느 사분면에 있는 지 계산하여 다른 사분면의 크기만큼 더하는 것과 배열의 크기를 줄이는 것을 반복하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># 1074</span>
</span><span class="code-line"><span class="token comment"># import sys</span>
</span><span class="code-line"><span class="token comment"># sys.setrecursionlimit(100000)</span>
</span><span class="code-line"><span class="token comment"># n, r, c = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment"># count = 0</span>
</span><span class="code-line"><span class="token comment"># def z(N, x, y):</span>
</span><span class="code-line"><span class="token comment">#     global count</span>
</span><span class="code-line"><span class="token comment">#     if N == 2:</span>
</span><span class="code-line"><span class="token comment">#         if x == r and y == c:</span>
</span><span class="code-line"><span class="token comment">#             print(count)</span>
</span><span class="code-line"><span class="token comment">#             return</span>
</span><span class="code-line"><span class="token comment">#         count += 1</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#         if x + 1 == r and y == c:</span>
</span><span class="code-line"><span class="token comment">#             print(count)</span>
</span><span class="code-line"><span class="token comment">#             return</span>
</span><span class="code-line"><span class="token comment">#         count += 1</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#         if x == r and y + 1 == c:</span>
</span><span class="code-line"><span class="token comment">#             print(count)</span>
</span><span class="code-line"><span class="token comment">#             return</span>
</span><span class="code-line"><span class="token comment">#         count += 1</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#         if x + 1 == r and y + 1 == c:</span>
</span><span class="code-line"><span class="token comment">#             print(count)</span>
</span><span class="code-line"><span class="token comment">#             return</span>
</span><span class="code-line"><span class="token comment">#         count += 1</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     else:</span>
</span><span class="code-line"><span class="token comment">#         z(N//2, y, x)</span>
</span><span class="code-line"><span class="token comment">#         z(N//2, y, x+N//2)</span>
</span><span class="code-line"><span class="token comment">#         z(N//2, y+N//2, x)</span>
</span><span class="code-line"><span class="token comment">#         z(N//2, y+N//2, x+N//2)</span>
</span><span class="code-line"><span class="token comment"># z(n*n, 0, 0)</span>
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> r<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">count <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line"><span class="token keyword">while</span> n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token comment"># 목표 좌표가 2사분면일 때</span>
</span><span class="code-line">        <span class="token keyword">if</span> r <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> c <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token comment"># 오른쪽 위</span>
</span><span class="code-line">            count <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">        <span class="token keyword">elif</span> r <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">and</span> c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token comment"># 아래</span>
</span><span class="code-line">            count <span class="token operator">+=</span> <span class="token number">2</span>
</span><span class="code-line">        <span class="token keyword">elif</span> r <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">and</span> c <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token comment"># 오른쪽 아래</span>
</span><span class="code-line">            count <span class="token operator">+=</span> <span class="token number">3</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token comment"># 목표 좌표가 사</span>
</span><span class="code-line">        temp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> n<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>  <span class="token comment"># 현재 n의 배열 크기 ex) 2 == 4, 3 == 8</span>
</span><span class="code-line">        <span class="token keyword">if</span> temp <span class="token operator">></span> r <span class="token keyword">and</span> temp <span class="token operator">&#x3C;=</span> c<span class="token punctuation">:</span> <span class="token comment"># 목표 좌표가 1사분면에 있을 때</span>
</span><span class="code-line">            count <span class="token operator">+=</span> temp <span class="token operator">**</span> <span class="token number">2</span> <span class="token comment"># 2사분면의 크기만큼 더함</span>
</span><span class="code-line">            c <span class="token operator">-=</span> temp <span class="token comment"># 다음 반복에서 계산을 위해</span>
</span><span class="code-line">        <span class="token keyword">elif</span> temp <span class="token operator">&#x3C;=</span> r <span class="token keyword">and</span> temp <span class="token operator">></span> c<span class="token punctuation">:</span> <span class="token comment"># 목표 좌표가 3사분면에 있을 때</span>
</span><span class="code-line">            count <span class="token operator">+=</span> <span class="token punctuation">(</span>temp <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token comment"># 1, 2사분면의 크기만큼 더함</span>
</span><span class="code-line">            r <span class="token operator">-=</span> temp <span class="token comment"># 다음 반복에서 계산을 위해</span>
</span><span class="code-line">        <span class="token keyword">elif</span> temp <span class="token operator">&#x3C;=</span> r <span class="token keyword">and</span> temp <span class="token operator">&#x3C;=</span> c<span class="token punctuation">:</span> <span class="token comment"># 목표 좌표가 4분면에 있을 때</span>
</span><span class="code-line">            count <span class="token operator">+=</span> <span class="token punctuation">(</span>temp <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token comment"># 1, 2, 3사분면의 크기만큼 더함</span>
</span><span class="code-line">            r <span class="token operator">-=</span> temp <span class="token comment"># 다음 반복에서 계산을 위해</span>
</span><span class="code-line">            c <span class="token operator">-=</span> temp
</span><span class="code-line">    n <span class="token operator">-=</span> <span class="token number">1</span> <span class="token comment"># 현재 배열을 4등분 n = 3, temp = 8 > n = 2, temp = 4</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-10798 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-10798-Python</link>
    <pubDate>2020-10-12</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-10798-Python</guid>
    <description>
    <![CDATA[BOJ-10798-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>5개의 줄에 최대 길이가 15인 문자열이 입력된다. 이 문자열들을 세로로 읽으나 해당 자리의 글자가 없으면, 읽지 않고 그 다음 글자를 계속 읽는다는 조건을 지켜 공백없이 연속하여 출력하는 문제. 첫 풀이는 이중반복문과 try, except를 이용하여 풀었다. 두번째 풀이는 해당 문자열의 길이와 비교하여 출력 여부를 결정하도록 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># l = []</span>
</span><span class="code-line"><span class="token comment"># for _ in range(5):</span>
</span><span class="code-line"><span class="token comment">#     l.append(input())</span>
</span><span class="code-line"><span class="token comment"># for i in range(15):</span>
</span><span class="code-line"><span class="token comment">#     for j in range(5):</span>
</span><span class="code-line"><span class="token comment">#         try:</span>
</span><span class="code-line"><span class="token comment">#             print(l[j][i], end='')</span>
</span><span class="code-line"><span class="token comment">#         except:</span>
</span><span class="code-line"><span class="token comment">#             continue</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># l = [input() for _ in range(5)]</span>
</span><span class="code-line"><span class="token comment"># for i in range(15):</span>
</span><span class="code-line"><span class="token comment">#     for j in range(5):</span>
</span><span class="code-line"><span class="token comment">#         try: print(l[j][i], end='')</span>
</span><span class="code-line"><span class="token comment">#         except: continue</span>
</span><span class="code-line">
</span><span class="code-line">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> i<span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-10822 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-10822-Python</link>
    <pubDate>2020-10-12</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-10822-Python</guid>
    <description>
    <![CDATA[BOJ-10822-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>쉼표로 나누어져 있는 정수들로 이루어진 문자열의 총합을 구하는 문제. split(',')과 sum을 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-10823 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-10823-Python</link>
    <pubDate>2020-10-12</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-10823-Python</guid>
    <description>
    <![CDATA[BOJ-10823-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>여러 줄로 입력되는 쉼표로 나누어져 있는 정수들로 이루어진 문자열의 총합을 구하는 문제. readlines를 이용하여 EOF까지 입력을 받은 값을 replace('\n', '')을 이용하여 줄바꿈을 공백으로 바꾼 후 문자열에 더한 값을 split()과 sum을 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line">l <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">s <span class="token operator">=</span> <span class="token string">""</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> l<span class="token punctuation">:</span>
</span><span class="code-line">    s <span class="token operator">+=</span> i<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-10826 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-10826-Python</link>
    <pubDate>2020-10-12</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-10826-Python</guid>
    <description>
    <![CDATA[BOJ-10826-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n번째 피보나치 수열의 수를 출력하는 문제. 위 문제와 다르게 큰 수가 입력되어 재귀를 이용해서 풀었을 때 시간초과 결과를 받게된다. 단순 반복문을 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        x<span class="token punctuation">,</span> y <span class="token operator">=</span> y<span class="token punctuation">,</span> x <span class="token operator">+</span> y
</span><span class="code-line">    <span class="token keyword">return</span> x
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-10870 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-10870-Python</link>
    <pubDate>2020-10-12</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-10870-Python</guid>
    <description>
    <![CDATA[BOJ-10870-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n번째 피보나치 수열의 수를 출력하는 문제. 재귀를 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">return</span> n <span class="token keyword">if</span> n <span class="token operator">&#x3C;=</span> <span class="token number">1</span> <span class="token keyword">else</span> f<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> f<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-18406 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-18406-Python</link>
    <pubDate>2020-10-12</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-18406-Python</guid>
    <description>
    <![CDATA[BOJ-18406-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>짝수의 수가 입력되고 좌우 절반으로 나누었을 때, 각 수들을 합친 값을 비교하여 출력하는 문제. 문자열을 len을 이용하여 슬라이싱한 값을 map을 이용하여 형변환, sum을 이용하여 합친 값을 삼항연산자를 이용하여 비교, 출력하였다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'LUCKY'</span> <span class="token keyword">if</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>l<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">'READY'</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-5717 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-5717-Python</link>
    <pubDate>2020-10-12</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-5717-Python</guid>
    <description>
    <![CDATA[BOJ-5717-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>0 0이 입력될 때 까지 입력되는 두 수들의 합을 출력하는 문제. while과 break를 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">    x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> y <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">break</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1697 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1697-Python</link>
    <pubDate>2020-10-10</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1697-Python</guid>
    <description>
    <![CDATA[BOJ-1697-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>현재 위치와 목표 위치 n, x가 입력된다. 현재 위치에서 1초 후에 n*2, n+1, n-1의 위치로 이동할 수 있을 때 목표 위치 x에 도착하는 가장 빠른 시간이 몇 초 후인지 구하는 문제. 첫 풀이는 너비 우선 탐색 bfs로 구현을 하였다. 딕셔너리를 만들어 방문 확인을 했으며 방문하지 않았을 때 q에 추가하여 풀었다. 이 방법으로 풀었을 때 백준상 메모리초과 결과를 얻게 되었고 이유는 딕셔너리를 계속하여 추가하는 것과 노드의 최대 크기인 100,000을 넘어서까지 계산된 것으로 유추된다. 두번째 풀이는 방문 확인을 100001의 길이를 가진 리스트로, 큐에 위치와 걸린 시간으로 이루어진 배열을 넣어 풀었으며 q에 추가할 때 범위 100,000보다 작은 지 확인하여 추가하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># 2*x, x-1, x+1</span>
</span><span class="code-line"><span class="token comment"># from collections import deque</span>
</span><span class="code-line"><span class="token comment"># n, k = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment"># q = deque([n])</span>
</span><span class="code-line"><span class="token comment"># d = {n: 0}</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># while True:</span>
</span><span class="code-line"><span class="token comment">#     node = q.popleft()</span>
</span><span class="code-line"><span class="token comment">#     if node == k:</span>
</span><span class="code-line"><span class="token comment">#         print(d[node])</span>
</span><span class="code-line"><span class="token comment">#         break</span>
</span><span class="code-line"><span class="token comment">#     else:</span>
</span><span class="code-line"><span class="token comment">#         t_n1 = node * 2</span>
</span><span class="code-line"><span class="token comment">#         t_n2 = node + 1</span>
</span><span class="code-line"><span class="token comment">#         t_n3 = node - 1</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#         if t_n1 not in d:</span>
</span><span class="code-line"><span class="token comment">#             d[t_n1] = d[node] + 1</span>
</span><span class="code-line"><span class="token comment">#             q.append(t_n1)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#         if t_n2 not in d:</span>
</span><span class="code-line"><span class="token comment">#             d[t_n2] = d[node] + 1</span>
</span><span class="code-line"><span class="token comment">#             q.append(t_n2)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#         if t_n3 not in d:</span>
</span><span class="code-line"><span class="token comment">#             d[t_n3] = d[node] + 1</span>
</span><span class="code-line"><span class="token comment">#             q.append(t_n3)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque
</span><span class="code-line">n<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">visit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">100001</span>
</span><span class="code-line">q <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">    node <span class="token operator">=</span> q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">    loca <span class="token operator">=</span> node<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</span><span class="code-line">    sec <span class="token operator">=</span> node<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">if</span> <span class="token keyword">not</span> visit<span class="token punctuation">[</span>loca<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">        visit<span class="token punctuation">[</span>loca<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">        <span class="token keyword">if</span> loca <span class="token operator">==</span> k<span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">print</span><span class="token punctuation">(</span>sec<span class="token punctuation">)</span>
</span><span class="code-line">            exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">        sec <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">        t <span class="token operator">=</span> <span class="token punctuation">[</span>loca<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> loca<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> loca<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">        <span class="token keyword">for</span> i <span class="token keyword">in</span> t<span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> i <span class="token operator">&#x3C;=</span> <span class="token number">100000</span><span class="token punctuation">:</span>
</span><span class="code-line">                q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>i<span class="token punctuation">,</span> sec<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-18870 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-18870-Python</link>
    <pubDate>2020-10-08</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-18870-Python</guid>
    <description>
    <![CDATA[BOJ-18870-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 수열이 입력되며 해당 수열을 좌표 압축하여 출력하는 문제. 첫 풀이는 sorted를 이용하여 정렬, set을 이용하여 중복된 값 제거를 한 후 zip을 이용하여 2개의 인자를 갖는 for문을 이용하여 딕셔너리 자료형에 저장, 딕셔너리 자료형을 이용하여 출력하여 풀었다. 두번째 풀이는 enumerate를 사용하여 더욱 편하게 풀었으며 이 때문에 n을 사용하지 않고 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># import sys</span>
</span><span class="code-line"><span class="token comment"># input = sys.stdin.readline</span>
</span><span class="code-line"><span class="token comment"># n = int(input())</span>
</span><span class="code-line"><span class="token comment"># l = list(map(int, input().split()))</span>
</span><span class="code-line"><span class="token comment"># sorted_l = sorted(set(l))</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># d = {}</span>
</span><span class="code-line"><span class="token comment"># for location, i in zip(sorted_l, range(n)):</span>
</span><span class="code-line"><span class="token comment">#     d[location] = i</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># [print(d[i], end=' ') for i in l]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</span><span class="code-line"><span class="token keyword">for</span> v<span class="token punctuation">,</span> k <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> d<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> l<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-11279 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-11279-Python</link>
    <pubDate>2020-10-07</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-11279-Python</guid>
    <description>
    <![CDATA[BOJ-11279-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>최대 힙을 구현하는 문제. 0이 입력됐을 때 해당 배열에서 제일 큰 수를 출력 및 제거하고 다른 수가 입력됐을 때 배열에 추가하는 문제. bisect의 insort를 이용하여 배열에 추가할 때 정렬하여 넣은 후, 리스트의 pop을 이용하여 출력하였다</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">from</span> bisect <span class="token keyword">import</span> insort
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    s <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> s <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">        insort<span class="token punctuation">(</span>l<span class="token punctuation">,</span> s<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> l <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1927 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1927-Python</link>
    <pubDate>2020-10-07</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1927-Python</guid>
    <description>
    <![CDATA[BOJ-1927-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>최소 힙을 구현하는 문제. 0이 입력됐을 때 해당 배열에서 제일 작은 수를 출력 및 제거하고 다른 수가 입력됐을 때 배열에 추가하는 문제. 첫 풀이는 위 문제와 동일하게 insort를 사용했다. 추가적으로 리스트의 pop(0)의 시간복잡도보다 우위에 있는 deque의 popleft를 사용했는데도 시간초과 결과를 받게 되었다. 두번째 풀이는 파이썬의 내장 heapq를 import하여 heappush와 heappop을 사용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># from bisect import insort</span>
</span><span class="code-line"><span class="token comment"># from collections import deque</span>
</span><span class="code-line"><span class="token comment"># import sys</span>
</span><span class="code-line"><span class="token comment"># input = sys.stdin.readline</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># l = deque()</span>
</span><span class="code-line"><span class="token comment"># for _ in range(int(input())):</span>
</span><span class="code-line"><span class="token comment">#     s = int(input())</span>
</span><span class="code-line"><span class="token comment">#     if s > 0:</span>
</span><span class="code-line"><span class="token comment">#         insort(l, s)</span>
</span><span class="code-line"><span class="token comment">#     else:</span>
</span><span class="code-line"><span class="token comment">#         if l == []:</span>
</span><span class="code-line"><span class="token comment">#             print('0')</span>
</span><span class="code-line"><span class="token comment">#         else:</span>
</span><span class="code-line"><span class="token comment">#             print(l.popleft())</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">import</span> sys<span class="token punctuation">,</span> heapq
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">h <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">        heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>h<span class="token punctuation">,</span> n<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> h <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">print</span><span class="token punctuation">(</span>heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-10886 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-10886-Python</link>
    <pubDate>2020-10-06</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-10886-Python</guid>
    <description>
    <![CDATA[BOJ-10886-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>0과 1을 n개 입력받은 후 더 많이 입력된 값에 해당하는 문자열을 출력하는 문제. 정수형 변수에 삼항연산자를 사용하여 1을 더하거나 빼었다. 그 후 0과 크기를 비교하여 문자열을 삼항연산자를 사용하여 출력해 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">y <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    y <span class="token operator">=</span> y <span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">if</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'1'</span> <span class="token keyword">else</span> y <span class="token operator">-</span> <span class="token number">1</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Junhee is cute!'</span> <span class="token keyword">if</span> y <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token string">'Junhee is not cute!'</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-11724 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-11724-Python</link>
    <pubDate>2020-10-06</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-11724-Python</guid>
    <description>
    <![CDATA[BOJ-11724-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>입력될 노드의 수 n과 간선의 수 m을 입력받은 후 뱡향 없는 그래프를 x, y를 입력받는다. 그 후 연결 요소의 개수를 출력하는 문제. 그래프를 n+1 크기를 갖는 2차원 배열로 만들어 0과 1로 연결돼 있는 지 판단 했으며 방문한 적이 있는지 확인할 리스트를 n+1 크기로 만들어 사용했다. dfs 함수를 각 연결된 노드들을 재귀적으로 호출하여 visit 리스트의 값을 1로 수정하여 풀었다. 추가적으로 지금까지 A == 1, A == 0으로 사용했던 것을 가독성을 생각해 A, not A와 같이 바꾸어도 보았다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># import sys</span>
</span><span class="code-line"><span class="token comment"># sys.setrecursionlimit(10000)</span>
</span><span class="code-line"><span class="token comment"># input = sys.stdin.readline</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># n, m = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment"># graph = [[0] * (n + 1) for _ in range(n + 1)]</span>
</span><span class="code-line"><span class="token comment"># visit = [0 for _ in range(n + 1)]</span>
</span><span class="code-line"><span class="token comment"># count = 0</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># for _ in range(m):</span>
</span><span class="code-line"><span class="token comment">#     x, y = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment">#     graph[x][y] = 1</span>
</span><span class="code-line"><span class="token comment">#     graph[y][x] = 1</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># def dfs(node):</span>
</span><span class="code-line"><span class="token comment">#     visit[node] = 1</span>
</span><span class="code-line"><span class="token comment">#     for k in range(1, n+1):</span>
</span><span class="code-line"><span class="token comment">#         if graph[node][k] == 1 and visit[k] == 0:</span>
</span><span class="code-line"><span class="token comment">#             dfs(k)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># for i in range(1, n+1):</span>
</span><span class="code-line"><span class="token comment">#     if visit[i] == 0:</span>
</span><span class="code-line"><span class="token comment">#         dfs(i)</span>
</span><span class="code-line"><span class="token comment">#         count += 1</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># print(count)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line">sys<span class="token punctuation">.</span>setrecursionlimit<span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">visit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">count <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    graph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">    graph<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    visit<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">    <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> graph<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token keyword">and</span> <span class="token keyword">not</span> visit<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            dfs<span class="token punctuation">(</span>k<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> <span class="token keyword">not</span> visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">        dfs<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</span><span class="code-line">        count <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2443 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2443-Python</link>
    <pubDate>2020-10-06</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2443-Python</guid>
    <description>
    <![CDATA[BOJ-2443-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>역삼각형을 만드는 별찍기 문제. n부터 0까지 반복문을 사용했으며 공백을 n - i개 출력, 별을 i * (i - 1)개 출력한 후 줄바꿈하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">' '</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'*'</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1931 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1931-Python</link>
    <pubDate>2020-10-05</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1931-Python</guid>
    <description>
    <![CDATA[BOJ-1931-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>회의실 한 개를 사용할 때, n개의 회의 시작시간, 회의 종료시간이 입력된 후 최대한 많은 회의를 할 때 그 수가 무엇인지 출력하는 문제. 입력되는 회의들을 sorted의 key 메소드를 lambda식을 이용하여 종료시간으로 정렬 후 시작시간으로 재정렬한 후, 종료시간과 시작시간을 확인하여 정수형 변수를 1씩 늘려 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">start_time <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> l<span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> start_time <span class="token operator">&#x3C;=</span> i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">        ans <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">        start_time <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1012 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1012-Python</link>
    <pubDate>2020-10-04</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1012-Python</guid>
    <description>
    <![CDATA[BOJ-1012-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>0과 1로 이루어진 2차원 배열을 입력받은 후 상하좌우 연결된 그룹의 수를 출력하는 문제. 첫 풀이로 각 정점을 이차원 배열에 입력한 후, 이차원 배열의 크기만큼 반복문을 수행할 때 방문 여부를 저장하는 배열, 그룹 숫자를 저장할 배열을 이용하여 풀었다. 두번째 풀이에서는 방문 확인 배열 대신 그래프의 값을 수정하는 식으로 수정, 그룹 숫자를 저장하는 배열 대신 정수형 변수를 사용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># from collections import deque</span>
</span><span class="code-line"><span class="token comment"># import sys</span>
</span><span class="code-line"><span class="token comment"># input = sys.stdin.readline</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># def bfs():</span>
</span><span class="code-line"><span class="token comment">#     pass</span>
</span><span class="code-line"><span class="token comment"># dx = [0, 0, 1, -1]</span>
</span><span class="code-line"><span class="token comment"># dy = [1, -1, 0, 0]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># for _ in range(int(input())):</span>
</span><span class="code-line"><span class="token comment">#     n, m, k = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment">#     graph = [[0 for _ in range(m)] for _ in range(n)]</span>
</span><span class="code-line"><span class="token comment">#     group = [[0 for _ in range(m)] for _ in range(n)]</span>
</span><span class="code-line"><span class="token comment">#     visit = [[0 for _ in range(m)] for _ in range(n)]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     for _ in range(k):</span>
</span><span class="code-line"><span class="token comment">#         y, x = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment">#         graph[y][x] = 1</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     g_min = 0</span>
</span><span class="code-line"><span class="token comment">#     q = deque()</span>
</span><span class="code-line"><span class="token comment">#     for y in range(n):</span>
</span><span class="code-line"><span class="token comment">#         for x in range(m):</span>
</span><span class="code-line"><span class="token comment">#             # 1이며 방문한 적이 없을 때</span>
</span><span class="code-line"><span class="token comment">#             if graph[y][x] == 1 and visit[y][x] == 0:</span>
</span><span class="code-line"><span class="token comment">#                 # 큐에 추가</span>
</span><span class="code-line"><span class="token comment">#                 q.append((y,x))</span>
</span><span class="code-line"><span class="token comment">#                 # 그룹 넘버 + 1</span>
</span><span class="code-line"><span class="token comment">#                 g_min += 1</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#                 # 연결된 정점들이 없을 때 까지</span>
</span><span class="code-line"><span class="token comment">#                 while q:</span>
</span><span class="code-line"><span class="token comment">#                     a, b = q.popleft()</span>
</span><span class="code-line"><span class="token comment">#                     visit[a][b] = 1</span>
</span><span class="code-line"><span class="token comment">#                     group[a][b] = g_min</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#                     # 상하좌우 확인</span>
</span><span class="code-line"><span class="token comment">#                     for i in range(4):</span>
</span><span class="code-line"><span class="token comment">#                         if 0 &#x3C;= a + dy[i] &#x3C; n and 0 &#x3C;= b + dx[i] &#x3C; m:</span>
</span><span class="code-line"><span class="token comment">#                             if graph[a+dy[i]][b+dx[i]] == 1 and visit[a+dy[i]][b+dx[i]] == 0:</span>
</span><span class="code-line"><span class="token comment">#                                 q.append((a+dy[i], b+dx[i]))</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     print(g_min)</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">dx<span class="token punctuation">,</span> dy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">bfs</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> graph<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    q <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">    q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>start<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">        a<span class="token punctuation">,</span> b <span class="token operator">=</span> q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">        graph<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            n_y <span class="token operator">=</span> a <span class="token operator">+</span> dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
</span><span class="code-line">            n_x <span class="token operator">=</span> b <span class="token operator">+</span> dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
</span><span class="code-line">            <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> n_y <span class="token operator">&#x3C;</span> y <span class="token keyword">and</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> n_x <span class="token operator">&#x3C;</span> x <span class="token keyword">and</span> graph<span class="token punctuation">[</span>n_y<span class="token punctuation">]</span><span class="token punctuation">[</span>n_x<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">                q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>n_y<span class="token punctuation">,</span> n_x<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">                graph<span class="token punctuation">[</span>n_y<span class="token punctuation">]</span><span class="token punctuation">[</span>n_x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    y<span class="token punctuation">,</span> x<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        t_y<span class="token punctuation">,</span> t_x <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">        graph<span class="token punctuation">[</span>t_y<span class="token punctuation">]</span><span class="token punctuation">[</span>t_x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">    count <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">                count <span class="token operator">+=</span> bfs<span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span> graph<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-11399 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-11399-Python</link>
    <pubDate>2020-09-29</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-11399-Python</guid>
    <description>
    <![CDATA[BOJ-11399-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>정수 n명의 사람이 ATM기를 이용하는데 걸리는 시간을 공백으로 나눠 입력받는다. 이 때 모든 사람들이 걸리는 시간의 최소합을 출력하는 문제. 그리디 알고리즘을 사용하여 sorted 함수를 이용하여 풀었다. 첫번째 풀이는 n+1까지 반복문을 수행하며 리스트를 [0:i]로 슬라이싱한 값을 sum을 이용하여 더한 값을 출력하여 풀었다. 다음 풀이는 입력받은 리스트를 이용하여 반복문을 수행하며 t에 현재 반복인자가 걸리는 시간을 더하며 다른 변수 ans에 t를 더하는 식으로 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># n = int(input())</span>
</span><span class="code-line"><span class="token comment"># l = sorted(map(int, input().split()))</span>
</span><span class="code-line"><span class="token comment"># ans = 0</span>
</span><span class="code-line"><span class="token comment"># for i in range(n+1):</span>
</span><span class="code-line"><span class="token comment">#     ans += sum(l[0:i])</span>
</span><span class="code-line"><span class="token comment"># print(ans)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">ans<span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    t <span class="token operator">+=</span> i
</span><span class="code-line">    ans <span class="token operator">+=</span> t
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2630 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2630-Python</link>
    <pubDate>2020-09-29</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2630-Python</guid>
    <description>
    <![CDATA[BOJ-2630-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>정수 n을 입력받은 후 n * n 크기의 0과 1로 이루어진 배열을 입력받는다. 그래프에서 0은 흰색, 1은 파란색을 뜻한다. 그래프 안에서 색이 동일한 정사각형의 갯수를 출력하는 문제이며, 동일한 색이 아닐 때 가로와 세로 중간을 잘라 확인을 반복한다. 동일한 색으로 이루어져 있는지 확인하는 함수 isunity의 매개변수로 x와 y의 시작지점과 정사각형의 크기를 뜻하는 size를 입력받는다. 그 후 색을 확인하며 반복문 수행중에 색과 동일하지 않을 때 1, 2, 3, 4분면 각각 size//2를 이용하여 함수를 재귀하여 사용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">count <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">isunity</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">global</span> count
</span><span class="code-line">    color <span class="token operator">=</span> graph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> x <span class="token operator">+</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> y <span class="token operator">+</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> color<span class="token punctuation">:</span>
</span><span class="code-line">                isunity<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> size<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span>
</span><span class="code-line">                isunity<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> size<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span> size<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span>
</span><span class="code-line">                isunity<span class="token punctuation">(</span>x <span class="token operator">+</span> size<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> size<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span>
</span><span class="code-line">                isunity<span class="token punctuation">(</span>x <span class="token operator">+</span> size<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span> y <span class="token operator">+</span> size<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span> size<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span>
</span><span class="code-line">                <span class="token keyword">return</span>
</span><span class="code-line">    count<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">isunity<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
</span><span class="code-line"><span class="token punctuation">[</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> count<span class="token punctuation">]</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-7662 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-7662-Python</link>
    <pubDate>2020-09-27</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-7662-Python</guid>
    <description>
    <![CDATA[BOJ-7662-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>최솟값과 최댓값을 기준으로 두가지의 우선순위를 갖는 큐를 구현하는 문제. bisect를 사용하여 이진탐색 후 deque에 위치파악 후 삼입하는 방법을 사용하여, q[0]에 최솟값, q[-1]에 최댓값이 위치하도록 하였다.또한 중복되는 값을 허용하며 삭제 시에는 값을 하나만 삭제하기 때문에 딕셔너리 자료형을 사용하여 중복되는 수를 계산하여 주었으며, if not deque처럼 사용하여 deque가 비었을 때 'EMPTY'를, 아닐 때 최댓값과 최솟값을 출력하여 풀었다</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> bisect
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">class</span> <span class="token class-name">Dpq</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        self<span class="token punctuation">.</span>q <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">        self<span class="token punctuation">.</span>d <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">def</span> <span class="token function">input</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">try</span><span class="token punctuation">:</span>
</span><span class="code-line">            self<span class="token punctuation">.</span>d<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">        <span class="token keyword">except</span><span class="token punctuation">:</span>
</span><span class="code-line">            self<span class="token punctuation">.</span>d<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">            bisect<span class="token punctuation">.</span>insort_left<span class="token punctuation">(</span>self<span class="token punctuation">.</span>q<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token comment"># 이진탐색을 이용해 위치파악 후 삼입</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">def</span> <span class="token function">remove</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>q<span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">pass</span>
</span><span class="code-line">        <span class="token keyword">elif</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> self<span class="token punctuation">.</span>d<span class="token punctuation">[</span>self<span class="token punctuation">.</span>q<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">                self<span class="token punctuation">.</span>d<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>self<span class="token punctuation">.</span>q<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">                self<span class="token punctuation">.</span>q<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">            <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">                self<span class="token punctuation">.</span>d<span class="token punctuation">[</span>self<span class="token punctuation">.</span>q<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> self<span class="token punctuation">.</span>d<span class="token punctuation">[</span>self<span class="token punctuation">.</span>q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">                self<span class="token punctuation">.</span>d<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>self<span class="token punctuation">.</span>q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">                self<span class="token punctuation">.</span>q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">            <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">                self<span class="token punctuation">.</span>d<span class="token punctuation">[</span>self<span class="token punctuation">.</span>q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">def</span> <span class="token function">print</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>q<span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'EMPTY'</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>q<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    dpq <span class="token operator">=</span> Dpq<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        s<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">        n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token string">"I"</span><span class="token punctuation">:</span>
</span><span class="code-line">            dpq<span class="token punctuation">.</span><span class="token builtin">input</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">            dpq<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>n<span class="token punctuation">)</span>
</span><span class="code-line">    dpq<span class="token punctuation">.</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-11726 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-11726-Python</link>
    <pubDate>2020-09-24</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-11726-Python</guid>
    <description>
    <![CDATA[BOJ-11726-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>2xN 크기의 직사각형을 1×2, 2×1 타일로 채우는 방법의 수를 10,007로 나눈 나머지를 출력하는 문제. N이 1일 때 1, 2일 때 2, 3일 때 3, 4일 때 5, 5일 때 8이다. 이를 통해 n[i] = n[i-2] + n[i-1]인 규칙을 알아내어 리스트를 [-2::]로 슬라이싱한 값을 sum함수를 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9997</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">10007</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-9095 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-9095-Python</link>
    <pubDate>2020-09-20</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-9095-Python</guid>
    <description>
    <![CDATA[BOJ-9095-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>숫자 1부터 10 이하의 숫자가 입력됐을 때 1, 2, 3만을 이용하여 더하여 나타냈을 때의 경우의 수를 출력하는 문제. 첫 생각은 n을 1로만 더한 식을 이용하여 1 + 1 > 2, 2 + 1 > 3으로 모든 경우에 적용하여 풀 생각을 하였으나 비효율적이라 생각되어 고민 후에 1, 2, 3의 경우의 수를 더하면 4의 경우의 수이며 2, 3, 4의 경우의 수를 더하면 5의 경우의 수인 것을 알게 되었다. l[-3::]와 같이 리스트를 슬라이싱하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-5532 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-5532-Python</link>
    <pubDate>2020-09-19</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-5532-Python</guid>
    <description>
    <![CDATA[BOJ-5532-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>방학의 일수, 국어 숙제량 A, 수학 숙제량 B, 하루에 풀 수 있는 국어, 수학 숙제량 각 C, D라고 할 때 숙제를 안하고 노는 방학의 일수를 출력하는 문제. 삼항 연산자를 이용하여 나누기, 나누기 값 연산을 비교해서 풀었다. 다른 사람의 풀이로는 (A+C-1)//C와 같은 연산을 이용하여 푼 것을 배웠으며 내 수학적 사고능력이 너무 부족하다 생각된다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">n1 <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">//</span> l<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">if</span> l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> l<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">></span> l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">//</span> l<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token keyword">else</span> l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">//</span> l<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">n2 <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">//</span> l<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">if</span> l<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">/</span> l<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">></span> l<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">//</span> l<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token keyword">else</span> l<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">//</span> l<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token builtin">max</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># n,a,b,q,w=map(lambda x: int(input()),range(5))</span>
</span><span class="code-line"><span class="token comment"># print(n-max((a+q-1)//q,(w+b-1)//w))</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-11723 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-11723-Python</link>
    <pubDate>2020-09-17</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-11723-Python</guid>
    <description>
    <![CDATA[BOJ-11723-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>1부터 20의 범위를 갖는 공집합이 있을 때 추가, 삭제, 확인, 토글, 전체 1로 만들기, 전체 0으로 만들기 기능이 있는 공집합을 구현하는 문제. 첫 풀이는 파이썬의 set 자료형을 사용하여 풀려했으나 확인 후 출력할 때 효율적이지 못할 거 같아 21의 크기를 갖는 리스트 자료형을 만들어 0과 1로 구분지어 풀었다. 토글은 not 1 or 0을 int로 저장하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">class</span> <span class="token class-name">Set</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        self<span class="token punctuation">.</span><span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">21</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        t <span class="token operator">=</span> t<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">if</span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'add'</span><span class="token punctuation">:</span>
</span><span class="code-line">            self<span class="token punctuation">.</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">        <span class="token keyword">elif</span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'remove'</span><span class="token punctuation">:</span>
</span><span class="code-line">            self<span class="token punctuation">.</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">        <span class="token keyword">elif</span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'check'</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">elif</span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'toggle'</span><span class="token punctuation">:</span>
</span><span class="code-line">            self<span class="token punctuation">.</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token keyword">not</span> <span class="token builtin">int</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">elif</span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'empty'</span><span class="token punctuation">:</span>
</span><span class="code-line">            self<span class="token punctuation">.</span><span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">20</span>
</span><span class="code-line">        <span class="token keyword">elif</span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'all'</span><span class="token punctuation">:</span>
</span><span class="code-line">            self<span class="token punctuation">.</span><span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">20</span>
</span><span class="code-line">
</span><span class="code-line">s <span class="token operator">=</span> Set<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    s<span class="token punctuation">.</span>check<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-7569 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-7569-Python</link>
    <pubDate>2020-09-17</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-7569-Python</guid>
    <description>
    <![CDATA[BOJ-7569-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>7576번 문제가 2차원 배열의 토마토 상자였으면, 이번 문제는 3차원 배열의 토마토 상자인 문제이다. 7576번 문제의 풀이와 다르게 visit 배열을 만들지 않고 풀었으며 dx, dy, dz 배열에 6개 요소를 넣어 6번 반복을 하여 날짜를 계산하는 dist 배열에 값을 넣어 3중 반복문을 통해 비교하여 출력하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># from collections import deque</span>
</span><span class="code-line"><span class="token comment"># import sys</span>
</span><span class="code-line"><span class="token comment"># input = sys.stdin.readline</span>
</span><span class="code-line"><span class="token comment"># q = deque()</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># n, m, h = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment"># graph = [[list(map(int, sys.stdin.readline().split())) for _ in range(n)] for _ in range(h)]</span>
</span><span class="code-line"><span class="token comment"># dist = [[[0] * n for _ in range(m)] for _ in range(h)]</span>
</span><span class="code-line"><span class="token comment"># isnone = True</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># for z in range(h):</span>
</span><span class="code-line"><span class="token comment">#     for y in range(m):</span>
</span><span class="code-line"><span class="token comment">#         for x in range(n):</span>
</span><span class="code-line"><span class="token comment">#             if graph[z][y][x] == 1:</span>
</span><span class="code-line"><span class="token comment">#                 q.append((z, y, x))</span>
</span><span class="code-line"><span class="token comment">#                 isnone = False</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># if isnone:</span>
</span><span class="code-line"><span class="token comment">#     print(-1)</span>
</span><span class="code-line"><span class="token comment">#     sys.exit(0)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># dx = [1, -1, 0, 0, 0, 0]</span>
</span><span class="code-line"><span class="token comment"># dy = [0, 0, 1, -1, 0, 0]</span>
</span><span class="code-line"><span class="token comment"># dz = [0, 0, 0, 0, 1, -1]</span>
</span><span class="code-line"><span class="token comment"># while q:</span>
</span><span class="code-line"><span class="token comment">#     a, b, c = q.popleft()</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     for i in range(6):</span>
</span><span class="code-line"><span class="token comment">#         x = c + dx[i]</span>
</span><span class="code-line"><span class="token comment">#         y = b + dy[i]</span>
</span><span class="code-line"><span class="token comment">#         z = a + dz[i]</span>
</span><span class="code-line"><span class="token comment">#         if 0 &#x3C;= x &#x3C; n and 0 &#x3C;= y &#x3C; m and 0 &#x3C;= z &#x3C; h:</span>
</span><span class="code-line"><span class="token comment">#             if graph[z][y][x] == 0:</span>
</span><span class="code-line"><span class="token comment">#                 q.append((z, y, x))</span>
</span><span class="code-line"><span class="token comment">#                 graph[z][y][x] = 1</span>
</span><span class="code-line"><span class="token comment">#                 dist[z][y][x] = dist[a][b][c] + 1</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># day = 0</span>
</span><span class="code-line"><span class="token comment"># for z in range(h):</span>
</span><span class="code-line"><span class="token comment">#     for y in range(m):</span>
</span><span class="code-line"><span class="token comment">#         for x in range(n):</span>
</span><span class="code-line"><span class="token comment">#             if dist[z][y][x] > day:</span>
</span><span class="code-line"><span class="token comment">#                 day = dist[z][y][x]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#             elif graph[z][y][x] == 0:</span>
</span><span class="code-line"><span class="token comment">#                 print(-1)</span>
</span><span class="code-line"><span class="token comment">#                 sys.exit(0)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># print(day)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">q <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> h <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">dist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">isnone <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> z <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> graph<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">                q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">                isnone <span class="token operator">=</span> <span class="token boolean">False</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">if</span> isnone<span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">dx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>
</span><span class="code-line">dy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>
</span><span class="code-line">dz <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">    a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        x <span class="token operator">=</span> c <span class="token operator">+</span> dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
</span><span class="code-line">        y <span class="token operator">=</span> b <span class="token operator">+</span> dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
</span><span class="code-line">        z <span class="token operator">=</span> a <span class="token operator">+</span> dz<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
</span><span class="code-line">        <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> x <span class="token operator">&#x3C;</span> n <span class="token keyword">and</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> y <span class="token operator">&#x3C;</span> m <span class="token keyword">and</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> z <span class="token operator">&#x3C;</span> h<span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> graph<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">                q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">                graph<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">                dist<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">day <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line"><span class="token keyword">for</span> z <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> dist<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">></span> day<span class="token punctuation">:</span>
</span><span class="code-line">                day <span class="token operator">=</span> dist<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">            <span class="token keyword">elif</span> graph<span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">                sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-7576 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-7576-Python</link>
    <pubDate>2020-09-10</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-7576-Python</guid>
    <description>
    <![CDATA[BOJ-7576-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n, m 크기를 가진 2차원 배열을 입력받는다. 1은 익은 토마토, 0은 안익은 토마토, -1은 벽을 뜻한다. 익은 토마토는 하루에 상하좌우 안익은 토마토를 익게할 수 있는데 이 때 모든 토마토들이 익는 날짜를 출력하는 문제. 이미 모든 토마토들이 익은 상태일 때는 0을, 모튼 토마토들이 익을 수 없을 땐 -1을 출력하는 문제. 방문여부와 거리날짜를 확인할 2차원 리스트 check와 dist를 사용했다. 입력간에 1이 아예 없을 때를 확인하여 -1을 출력한 후 실행을 종료할 isnone 변수도 사용하였다. 추가적으로 입력간에 1일 때를 확인하여 큐에 추가, check와 dist를 True와 0으로 변환하였다. 그 후 큐를 이용하여 상하좌우 check가 false이며 그래프의 값이 0인 요소를 찾아 1로 바꾸었다. dist는 현재 큐의 값에 1을 더하였다. 문제의 정답을 위해 2중 반복문을 수행하여 그래프에 0이 있을 때 -1을 출력한 후 실행을 종료, 제일 큰 dist의 값을 day에 저장하여 출력하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque
</span><span class="code-line">que <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">check <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> n <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">dist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">isnone <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    graph<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> graph<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">            que<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">            check<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">            dist<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">            isnone <span class="token operator">=</span> <span class="token boolean">False</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">if</span> isnone <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">    exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">dx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">dy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">while</span> que<span class="token punctuation">:</span>
</span><span class="code-line">    i<span class="token punctuation">,</span> j <span class="token operator">=</span> que<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">for</span> temp <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        x <span class="token operator">=</span> dx<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">+</span> i
</span><span class="code-line">        y <span class="token operator">=</span> dy<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">+</span> j
</span><span class="code-line">        <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> y <span class="token operator">&#x3C;</span> n <span class="token keyword">and</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> x <span class="token operator">&#x3C;</span> m<span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> check<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">False</span> <span class="token keyword">and</span> graph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">                que<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">                dist<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>
</span><span class="code-line">                check<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">                graph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">day <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line"><span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> graph<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">            exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">if</span> dist<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">></span> day<span class="token punctuation">:</span>
</span><span class="code-line">            day <span class="token operator">=</span> dist<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1620 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1620-Python</link>
    <pubDate>2020-09-09</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1620-Python</guid>
    <description>
    <![CDATA[BOJ-1620-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n, m을 입력받은 후 n개의 포켓몬 이름을 입력받는다. 그 후 m만큼 문자열을 입력했을 때, 해당 포켓몬의 번호를, 숫자를 입력했을 때, 해당 포켓몬의 이름을 출력하는 문제. 첫 풀이는 try, except를 이용하여 숫자인지 문자열인지, list.index()를 이용하여 해당 포켓몬 번호를 출력하여 풀었으나 시간초과 결과를 받게 되었고 두번째 풀이는 딕셔너리 자료형에 key를 포켓몬 이름으로, value를 포켓몬 번호로 저장하여 int(s)에서 except됐을 때 딕셔너리 자료형을 이용하여 출력하여 풀었다. 다른 사람의 풀이에서 문자열에 isdigit 함수가 있는 것을 보고 바꾼 것이 세번째 풀이이다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># pokemon_list = []</span>
</span><span class="code-line"><span class="token comment"># n, m = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment"># for _ in range(n):</span>
</span><span class="code-line"><span class="token comment">#     pokemon_list.append(input())</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># for _ in range(m):</span>
</span><span class="code-line"><span class="token comment">#     s = input()</span>
</span><span class="code-line"><span class="token comment">#     try:</span>
</span><span class="code-line"><span class="token comment">#         s = int(s)</span>
</span><span class="code-line"><span class="token comment">#         print(pokemon_list[s-1])</span>
</span><span class="code-line"><span class="token comment">#     except:</span>
</span><span class="code-line"><span class="token comment">#         print(pokemon_list.index(s)+1)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line">pokemon_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">pokemon_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">    pokemon_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
</span><span class="code-line">    pokemon_dict<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">try</span><span class="token punctuation">:</span>
</span><span class="code-line">        s <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span>pokemon_list<span class="token punctuation">[</span>s<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">except</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span>pokemon_dict<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># import sys</span>
</span><span class="code-line"><span class="token comment"># input = sys.stdin.readline</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># pokemon_list = []</span>
</span><span class="code-line"><span class="token comment"># pokemon_dict = {}</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># n, m = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment"># for i in range(n):</span>
</span><span class="code-line"><span class="token comment">#     s = input().rstrip()</span>
</span><span class="code-line"><span class="token comment">#     pokemon_list.append(s)</span>
</span><span class="code-line"><span class="token comment">#     pokemon_dict[s] = i+1</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># for _ in range(m):</span>
</span><span class="code-line"><span class="token comment">#     s = input().rstrip()</span>
</span><span class="code-line"><span class="token comment">#     if s.isdigit():</span>
</span><span class="code-line"><span class="token comment">#         print(pokemon_list[int(s)-1])</span>
</span><span class="code-line"><span class="token comment">#     else:</span>
</span><span class="code-line"><span class="token comment">#         print(pokemon_dict[s])</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1676 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1676-Python</link>
    <pubDate>2020-09-09</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1676-Python</guid>
    <description>
    <![CDATA[BOJ-1676-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n!의 뒤에서부터 0이 몇 개까지 이어지는 지 출력하는 문제. 첫 풀이는 팩토리얼을 재귀적으로 계산하는 함수를 만든 후 reversed와 반복문을 이용하여 정수형 변수 ans를 1씩 더하여 풀었다. 다른 사람의 풀이를 보니 수식으로 풀 수 있다는 것을 알아 두번째 풀이에서 적용해 보았으며 뒷자리 0의 갯수는 2와 5의 갯수로 판단되는 것을 알게 되었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">return</span> n <span class="token operator">*</span> f<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">if</span> n <span class="token operator">></span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> f<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">reversed</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">:</span> ans <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">break</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># n = int(input()) // 5</span>
</span><span class="code-line"><span class="token comment"># print(n + n // 5 + n // 25)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1325 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1325-Python</link>
    <pubDate>2020-09-06</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1325-Python</guid>
    <description>
    <![CDATA[BOJ-1325-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>두 개의 컴퓨터 번호 x, y가 주어졌을 때 y를 해킹하면 x도 해킹할 수 있다고 한다. 한 번에 가장 많은 컴퓨터를 해킹할 수 있는 컴퓨터의 번호를 출력하는 문제. 첫 풀이는 dfs, 깊이우선탐색으로 구현을 하였으나 백준풀이상 시간초과 결과를 받게 되었고, 검색 후 deque를 사용한 bfs와 sys.stdin.readline을 사용하여 시간을 줄이고 기존 내 풀이와 다르게 그래프를 2차원 배열로 저장하였다. 그렇게 하여도 백준 python3 채점 기준에는 통과하지 못하여 pypy3로 변경하여 풀 수 있게 되었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># import sys</span>
</span><span class="code-line"><span class="token comment"># input = sys.stdin.readline</span>
</span><span class="code-line"><span class="token comment"># from collections import deque</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># def dfs(graph, start):</span>
</span><span class="code-line"><span class="token comment">#     que = deque()</span>
</span><span class="code-line"><span class="token comment">#     que.append(start)</span>
</span><span class="code-line"><span class="token comment">#     visit = []</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment">#     while que:</span>
</span><span class="code-line"><span class="token comment">#         node = que.popleft()</span>
</span><span class="code-line"><span class="token comment">#         if node not in visit:</span>
</span><span class="code-line"><span class="token comment">#             visit.append(node)</span>
</span><span class="code-line"><span class="token comment">#             if node in graph:</span>
</span><span class="code-line"><span class="token comment">#                 que.extend(graph[node])</span>
</span><span class="code-line"><span class="token comment">#     return len(visit)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># graph = {}</span>
</span><span class="code-line"><span class="token comment"># n, m = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment"># for _ in range(m):</span>
</span><span class="code-line"><span class="token comment">#     x, y = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment">#     if y in graph:</span>
</span><span class="code-line"><span class="token comment">#         graph[y].append(x)</span>
</span><span class="code-line"><span class="token comment">#     else:</span>
</span><span class="code-line"><span class="token comment">#         graph[y] = [x]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># len_list = []</span>
</span><span class="code-line"><span class="token comment"># temp_max = 0</span>
</span><span class="code-line"><span class="token comment"># for i in range(n):</span>
</span><span class="code-line"><span class="token comment">#     temp = dfs(graph, i+1)</span>
</span><span class="code-line"><span class="token comment">#     if temp_max &#x3C; temp:</span>
</span><span class="code-line"><span class="token comment">#         len_list = [i+1]</span>
</span><span class="code-line"><span class="token comment">#         temp_max = temp</span>
</span><span class="code-line"><span class="token comment">#     elif temp_max == temp:</span>
</span><span class="code-line"><span class="token comment">#         len_list.append(i+1)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># print(*len_list)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line"><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">bfs</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    q <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">    q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>start<span class="token punctuation">)</span>
</span><span class="code-line">    visit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">    visit<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">    cnt <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">    <span class="token keyword">while</span> q<span class="token punctuation">:</span>
</span><span class="code-line">        st <span class="token operator">=</span> q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">for</span> i <span class="token keyword">in</span> graph<span class="token punctuation">[</span>st<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">                visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">                cnt <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">                q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">return</span> cnt
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line">n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    graph<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">len_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">temp_max <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    temp <span class="token operator">=</span> bfs<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> temp_max <span class="token operator">==</span> temp<span class="token punctuation">:</span>
</span><span class="code-line">        len_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> temp_max <span class="token operator">&#x3C;</span> temp<span class="token punctuation">:</span>
</span><span class="code-line">        len_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">        len_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</span><span class="code-line">        temp_max <span class="token operator">=</span> temp
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span>len_list<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-5567 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-5567-Python</link>
    <pubDate>2020-09-06</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-5567-Python</guid>
    <description>
    <![CDATA[BOJ-5567-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>정해진 수만큼의 x y와 같이 연결된 정점이 입력된다. 정점 1과 연결된 정점들의 정점까지 갯수를 출력해야 한다. 정점 1과 연결된 정점이 2와 3이면 정점 2, 3을 포함한 2, 3 정점과 연결된 정점의 수를 출력하는 문제. 입력되는 수를 바탕으로 양방향 그래프를 만든 후, extend를 사용하여 1과 연결된 정점들을 리스트 que에, 중복을 제거하기 위해 집합 자료형 visit에 graph[1]을 넣었다. que에 든 정점 1과 연결된 정점 i를 사용하여 반복문을 수행하며 그 안에 graph[i]를 기준으로 반복문을 수행하며 안의 값을 집합 자료형 visit에 넣었다. 정답은 1을 제외해야하기 때문에 len(visit) - 1을 하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    que <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">    visit <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>graph<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    que<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>graph<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> que<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">for</span> j <span class="token keyword">in</span> graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            visit<span class="token punctuation">.</span>add<span class="token punctuation">(</span>j<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">return</span> visit
</span><span class="code-line">
</span><span class="code-line"><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> x <span class="token keyword">in</span> graph<span class="token punctuation">:</span>
</span><span class="code-line">        graph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>y<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        graph<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>y<span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">if</span> y <span class="token keyword">in</span> graph<span class="token punctuation">:</span>
</span><span class="code-line">        graph<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        graph<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>bfs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2178 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2178-Python</link>
    <pubDate>2020-09-05</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2178-Python</guid>
    <description>
    <![CDATA[BOJ-2178-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>미로의 크기 n, m이 주어진 후 1과 0으로 이루어진 미로가 입력된다 1은 이동할 수 있는 곳, 0은 이동할 수 없는 곳이라고 하였을 때, (0, 0)에서 출발하여 (n-1, m-1)까지 걸리는 최단 거리를 계산하는 문제. 방문했는지 확인, 거리를 저장할 2차원 배열을 만들었으며, 상하좌우 방문 확인 배열의 값이 False인지, 그래프의 값이 1인지를 확인한 후 deque에 append하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque
</span><span class="code-line">n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">graph <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">check <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span><span class="token operator">*</span>m <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">dist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>m <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">que <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">que<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">dist<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">check<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">
</span><span class="code-line">dx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">dy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">while</span> que<span class="token punctuation">:</span>
</span><span class="code-line">    i<span class="token punctuation">,</span> j <span class="token operator">=</span> que<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">for</span> temp <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        x <span class="token operator">=</span> dx<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">+</span> i
</span><span class="code-line">        y <span class="token operator">=</span> dy<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">+</span> j
</span><span class="code-line">        <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> x <span class="token operator">&#x3C;</span> n <span class="token keyword">and</span> <span class="token number">0</span> <span class="token operator">&#x3C;=</span> y <span class="token operator">&#x3C;</span> m<span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">if</span> check<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token keyword">is</span> <span class="token boolean">False</span> <span class="token keyword">and</span> graph<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">                que<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">                dist<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>
</span><span class="code-line">                check<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-13752 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-13752-Python</link>
    <pubDate>2020-09-04</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-13752-Python</guid>
    <description>
    <![CDATA[BOJ-13752-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>테스트케이스 횟수 n을 입력받은 후 입력되는 숫자만큼 '='을 출력하는 문제 반복문과 문자열 곱하기 연산을 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-15000 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-15000-Python</link>
    <pubDate>2020-09-04</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-15000-Python</guid>
    <description>
    <![CDATA[BOJ-15000-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>입력되는 문자열을 대문자로 변환하여 출력하는 문제. 문자열 내장 함수 upper을 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-10872 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-10872-Python</link>
    <pubDate>2020-09-03</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-10872-Python</guid>
    <description>
    <![CDATA[BOJ-10872-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>숫자 n을 입력받은 후 n!을 출력하는 문제. math 라이브러리의 factorial을 import해서 풀었으며, 재귀 함수를 구현해서 풀기도 하였다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">from</span> math <span class="token keyword">import</span> factorial <span class="token keyword">as</span> f
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># def f(n):</span>
</span><span class="code-line"><span class="token comment">#     return n * f(n-1) if n > 1 else 1</span>
</span><span class="code-line"><span class="token comment"># print(f(int(input())))</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2667 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2667-Python</link>
    <pubDate>2020-09-03</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2667-Python</guid>
    <description>
    <![CDATA[BOJ-2667-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n*n의 크기의 0과 1로 이루어진 2차원 배열을 입력받은 후, 상하좌우 연결된 1의 수의 집합들의 수와 각 집합의 수를 정렬하여 출력하는 문제. 재귀적으로 배열의 상하좌우가 1인지 확인하며 count에 1씩 더하며 count를 반환하며 해당 배열 인자를 0으로 바꾸는 함수 dfs를 만들었으며, 이 중 배열의 크기를 넘는 경우를 위해 두 개의 조건문 중에 배열의 크기 확인을 and 앞에두는 것으로 방지할 수 있다는 것을 배웠다. 이후 배열의 모든 부분을 2중 반복문을 사용하여 1인지 확인하여 ans 리스트에 append한 후 sorted와 len 함수를 사용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    <span class="token keyword">if</span> j<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&#x3C;</span> n <span class="token keyword">and</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">        count <span class="token operator">=</span> dfs<span class="token punctuation">(</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> j<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token keyword">and</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">        count <span class="token operator">=</span> dfs<span class="token punctuation">(</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> i<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&#x3C;</span> n <span class="token keyword">and</span> l<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">        count <span class="token operator">=</span> dfs<span class="token punctuation">(</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> i<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token keyword">and</span> l<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">        count <span class="token operator">=</span> dfs<span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> count
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dfs<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token punctuation">[</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1254 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1254-Python</link>
    <pubDate>2020-08-29</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1254-Python</guid>
    <description>
    <![CDATA[BOJ-1254-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>문자열 s를 입력받은 후 문자열의 뒤부터 0개 이상의 단어를 추가해서 만들 수 있는 펠린드롬 단어중 제일 짧은 단어의 길이를 출력하는 문제. 내 풀이는 펠린드롬 인지를 확인하는 함수를 만든 후, 문자열의 길이만큼 반복문을 수행하며 s에 s[0:i+1]을 reversed하여 더한 문자열을 펠린드롬 확인 함수를 사용하여 정답을 출력하였다. <i>1234 + 1 > 1234 + 21 > 1234 + 321 </i> 다른 사람의 풀이는 s를 앞에서부터 슬라이싱한 값에 reversed한 문자열이 있는 지 확인하는 방식이다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># 1254</span>
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">ispalin</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    len_s <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>len_s <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> s<span class="token punctuation">[</span>len_s<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">return</span> <span class="token boolean">False</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token boolean">True</span>
</span><span class="code-line">
</span><span class="code-line">s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">if</span> ispalin<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    t <span class="token operator">=</span> s <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">reversed</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">if</span> ispalin<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">        exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># s = input()</span>
</span><span class="code-line"><span class="token comment"># n = len(s)</span>
</span><span class="code-line"><span class="token comment"># for i in range(n):</span>
</span><span class="code-line"><span class="token comment">#     if s[i:] in s[i:][::-1]:</span>
</span><span class="code-line"><span class="token comment">#         print(n + i)</span>
</span><span class="code-line"><span class="token comment">#         break</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1267 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1267-Python</link>
    <pubDate>2020-08-28</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1267-Python</guid>
    <description>
    <![CDATA[BOJ-1267-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>휴대폰 요금제 2개가 있을 떄 어떤 요금제가 더욱 싼지 출력하는 문제. 나누기 연산과 삼항 연산자를 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">Y<span class="token punctuation">,</span> M <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
</span><span class="code-line"><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    Y <span class="token operator">+=</span> <span class="token punctuation">(</span>i <span class="token operator">//</span> <span class="token number">30</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span>
</span><span class="code-line">    M <span class="token operator">+=</span> <span class="token punctuation">(</span>i <span class="token operator">//</span> <span class="token number">60</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">15</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'M '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span> <span class="token keyword">if</span> Y <span class="token operator">></span> M <span class="token keyword">else</span> <span class="token string">'Y M '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span> <span class="token keyword">if</span> Y <span class="token operator">==</span> M <span class="token keyword">else</span> <span class="token string">'Y '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2530 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2530-Python</link>
    <pubDate>2020-08-26</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2530-Python</guid>
    <description>
    <![CDATA[BOJ-2530-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>공백을 기준으로 나누어진 시간, 분, 초를 입력받은 후 초를 입력받아 시간을 계산해서 출력하는 문제. 입력받은 시간을 초로 계산 후 더한 다음, 다시 계산하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">h<span class="token punctuation">,</span> m<span class="token punctuation">,</span> s <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">total <span class="token operator">=</span> <span class="token punctuation">(</span>h<span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>m<span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">total <span class="token operator">%=</span> <span class="token punctuation">(</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>total <span class="token operator">//</span> <span class="token number">3600</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>total <span class="token operator">%</span> <span class="token number">3600</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>total <span class="token operator">%</span> <span class="token number">3600</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2480 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2480-Python</link>
    <pubDate>2020-08-23</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2480-Python</guid>
    <description>
    <![CDATA[BOJ-2480-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>공백으로 나누어진 3개의 수를 입력받은 후, 같은 수가 3개일 때 10000 + (같은 수) _ 1000, 같은 수가 2개일 때 1000 + (같은 수) _ 100, 같은 수가 없을 때는 (제일 높은 수) * 100 한 값을 출력하는 문제. 내 풀이는 리스트의 count 메소드를 사용하여 a, b 각 count하여 변수 n과 num에 같은 수가 몇 개인지, 그 수는 무엇인지 저장을 하여 if문으로 나누어 따로 출력하는 부분을 만들었다. 상당히 비효율 적으로 풀었다 생각하여 다른 사람의 풀이를 본 결과 sorted 함수를 사용하여 간단히 풀 수 있는 걸 배우게 되었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">count_a <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
</span><span class="code-line">count_b <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span>b<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">if</span> count_a <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">and</span> count_b <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">    n <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    num <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">elif</span> count_a <span class="token operator">>=</span> count_b<span class="token punctuation">:</span>
</span><span class="code-line">    n <span class="token operator">=</span> count_a
</span><span class="code-line">    num <span class="token operator">=</span> a
</span><span class="code-line"><span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">    n <span class="token operator">=</span> count_b
</span><span class="code-line">    num <span class="token operator">=</span> b
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10000</span> <span class="token operator">+</span> num <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">elif</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">+</span> num <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>num <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># a, b, c = sorted(map(int, input().split()))</span>
</span><span class="code-line"><span class="token comment"># if a == c:</span>
</span><span class="code-line"><span class="token comment">#     print(10000 + a * 1000)</span>
</span><span class="code-line"><span class="token comment"># elif a == b or b == c:</span>
</span><span class="code-line"><span class="token comment">#     print(1000 + b * 100)</span>
</span><span class="code-line"><span class="token comment"># else:</span>
</span><span class="code-line"><span class="token comment">#     print(c * 100)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1247 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1247-Python</link>
    <pubDate>2020-08-21</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1247-Python</guid>
    <description>
    <![CDATA[BOJ-1247-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>3번에 걸쳐 정수 n만큼 수를 입력받은 후 총합의 부호를 출력하는 문제. 현재 시간초과 결과를 보여주어, sys.stdin.readline을 import하여 해결하였다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># s = 0</span>
</span><span class="code-line"><span class="token comment"># for _ in range(int(input())):</span>
</span><span class="code-line"><span class="token comment">#     s += int(input())</span>
</span><span class="code-line"><span class="token comment"># if s == 0: print(0)</span>
</span><span class="code-line"><span class="token comment"># else:</span>
</span><span class="code-line"><span class="token comment">#     print('+' if s > 0 else '-')</span>
</span><span class="code-line">
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line">ip <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    s <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>ip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        s <span class="token operator">+=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>ip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'0'</span> <span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token string">'-'</span> <span class="token keyword">if</span> s <span class="token operator">&#x3C;</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-5596 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-5596-Python</link>
    <pubDate>2020-08-21</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-5596-Python</guid>
    <description>
    <![CDATA[BOJ-5596-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>공백으로 나누어진 4개의 수를 두 줄 입력받은 후, 총합이 큰 것을 출력하는 문제. max와 sum 함수를 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">m <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-17256 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-17256-Python</link>
    <pubDate>2020-08-19</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-17256-Python</guid>
    <description>
    <![CDATA[BOJ-17256-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>숫자 세개로 이루어진 두 개의 문자열을 각각 a,b,c / x,y,z라고 할 때 x-c, y//b, z-a라는 수식을 도출해 출력하는 문제</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token operator">-</span>c<span class="token punctuation">,</span> y<span class="token operator">//</span>b<span class="token punctuation">,</span> z<span class="token operator">-</span>a<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1085 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1085-Python</link>
    <pubDate>2020-08-16</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1085-Python</guid>
    <description>
    <![CDATA[BOJ-1085-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>x, y, w, h를 입력받는 다. (x, y)는 현재 내 위치이고, 사각형의 왼쪽 아랫점은 (0, 0), 오른쪽 위의 점은 (w, h)라고 할 때 사각형 밖으로 나갈 수 있는 제일 짧은 거리를 출력하는 문제. min을 사용하여 x, y, w-x, h-y를 비교하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token punctuation">,</span> h <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token operator">-</span>x<span class="token punctuation">,</span> h<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1271 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1271-Python</link>
    <pubDate>2020-08-16</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1271-Python</guid>
    <description>
    <![CDATA[BOJ-1271-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>숫자 n과 m을 입력받은 후 나눈 값과 나머지를 출력하는 문제</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token operator">//</span>m<span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token operator">%</span>m<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2338 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2338-Python</link>
    <pubDate>2020-08-16</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2338-Python</guid>
    <description>
    <![CDATA[BOJ-2338-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>숫자 n과 m을 입력받은 후 +, -, x 연산을 하야 출력하는 문제</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">m <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token operator">+</span>m<span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token operator">-</span>m<span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token operator">*</span>m<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2475 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2475-Python</link>
    <pubDate>2020-08-16</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2475-Python</guid>
    <description>
    <![CDATA[BOJ-2475-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>5가지 수를 입력받은 후 각 수를 제곱한 수들의 합에 10으로 나눈 나머지를 출력하는 문제. 함수를 만들어서 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">sq</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">return</span> n<span class="token operator">**</span><span class="token number">2</span>
</span><span class="code-line">a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>e <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sq<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">+</span>sq<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">+</span>sq<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">+</span>sq<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token operator">+</span>sq<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2845 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2845-Python</link>
    <pubDate>2020-08-16</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2845-Python</guid>
    <description>
    <![CDATA[BOJ-2845-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>두 수 n, m을 입력 받은 후 곱한 값에 다음 줄에 입력되는 5가지 수와 비교한 값을 출력하는 문제. input.split한 값을 기준으로 for문을 수행하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">s <span class="token operator">=</span> n<span class="token operator">*</span>m
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> s<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2914 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2914-Python</link>
    <pubDate>2020-08-16</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2914-Python</guid>
    <description>
    <![CDATA[BOJ-2914-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n과 m을 입력받은 후 A를 구하면 된다. A / n이 m이지만 A / n에서 소수값이 있을 때 m은 +1한 정수가 되게 된다. n * (m-1) + 1 수식을 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token punctuation">(</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-3003 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-3003-Python</link>
    <pubDate>2020-08-16</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-3003-Python</guid>
    <description>
    <![CDATA[BOJ-3003-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>정해진 수들과 비교하여 차이값을 출력하는 문제 input.split한 리스트와 range(6)을 기준으로 수행되는 for문을 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">cl <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>
</span><span class="code-line">nl <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>cl<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> nl<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-5522 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-5522-Python</link>
    <pubDate>2020-08-16</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-5522-Python</guid>
    <description>
    <![CDATA[BOJ-5522-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>5개의 줄에 입력되는 수들의 총합을 출력하는 문제.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    n <span class="token operator">+=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-5554 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-5554-Python</link>
    <pubDate>2020-08-16</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-5554-Python</guid>
    <description>
    <![CDATA[BOJ-5554-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>4개의 줄에 입력되는 수들을 분과 초로 출력하는 문제. 60으로 나눈 값과 나머지를 출력하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    n <span class="token operator">+=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token operator">//</span><span class="token number">60</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">60</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-14405 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-14405-Python</link>
    <pubDate>2020-08-14</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-14405-Python</guid>
    <description>
    <![CDATA[BOJ-14405-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>문자열이 입력되고 'pi', 'ka', 'chu'를 제외한 다른 단어가 있을 때 NO, 세 단어로만 이루어져 있을 때 YES를 출력하는 문제. 첫 풀이 때 replace('pi', '')와 같이 단어를 공백으로 바꿔주었는데 'kpia'와 같은 문자열에서 pi가 없어져 'ka'가 있다고 판단하기 때문에 replace를 '/'로 하였고 최대 문자열의 길이인 '/'*5000과 in 연산자로 비교하여 '/'가 아닌 다른 문자가 있을 때 NO를 출력하게 풀었다. 다른 풀이는 replace를 ' '으로 하여 strip 함수를 이용하여 푸는 것이다</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">s <span class="token operator">=</span> s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'pi'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span>
</span><span class="code-line">s <span class="token operator">=</span> s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'ka'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span>
</span><span class="code-line">s <span class="token operator">=</span> s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'chu'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'YES'</span> <span class="token keyword">if</span> s <span class="token keyword">in</span> <span class="token string">'/'</span><span class="token operator">*</span><span class="token number">5000</span> <span class="token keyword">else</span> <span class="token string">'NO'</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># print('NO' if input().replace('pi', ' ').replace('ka', ' ').replace('chu', ' ').strip() else 'YES')</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-15963 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-15963-Python</link>
    <pubDate>2020-08-14</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-15963-Python</guid>
    <description>
    <![CDATA[BOJ-15963-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>한 문자열에 공백을 기준으로 두 개의 수를 입력받고 같으면 1 다르면 0을 출력하는 문제. split()과 삼항연산자를 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">a<span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">if</span> a<span class="token operator">==</span>b <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2455 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2455-Python</link>
    <pubDate>2020-08-13</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2455-Python</guid>
    <description>
    <![CDATA[BOJ-2455-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>4개의 줄을 입력받으며 각 줄마다 열차에 '하차한 승객 수' '승차한 승객 수'를 입력받는 다. 승객이 가장 많이 탑승하고 있을 때가 몇명인지 출력하는 문제. 반복문을 4번 수행하며 t 변수에 t + 승차한 승객 수 - 하차한 승객 수를 계산하였고 max 함수를 이용하여 t와 저번 반복문에 수행된 ans와 비교를 하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">t<span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    t <span class="token operator">=</span> t <span class="token operator">+</span> j <span class="token operator">-</span> i
</span><span class="code-line">    ans <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> t<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2460 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2460-Python</link>
    <pubDate>2020-08-13</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2460-Python</guid>
    <description>
    <![CDATA[BOJ-2460-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>위 문제와 동일하며 다른 점은 10번 반복을 한다는 점. 반복문을 10번 수행하게 바꾸어서 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">t<span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    t <span class="token operator">=</span> t <span class="token operator">+</span> j <span class="token operator">-</span> i
</span><span class="code-line">    ans <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> t<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-17293 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-17293-Python</link>
    <pubDate>2020-08-12</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-17293-Python</guid>
    <description>
    <![CDATA[BOJ-17293-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n을 입력받은 후 n ~ 0까지 이어지는 노래 가사를 출력하는데 가사의 첫 줄은 n bottles, n이 1일 때는 bottle, 0일 때는 no more bottles로 나누어 출력해야 한다. 두번째 줄은 n-1 bottles, n-1이 1일 때는 bottle, i-1이 0일 때는 no more bottles로 출력해야 한다. 추가적으로 마지막 문장은 다르며 n bottles 혹은 bottle을 출력해야한다. 첫 풀이는 단순 if문과 삼항연산자를 이용하여 풀었으며 두번째 풀이는 함수를 이용하여 풀었으나 백준 풀이상에서는 틀렸다고 나오는 데 이유를 아직 못찾았다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> i <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">:</span>
</span><span class="code-line">        w1 <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' bottles'</span>
</span><span class="code-line">        w2 <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' bottles'</span> <span class="token keyword">if</span> i<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token string">'1 bottle'</span>
</span><span class="code-line">    <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">        w1 <span class="token operator">=</span> <span class="token string">'1 bottle'</span>
</span><span class="code-line">        w2 <span class="token operator">=</span> <span class="token string">'no more bottles'</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        w1 <span class="token operator">=</span> <span class="token string">'no more bottles'</span>
</span><span class="code-line">        w2 <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' bottles'</span> <span class="token keyword">if</span> n <span class="token operator">></span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token string">'1 bottle'</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>w1 <span class="token operator">+</span> <span class="token string">' of beer on the wall, '</span> <span class="token operator">+</span> w1 <span class="token operator">+</span> <span class="token string">' of beer.'</span> <span class="token keyword">if</span> w1 <span class="token operator">!=</span> <span class="token string">'no more bottles'</span> <span class="token keyword">else</span>
</span><span class="code-line">      <span class="token string">'No more bottles of beer on the wall, no more bottles of beer.'</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Take one down and pass it around, '</span> <span class="token operator">+</span> w2 <span class="token operator">+</span> <span class="token string">' of beer on the wall.'</span> <span class="token keyword">if</span> w1 <span class="token operator">!=</span> <span class="token string">'no more bottles'</span> <span class="token keyword">else</span>
</span><span class="code-line">      <span class="token string">'Go to the store and buy some more, '</span> <span class="token operator">+</span> w2 <span class="token operator">+</span> <span class="token string">' of beer on the wall.'</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># def n(x):</span>
</span><span class="code-line"><span class="token comment">#     if x == 0:</span>
</span><span class="code-line"><span class="token comment">#         return 'no more bottles'</span>
</span><span class="code-line"><span class="token comment">#     return '1 bottle' if x == 1 else str(x)+' bottles'</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># j = int(input())</span>
</span><span class="code-line"><span class="token comment"># for i in range(j, 0, -1):</span>
</span><span class="code-line"><span class="token comment">#     print(n(i) + ' of beer on the wall, ' + n(i) + ' of beer.')</span>
</span><span class="code-line"><span class="token comment">#     print('Take one down and pass it around, ' + n(i-1) + ' of beer on the wall.')</span>
</span><span class="code-line"><span class="token comment">#     print('')</span>
</span><span class="code-line"><span class="token comment"># print("No more bottles of beer on the wall, no more bottles of beer.")</span>
</span><span class="code-line"><span class="token comment"># print("Go to the store and buy some more, " + n(j) + " on the wall.")</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-11931 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-11931-Python</link>
    <pubDate>2020-08-11</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-11931-Python</guid>
    <description>
    <![CDATA[BOJ-11931-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 수를 각 줄마다 입력받고 내림차순으로 정렬하여 각 줄마다 출력하는 문제. 첫풀이에서 시간초과 결과를 받게 되어 sys.stdin.readline을 import하였디. 그 후 sorted(퀵 정렬)와 reverse=True를 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># l = []</span>
</span><span class="code-line"><span class="token comment"># for _ in range(int(input())):</span>
</span><span class="code-line"><span class="token comment">#     l.append(int(input()))</span>
</span><span class="code-line"><span class="token comment"># l.sort(reverse=True)</span>
</span><span class="code-line"><span class="token comment"># [print(i) for i in l]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># import sys</span>
</span><span class="code-line"><span class="token comment"># print(*sorted([int(sys.stdin.readline()) for _ in range(int(input()))], reverse = True))</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token punctuation">[</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-17496 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-17496-Python</link>
    <pubDate>2020-08-11</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-17496-Python</guid>
    <description>
    <![CDATA[BOJ-17496-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>작물을 판매할 수 있는 총 가격을 출력하는 문제. 입력받는 d, g, n, p는 각 기를 수 있는 일 수, 자라는 데 걸리는 일 수, 한 번에 심을 수 있는 수, 가격이다. 문제에서 처음 심는 날을 1일으로 정해놓았기 때문에 (d-1)//g<em>n</em>p를 계산하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># 일수 자라는일수 심을수있는수 가격</span>
</span><span class="code-line">d<span class="token punctuation">,</span>g<span class="token punctuation">,</span>n<span class="token punctuation">,</span>p<span class="token operator">=</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>d<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">//</span>g<span class="token operator">*</span>n<span class="token operator">*</span>p<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-4470 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-4470-Python</link>
    <pubDate>2020-08-11</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-4470-Python</guid>
    <description>
    <![CDATA[BOJ-4470-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 문자열을 입력받고 각 입력받은 문자열 앞에 '1. ~', '2. ~', '3. ~'과 같이 줄 번호를 붙여서 출력하는 문제. for 반복문을 range(n)을 기준으로 돌며 i+1과 '. '을 input()한 것에 더 한 것을 출력하여 풀었다</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    t <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token string">'. '</span> <span class="token operator">+</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-10818 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-10818-Python</link>
    <pubDate>2020-08-10</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-10818-Python</guid>
    <description>
    <![CDATA[BOJ-10818-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>태국은 석가모니가 열반한 해를 기준으로 연도를 세는 불기를 사용한다. 불기 연도를 입력받은 후 서기 연도를 출력하는 문제. 543년 차이가 나기 때문에 간단한 사칙연산을 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-17298 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-17298-Python</link>
    <pubDate>2020-08-10</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-17298-Python</guid>
    <description>
    <![CDATA[BOJ-17298-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>위 문제의 시간초과로 인하여 스택을 이용하여 풀어 보았다. range(n-1)을 반복하며 s[i]보다 s[i+1]이 클 떄 정답 리스트인 ans_l에 [i]에 넣었다. 그렇지 못할 때 스택에 push하는데 스택에는 s[i]를 저장하는 list와 i를 저장하는 init_len 리스트를 두어 반복문 수행안에 while 스택의 길이가 0보다 크며 s[i+1]이 스택의 맨 마지막에 들어온 것보다 클 때 ans_l에 추가하여 풀었다. 다른 사람의 풀이를 보니 아직 배울 점이 많은 걸 또 깨달았다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># n = int(input())</span>
</span><span class="code-line"><span class="token comment"># l = list(map(int, input().split()))</span>
</span><span class="code-line"><span class="token comment"># for i in range(n):</span>
</span><span class="code-line"><span class="token comment">#     for j in range(i, n):</span>
</span><span class="code-line"><span class="token comment">#         if l[j] > l[i]:</span>
</span><span class="code-line"><span class="token comment">#             print(l[j], end=' ')</span>
</span><span class="code-line"><span class="token comment">#             break</span>
</span><span class="code-line"><span class="token comment">#         elif j == n-1:</span>
</span><span class="code-line"><span class="token comment">#             print(-1, end=' ')</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">class</span> <span class="token class-name">Stk</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        self<span class="token punctuation">.</span><span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">        self<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">        self<span class="token punctuation">.</span>init_len <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        self<span class="token punctuation">.</span><span class="token builtin">list</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>n<span class="token punctuation">)</span>
</span><span class="code-line">        self<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">        self<span class="token punctuation">.</span>init_len<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">def</span> <span class="token function">top</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> self<span class="token punctuation">.</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">def</span> <span class="token function">del_top</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        self<span class="token punctuation">.</span><span class="token builtin">list</span><span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">        self<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">-=</span> <span class="token number">1</span>
</span><span class="code-line">        self<span class="token punctuation">.</span>init_len<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">s <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">ans_l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> n
</span><span class="code-line">stk <span class="token operator">=</span> Stk<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">while</span> stk<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">and</span> s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> stk<span class="token punctuation">.</span>top<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        ans_l<span class="token punctuation">[</span>stk<span class="token punctuation">.</span>init_len<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">        stk<span class="token punctuation">.</span>del_top<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&#x3C;</span> s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">        ans_l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        stk<span class="token punctuation">.</span>push<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span>ans_l<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># n=int(input())</span>
</span><span class="code-line"><span class="token comment"># a=[*map(int,input().split())]</span>
</span><span class="code-line"><span class="token comment"># s=[]; nge=[-1]*n</span>
</span><span class="code-line"><span class="token comment"># for i in range(n):</span>
</span><span class="code-line"><span class="token comment">#   while s and a[s[-1]]&#x3C;a[i]:</span>
</span><span class="code-line"><span class="token comment">#     nge[s.pop()]=a[i]</span>
</span><span class="code-line"><span class="token comment">#   s.append(i)</span>
</span><span class="code-line"><span class="token comment"># print(*nge)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-14918 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-14918-Python</link>
    <pubDate>2020-08-07</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-14918-Python</guid>
    <description>
    <![CDATA[BOJ-14918-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>두 수를 공백으로 나눠 입력받은 후 더한 값을 출력하는 문제 sum, map, split을 이용하여 간단하게 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-9987 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-9987-Python</link>
    <pubDate>2020-08-05</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-9987-Python</guid>
    <description>
    <![CDATA[BOJ-9987-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>포켓몬스터의 번호를 입력받으면 해당 포켓몬의 이름과 속성을 출력하는 문제. 포켓몬스터 홈페이지 크롤링을 직접하지는 않았고 복사하여 딕셔너리 형태와 배열 형태로 저장된 것을 이용하여 풀었다. 첫번째 풀이에서 런타임 에러를 단순 배열이 잘못된 줄 알았지만 포켓몬의 속성이 한 개인 포켓몬도 있었기 때문에 발생한 오류였다. 해당 포켓몬의 속성 배열을 기준으로 for문을 사용하여 출럭하였다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># poket_list = [[], ['Bulbasaur', ['Grass', 'Poison']], ['Ivysaur', ['Grass', 'Poison']], ['Venusaur', ['Grass', 'Poison']], ['Charmander', ['Fire']], ['Charmeleon', ['Fire']], ['Charizard', ['Fire', 'Flying']], ['Squirtle', ['Water']], ['Wartortle', ['Water']], ['Blastoise', ['Water']], ['Caterpie', ['Bug']], ['Metapod', ['Bug']], ['Butterfree', ['Bug', 'Flying']], ['Weedle', ['Bug', 'Poison']], ['Kakuna', ['Bug', 'Poison']], ['Beedrill', ['Bug', 'Poison']], ['Pidgey', ['Normal', 'Flying']], ['Pidgeotto', ['Normal', 'Flying']], ['Pidgeot', ['Normal', 'Flying']], ['Rattata', ['Normal']], ['Raticate', ['Normal']], ['Spearow', ['Normal', 'Flying']], ['Fearow', ['Normal', 'Flying']], ['Ekans', ['Poison']], ['Arbok', ['Poison']], ['Pikachu', ['Electric']], ['Raichu', ['Electric']], ['Sandshrew', ['Ground']], ['Sandslash', ['Ground']], ['Nidoran♀', ['Poison']], ['Nidorina', ['Poison']], ['Nidoqueen', ['Poison', 'Ground']], ['Nidoran♂', ['Poison']], ['Nidorino', ['Poison']], ['Nidoking', ['Poison', 'Ground']], ['Clefairy', ['Fairy']], ['Clefable', ['Fairy']], ['Vulpix', ['Fire']], ['Ninetales', ['Fire']], ['Jigglypuff', ['Normal', 'Fairy']], ['Wigglytuff', ['Normal', 'Fairy']], ['Zubat', ['Poison', 'Flying']], ['Golbat', ['Poison', 'Flying']], ['Oddish', ['Grass', 'Poison']], ['Gloom', ['Grass', 'Poison']], ['Vileplume', ['Grass', 'Poison']], ['Paras', ['Bug', 'Grass']], ['Parasect', ['Bug', 'Grass']], ['Venonat', ['Bug', 'Poison']], ['Venomoth', ['Bug', 'Poison']], ['Diglett', ['Ground']], ['Dugtrio', ['Ground']], ['Meowth', ['Normal']], ['Persian', ['Normal']], ['Psyduck', ['Water']], ['Golduck', ['Water']], ['Mankey', ['Fighting']], ['Primeape', ['Fighting']], ['Growlithe', ['Fire']], ['Arcanine', ['Fire']], ['Poliwag', ['Water']], ['Poliwhirl', ['Water']], ['Poliwrath', ['Water', 'Fighting']], ['Abra', ['Psychic']], ['Kadabra', ['Psychic']], ['Alakazam', ['Psychic']], ['Machop', ['Fighting']], ['Machoke', ['Fighting']], ['Machamp', ['Fighting']], ['Bellsprout', ['Grass', 'Poison']], ['Weepinbell', ['Grass', 'Poison']], ['Victreebel', ['Grass', 'Poison']], ['Tentacool', ['Water', 'Poison']], ['Tentacruel', ['Water', 'Poison']], ['Geodude', ['Rock', 'Ground']], ['Graveler', ['Rock', 'Ground']], ['Golem', ['Rock', 'Ground']], ['Ponyta', ['Fire']], ['Rapidash', ['Fire']], ['Slowpoke', ['Water', 'Psychic']], ['Slowbro', ['Water', 'Psychic']], ['Magnemite', ['Electric', 'Steel']], ['Magneton', ['Electric', 'Steel']], ["Farfetch'd", ['Normal', 'Flying']], ['Doduo', ['Normal', 'Flying']], ['Dodrio', ['Normal', 'Flying']], ['Seel', ['Water']], ['Dewgong', ['Water', 'Ice']], ['Grimer', ['Poison']], ['Muk', ['Poison']], ['Shellder', ['Water']], ['Cloyster', ['Water', 'Ice']], ['Gastly', ['Ghost', 'Poison']], ['Haunter', ['Ghost', 'Poison']], ['Gengar', ['Ghost', 'Poison']], ['Onix', ['Rock', 'Ground']], ['Drowzee', ['Psychic']], ['Hypno', ['Psychic']], ['Krabby', ['Water']], ['Kingler', ['Water']], ['Voltorb', ['Electric']], ['Electrode', ['Electric']], ['Exeggcute', ['Grass', 'Psychic']], ['Exeggutor', ['Grass', 'Psychic']], ['Cubone', ['Ground']], ['Marowak', ['Ground']], ['Hitmonlee', ['Fighting']], ['Hitmonchan', ['Fighting']], ['Lickitung', ['Normal']], ['Koffing', ['Poison']], ['Weezing', ['Poison']], ['Rhyhorn', ['Ground', 'Rock']], ['Rhydon', ['Ground', 'Rock']], ['Chansey', ['Normal']], ['Tangela', ['Grass']], ['Kangaskhan', ['Normal']], ['Horsea', ['Water']], ['Seadra', ['Water']], ['Goldeen', ['Water']], ['Seaking', ['Water']], ['Staryu', ['Water']], ['Starmie', ['Water', 'Psychic']], ['Mr. Mime', ['Psychic', 'Fairy']], ['Scyther', ['Bug', 'Flying']], ['Jynx', ['Ice', 'Psychic']], ['Electabuzz', ['Electric']], ['Magmar', ['Fire']], ['Pinsir', ['Bug']], ['Tauros', ['Normal']], ['Magikarp', ['Water']], ['Gyarados', ['Water', 'Flying']], ['Lapras', ['Water', 'Ice']], ['Ditto', ['Normal']], ['Eevee', ['Normal']], ['Vaporeon', ['Water']], ['Jolteon', ['Electric']], ['Flareon', ['Fire']], ['Porygon', ['Normal']], ['Omanyte', ['Rock', 'Water']], ['Omastar', ['Rock', 'Water']], ['Kabuto', ['Rock', 'Water']], ['Kabutops', ['Rock', 'Water']], ['Aerodactyl', ['Rock', 'Flying']], ['Snorlax', ['Normal']], ['Articuno', ['Ice', 'Flying']], ['Zapdos', ['Electric', 'Flying']], ['Moltres', ['Fire', 'Flying']], ['Dratini', ['Dragon']], ['Dragonair', ['Dragon']], ['Dragonite', ['Dragon', 'Flying']], ['Mewtwo', ['Psychic']], ['Mew', ['Psychic']], ['Chikorita', ['Grass']], ['Bayleef', ['Grass']], ['Meganium', ['Grass']], ['Cyndaquil', ['Fire']], ['Quilava', ['Fire']], ['Typhlosion', ['Fire']], ['Totodile', ['Water']], ['Croconaw', ['Water']], ['Feraligatr', ['Water']], ['Sentret', ['Normal']], ['Furret', ['Normal']], ['Hoothoot', ['Normal', 'Flying']], ['Noctowl', ['Normal', 'Flying']], ['Ledyba', ['Bug', 'Flying']], ['Ledian', ['Bug', 'Flying']], ['Spinarak', ['Bug', 'Poison']], ['Ariados', ['Bug', 'Poison']], ['Crobat', ['Poison', 'Flying']], ['Chinchou', ['Water', 'Electric']], ['Lanturn', ['Water', 'Electric']], ['Pichu', ['Electric']], ['Cleffa', ['Fairy']], ['Igglybuff', ['Normal', 'Fairy']], ['Togepi', ['Fairy']], ['Togetic', ['Fairy', 'Flying']], ['Natu', ['Psychic', 'Flying']], ['Xatu', ['Psychic', 'Flying']], ['Mareep', ['Electric']], ['Flaaffy', ['Electric']], ['Ampharos', ['Electric']], ['Bellossom', ['Grass']], ['Marill', ['Water', 'Fairy']], ['Azumarill', ['Water', 'Fairy']], ['Sudowoodo', ['Rock']], ['Politoed', ['Water']], ['Hoppip', ['Grass', 'Flying']], ['Skiploom', ['Grass', 'Flying']], ['Jumpluff', ['Grass', 'Flying']], ['Aipom', ['Normal']], ['Sunkern', ['Grass']], ['Sunflora', ['Grass']], ['Yanma', ['Bug', 'Flying']], ['Wooper', ['Water', 'Ground']], ['Quagsire', ['Water', 'Ground']], ['Espeon', ['Psychic']], ['Umbreon', ['Dark']], ['Murkrow', ['Dark', 'Flying']], ['Slowking', ['Water', 'Psychic']], ['Misdreavus', ['Ghost']], ['Unown', ['Psychic']], ['Wobbuffet', ['Psychic']], ['Girafarig', ['Normal', 'Psychic']], ['Pineco', ['Bug']], ['Forretress', ['Bug', 'Steel']], ['Dunsparce', ['Normal']], ['Gligar', ['Ground', 'Flying']], ['Steelix', ['Steel', 'Ground']], ['Snubbull', ['Fairy']], ['Granbull', ['Fairy']], ['Qwilfish', ['Water', 'Poison']], ['Scizor', ['Bug', 'Steel']], ['Shuckle', ['Bug', 'Rock']], ['Heracross', ['Bug', 'Fighting']], ['Sneasel', ['Dark', 'Ice']], ['Teddiursa', ['Normal']], ['Ursaring', ['Normal']], ['Slugma', ['Fire']], ['Magcargo', ['Fire', 'Rock']], ['Swinub', ['Ice', 'Ground']], ['Piloswine', ['Ice', 'Ground']], ['Corsola', ['Water', 'Rock']], ['Remoraid', ['Water']], ['Octillery', ['Water']], ['Delibird', ['Ice', 'Flying']], ['Mantine', ['Water', 'Flying']], ['Skarmory', ['Steel', 'Flying']], ['Houndour', ['Dark', 'Fire']], ['Houndoom', ['Dark', 'Fire']], ['Kingdra', ['Water', 'Dragon']], ['Phanpy', ['Ground']], ['Donphan', ['Ground']], ['Porygon2', ['Normal']], ['Stantler', ['Normal']], ['Smeargle', ['Normal']], ['Tyrogue', ['Fighting']], ['Hitmontop', ['Fighting']], ['Smoochum', ['Ice', 'Psychic']], ['Elekid', ['Electric']], ['Magby', ['Fire']], ['Miltank', ['Normal']], ['Blissey', ['Normal']], ['Raikou', ['Electric']], ['Entei', ['Fire']], ['Suicune', ['Water']], ['Larvitar', ['Rock', 'Ground']], ['Pupitar', ['Rock', 'Ground']], ['Tyranitar', ['Rock', 'Dark']], ['Lugia', ['Psychic', 'Flying']], ['Ho-oh', ['Fire', 'Flying']], ['Celebi', ['Psychic', 'Grass']], ['Treecko', ['Grass']], ['Grovyle', ['Grass']], ['Sceptile', ['Grass']], ['Torchic', ['Fire']], ['Combusken', ['Fire', 'Fighting']], ['Blaziken', ['Fire', 'Fighting']], ['Mudkip', ['Water']], ['Marshtomp', ['Water', 'Ground']], ['Swampert', ['Water', 'Ground']], ['Poochyena', ['Dark']], ['Mightyena', ['Dark']], ['Zigzagoon', ['Normal']], ['Linoone', ['Normal']], ['Wurmple', ['Bug']], ['Silcoon', ['Bug']], ['Beautifly', ['Bug', 'Flying']], ['Cascoon', ['Bug']], ['Dustox', ['Bug', 'Poison']], ['Lotad', ['Water', 'Grass']], ['Lombre', ['Water', 'Grass']], ['Ludicolo', ['Water', 'Grass']], ['Seedot', ['Grass']], ['Nuzleaf', ['Grass', 'Dark']], ['Shiftry', ['Grass', 'Dark']], ['Taillow', ['Normal', 'Flying']], ['Swellow', ['Normal', 'Flying']], ['Wingull', ['Water', 'Flying']], ['Pelipper', ['Water', 'Flying']], ['Ralts', ['Psychic', 'Fairy']], ['Kirlia', ['Psychic', 'Fairy']], ['Gardevoir', ['Psychic', 'Fairy']], ['Surskit', ['Bug', 'Water']], ['Masquerain', ['Bug', 'Flying']], ['Shroomish', ['Grass']], ['Breloom', ['Grass', 'Fighting']], ['Slakoth', ['Normal']], ['Vigoroth', ['Normal']], ['Slaking', ['Normal']], ['Nincada', ['Bug', 'Ground']], ['Ninjask', ['Bug', 'Flying']], ['Shedinja', ['Bug', 'Ghost']], ['Whismur', ['Normal']], ['Loudred', ['Normal']], ['Exploud', ['Normal']], ['Makuhita', ['Fighting']], ['Hariyama', ['Fighting']], ['Azurill', ['Normal', 'Fairy']], ['Nosepass', ['Rock']], ['Skitty', ['Normal']], ['Delcatty', ['Normal']], ['Sableye', ['Dark', 'Ghost']], ['Mawile', ['Steel', 'Fairy']], ['Aron', ['Steel', 'Rock']], ['Lairon', ['Steel', 'Rock']], ['Aggron', ['Steel', 'Rock']], ['Meditite', ['Fighting', 'Psychic']], ['Medicham', ['Fighting', 'Psychic']], ['Electrike', ['Electric']], ['Manectric', ['Electric']], ['Plusle', ['Electric']], ['Minun', ['Electric']], ['Volbeat', ['Bug']], ['Illumise', ['Bug']], ['Roselia', ['Grass', 'Poison']], ['Gulpin', ['Poison']], ['Swalot', ['Poison']], ['Carvanha', ['Water', 'Dark']], ['Sharpedo', ['Water', 'Dark']], ['Wailmer', ['Water']], ['Wailord', ['Water']], ['Numel', ['Fire', 'Ground']], ['Camerupt', ['Fire', 'Ground']], ['Torkoal', ['Fire']], ['Spoink', ['Psychic']], ['Grumpig', ['Psychic']], ['Spinda', ['Normal']], ['Trapinch', ['Ground']], ['Vibrava', ['Ground', 'Dragon']], ['Flygon', ['Ground', 'Dragon']], ['Cacnea', ['Grass']], ['Cacturne', ['Grass', 'Dark']], ['Swablu', ['Normal', 'Flying']], ['Altaria', ['Dragon', 'Flying']], ['Zangoose', ['Normal']], ['Seviper', ['Poison']], ['Lunatone', ['Rock', 'Psychic']], ['Solrock', ['Rock', 'Psychic']], ['Barboach', ['Water', 'Ground']], ['Whiscash', ['Water', 'Ground']], ['Corphish', ['Water']], ['Crawdaunt', ['Water', 'Dark']], ['Baltoy', ['Ground', 'Psychic']], ['Claydol', ['Ground', 'Psychic']], ['Lileep', ['Rock', 'Grass']], ['Cradily', ['Rock', 'Grass']], ['Anorith', ['Rock', 'Bug']], ['Armaldo', ['Rock', 'Bug']], ['Feebas', ['Water']], ['Milotic', ['Water']], ['Castform', ['Normal']], ['Kecleon', ['Normal']], ['Shuppet', ['Ghost']], ['Banette', ['Ghost']], ['Duskull', ['Ghost']], ['Dusclops', ['Ghost']], ['Tropius', ['Grass', 'Flying']], ['Chimecho', ['Psychic']], ['Absol', ['Dark']], ['Wynaut', ['Psychic']], ['Snorunt', ['Ice']], ['Glalie', ['Ice']], ['Spheal', ['Ice', 'Water']], ['Sealeo', ['Ice', 'Water']], ['Walrein', ['Ice', 'Water']], ['Clamperl', ['Water']], ['Huntail', ['Water']], ['Gorebyss', ['Water']], ['Relicanth', ['Water', 'Rock']], ['Luvdisc', ['Water']], ['Bagon', ['Dragon']], ['Shelgon', ['Dragon']], ['Salamence', ['Dragon', 'Flying']], ['Beldum', ['Steel', 'Psychic']], ['Metang', ['Steel', 'Psychic']], ['Metagross', ['Steel', 'Psychic']], ['Regirock', ['Rock']], ['Regice', ['Ice']], ['Registeel', ['Steel']], ['Latias', ['Dragon', 'Psychic']], ['Latios', ['Dragon', 'Psychic']], ['Kyogre', ['Water']], ['Groudon', ['Ground']], ['Rayquaza', ['Dragon', 'Flying']], ['Jirachi', ['Steel', 'Psychic']], ['Deoxys', ['Psychic']], ['Turtwig', ['Grass']], ['Grotle', ['Grass']], ['Torterra', ['Grass', 'Ground']], ['Chimchar', ['Fire']], ['Monferno', ['Fire', 'Fighting']], ['Infernape', ['Fire', 'Fighting']], ['Piplup', ['Water']], ['Prinplup', ['Water']], ['Empoleon', ['Water', 'Steel']], ['Starly', ['Normal', 'Flying']], ['Staravia', ['Normal', 'Flying']], ['Staraptor', ['Normal', 'Flying']], ['Bidoof', ['Normal']], ['Bibarel', ['Normal', 'Water']], ['Kricketot', ['Bug']], ['Kricketune', ['Bug']], ['Shinx', ['Electric']], ['Luxio', ['Electric']], ['Luxray', ['Electric']], ['Budew', ['Grass', 'Poison']], ['Roserade', ['Grass', 'Poison']], ['Cranidos', ['Rock']], ['Rampardos', ['Rock']], ['Shieldon', ['Rock', 'Steel']], ['Bastiodon', ['Rock', 'Steel']], ['Burmy', ['Bug']], ['Wormadam', ['Bug', 'Grass']], ['Mothim', ['Bug', 'Flying']], ['Combee', ['Bug', 'Flying']], ['Vespiquen', ['Bug', 'Flying']], ['Pachirisu', ['Electric']], ['Buizel', ['Water']], ['Floatzel', ['Water']], ['Cherubi', ['Grass']], ['Cherrim', ['Grass']], ['Shellos', ['Water']], ['Gastrodon', ['Water', 'Ground']], ['Ambipom', ['Normal']], ['Drifloon', ['Ghost', 'Flying']], ['Drifblim', ['Ghost', 'Flying']], ['Buneary', ['Normal']], ['Lopunny', ['Normal']], ['Mismagius', ['Ghost']], ['Honchkrow', ['Dark', 'Flying']], ['Glameow', ['Normal']], ['Purugly', ['Normal']], ['Chingling', ['Psychic']], ['Stunky', ['Poison', 'Dark']], ['Skuntank', ['Poison', 'Dark']], ['Bronzor', ['Steel', 'Psychic']], ['Bronzong', ['Steel', 'Psychic']], ['Bonsly', ['Rock']], ['Mime Jr.', ['Psychic', 'Fairy']], ['Happiny', ['Normal']], ['Chatot', ['Normal', 'Flying']], ['Spiritomb', ['Ghost', 'Dark']], ['Gible', ['Dragon', 'Ground']], ['Gabite', ['Dragon', 'Ground']], ['Garchomp', ['Dragon', 'Ground']], ['Munchlax', ['Normal']], ['Riolu', ['Fighting']], ['Lucario', ['Fighting', 'Steel']], ['Hippopotas', ['Ground']], ['Hippowdon', ['Ground']], ['Skorupi', ['Poison', 'Bug']], ['Drapion', ['Poison', 'Dark']], ['Croagunk', ['Poison', 'Fighting']], ['Toxicroak', ['Poison', 'Fighting']], ['Carnivine', ['Grass']], ['Finneon', ['Water']], ['Lumineon', ['Water']], ['Mantyke', ['Water', 'Flying']], ['Snover', ['Grass', 'Ice']], ['Abomasnow', ['Grass', 'Ice']], ['Weavile', ['Dark', 'Ice']], ['Magnezone', ['Electric', 'Steel']], ['Lickilicky', ['Normal']], ['Rhyperior', ['Ground', 'Rock']], ['Tangrowth', ['Grass']], ['Electivire', ['Electric']], ['Magmortar', ['Fire']], ['Togekiss', ['Fairy', 'Flying']], ['Yanmega', ['Bug', 'Flying']], ['Leafeon', ['Grass']], ['Glaceon', ['Ice']], ['Gliscor', ['Ground', 'Flying']], ['Mamoswine', ['Ice', 'Ground']], ['Porygon-Z', ['Normal']], ['Gallade', ['Psychic', 'Fighting']], ['Probopass', ['Rock', 'Steel']], ['Dusknoir', ['Ghost']], ['Froslass', ['Ice', 'Ghost']], ['Rotom', ['Electric', 'Ghost']], ['Uxie', ['Psychic']], ['Mesprit', ['Psychic']], ['Azelf', ['Psychic']], ['Dialga', ['Steel', 'Dragon']], ['Palkia', ['Water', 'Dragon']], ['Heatran', ['Fire', 'Steel']], ['Regigigas', ['Normal']], ['Giratina', ['Ghost', 'Dragon']], ['Cresselia', ['Psychic']], ['Phione', ['Water']], ['Manaphy', ['Water']], ['Darkrai', ['Dark']], ['Shaymin', ['Grass']], ['Arceus', ['Normal']], ['Victini', ['Psychic', 'Fire']], ['Snivy', ['Grass']], ['Servine', ['Grass']], ['Serperior', ['Grass']], ['Tepig', ['Fire']], ['Pignite', ['Fire', 'Fighting']], ['Emboar', ['Fire', 'Fighting']], ['Oshawott', ['Water']], ['Dewott', ['Water']], ['Samurott', ['Water']], ['Patrat', ['Normal']], ['Watchog', ['Normal']], ['Lillipup', ['Normal']], ['Herdier', ['Normal']], ['Stoutland', ['Normal']], ['Purrloin', ['Dark']], ['Liepard', ['Dark']], ['Pansage', ['Grass']], ['Simisage', ['Grass']], ['Pansear', ['Fire']], ['Simisear', ['Fire']], ['Panpour', ['Water']], ['Simipour', ['Water']], ['Munna', ['Psychic']], ['Musharna', ['Psychic']], ['Pidove', ['Normal', 'Flying']], ['Tranquill', ['Normal', 'Flying']], ['Unfezant', ['Normal', 'Flying']], ['Blitzle', ['Electric']], ['Zebstrika', ['Electric']], ['Roggenrola', ['Rock']], ['Boldore', ['Rock']], ['Gigalith', ['Rock']], ['Woobat', ['Psychic', 'Flying']], ['Swoobat', ['Psychic', 'Flying']], ['Drilbur', ['Ground']], ['Excadrill', ['Ground', 'Steel']], ['Audino', ['Normal']], ['Timburr', ['Fighting']], ['Gurdurr', ['Fighting']], ['Conkeldurr', ['Fighting']], ['Tympole', ['Water']], ['Palpitoad', ['Water', 'Ground']], ['Seismitoad', ['Water', 'Ground']], ['Throh', ['Fighting']], ['Sawk', ['Fighting']], ['Sewaddle', ['Bug', 'Grass']], ['Swadloon', ['Bug', 'Grass']], ['Leavanny', ['Bug', 'Grass']], ['Venipede', ['Bug', 'Poison']], ['Whirlipede', ['Bug', 'Poison']], ['Scolipede', ['Bug', 'Poison']], ['Cottonee', ['Grass', 'Fairy']], ['Whimsicott', ['Grass', 'Fairy']], ['Petilil', ['Grass']], ['Lilligant', ['Grass']], ['Basculin', ['Water']], ['Sandile', ['Ground', 'Dark']], ['Krokorok', ['Ground', 'Dark']], ['Krookodile', ['Ground', 'Dark']], ['Darumaka', ['Fire']], ['Darmanitan', ['Fire']], ['Maractus', ['Grass']], ['Dwebble', ['Bug', 'Rock']], ['Crustle', ['Bug', 'Rock']], ['Scraggy', ['Dark', 'Fighting']], ['Scrafty', ['Dark', 'Fighting']], ['Sigilyph', ['Psychic', 'Flying']], ['Yamask', ['Ghost']], ['Cofagrigus', ['Ghost']], ['Tirtouga', ['Water', 'Rock']], ['Carracosta', ['Water', 'Rock']], ['Archen', ['Rock', 'Flying']], ['Archeops', ['Rock', 'Flying']], ['Trubbish', ['Poison']], ['Garbodor', ['Poison']], ['Zorua', ['Dark']], ['Zoroark', ['Dark']], ['Minccino', ['Normal']], ['Cinccino', ['Normal']], ['Gothita', ['Psychic']], ['Gothorita', ['Psychic']], ['Gothitelle', ['Psychic']], ['Solosis', ['Psychic']], ['Duosion', ['Psychic']], ['Reuniclus', ['Psychic']], ['Ducklett', ['Water', 'Flying']], ['Swanna', ['Water', 'Flying']], ['Vanillite', ['Ice']], ['Vanillish', ['Ice']], ['Vanilluxe', ['Ice']], ['Deerling', ['Normal', 'Grass']], ['Sawsbuck', ['Normal', 'Grass']], ['Emolga', ['Electric', 'Flying']], ['Karrablast', ['Bug']], ['Escavalier', ['Bug', 'Steel']], ['Foongus', ['Grass', 'Poison']], ['Amoonguss', ['Grass', 'Poison']], ['Frillish', ['Water', 'Ghost']], ['Jellicent', ['Water', 'Ghost']], ['Alomomola', ['Water']], ['Joltik', ['Bug', 'Electric']], ['Galvantula', ['Bug', 'Electric']], ['Ferroseed', ['Grass', 'Steel']], ['Ferrothorn', ['Grass', 'Steel']], ['Klink', ['Steel']], ['Klang', ['Steel']], ['Klinklang', ['Steel']], ['Tynamo', ['Electric']], ['Eelektrik', ['Electric']], ['Eelektross', ['Electric']], ['Elgyem', ['Psychic']], ['Beheeyem', ['Psychic']], ['Litwick', ['Ghost', 'Fire']], ['Lampent', ['Ghost', 'Fire']], ['Chandelure', ['Ghost', 'Fire']], ['Axew', ['Dragon']], ['Fraxure', ['Dragon']], ['Haxorus', ['Dragon']], ['Cubchoo', ['Ice']], ['Beartic', ['Ice']], ['Cryogonal', ['Ice']], ['Shelmet', ['Bug']], ['Accelgor', ['Bug']], ['Stunfisk', ['Electric', 'Ground']], ['Mienfoo', ['Fighting']], ['Mienshao', ['Fighting']], ['Druddigon', ['Dragon']], ['Golett', ['Ground', 'Ghost']], ['Golurk', ['Ground', 'Ghost']], ['Pawniard', ['Dark', 'Steel']], ['Bisharp', ['Dark', 'Steel']], ['Bouffalant', ['Normal']], ['Rufflet', ['Normal', 'Flying']], ['Braviary', ['Normal', 'Flying']], ['Vullaby', ['Dark', 'Flying']], ['Mandibuzz', ['Dark', 'Flying']], ['Heatmor', ['Fire']], ['Durant', ['Bug', 'Steel']], ['Deino', ['Dark', 'Dragon']], ['Zweilous', ['Dark', 'Dragon']], ['Hydreigon', ['Dark', 'Dragon']], ['Larvesta', ['Bug', 'Fire']], ['Volcarona', ['Bug', 'Fire']], ['Cobalion', ['Steel', 'Fighting']], ['Terrakion', ['Rock', 'Fighting']], ['Virizion', ['Grass', 'Fighting']], ['Tornadus', ['Flying']], ['Thundurus', ['Electric', 'Flying']], ['Reshiram', ['Dragon', 'Fire']], ['Zekrom', ['Dragon', 'Electric']], ['Landorus', ['Ground', 'Flying']], ['Kyurem', ['Dragon', 'Ice']], ['Keldeo', ['Water', 'Fighting']], ['Meloetta', ['Normal', 'Psychic']], ['Genesect', ['Bug', 'Steel']], ['Chespin', ['Grass']], ['Quilladin', ['Grass']], ['Chesnaught', ['Grass', 'Fighting']], ['Fennekin', ['Fire']], ['Braixen', ['Fire']], ['Delphox', ['Fire', 'Psychic']], ['Froakie', ['Water']], ['Frogadier', ['Water']], ['Greninja', ['Water', 'Dark']], ['Bunnelby', ['Normal']], ['Diggersby', ['Normal', 'Ground']], ['Fletchling', ['Normal', 'Flying']], ['Fletchinder', ['Fire', 'Flying']], ['Talonflame', ['Fire', 'Flying']], ['Scatterbug', ['Bug']], ['Spewpa', ['Bug']], ['Vivillon', ['Bug', 'Flying']], ['Litleo', ['Fire', 'Normal']], ['Pyroar', ['Fire', 'Normal']], ['Flabébé', ['Fairy']], ['Floette', ['Fairy']], ['Florges', ['Fairy']], ['Skiddo', ['Grass']], ['Gogoat', ['Grass']], ['Pancham', ['Fighting']], ['Pangoro', ['Fighting', 'Dark']], ['Furfrou', ['Normal']], ['Espurr', ['Psychic']], ['Meowstic', ['Psychic']], ['Honedge', ['Steel', 'Ghost']], ['Doublade', ['Steel', 'Ghost']], ['Aegislash', ['Steel', 'Ghost']], ['Spritzee', ['Fairy']], ['Aromatisse', ['Fairy']], ['Swirlix', ['Fairy']], ['Slurpuff', ['Fairy']], ['Inkay', ['Dark', 'Psychic']], ['Malamar', ['Dark', 'Psychic']], ['Binacle', ['Rock', 'Water']], ['Barbaracle', ['Rock', 'Water']], ['Skrelp', ['Poison', 'Water']], ['Dragalge', ['Poison', 'Dragon']], ['Clauncher', ['Water']], ['Clawitzer', ['Water']], ['Helioptile', ['Electric', 'Normal']], ['Heliolisk', ['Electric', 'Normal']], ['Tyrunt', ['Rock', 'Dragon']], ['Tyrantrum', ['Rock', 'Dragon']], ['Amaura', ['Rock', 'Ice']], ['Aurorus', ['Rock', 'Ice']], ['Sylveon', ['Fairy']], ['Hawlucha', ['Fighting', 'Flying']], ['Dedenne', ['Electric', 'Fairy']], ['Carbink', ['Rock', 'Fairy']], ['Goomy', ['Dragon']], ['Sliggoo', ['Dragon']], ['Goodra', ['Dragon']], ['Klefki', ['Steel', 'Fairy']], ['Phantump', ['Ghost', 'Grass']], ['Trevenant', ['Ghost', 'Grass']], ['Pumpkaboo', ['Ghost', 'Grass']], ['Gourgeist', ['Ghost', 'Grass']], ['Bergmite', ['Ice']], ['Avalugg', ['Ice']], ['Noibat', ['Flying', 'Dragon']], ['Noivern', ['Flying', 'Dragon']], ['Xerneas', ['Fairy']], ['Yveltal', ['Dark', 'Flying']], ['Zygarde', ['Dragon', 'Ground']]]</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># n = int(input())</span>
</span><span class="code-line"><span class="token comment"># print(poket_list[n][0])</span>
</span><span class="code-line"><span class="token comment"># print(poket_list[n][1][0],poket_list[n][1][1])</span>
</span><span class="code-line">
</span><span class="code-line">poket_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Bulbasaur'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">,</span> <span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Ivysaur'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">,</span> <span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Venusaur'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">,</span> <span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Charmander'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">5</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Charmeleon'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">6</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Charizard'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">7</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Squirtle'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">8</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Wartortle'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">9</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Blastoise'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">10</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Caterpie'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">11</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Metapod'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">12</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Butterfree'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">13</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Weedle'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">14</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Kakuna'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">15</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Beedrill'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">16</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Pidgey'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">17</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Pidgeotto'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">18</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Pidgeot'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">19</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Rattata'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">20</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Raticate'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">21</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Spearow'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">22</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Fearow'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">23</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Ekans'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">24</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Arbok'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">25</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Pikachu'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Electric'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">26</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Raichu'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Electric'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">27</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Sandshrew'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">28</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Sandslash'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">29</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Nidoran♀'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">30</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Nidorina'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">31</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Nidoqueen'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Poison'</span><span class="token punctuation">,</span> <span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">32</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Nidoran♂'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">33</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Nidorino'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">34</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Nidoking'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Poison'</span><span class="token punctuation">,</span> <span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">35</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Clefairy'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fairy'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">36</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Clefable'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fairy'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">37</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Vulpix'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">38</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Ninetales'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">39</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Jigglypuff'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">,</span> <span class="token string">'Fairy'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">40</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Wigglytuff'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">,</span> <span class="token string">'Fairy'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">41</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Zubat'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Poison'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">42</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Golbat'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Poison'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">43</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Oddish'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">,</span> <span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">44</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Gloom'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">,</span> <span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">45</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Vileplume'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">,</span> <span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">46</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Paras'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">47</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Parasect'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">48</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Venonat'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">49</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Venomoth'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">50</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Diglett'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">51</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Dugtrio'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">52</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Meowth'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">53</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Persian'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">54</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Psyduck'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">55</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Golduck'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">56</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Mankey'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fighting'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">57</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Primeape'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fighting'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">58</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Growlithe'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">59</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Arcanine'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">60</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Poliwag'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">61</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Poliwhirl'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">62</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Poliwrath'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Fighting'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">63</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Abra'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">64</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Kadabra'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">65</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Alakazam'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">66</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Machop'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fighting'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">67</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Machoke'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fighting'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">68</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Machamp'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fighting'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">69</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Bellsprout'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">,</span> <span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">70</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Weepinbell'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">,</span> <span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">71</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Victreebel'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">,</span> <span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">72</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Tentacool'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">73</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Tentacruel'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">74</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Geodude'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Rock'</span><span class="token punctuation">,</span> <span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">75</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Graveler'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Rock'</span><span class="token punctuation">,</span> <span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">76</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Golem'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Rock'</span><span class="token punctuation">,</span> <span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">77</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Ponyta'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">78</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Rapidash'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">79</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Slowpoke'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">80</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Slowbro'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">81</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Magnemite'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Electric'</span><span class="token punctuation">,</span> <span class="token string">'Steel'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">82</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Magneton'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Electric'</span><span class="token punctuation">,</span> <span class="token string">'Steel'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">83</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"Farfetch'd"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">84</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Doduo'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">85</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Dodrio'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">86</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Seel'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">87</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Dewgong'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Ice'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">88</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Grimer'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">89</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Muk'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">90</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Shellder'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">91</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Cloyster'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Ice'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">92</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Gastly'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ghost'</span><span class="token punctuation">,</span> <span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">93</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Haunter'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ghost'</span><span class="token punctuation">,</span> <span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">94</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Gengar'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ghost'</span><span class="token punctuation">,</span> <span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">95</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Onix'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Rock'</span><span class="token punctuation">,</span> <span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">96</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Drowzee'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">97</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Hypno'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">98</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Krabby'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">99</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Kingler'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">100</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Voltorb'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Electric'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">101</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Electrode'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Electric'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">102</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Exeggcute'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">,</span> <span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">103</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Exeggutor'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">,</span> <span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">104</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Cubone'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">105</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Marowak'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">106</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Hitmonlee'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fighting'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">107</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Hitmonchan'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fighting'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">108</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Lickitung'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">109</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Koffing'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">110</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Weezing'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">111</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Rhyhorn'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ground'</span><span class="token punctuation">,</span> <span class="token string">'Rock'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">112</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Rhydon'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ground'</span><span class="token punctuation">,</span> <span class="token string">'Rock'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">113</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Chansey'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">114</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Tangela'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">115</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Kangaskhan'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">116</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Horsea'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">117</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Seadra'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">118</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Goldeen'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">119</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Seaking'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">120</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Staryu'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">121</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Starmie'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">122</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Mr. Mime'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">,</span> <span class="token string">'Fairy'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">123</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Scyther'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">124</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Jynx'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ice'</span><span class="token punctuation">,</span> <span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">125</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Electabuzz'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Electric'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">126</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Magmar'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">127</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Pinsir'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">128</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Tauros'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">129</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Magikarp'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">130</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Gyarados'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">131</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Lapras'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Ice'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">132</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Ditto'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">133</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Eevee'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">134</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Vaporeon'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">135</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Jolteon'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Electric'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">136</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Flareon'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">137</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Porygon'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">138</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Omanyte'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Rock'</span><span class="token punctuation">,</span> <span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">139</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Omastar'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Rock'</span><span class="token punctuation">,</span> <span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">140</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Kabuto'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Rock'</span><span class="token punctuation">,</span> <span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">141</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Kabutops'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Rock'</span><span class="token punctuation">,</span> <span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">142</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Aerodactyl'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Rock'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">143</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Snorlax'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">144</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Articuno'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ice'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">145</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Zapdos'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Electric'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">146</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Moltres'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">147</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Dratini'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dragon'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">148</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Dragonair'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dragon'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">149</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Dragonite'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dragon'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">150</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Mewtwo'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">151</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Mew'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">152</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Chikorita'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">153</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Bayleef'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">154</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Meganium'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">155</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Cyndaquil'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">156</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Quilava'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">157</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Typhlosion'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">158</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Totodile'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">159</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Croconaw'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">160</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Feraligatr'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">161</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Sentret'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">162</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Furret'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">163</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Hoothoot'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">164</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Noctowl'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">165</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Ledyba'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">166</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Ledian'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">167</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Spinarak'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">168</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Ariados'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">169</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Crobat'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Poison'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">170</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Chinchou'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Electric'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">171</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Lanturn'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Electric'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">172</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Pichu'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Electric'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">173</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Cleffa'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fairy'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">174</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Igglybuff'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">,</span> <span class="token string">'Fairy'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">175</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Togepi'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fairy'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">176</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Togetic'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fairy'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">177</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Natu'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">178</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Xatu'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">179</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Mareep'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Electric'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">180</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Flaaffy'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Electric'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">181</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Ampharos'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Electric'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">182</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Bellossom'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">183</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Marill'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Fairy'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">184</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Azumarill'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Fairy'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">185</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Sudowoodo'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Rock'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">186</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Politoed'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">187</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Hoppip'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">188</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Skiploom'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">189</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Jumpluff'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">190</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Aipom'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">191</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Sunkern'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">192</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Sunflora'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">193</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Yanma'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">194</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Wooper'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">195</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Quagsire'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">196</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Espeon'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">197</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Umbreon'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dark'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">198</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Murkrow'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dark'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">199</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Slowking'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">200</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Misdreavus'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ghost'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">201</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Unown'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">202</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Wobbuffet'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">203</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Girafarig'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">,</span> <span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">204</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Pineco'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">205</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Forretress'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Steel'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">206</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Dunsparce'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">207</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Gligar'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ground'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">208</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Steelix'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Steel'</span><span class="token punctuation">,</span> <span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">209</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Snubbull'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fairy'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">210</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Granbull'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fairy'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">211</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Qwilfish'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">212</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Scizor'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Steel'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">213</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Shuckle'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Rock'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">214</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Heracross'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Fighting'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">215</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Sneasel'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dark'</span><span class="token punctuation">,</span> <span class="token string">'Ice'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">216</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Teddiursa'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">217</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Ursaring'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">218</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Slugma'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">219</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Magcargo'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">,</span> <span class="token string">'Rock'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">220</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Swinub'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ice'</span><span class="token punctuation">,</span> <span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">221</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Piloswine'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ice'</span><span class="token punctuation">,</span> <span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">222</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Corsola'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Rock'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">223</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Remoraid'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">224</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Octillery'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">225</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Delibird'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ice'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">226</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Mantine'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">227</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Skarmory'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Steel'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">228</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Houndour'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dark'</span><span class="token punctuation">,</span> <span class="token string">'Fire'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">229</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Houndoom'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dark'</span><span class="token punctuation">,</span> <span class="token string">'Fire'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">230</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Kingdra'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Dragon'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">231</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Phanpy'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">232</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Donphan'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">233</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Porygon2'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">234</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Stantler'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">235</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Smeargle'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">236</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Tyrogue'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fighting'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">237</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Hitmontop'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fighting'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">238</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Smoochum'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ice'</span><span class="token punctuation">,</span> <span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">239</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Elekid'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Electric'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">240</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Magby'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">241</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Miltank'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">242</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Blissey'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">243</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Raikou'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Electric'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">244</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Entei'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">245</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Suicune'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">246</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Larvitar'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Rock'</span><span class="token punctuation">,</span> <span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">247</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Pupitar'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Rock'</span><span class="token punctuation">,</span> <span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">248</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Tyranitar'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Rock'</span><span class="token punctuation">,</span> <span class="token string">'Dark'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">249</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Lugia'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">250</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Ho-oh'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">251</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Celebi'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">,</span> <span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">252</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Treecko'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">253</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Grovyle'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">254</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Sceptile'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">255</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Torchic'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">256</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Combusken'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">,</span> <span class="token string">'Fighting'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">257</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Blaziken'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">,</span> <span class="token string">'Fighting'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">258</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Mudkip'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">259</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Marshtomp'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">260</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Swampert'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">261</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Poochyena'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dark'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">262</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Mightyena'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dark'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">263</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Zigzagoon'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">264</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Linoone'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">265</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Wurmple'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">266</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Silcoon'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">267</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Beautifly'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">268</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Cascoon'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">269</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Dustox'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">270</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Lotad'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">271</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Lombre'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">272</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Ludicolo'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">273</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Seedot'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">274</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Nuzleaf'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">,</span> <span class="token string">'Dark'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">275</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Shiftry'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">,</span> <span class="token string">'Dark'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">276</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Taillow'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">277</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Swellow'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">278</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Wingull'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">279</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Pelipper'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">280</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Ralts'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">,</span> <span class="token string">'Fairy'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">281</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Kirlia'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">,</span> <span class="token string">'Fairy'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">282</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Gardevoir'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">,</span> <span class="token string">'Fairy'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">283</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Surskit'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">284</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Masquerain'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">285</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Shroomish'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">286</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Breloom'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">,</span> <span class="token string">'Fighting'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">287</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Slakoth'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">288</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Vigoroth'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">289</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Slaking'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">290</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Nincada'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">291</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Ninjask'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">292</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Shedinja'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Ghost'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">293</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Whismur'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">294</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Loudred'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">295</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Exploud'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">296</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Makuhita'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fighting'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">297</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Hariyama'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fighting'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">298</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Azurill'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">,</span> <span class="token string">'Fairy'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">299</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Nosepass'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Rock'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">300</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Skitty'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">301</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Delcatty'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">302</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Sableye'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dark'</span><span class="token punctuation">,</span> <span class="token string">'Ghost'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">303</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Mawile'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Steel'</span><span class="token punctuation">,</span> <span class="token string">'Fairy'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">304</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Aron'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Steel'</span><span class="token punctuation">,</span> <span class="token string">'Rock'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">305</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Lairon'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Steel'</span><span class="token punctuation">,</span> <span class="token string">'Rock'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">306</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Aggron'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Steel'</span><span class="token punctuation">,</span> <span class="token string">'Rock'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">307</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Meditite'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fighting'</span><span class="token punctuation">,</span> <span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">308</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Medicham'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fighting'</span><span class="token punctuation">,</span> <span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">309</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Electrike'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Electric'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">310</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Manectric'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Electric'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">311</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Plusle'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Electric'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">312</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Minun'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Electric'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">313</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Volbeat'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">314</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Illumise'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">315</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Roselia'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">,</span> <span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">316</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Gulpin'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">317</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Swalot'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">318</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Carvanha'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Dark'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">319</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Sharpedo'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Dark'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">320</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Wailmer'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">321</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Wailord'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">322</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Numel'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">,</span> <span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">323</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Camerupt'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">,</span> <span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">324</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Torkoal'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">325</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Spoink'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">326</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Grumpig'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">327</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Spinda'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">328</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Trapinch'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">329</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Vibrava'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ground'</span><span class="token punctuation">,</span> <span class="token string">'Dragon'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">330</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Flygon'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ground'</span><span class="token punctuation">,</span> <span class="token string">'Dragon'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">331</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Cacnea'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">332</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Cacturne'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">,</span> <span class="token string">'Dark'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">333</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Swablu'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">334</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Altaria'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dragon'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">335</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Zangoose'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">336</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Seviper'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">337</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Lunatone'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Rock'</span><span class="token punctuation">,</span> <span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">338</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Solrock'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Rock'</span><span class="token punctuation">,</span> <span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">339</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Barboach'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">340</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Whiscash'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">341</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Corphish'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">342</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Crawdaunt'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Dark'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">343</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Baltoy'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ground'</span><span class="token punctuation">,</span> <span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">344</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Claydol'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ground'</span><span class="token punctuation">,</span> <span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">345</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Lileep'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Rock'</span><span class="token punctuation">,</span> <span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">346</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Cradily'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Rock'</span><span class="token punctuation">,</span> <span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">347</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Anorith'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Rock'</span><span class="token punctuation">,</span> <span class="token string">'Bug'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">348</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Armaldo'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Rock'</span><span class="token punctuation">,</span> <span class="token string">'Bug'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">349</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Feebas'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">350</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Milotic'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">351</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Castform'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">352</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Kecleon'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">353</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Shuppet'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ghost'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">354</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Banette'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ghost'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">355</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Duskull'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ghost'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">356</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Dusclops'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ghost'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">357</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Tropius'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">358</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Chimecho'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">359</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Absol'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dark'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">360</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Wynaut'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">361</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Snorunt'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ice'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">362</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Glalie'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ice'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">363</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Spheal'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ice'</span><span class="token punctuation">,</span> <span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">364</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Sealeo'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ice'</span><span class="token punctuation">,</span> <span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">365</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Walrein'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ice'</span><span class="token punctuation">,</span> <span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">366</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Clamperl'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">367</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Huntail'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">368</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Gorebyss'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">369</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Relicanth'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Rock'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">370</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Luvdisc'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">371</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Bagon'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dragon'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">372</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Shelgon'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dragon'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">373</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Salamence'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dragon'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">374</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Beldum'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Steel'</span><span class="token punctuation">,</span> <span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">375</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Metang'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Steel'</span><span class="token punctuation">,</span> <span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">376</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Metagross'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Steel'</span><span class="token punctuation">,</span> <span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">377</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Regirock'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Rock'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">378</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Regice'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ice'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">379</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Registeel'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Steel'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">380</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Latias'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dragon'</span><span class="token punctuation">,</span> <span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">381</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Latios'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dragon'</span><span class="token punctuation">,</span> <span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">382</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Kyogre'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">383</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Groudon'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">384</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Rayquaza'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dragon'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">385</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Jirachi'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Steel'</span><span class="token punctuation">,</span> <span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">386</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Deoxys'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">387</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Turtwig'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">388</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Grotle'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">389</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Torterra'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">,</span> <span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">390</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Chimchar'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">391</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Monferno'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">,</span> <span class="token string">'Fighting'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">392</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Infernape'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">,</span> <span class="token string">'Fighting'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">393</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Piplup'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">394</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Prinplup'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">395</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Empoleon'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Steel'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">396</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Starly'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">397</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Staravia'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">398</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Staraptor'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">399</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Bidoof'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">400</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Bibarel'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">,</span> <span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">401</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Kricketot'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">402</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Kricketune'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">403</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Shinx'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Electric'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">404</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Luxio'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Electric'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">405</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Luxray'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Electric'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">406</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Budew'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">,</span> <span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">407</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Roserade'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">,</span> <span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">408</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Cranidos'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Rock'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">409</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Rampardos'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Rock'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">410</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Shieldon'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Rock'</span><span class="token punctuation">,</span> <span class="token string">'Steel'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">411</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Bastiodon'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Rock'</span><span class="token punctuation">,</span> <span class="token string">'Steel'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">412</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Burmy'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">413</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Wormadam'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">414</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Mothim'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">415</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Combee'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">416</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Vespiquen'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">417</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Pachirisu'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Electric'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">418</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Buizel'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">419</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Floatzel'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">420</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Cherubi'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">421</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Cherrim'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">422</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Shellos'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">423</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Gastrodon'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">424</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Ambipom'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">425</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Drifloon'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ghost'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">426</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Drifblim'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ghost'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">427</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Buneary'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">428</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Lopunny'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">429</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Mismagius'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ghost'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">430</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Honchkrow'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dark'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">431</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Glameow'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">432</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Purugly'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">433</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Chingling'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">434</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Stunky'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Poison'</span><span class="token punctuation">,</span> <span class="token string">'Dark'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">435</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Skuntank'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Poison'</span><span class="token punctuation">,</span> <span class="token string">'Dark'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">436</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Bronzor'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Steel'</span><span class="token punctuation">,</span> <span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">437</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Bronzong'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Steel'</span><span class="token punctuation">,</span> <span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">438</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Bonsly'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Rock'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">439</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Mime Jr.'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">,</span> <span class="token string">'Fairy'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">440</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Happiny'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">441</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Chatot'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">442</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Spiritomb'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ghost'</span><span class="token punctuation">,</span> <span class="token string">'Dark'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">443</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Gible'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dragon'</span><span class="token punctuation">,</span> <span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">444</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Gabite'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dragon'</span><span class="token punctuation">,</span> <span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">445</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Garchomp'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dragon'</span><span class="token punctuation">,</span> <span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">446</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Munchlax'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">447</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Riolu'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fighting'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">448</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Lucario'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fighting'</span><span class="token punctuation">,</span> <span class="token string">'Steel'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">449</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Hippopotas'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">450</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Hippowdon'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">451</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Skorupi'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Poison'</span><span class="token punctuation">,</span> <span class="token string">'Bug'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">452</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Drapion'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Poison'</span><span class="token punctuation">,</span> <span class="token string">'Dark'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">453</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Croagunk'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Poison'</span><span class="token punctuation">,</span> <span class="token string">'Fighting'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">454</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Toxicroak'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Poison'</span><span class="token punctuation">,</span> <span class="token string">'Fighting'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">455</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Carnivine'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">456</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Finneon'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">457</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Lumineon'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">458</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Mantyke'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">459</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Snover'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">,</span> <span class="token string">'Ice'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">460</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Abomasnow'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">,</span> <span class="token string">'Ice'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">461</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Weavile'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dark'</span><span class="token punctuation">,</span> <span class="token string">'Ice'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">462</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Magnezone'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Electric'</span><span class="token punctuation">,</span> <span class="token string">'Steel'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">463</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Lickilicky'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">464</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Rhyperior'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ground'</span><span class="token punctuation">,</span> <span class="token string">'Rock'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">465</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Tangrowth'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">466</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Electivire'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Electric'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">467</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Magmortar'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">468</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Togekiss'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fairy'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">469</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Yanmega'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">470</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Leafeon'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">471</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Glaceon'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ice'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">472</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Gliscor'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ground'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">473</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Mamoswine'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ice'</span><span class="token punctuation">,</span> <span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">474</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Porygon-Z'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">475</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Gallade'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">,</span> <span class="token string">'Fighting'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">476</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Probopass'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Rock'</span><span class="token punctuation">,</span> <span class="token string">'Steel'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">477</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Dusknoir'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ghost'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">478</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Froslass'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ice'</span><span class="token punctuation">,</span> <span class="token string">'Ghost'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">479</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Rotom'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Electric'</span><span class="token punctuation">,</span> <span class="token string">'Ghost'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">480</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Uxie'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">481</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Mesprit'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">482</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Azelf'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">483</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Dialga'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Steel'</span><span class="token punctuation">,</span> <span class="token string">'Dragon'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">484</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Palkia'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Dragon'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">485</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Heatran'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">,</span> <span class="token string">'Steel'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">486</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Regigigas'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">487</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Giratina'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ghost'</span><span class="token punctuation">,</span> <span class="token string">'Dragon'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">488</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Cresselia'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">489</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Phione'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">490</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Manaphy'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">491</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Darkrai'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dark'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">492</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Shaymin'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">493</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Arceus'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">494</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Victini'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">,</span> <span class="token string">'Fire'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">495</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Snivy'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">496</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Servine'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">497</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Serperior'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">498</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Tepig'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">499</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Pignite'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">,</span> <span class="token string">'Fighting'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">500</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Emboar'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">,</span> <span class="token string">'Fighting'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">501</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Oshawott'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">502</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Dewott'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">503</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Samurott'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">504</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Patrat'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">505</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Watchog'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">506</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Lillipup'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">507</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Herdier'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">508</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Stoutland'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">509</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Purrloin'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dark'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">510</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Liepard'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dark'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">511</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Pansage'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">512</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Simisage'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">513</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Pansear'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">514</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Simisear'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">515</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Panpour'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">516</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Simipour'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">517</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Munna'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">518</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Musharna'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">519</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Pidove'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">520</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Tranquill'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">521</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Unfezant'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">522</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Blitzle'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Electric'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">523</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Zebstrika'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Electric'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">524</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Roggenrola'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Rock'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">525</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Boldore'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Rock'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">526</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Gigalith'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Rock'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">527</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Woobat'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">528</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Swoobat'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">529</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Drilbur'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">530</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Excadrill'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ground'</span><span class="token punctuation">,</span> <span class="token string">'Steel'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">531</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Audino'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">532</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Timburr'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fighting'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">533</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Gurdurr'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fighting'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">534</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Conkeldurr'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fighting'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">535</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Tympole'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">536</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Palpitoad'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">537</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Seismitoad'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">538</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Throh'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fighting'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">539</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Sawk'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fighting'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">540</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Sewaddle'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">541</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Swadloon'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">542</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Leavanny'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">543</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Venipede'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">544</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Whirlipede'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">545</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Scolipede'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">546</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Cottonee'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">,</span> <span class="token string">'Fairy'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">547</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Whimsicott'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">,</span> <span class="token string">'Fairy'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">548</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Petilil'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">549</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Lilligant'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">550</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Basculin'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">551</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Sandile'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ground'</span><span class="token punctuation">,</span> <span class="token string">'Dark'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">552</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Krokorok'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ground'</span><span class="token punctuation">,</span> <span class="token string">'Dark'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">553</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Krookodile'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ground'</span><span class="token punctuation">,</span> <span class="token string">'Dark'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">554</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Darumaka'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">555</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Darmanitan'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">556</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Maractus'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">557</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Dwebble'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Rock'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">558</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Crustle'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Rock'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">559</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Scraggy'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dark'</span><span class="token punctuation">,</span> <span class="token string">'Fighting'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">560</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Scrafty'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dark'</span><span class="token punctuation">,</span> <span class="token string">'Fighting'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">561</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Sigilyph'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">562</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Yamask'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ghost'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">563</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Cofagrigus'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ghost'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">564</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Tirtouga'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Rock'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">565</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Carracosta'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Rock'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">566</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Archen'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Rock'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">567</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Archeops'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Rock'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">568</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Trubbish'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">569</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Garbodor'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">570</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Zorua'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dark'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">571</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Zoroark'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dark'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">572</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Minccino'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">573</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Cinccino'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">574</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Gothita'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">575</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Gothorita'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">576</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Gothitelle'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">577</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Solosis'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">578</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Duosion'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">579</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Reuniclus'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">580</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Ducklett'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">581</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Swanna'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">582</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Vanillite'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ice'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">583</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Vanillish'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ice'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">584</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Vanilluxe'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ice'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">585</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Deerling'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">,</span> <span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">586</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Sawsbuck'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">,</span> <span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">587</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Emolga'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Electric'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">588</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Karrablast'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">589</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Escavalier'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Steel'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">590</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Foongus'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">,</span> <span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">591</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Amoonguss'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">,</span> <span class="token string">'Poison'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">592</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Frillish'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Ghost'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">593</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Jellicent'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Ghost'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">594</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Alomomola'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">595</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Joltik'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Electric'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">596</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Galvantula'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Electric'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">597</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Ferroseed'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">,</span> <span class="token string">'Steel'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">598</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Ferrothorn'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">,</span> <span class="token string">'Steel'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">599</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Klink'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Steel'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">600</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Klang'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Steel'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">601</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Klinklang'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Steel'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">602</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Tynamo'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Electric'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">603</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Eelektrik'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Electric'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">604</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Eelektross'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Electric'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">605</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Elgyem'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">606</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Beheeyem'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">607</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Litwick'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ghost'</span><span class="token punctuation">,</span> <span class="token string">'Fire'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">608</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Lampent'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ghost'</span><span class="token punctuation">,</span> <span class="token string">'Fire'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">609</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Chandelure'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ghost'</span><span class="token punctuation">,</span> <span class="token string">'Fire'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">610</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Axew'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dragon'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">611</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Fraxure'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dragon'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">612</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Haxorus'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dragon'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">613</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Cubchoo'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ice'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">614</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Beartic'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ice'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">615</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Cryogonal'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ice'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">616</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Shelmet'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">617</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Accelgor'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">618</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Stunfisk'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Electric'</span><span class="token punctuation">,</span> <span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">619</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Mienfoo'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fighting'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">620</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Mienshao'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fighting'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">621</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Druddigon'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dragon'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">622</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Golett'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ground'</span><span class="token punctuation">,</span> <span class="token string">'Ghost'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">623</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Golurk'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ground'</span><span class="token punctuation">,</span> <span class="token string">'Ghost'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">624</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Pawniard'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dark'</span><span class="token punctuation">,</span> <span class="token string">'Steel'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">625</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Bisharp'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dark'</span><span class="token punctuation">,</span> <span class="token string">'Steel'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">626</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Bouffalant'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">627</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Rufflet'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">628</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Braviary'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">629</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Vullaby'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dark'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">630</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Mandibuzz'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dark'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">631</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Heatmor'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">632</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Durant'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Steel'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">633</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Deino'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dark'</span><span class="token punctuation">,</span> <span class="token string">'Dragon'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">634</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Zweilous'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dark'</span><span class="token punctuation">,</span> <span class="token string">'Dragon'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">635</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Hydreigon'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dark'</span><span class="token punctuation">,</span> <span class="token string">'Dragon'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">636</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Larvesta'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Fire'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">637</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Volcarona'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Fire'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">638</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Cobalion'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Steel'</span><span class="token punctuation">,</span> <span class="token string">'Fighting'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">639</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Terrakion'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Rock'</span><span class="token punctuation">,</span> <span class="token string">'Fighting'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">640</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Virizion'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">,</span> <span class="token string">'Fighting'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">641</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Tornadus'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">642</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Thundurus'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Electric'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">643</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Reshiram'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dragon'</span><span class="token punctuation">,</span> <span class="token string">'Fire'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">644</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Zekrom'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dragon'</span><span class="token punctuation">,</span> <span class="token string">'Electric'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">645</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Landorus'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ground'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">646</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Kyurem'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dragon'</span><span class="token punctuation">,</span> <span class="token string">'Ice'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">647</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Keldeo'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Fighting'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">648</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Meloetta'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">,</span> <span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">649</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Genesect'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Steel'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">650</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Chespin'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">651</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Quilladin'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">652</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Chesnaught'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">,</span> <span class="token string">'Fighting'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">653</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Fennekin'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">654</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Braixen'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">655</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Delphox'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">,</span> <span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">656</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Froakie'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">657</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Frogadier'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">658</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Greninja'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">,</span> <span class="token string">'Dark'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">659</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Bunnelby'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">660</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Diggersby'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">,</span> <span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">661</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Fletchling'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">662</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Fletchinder'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">663</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Talonflame'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">664</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Scatterbug'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">665</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Spewpa'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">666</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Vivillon'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Bug'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">667</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Litleo'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">,</span> <span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">668</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Pyroar'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fire'</span><span class="token punctuation">,</span> <span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">669</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Flabébé'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fairy'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">670</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Floette'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fairy'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">671</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Florges'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fairy'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">672</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Skiddo'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">673</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Gogoat'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">674</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Pancham'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fighting'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">675</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Pangoro'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fighting'</span><span class="token punctuation">,</span> <span class="token string">'Dark'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">676</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Furfrou'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">677</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Espurr'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">678</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Meowstic'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">679</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Honedge'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Steel'</span><span class="token punctuation">,</span> <span class="token string">'Ghost'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">680</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Doublade'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Steel'</span><span class="token punctuation">,</span> <span class="token string">'Ghost'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">681</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Aegislash'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Steel'</span><span class="token punctuation">,</span> <span class="token string">'Ghost'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">682</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Spritzee'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fairy'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">683</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Aromatisse'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fairy'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">684</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Swirlix'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fairy'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">685</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Slurpuff'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fairy'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">686</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Inkay'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dark'</span><span class="token punctuation">,</span> <span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">687</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Malamar'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dark'</span><span class="token punctuation">,</span> <span class="token string">'Psychic'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">688</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Binacle'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Rock'</span><span class="token punctuation">,</span> <span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">689</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Barbaracle'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Rock'</span><span class="token punctuation">,</span> <span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">690</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Skrelp'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Poison'</span><span class="token punctuation">,</span> <span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">691</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Dragalge'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Poison'</span><span class="token punctuation">,</span> <span class="token string">'Dragon'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">692</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Clauncher'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">693</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Clawitzer'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Water'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">694</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Helioptile'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Electric'</span><span class="token punctuation">,</span> <span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">695</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Heliolisk'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Electric'</span><span class="token punctuation">,</span> <span class="token string">'Normal'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">696</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Tyrunt'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Rock'</span><span class="token punctuation">,</span> <span class="token string">'Dragon'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">697</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Tyrantrum'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Rock'</span><span class="token punctuation">,</span> <span class="token string">'Dragon'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">698</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Amaura'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Rock'</span><span class="token punctuation">,</span> <span class="token string">'Ice'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">699</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Aurorus'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Rock'</span><span class="token punctuation">,</span> <span class="token string">'Ice'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">700</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Sylveon'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fairy'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">701</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Hawlucha'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fighting'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">702</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Dedenne'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Electric'</span><span class="token punctuation">,</span> <span class="token string">'Fairy'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">703</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Carbink'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Rock'</span><span class="token punctuation">,</span> <span class="token string">'Fairy'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">704</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Goomy'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dragon'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">705</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Sliggoo'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dragon'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">706</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Goodra'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dragon'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">707</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Klefki'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Steel'</span><span class="token punctuation">,</span> <span class="token string">'Fairy'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">708</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Phantump'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ghost'</span><span class="token punctuation">,</span> <span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">709</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Trevenant'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ghost'</span><span class="token punctuation">,</span> <span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">710</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Pumpkaboo'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ghost'</span><span class="token punctuation">,</span> <span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">711</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Gourgeist'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ghost'</span><span class="token punctuation">,</span> <span class="token string">'Grass'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">712</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Bergmite'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ice'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">713</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Avalugg'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Ice'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">714</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Noibat'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Flying'</span><span class="token punctuation">,</span> <span class="token string">'Dragon'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">715</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Noivern'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Flying'</span><span class="token punctuation">,</span> <span class="token string">'Dragon'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">716</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Xerneas'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Fairy'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">717</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Yveltal'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dark'</span><span class="token punctuation">,</span> <span class="token string">'Flying'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</span><span class="code-line"> <span class="token number">718</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Zygarde'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Dragon'</span><span class="token punctuation">,</span> <span class="token string">'Ground'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>poket_dict<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">for</span> poket <span class="token keyword">in</span> poket_dict<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>poket<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-17413 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-17413-Python</link>
    <pubDate>2020-08-04</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-17413-Python</guid>
    <description>
    <![CDATA[BOJ-17413-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p><ab cd>abc<abc>와 같은 문자열이 입력됐을 때 <ab cd>cba<abc>같이 &#x3C;>안의 문자열은 반대로 출력하지 않고 &#x3C;>밖의 문자열은 반대로 출력하는 문제.문자열을 리스트화하여 반복문을 수행하고 현재 문자가 '&#x3C;', '>', ' '일 때 예외를 두어 출력하고 그 외에 빈문자열에 문자를 계속 더하는 방법으로 풀었다</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># 문자열을 list로 만들어서 접</span>
</span><span class="code-line"><span class="token comment"># s = input()</span>
</span><span class="code-line"><span class="token comment"># t = ""</span>
</span><span class="code-line"><span class="token comment"># for w in list(s):</span>
</span><span class="code-line"><span class="token comment">#     t += w</span>
</span><span class="code-line"><span class="token comment">#     if w is '>':</span>
</span><span class="code-line"><span class="token comment">#         print(t, end="")</span>
</span><span class="code-line"><span class="token comment">#         t = ""</span>
</span><span class="code-line"><span class="token comment">#     elif '&#x3C;' not in t and w == ' ':</span>
</span><span class="code-line"><span class="token comment">#         # print(''.join(reversed(t)), end="")</span>
</span><span class="code-line"><span class="token comment">#         print(t)</span>
</span><span class="code-line"><span class="token comment">#         t = ""</span>
</span><span class="code-line"><span class="token comment">#     elif w is None:</span>
</span><span class="code-line"><span class="token comment">#         print("afff")</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># 문자열 split으로 접근</span>
</span><span class="code-line"><span class="token comment"># s = input().split()</span>
</span><span class="code-line"><span class="token comment"># t = ""</span>
</span><span class="code-line"><span class="token comment"># for w in s:</span>
</span><span class="code-line"><span class="token comment">#     if '>' in w:</span>
</span><span class="code-line"><span class="token comment">#         t += w</span>
</span><span class="code-line"><span class="token comment">#         print(t, end="")</span>
</span><span class="code-line"><span class="token comment">#         t = ""</span>
</span><span class="code-line"><span class="token comment">#     elif '&#x3C;' in w:</span>
</span><span class="code-line"><span class="token comment">#         t += w</span>
</span><span class="code-line"><span class="token comment">#     else:</span>
</span><span class="code-line"><span class="token comment">#         print(''.join(reversed(w)), end="")</span>
</span><span class="code-line">
</span><span class="code-line">s <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">t <span class="token operator">=</span> <span class="token string">""</span>
</span><span class="code-line">s<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> w <span class="token keyword">in</span> s<span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> w <span class="token keyword">is</span> <span class="token string">'&#x3C;'</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">reversed</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>
</span><span class="code-line">        t <span class="token operator">=</span> <span class="token string">'&#x3C;'</span>
</span><span class="code-line">    <span class="token keyword">elif</span> w <span class="token keyword">is</span> <span class="token string">'>'</span><span class="token punctuation">:</span>
</span><span class="code-line">        t <span class="token operator">+=</span> <span class="token string">'>'</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>
</span><span class="code-line">        t <span class="token operator">=</span> <span class="token string">''</span>
</span><span class="code-line">    <span class="token keyword">elif</span> w <span class="token keyword">is</span> <span class="token string">' '</span> <span class="token keyword">and</span> <span class="token string">'&#x3C;'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> t<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">reversed</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>
</span><span class="code-line">        t <span class="token operator">=</span> <span class="token string">''</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        t <span class="token operator">+=</span> w
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-9093 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-9093-Python</link>
    <pubDate>2020-08-03</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-9093-Python</guid>
    <description>
    <![CDATA[BOJ-9093-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>숫자 n과 n개의 문자열을 입력받는다. 문자열의 공백을 기준으로 단어별 거꾸로 출력하는 문제. 파이썬의 reversed를 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">for</span> w <span class="token keyword">in</span> s<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">reversed</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-3009 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-3009-Python</link>
    <pubDate>2020-08-02</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-3009-Python</guid>
    <description>
    <![CDATA[BOJ-3009-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>x y 형태로 입력되는 3개의 점의 좌표를 입력받은 후 직사각형을 만들기 위해 필요한 네 번째 점의 좌표를 구하는 문제. 첫 풀이는 x와 y 좌표의 딕셔너리를 만들어 몇 번 나왔는 지 확인하기 위해 key에 좌표를, value에 in 연산자를 이용하여 해당하는 값을 넣어주었다. 그 후 dict.items()를 반복돌며 value가 1인 key를 출력하는 형태로 풀었다. 이 과정이 직관적이긴 하여도 효율적이지 못하다는 생각이 들어 두 번째 풀이는 XOR 연산자를 이용하여 풀 수 있다는 참고를 받아 풀어보았다. 첫 번째 풀이보다 상당히 효율적이라 생각한다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># l = []</span>
</span><span class="code-line"><span class="token comment"># for i in range(3):</span>
</span><span class="code-line"><span class="token comment">#     l.append(input().split())</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># x_d, y_d = {}, {}</span>
</span><span class="code-line"><span class="token comment"># for x, y in l:</span>
</span><span class="code-line"><span class="token comment">#     x_d[x] = (2 if x in x_d else 1)</span>
</span><span class="code-line"><span class="token comment">#     y_d[y] = (2 if y in y_d else 1)</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># for k, v in x_d.items():</span>
</span><span class="code-line"><span class="token comment">#     if v == 1:</span>
</span><span class="code-line"><span class="token comment">#         print(k, end=" ")</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># for k, v in y_d.items():</span>
</span><span class="code-line"><span class="token comment">#     if v == 1:</span>
</span><span class="code-line"><span class="token comment">#         print(k)</span>
</span><span class="code-line">
</span><span class="code-line">x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    x <span class="token operator">^</span><span class="token operator">=</span> a
</span><span class="code-line">    y <span class="token operator">^</span><span class="token operator">=</span> b
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2407 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2407-Python</link>
    <pubDate>2020-07-31</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2407-Python</guid>
    <description>
    <![CDATA[BOJ-2407-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>두 수, n과 m을 입력받은 후 조합 nCm을 출력하는 문제. 팩토리얼은 알았어도 수열과 조합은 무지했던 나는 공식을 찾아본 후에야 풀 수 있었다. 파이썬 itertools의 combinations는 리스트를 반환하므로 문제와 맞지 않아 math의 팩토리얼을 import하여 n! / m! * (n-m)!하여 풀 수 있었다. 부족한 부분이 너무 많다</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">from</span> math <span class="token keyword">import</span> factorial
</span><span class="code-line">n<span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>factorial<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">//</span><span class="token punctuation">(</span>factorial<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token operator">*</span>factorial<span class="token punctuation">(</span>n<span class="token operator">-</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2231 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2231-Python</link>
    <pubDate>2020-07-29</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2231-Python</guid>
    <description>
    <![CDATA[BOJ-2231-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>245의 분해합은 (245+2+4+5)하여 256이며 245는 256의 생성자일 때, n을 입력받고 그 수의 생성자를 출력하며 생성자가 없는 수일 때는 0을, 여러 개일 때는 제일 작은 수를 출력하는 문제. 브루트포스 방식을 이용하여 n까지 for문을 수행하며 수를 문자열 타입으로 바꾼 후 sum 함수를 이용한 후 비교해 주었다. 제일 작은 생성자만 출력하면 되기 때문에 출력 후 exit() 해주었으며 반복문이 끝났을 때 0을 출력 해 주었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    t <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> i <span class="token operator">+</span> t <span class="token operator">==</span> n<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</span><span class="code-line">        exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1712 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1712-Python</link>
    <pubDate>2020-07-27</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1712-Python</guid>
    <description>
    <![CDATA[BOJ-1712-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>노트북을 만들어서 판매할 때 기본 비용 x, 1대 생산시 소모되는 비용 y, 1대가 판매되는 가격이 z라고 했을 때 흑자가 되는 판매 개수를 출력하는 문제. z가 y보다 작을 때는 손익분기점을 넘지 못하므로 -1을 출력하고 그 외의 상황에서는 x//(z-y)+1, 1대 생산하여 보는 이득을 기본 비용에 나눈 값에 1을 더하는 수식을 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">if</span> y<span class="token operator">>=</span>z <span class="token keyword">else</span> x<span class="token operator">//</span><span class="token punctuation">(</span>z<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2869 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2869-Python</link>
    <pubDate>2020-07-27</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2869-Python</guid>
    <description>
    <![CDATA[BOJ-2869-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>v라는 높이에 있는 곳을 오르려는 달팽이는 낮에 a만큼 올라가며 밤에는 b만큼 미끌어진다고 한다. v에 도달했을 때는 미끄러지지 않을 때 며칠째에 도착하게 되는 지를 출력하는 문제. 첫번째 풀이는 반복문을 수행하며 v &#x3C;= (a-b) * t + a라는 수식될 때까지 t를 1씩 더하며 풀었으나 당연히 시간초과를 만났다. 두번째 풀이는 t, (v-b) // (a-b)을 두고 (v-b) % (a-b)가 0일 때, t를 출력하고 아닐 시 t + 1을 출력하여 풀었다. a가 v보다 클 때를 위해 위처럼 풀었으며 다른 사람의 풀이는 (v-b-1)//(a-b)+1를 출력하여 단순히 푼 것을 배웠다. 수학적 사고능력의 부족함을 뼈저리 느꼈다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># a,b,v = map(int, input().split())</span>
</span><span class="code-line"><span class="token comment"># t = 0</span>
</span><span class="code-line"><span class="token comment"># while 1:</span>
</span><span class="code-line"><span class="token comment">#     t += 1</span>
</span><span class="code-line"><span class="token comment">#     if v &#x3C;= (a-b)*t + a:</span>
</span><span class="code-line"><span class="token comment">#         break</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># print(t+1)</span>
</span><span class="code-line">a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>v <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token operator">-</span>b<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token punctuation">(</span>a<span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>t <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token operator">-</span>b<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span>a<span class="token operator">-</span>b<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> t<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token comment"># 4 1 5 = 2</span>
</span><span class="code-line"><span class="token comment"># 5-1 % 4-1 = 1</span>
</span><span class="code-line"><span class="token comment"># 5-1 // 4-1 = 1</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># 2 1 5 = 4</span>
</span><span class="code-line"><span class="token comment"># 5-1 % 2-1 = 0</span>
</span><span class="code-line"><span class="token comment"># 5-1 // 2-1 = 4</span>
</span><span class="code-line">
</span><span class="code-line">a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>v<span class="token operator">=</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token operator">-</span>b<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token punctuation">(</span>a<span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token comment"># 4 1 5 = 2</span>
</span><span class="code-line"><span class="token comment"># (5 - 1 - 1) // (4 - 1) + 1 = 2</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># 2 1 5 = 4</span>
</span><span class="code-line"><span class="token comment"># (5 - 1 - 1) // (2 - 1) + 1 = 4</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-16430 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-16430-Python</link>
    <pubDate>2020-07-23</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-16430-Python</guid>
    <description>
    <![CDATA[BOJ-16430-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>1kg의 치즈가 있을 때, a/b kg을 도둑맞았다고 할 때 남은 치즈의 무게를 출력하는 문제. b-a와 b를 공백으로 나누어 출력하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token operator">-</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2824 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2824-Python</link>
    <pubDate>2020-07-23</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2824-Python</guid>
    <description>
    <![CDATA[BOJ-2824-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>정수 n을 입력받은 후 n개의 수를 입력받는다. 모든 수를 곱한 값이 A, 같은 방식으로 m과 B를 입력받는다. A와 B의 최대공약수를 출력하는데 만약, 9자리보다 길다면, 마지막 9자리만 출력하는 문제.a % b = r일 떄, b % r = r1, r % r1 = r2와 같은 방식으로 나머지값이 0일 때까지 연산하는 유클리드 호제법을 이용하여 풀었으며 파이썬의 문자열 슬라이싱을 이용하여 9자리 이상일 때 예외처리를 하였다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">gcm</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    n <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
</span><span class="code-line">    d <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> d<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">        t <span class="token operator">=</span> n <span class="token operator">%</span> d
</span><span class="code-line">        n <span class="token operator">=</span> d
</span><span class="code-line">        d <span class="token operator">=</span> t
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">return</span> d
</span><span class="code-line"><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">m <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>gcm<span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span> <span class="token keyword">if</span> l <span class="token operator">&#x3C;</span> <span class="token number">9</span> <span class="token keyword">else</span> <span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">9</span> <span class="token punctuation">:</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-18258 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-18258-Python</link>
    <pubDate>2020-07-19</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-18258-Python</guid>
    <description>
    <![CDATA[BOJ-18258-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>큐를 구현하는 문제. 첫 풀이는 저번과 같이 sys.stdin.readline으로 시간을 줄이고 class로 구현을 하였다. 하지만 이번 문제에서는 pop후에 요소들을 1칸씩 당기는 과정에ㅐ서 O(n)의 계산량때문에 시간초과 결과를 받게 되어 from collections import deque를 사용하여 구현하였다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">deq <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    command <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">if</span> command<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'push'</span><span class="token punctuation">:</span>
</span><span class="code-line">        deq<span class="token punctuation">.</span>append<span class="token punctuation">(</span>command<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">elif</span> command<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'pop'</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>deq<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">print</span><span class="token punctuation">(</span>deq<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">            deq<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">elif</span> command<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'size'</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>deq<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">elif</span> command<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'empty'</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>deq<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">elif</span> command<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'front'</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>deq<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">print</span><span class="token punctuation">(</span>deq<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">elif</span> command<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'back'</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>deq<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">print</span><span class="token punctuation">(</span>deq<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1009 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1009-Python</link>
    <pubDate>2020-07-18</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1009-Python</guid>
    <description>
    <![CDATA[BOJ-1009-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n과 m을 입력받은 후 n<strong>m의 일의 자릿수를 (0일 때는 10) 출력하는 문제. 첫 풀이는 단순히 str(n</strong>m)[-1]을 통해 풀었으나 수가 커질 수록 걸리는 시간이 크게 늘기 때문에 l = [[10], [1], [6,2,4,8], [1,3,9,7], [6,4], [5], [6], [1,7,9,3], [6,8,4,2], [1,9]] 위와 같이 규칙을 찾아 2차원 리스트로 만든 후 n과 m에 나머지 연산을 통해 출력하였다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    n <span class="token operator">%=</span> <span class="token number">10</span>
</span><span class="code-line">    m <span class="token operator">%=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-11784 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-11784-Python</link>
    <pubDate>2020-07-17</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-11784-Python</guid>
    <description>
    <![CDATA[BOJ-11784-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>1000줄 이하의 16진수로 된 문자열을 입력받은 후 이를 영어로 디코딩하여 출력하는 문제. sys.stdin.read를 이용하여 eof까지 읽어왔으며 .split('\n')을 이용하여 줄바꿈마다 나눠준 후 나눠진 각 문자열들을 bytearray.fromhex(str).decode()을 이용하여 번역 후 출력하였다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line">s <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">l <span class="token operator">=</span> s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>
</span><span class="code-line">l<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> l<span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bytearray</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2420 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2420-Python</link>
    <pubDate>2020-07-15</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2420-Python</guid>
    <description>
    <![CDATA[BOJ-2420-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>-2,000,000,000 ≤ N, M ≤ 2,000,000,000의 범위를 가진 두 수를 입력받고 두 수의 차이값을 출력하는 문제. n-m값에 abs함수를 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">abs</span><span class="token punctuation">(</span>n <span class="token operator">-</span> m<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1026 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1026-Python</link>
    <pubDate>2020-07-13</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1026-Python</guid>
    <description>
    <![CDATA[BOJ-1026-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n개의 수로 이루어진 두개의 배열을 입력받는다. 두 배열의 요소들을 각각 곱한 값들 중 최솟값을 출력하는 문제. 첫 풀이는 n번 반복하며 min과 max를 이용하여 곱한 값을 더해주었다. 두번째 풀이는 sorted와 map, lambda를 이용하여 조금 더 간단히 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># n = int(input())</span>
</span><span class="code-line"><span class="token comment"># l1 = list(map(int, input().split()))</span>
</span><span class="code-line"><span class="token comment"># l2 = list(map(int, input().split()))</span>
</span><span class="code-line"><span class="token comment"># ans = 0</span>
</span><span class="code-line"><span class="token comment"># for _ in range(n):</span>
</span><span class="code-line"><span class="token comment">#     t1, t2 = min(l1), max(l2)</span>
</span><span class="code-line"><span class="token comment">#     ans += t1 * t2</span>
</span><span class="code-line"><span class="token comment">#     l1.remove(t1); l2.remove(t2)</span>
</span><span class="code-line"><span class="token comment"># print(ans)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">l1 <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">l2 <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">*</span> y<span class="token punctuation">,</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>l2<span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-3040 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-3040-Python</link>
    <pubDate>2020-07-11</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-3040-Python</guid>
    <description>
    <![CDATA[BOJ-3040-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>9개의 수를 입력받고 합이 100인 7개의 수를 찾는 문제. 이중 반복문을 이용하여 9개의 수를 전부 합한 값에 100을 뺀 값과 비교를 하여 찾은 후 list.remove()하여 풀었다. 다른 풀이는 sum - 100 - 현재 반복중인 값 i으로 비교할 수를 구하고 그 수를 in 연산자를 이용하여 찾아 없애는 풀이다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">l<span class="token punctuation">,</span> s<span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">False</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    l<span class="token punctuation">.</span>append<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> s <span class="token operator">+=</span> n
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        t1<span class="token punctuation">,</span> t2 <span class="token operator">=</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> l<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
</span><span class="code-line">        <span class="token keyword">if</span> t1 <span class="token operator">+</span> t2 <span class="token operator">==</span> s <span class="token operator">-</span> <span class="token number">100</span><span class="token punctuation">:</span>
</span><span class="code-line">            l<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>t1<span class="token punctuation">)</span>
</span><span class="code-line">            l<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>t2<span class="token punctuation">)</span>
</span><span class="code-line">            d <span class="token operator">=</span> <span class="token boolean">True</span>
</span><span class="code-line">            <span class="token keyword">break</span>
</span><span class="code-line">    <span class="token keyword">if</span> d<span class="token punctuation">:</span> <span class="token keyword">break</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token punctuation">[</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># a=[]</span>
</span><span class="code-line"><span class="token comment"># for i in range(9):a.append(int(input()))</span>
</span><span class="code-line"><span class="token comment"># b=sum(a)</span>
</span><span class="code-line"><span class="token comment"># for i in a:</span>
</span><span class="code-line"><span class="token comment">#     c=b-100-i</span>
</span><span class="code-line"><span class="token comment">#     if c in a and i!=c:a.remove(i);a.remove(c)</span>
</span><span class="code-line"><span class="token comment"># for i in a:print(i)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-3046 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-3046-Python</link>
    <pubDate>2020-07-11</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-3046-Python</guid>
    <description>
    <![CDATA[BOJ-3046-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>a + X / 2 = b일 때, a와 b를 입력받고 X를 구하는 문제. b*2-a하여 간단히 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> a<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-10866 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-10866-Python</link>
    <pubDate>2020-07-10</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-10866-Python</guid>
    <description>
    <![CDATA[BOJ-10866-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>덱을 구햔하는 문제이다. 위 스택과 큐와 같이 클래스를 이용하여 구현했으며 백준 풀이상 시간초과 오류로 인해 sys.stdin.realine을 사용하였다. list.pop(-1)도 마지막 요소를 pop해준 다는 것 또한 알게 되었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line"><span class="token keyword">class</span> <span class="token class-name">Deque</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        self<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">        self<span class="token punctuation">.</span><span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">def</span> <span class="token function">push_front</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        self<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">        self<span class="token punctuation">.</span><span class="token builtin">list</span><span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">def</span> <span class="token function">push_back</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        self<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">        self<span class="token punctuation">.</span><span class="token builtin">list</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>n<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">def</span> <span class="token function">pop_front</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> self<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">            self<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">-=</span> <span class="token number">1</span>
</span><span class="code-line">            <span class="token keyword">return</span> self<span class="token punctuation">.</span><span class="token builtin">list</span><span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">def</span> <span class="token function">pop_back</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> self<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">            self<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">-=</span> <span class="token number">1</span>
</span><span class="code-line">            <span class="token keyword">return</span> self<span class="token punctuation">.</span><span class="token builtin">list</span><span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">def</span> <span class="token function">size</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> self<span class="token punctuation">.</span><span class="token builtin">len</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">def</span> <span class="token function">empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> <span class="token number">1</span> <span class="token keyword">if</span> self<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">def</span> <span class="token function">front</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span>  <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">if</span> self<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> self<span class="token punctuation">.</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">def</span> <span class="token function">back</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">if</span> self<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> self<span class="token punctuation">.</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">d <span class="token operator">=</span> Deque<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> <span class="token string">'push_front'</span> <span class="token keyword">in</span> s<span class="token punctuation">:</span> d<span class="token punctuation">.</span>push_front<span class="token punctuation">(</span>s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">elif</span> <span class="token string">'push_back'</span> <span class="token keyword">in</span> s<span class="token punctuation">:</span> d<span class="token punctuation">.</span>push_back<span class="token punctuation">(</span>s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">elif</span> s <span class="token operator">==</span> <span class="token string">'pop_front'</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>pop_front<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">elif</span> s <span class="token operator">==</span> <span class="token string">'pop_back'</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>pop_back<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">elif</span> s <span class="token operator">==</span> <span class="token string">'size'</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">elif</span> s <span class="token operator">==</span> <span class="token string">'empty'</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">elif</span> s <span class="token operator">==</span> <span class="token string">'front'</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>front<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">elif</span> s <span class="token operator">==</span> <span class="token string">'back'</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>back<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'none'</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2789 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2789-Python</link>
    <pubDate>2020-07-10</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2789-Python</guid>
    <description>
    <![CDATA[BOJ-2789-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>문자열을 입력받은 후 'CAMBRIDGE'에 포함된 알파벳을 모두 지워 출력하는 문제. 파이썬의 in 연산자를 사용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'R'</span><span class="token punctuation">,</span> <span class="token string">'I'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">]</span>
</span><span class="code-line">s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line"><span class="token keyword">for</span> w <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> w <span class="token keyword">not</span> <span class="token keyword">in</span> l<span class="token punctuation">:</span>
</span><span class="code-line">        s<span class="token punctuation">.</span>append<span class="token punctuation">(</span>w<span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-16394 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-16394-Python</link>
    <pubDate>2020-07-09</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-16394-Python</guid>
    <description>
    <![CDATA[BOJ-16394-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>1946 이상의 수를 입력받고 해당 년도에 홍익대학교의 개교 몇주년인지 출력하는 문제.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1946</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-16503 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-16503-Python</link>
    <pubDate>2020-07-09</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-16503-Python</guid>
    <description>
    <![CDATA[BOJ-16503-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>1 + 2 _ 3와 같은 형태로 연산자 + - _ /, 4가지와 1 이상의 수 3가지를 입력받는다. 계산 순서에 따라 달라지는 두 값중에 작은 순으로 출력하는 문제. 하지만 나눗셈 연산중에 피연산자 중 하나가 음수이면 양수로 바꿔 계산한 값에 음숫값을 취한다. 첫 풀이는 입력받은 값을 list형으로 변환하여 괄호를 넣어 eval을 이용하여 풀었으나 피연산자가 음수인 나눗셈 연산일 경우를 위해 새롭게 풀기로 하였다. 두번째 풀이는 리스트 슬라이싱을 통해 먼저 계산을 하고 입력되는 숫자는 모두 양수인 것을 이용하여 먼저 계산한 값과 연사자만을 확인하여 연산해주었다. 다른 사람 풀이는 5개의 수, 연산자만 입력되는 것을 이용하여 eval을 이용하여 간단히 푼 것을 볼 수 있는데, 연산 과정에서 나눗셈 연산을 위와 같이하는 줄 모른 내 잘못이 컸다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># s = input().split()</span>
</span><span class="code-line"><span class="token comment"># s = ['//' if i == '/' else i for i in s]</span>
</span><span class="code-line"><span class="token comment"># s.insert(0, '('); s.insert(4, ')')</span>
</span><span class="code-line"><span class="token comment"># x = eval(''.join(s))</span>
</span><span class="code-line"><span class="token comment"># s.remove('('); s.remove(')')</span>
</span><span class="code-line"><span class="token comment"># s.insert(2, '('); s.insert(6, ')')</span>
</span><span class="code-line"><span class="token comment"># y = eval(''.join(s))</span>
</span><span class="code-line"><span class="token comment">#</span>
</span><span class="code-line"><span class="token comment"># print(min(x, y))</span>
</span><span class="code-line"><span class="token comment"># print(max(x, y))</span>
</span><span class="code-line">
</span><span class="code-line">s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'//'</span> <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">'/'</span> <span class="token keyword">else</span> i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">x <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">if</span> s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'//'</span> <span class="token keyword">and</span> x <span class="token operator">&#x3C;</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">    x <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">    x <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">y <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">if</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'//'</span> <span class="token keyword">and</span> y <span class="token operator">&#x3C;</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">    y <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">abs</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">    y <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># a,b,c,d,e=input().split()</span>
</span><span class="code-line"><span class="token comment"># f=int(eval(str(int(eval(a+b+c)))+d+e))</span>
</span><span class="code-line"><span class="token comment"># s=int(eval(a+b+str(int(eval(c+d+e)))))</span>
</span><span class="code-line"><span class="token comment"># print(min(f,s))</span>
</span><span class="code-line"><span class="token comment"># print(max(f,s))</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-10845 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-10845-Python</link>
    <pubDate>2020-07-08</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-10845-Python</guid>
    <description>
    <![CDATA[BOJ-10845-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>큐를 구현하는 문제이다. 스택과 마찬가지로 클래스를 이용하여 구현하였다. 백준 풀이상 시간초과 오류로 인해 sys.stdin.readline을 사용하였다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">class</span> <span class="token class-name">Queue</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        self<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">        self<span class="token punctuation">.</span><span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        self<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">        self<span class="token punctuation">.</span><span class="token builtin">list</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>n<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> self<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">            self<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">-=</span> <span class="token number">1</span>
</span><span class="code-line">            <span class="token keyword">return</span> self<span class="token punctuation">.</span><span class="token builtin">list</span><span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">def</span> <span class="token function">size</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> self<span class="token punctuation">.</span><span class="token builtin">len</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">def</span> <span class="token function">empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> <span class="token number">1</span> <span class="token keyword">if</span> self<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">0</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">def</span> <span class="token function">front</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">if</span> self<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> self<span class="token punctuation">.</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">    <span class="token keyword">def</span> <span class="token function">back</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">if</span> self<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> self<span class="token punctuation">.</span><span class="token builtin">list</span><span class="token punctuation">[</span>self<span class="token punctuation">.</span><span class="token builtin">len</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">q <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> <span class="token string">'push'</span> <span class="token keyword">in</span> s<span class="token punctuation">:</span> q<span class="token punctuation">.</span>push<span class="token punctuation">(</span>s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">elif</span> s <span class="token operator">==</span> <span class="token string">'pop'</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">elif</span> s <span class="token operator">==</span> <span class="token string">'size'</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">elif</span> s <span class="token operator">==</span> <span class="token string">'empty'</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">elif</span> s <span class="token operator">==</span> <span class="token string">'front'</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>front<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">elif</span> s <span class="token operator">==</span> <span class="token string">'back'</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>back<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'none'</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-12090 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-12090-Python</link>
    <pubDate>2020-07-08</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-12090-Python</guid>
    <description>
    <![CDATA[BOJ-12090-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>한글로 이루어진 문자열을 입력받은 후 그 문자열의 초성을 출력하는 문제. 한글 초성의 유니코드 상 순서로 이루어진 list를 만들고 각 글자마다 계산하여 ans 문자열에 추가하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">cho <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ㄱ'</span><span class="token punctuation">,</span> <span class="token string">'ㄲ'</span><span class="token punctuation">,</span> <span class="token string">'ㄴ'</span><span class="token punctuation">,</span> <span class="token string">'ㄷ'</span><span class="token punctuation">,</span> <span class="token string">'ㄸ'</span><span class="token punctuation">,</span> <span class="token string">'ㄹ'</span><span class="token punctuation">,</span> <span class="token string">'ㅁ'</span><span class="token punctuation">,</span> <span class="token string">'ㅂ'</span><span class="token punctuation">,</span> <span class="token string">'ㅃ'</span><span class="token punctuation">,</span> <span class="token string">'ㅅ'</span><span class="token punctuation">,</span>
</span><span class="code-line">           <span class="token string">'ㅆ'</span><span class="token punctuation">,</span> <span class="token string">'ㅇ'</span><span class="token punctuation">,</span> <span class="token string">'ㅈ'</span><span class="token punctuation">,</span> <span class="token string">'ㅉ'</span><span class="token punctuation">,</span> <span class="token string">'ㅊ'</span><span class="token punctuation">,</span> <span class="token string">'ㅋ'</span><span class="token punctuation">,</span> <span class="token string">'ㅌ'</span><span class="token punctuation">,</span> <span class="token string">'ㅍ'</span><span class="token punctuation">,</span> <span class="token string">'ㅎ'</span><span class="token punctuation">]</span>
</span><span class="code-line">
</span><span class="code-line">ans <span class="token operator">=</span> <span class="token string">""</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    ans <span class="token operator">+=</span> <span class="token punctuation">(</span>cho<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">44032</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">588</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1408 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1408-Python</link>
    <pubDate>2020-07-07</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1408-Python</guid>
    <description>
    <![CDATA[BOJ-1408-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>12:30:30과 같은 형식으로 입력되는 두 시간들의 차를 구하는 문제. 파이썬의 datetime을 이용하여 풀었으나 백준 기준으로 런타임 에러로 인해 두번째 풀이는 시간과 분을 초로 바꿔 연산하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># 1408</span>
</span><span class="code-line"><span class="token comment"># import datetime</span>
</span><span class="code-line"><span class="token comment"># t1 = datetime.datetime.strptime(input(), '%H:%M:%S')</span>
</span><span class="code-line"><span class="token comment"># t2 = datetime.datetime.strptime(input(), '%H:%M:%S')</span>
</span><span class="code-line"><span class="token comment"># ans = str(t2 - t1)</span>
</span><span class="code-line"><span class="token comment"># print(ans.split()[2])</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">hms2s</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">return</span> l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">3600</span><span class="token operator">+</span>l<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">+</span>l<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
</span><span class="code-line">e<span class="token punctuation">,</span> s <span class="token operator">=</span> hms2s<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hms2s<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">t <span class="token operator">=</span> s<span class="token operator">-</span>e <span class="token keyword">if</span> s<span class="token operator">-</span>e<span class="token operator">>=</span><span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">86400</span><span class="token operator">+</span>s<span class="token operator">-</span>e
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{:02d}:{:02d}:{:02d}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>t<span class="token operator">//</span><span class="token number">3600</span><span class="token punctuation">,</span> t<span class="token operator">%</span><span class="token number">3600</span><span class="token operator">//</span><span class="token number">60</span><span class="token punctuation">,</span> t<span class="token operator">%</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ß
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-13420 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-13420-Python</link>
    <pubDate>2020-07-06</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-13420-Python</guid>
    <description>
    <![CDATA[BOJ-13420-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>숫자 n만큼 '2 + 2 = 4'와 같은 수식을 입력받고 정답이 맞을 때와 아닐 때 출력을 나눠 하는 문제. 문자열 형식을 실행하는 eval() 메소드를 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    s<span class="token punctuation">,</span> a <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"correct"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">int</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"wrong answer"</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2935 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2935-Python</link>
    <pubDate>2020-07-06</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2935-Python</guid>
    <description>
    <![CDATA[BOJ-2935-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>10의 제곱 형태인 두 수와 +, _ 중 하나를 입력받고 연산된 수를 출력하는 문제. 첫 풀이에서는 연산 속도를 위해 _ 일 때 두 수의 0을 세어 더한 값 A를 '1', '0' * A해서 풀었다. 두 번째 풀이는 eval을 이용하여 숏코딩 스타일로 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n1 <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">n2 <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token string">"*"</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'0'</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n1<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">+</span> n2<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">int</span><span class="token punctuation">(</span>n2<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># i=input</span>
</span><span class="code-line"><span class="token comment"># print(eval(i()+i()+i()))</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-5524 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-5524-Python</link>
    <pubDate>2020-07-06</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-5524-Python</guid>
    <description>
    <![CDATA[BOJ-5524-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>숫자 n만큼 대문자와 소문자가 섞여있는 문자열을 입력받고 모든 문자열을 소문자로 출력하는 문제. 문자열의 lower() 메소드를 이용하여 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-15668 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-15668-Python</link>
    <pubDate>2020-07-05</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-15668-Python</guid>
    <description>
    <![CDATA[BOJ-15668-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>숫자 n을 입력받고 n = n1 + n2 방식으로 표현할 때 n1과 n2에서 0~9까지 겹치는 수가 없는 경우를 출력하는 문제. 파이썬의 i "in" word와 같이 사용하는 메소드를 사용하여 풀었다. 첫 풀이에서 큰 수는 생각하지 못한체 반복문의 범위를 n//2+1으로 설정하여 시간초과가 나왔지만 range(1, min(100000, n))으로 바꾸었더니 정상적으로 정답을 맞을 수 있었다. 추가적으로 exit() 함수를 배웠다. 앞으로 유용하게 사용할 것 같다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">min</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    s <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>n<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> l <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ans <span class="token operator">=</span> <span class="token number">1</span>
</span><span class="code-line">    <span class="token keyword">for</span> w <span class="token keyword">in</span> s<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> w <span class="token keyword">in</span> l<span class="token punctuation">:</span>
</span><span class="code-line">            ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">break</span>
</span><span class="code-line">        l<span class="token punctuation">.</span>append<span class="token punctuation">(</span>w<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> ans<span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span>n <span class="token operator">-</span> i<span class="token punctuation">,</span> <span class="token string">"+"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
</span><span class="code-line">        exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1436 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1436-Python</link>
    <pubDate>2020-07-03</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1436-Python</guid>
    <description>
    <![CDATA[BOJ-1436-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>666이 들어간 수 중에 n번째로 큰 수를 출력하는 문제. 브루트포스 방법으로 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">665</span>
</span><span class="code-line"><span class="token keyword">while</span> i <span class="token operator">!=</span> n<span class="token punctuation">:</span>
</span><span class="code-line">    j <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">    <span class="token keyword">if</span> <span class="token string">'666'</span> <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">:</span> i <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-15719 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-15719-Python</link>
    <pubDate>2020-07-02</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-15719-Python</guid>
    <description>
    <![CDATA[BOJ-15719-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>n과 1 ~ n-1까지 이루어진 수열을 입력받는 다. 수열에는 중복된 수가 한 개 존재하며, 그 것이 문제의 정답이다. 첫 풀이는 단순히 수열을 기준으로 반복문을 수행하고 dictionary에 key에 수열의 수를 넣어 이미 존재하는 수일 때 break하여 그 수를 출력하는 것으로 풀이를 하였으나 백준 체점 기준으로 메모리 초과 결과가 나와 검색해보니 sys.stdin.read()를 사용해야한다 ... 해서 사용해봤으나 EOF를 따로 입력해야하는 read() 특성상 마음대로 구현이 되지 않아 이 부분은 다른 분 풀이를 참고하여 read() 함수를 구현했다.read()를 참고하며 본 방법인데 중복된 문자는 1개, 1 ~ n-1까지의 수로 이루어진 수열이라는 특징을 이용해 <strong>1 ~ n-1의 총 합(n*(n-1)//2)에서 수열에 존재하는 모든 수를 뺀 값에 -를 붙이면</strong>+ 정답이 나오게 된다.. 역시 배울 게 남아도 너무 많이 남았다고 생각한다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># d = dict(); input()</span>
</span><span class="code-line"><span class="token comment"># for i in input().split():</span>
</span><span class="code-line"><span class="token comment">#     if i not in d.keys():</span>
</span><span class="code-line"><span class="token comment">#         d[i] = 1</span>
</span><span class="code-line"><span class="token comment">#     else:</span>
</span><span class="code-line"><span class="token comment">#         print(i)</span>
</span><span class="code-line"><span class="token comment">#         break</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">from</span> sys <span class="token keyword">import</span> stdin
</span><span class="code-line"><span class="token keyword">def</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>
</span><span class="code-line">        s <span class="token operator">=</span> stdin<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">if</span> <span class="token keyword">not</span> s<span class="token punctuation">:</span> <span class="token keyword">return</span>
</span><span class="code-line">        <span class="token keyword">while</span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">' '</span><span class="token punctuation">:</span>
</span><span class="code-line">            extra <span class="token operator">=</span> stdin<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
</span><span class="code-line">            <span class="token keyword">if</span> <span class="token keyword">not</span> extra<span class="token punctuation">:</span> <span class="token keyword">break</span>
</span><span class="code-line">            s<span class="token operator">+=</span> extra
</span><span class="code-line">        <span class="token keyword">yield</span> <span class="token keyword">from</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">ans <span class="token operator">=</span> n <span class="token operator">*</span> <span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">-</span>ans<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-10828 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-10828-Python</link>
    <pubDate>2020-06-30</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-10828-Python</guid>
    <description>
    <![CDATA[BOJ-10828-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>스택을 구현하는 문제이다. 처음엔 전역 변수 list, l과 함수들로 구현하였지만 백준 체점 도중 런타임 에러로 인하여 class로 스택을 구현하였으나 이 또한 백준 체점 도중 시간초과로 인해 input = sys.stdin.readline를 이용하여 시간을 단축시켰다. 풀이는 쉬웠으나 체점 기준에 맞추기 힘들었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">import</span> sys
</span><span class="code-line"><span class="token builtin">input</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline
</span><span class="code-line">
</span><span class="code-line"><span class="token keyword">class</span> <span class="token class-name">Stack</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        self<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">=</span> <span class="token number">0</span>
</span><span class="code-line">        self<span class="token punctuation">.</span><span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</span><span class="code-line">    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        self<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">        self<span class="token punctuation">.</span><span class="token builtin">list</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>n<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> self<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
</span><span class="code-line">        self<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">-=</span> <span class="token number">1</span>
</span><span class="code-line">        <span class="token keyword">return</span> self<span class="token punctuation">.</span><span class="token builtin">list</span><span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">def</span> <span class="token function">size</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> self<span class="token punctuation">.</span><span class="token builtin">len</span>
</span><span class="code-line">    <span class="token keyword">def</span> <span class="token function">empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> <span class="token number">1</span> <span class="token keyword">if</span> self<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">0</span>
</span><span class="code-line">    <span class="token keyword">def</span> <span class="token function">top</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">return</span> self<span class="token punctuation">.</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">if</span> self<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span>
</span><span class="code-line">
</span><span class="code-line">s <span class="token operator">=</span> Stack<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    t <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span> <span class="token string">'push'</span> <span class="token keyword">in</span> t<span class="token punctuation">:</span>
</span><span class="code-line">        num <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
</span><span class="code-line">        s<span class="token punctuation">.</span>push<span class="token punctuation">(</span>num<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">elif</span> t <span class="token operator">==</span> <span class="token string">"pop"</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">elif</span> t <span class="token operator">==</span> <span class="token string">'size'</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">elif</span> t <span class="token operator">==</span> <span class="token string">'empty'</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">elif</span> t <span class="token operator">==</span> <span class="token string">'top'</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>top<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'none'</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-11650 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-11650-Python</link>
    <pubDate>2020-06-28</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-11650-Python</guid>
    <description>
    <![CDATA[BOJ-11650-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>2차원 좌표를 받고 X 좌표가 증가하는 순으로 정렬, X 좌표가 같을 시 Y 좌표가 증가하는 순으로 정렬하여 출력하는 문제. 파이썬의 sort 메소드의 key를 lambda식을 사용해서 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">l <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">l<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token punctuation">[</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> l<span class="token punctuation">]</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-11651 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-11651-Python</link>
    <pubDate>2020-06-28</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-11651-Python</guid>
    <description>
    <![CDATA[BOJ-11651-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>위 문제의 우선순위가 XY에서 YX로 바뀐 문제 lambda식을 바꿔서 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">l <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line">l<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token punctuation">[</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> l<span class="token punctuation">]</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-15596 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-15596-Python</link>
    <pubDate>2020-06-28</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-15596-Python</guid>
    <description>
    <![CDATA[BOJ-15596-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>list를 매개변수로 갖는 함수 solve는 list에 들은 모든 값을 더한 값을 반환해준다. 위 함수를 구현하는 문제. sum 메소드를 사용해서 간단히 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">def</span> <span class="token function">solve</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">return</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2562 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2562-Python</link>
    <pubDate>2020-06-26</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2562-Python</guid>
    <description>
    <![CDATA[BOJ-2562-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>9가지의 수를 입력받고 그 중 재일 큰 수와, 그 수가 몇 번째로 입력 되었는 지 출력하는 문제.max를 이용하여 숏코딩을 할 수 있었지만 반복문을 한 번 사용하여 확인을 하는 것이 더욱 효율적이라 생각돼 이 방법을 택했다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">temp<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    x <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">if</span>  x <span class="token operator">></span> temp<span class="token punctuation">:</span>
</span><span class="code-line">        j <span class="token operator">=</span> i
</span><span class="code-line">        temp <span class="token operator">=</span> x
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># x=[int(input()) for a in range(9)]</span>
</span><span class="code-line"><span class="token comment"># print(max(x),x.index(max(x))+1)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-3052 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-3052-Python</link>
    <pubDate>2020-06-26</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-3052-Python</guid>
    <description>
    <![CDATA[BOJ-3052-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>입력받는 10개의 수들을 42로 나눈 나머지 값이 겹치지 않게 몇 개인지 출력하는 문제.중복되는 요소가 없는 set 자료형을 이용하여 간편하게 풀었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">s <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    s<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">42</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-10996 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-10996-Python</link>
    <pubDate>2020-06-24</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-10996-Python</guid>
    <description>
    <![CDATA[BOJ-10996-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>별 찍기, 처음보는 유형의 별 찍기여서 상당히 헤맸다.찾은 규칙으로는 열의 수는 n*2인 것과 / 한 열에 별과 공백의 총 수는 n / 홀수열일 때 별으로 시작이였다.첫 풀이는 이를 가지고 이중 반복문으로 구현을 했다.다른 풀이는 나와 달리 반복문 한 개를 가지고 구현했는데 n을 2로 나눈 값을 가지고 구현했는데 조금 더 생각해보면 나도 생각할 수 있었을 것 같다. <del>화이팅</del></p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># 첫 풀이</span>
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>
</span><span class="code-line">        <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span><span class="code-line"><span class="token comment"># 다른 풀이</span>
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"* "</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> n<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" *"</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1193 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1193-Python</link>
    <pubDate>2020-06-24</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1193-Python</guid>
    <description>
    <![CDATA[BOJ-1193-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>입대 전에 풀었다가 실패한 문제, <a href="https://wlstyql.tistory.com/53" target="_blank" rel="noopener noreferer">위 글</a>을 참조하여 풀었으며 분모, 분자의 합과 stage + 1이 같다는 것을 이용하면 다르게도 풀 수 있을 것 같다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">stage<span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span>
</span><span class="code-line"><span class="token keyword">while</span> stage <span class="token operator">+</span> key <span class="token operator">&#x3C;=</span> n<span class="token punctuation">:</span>
</span><span class="code-line">    key <span class="token operator">+=</span> stage
</span><span class="code-line">    stage <span class="token operator">+=</span> <span class="token number">1</span>
</span><span class="code-line">step <span class="token operator">=</span> n <span class="token operator">-</span> key
</span><span class="code-line">x<span class="token punctuation">,</span> y <span class="token operator">=</span> step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> stage <span class="token operator">-</span> step
</span><span class="code-line"><span class="token keyword">if</span> stage <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{}/{}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{}/{}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2523 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2523-Python</link>
    <pubDate>2020-06-23</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2523-Python</guid>
    <description>
    <![CDATA[BOJ-2523-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>입력받은 수까지 올라갔다가 다시 내려가는 별 찍기 문제, 처음엔 1부터 n까지, n에서 1까지의 range를 합치고 n이 1일 때를 예외처리 했다. ([,1] 이렇게 되기 때문)다른 풀이는 출력문에 + n * 절댓값(i)를 해주고 n-1 ~ -n 까지 -1되는 range를 만들었다.(n이 3일 때 [2,1,0,-1,-2])역시 별 찍기가 뇌를 깨우기 좋은 것 같다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># 2523</span>
</span><span class="code-line"><span class="token comment"># x = int(input())</span>
</span><span class="code-line"><span class="token comment"># l = list(range(1, x)) + list(range(x, 0, -1))</span>
</span><span class="code-line"><span class="token comment"># if x == 1:</span>
</span><span class="code-line"><span class="token comment">#     print("*")</span>
</span><span class="code-line"><span class="token comment"># else:</span>
</span><span class="code-line"><span class="token comment">#     for i in l:</span>
</span><span class="code-line"><span class="token comment">#         print("*" * i)</span>
</span><span class="code-line">
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span>n<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*"</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token builtin">abs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-5543 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-5543-Python</link>
    <pubDate>2020-06-23</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-5543-Python</guid>
    <description>
    <![CDATA[BOJ-5543-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>5개의 수를 입력받고, 각 3개, 2개 중 제일 작은 수를 더한 값에 50을 뺀 값이 정답인 단순 구현문제, lambda를 쓸 생각은 했지만 접근 방법이 달랐던 것 같다. min 함수를 쓸 생각은 했다는 것에 일단 만족</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token comment"># b, n = 2000, 2000</span>
</span><span class="code-line"><span class="token comment"># b = min(b, int(input()))</span>
</span><span class="code-line"><span class="token comment"># b = min(b, int(input()))</span>
</span><span class="code-line"><span class="token comment"># b = min(b, int(input()))</span>
</span><span class="code-line"><span class="token comment"># n = min(n, int(input()))</span>
</span><span class="code-line"><span class="token comment"># n = min(n, int(input()))</span>
</span><span class="code-line"><span class="token comment"># print(b+n-50)</span>
</span><span class="code-line">
</span><span class="code-line">i <span class="token operator">=</span> <span class="token keyword">lambda</span><span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">b <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>i<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>i<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token operator">+</span>n<span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-14681 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-14681-Python</link>
    <pubDate>2020-06-22</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-14681-Python</guid>
    <description>
    <![CDATA[BOJ-14681-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>두 수를 입력받고 어느 사분면에 속하는 지 출력하는 문제, 변수를 사용하지 않고 if문에 input을 사용했다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line"><span class="token keyword">if</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2884 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2884-Python</link>
    <pubDate>2020-06-22</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2884-Python</guid>
    <description>
    <![CDATA[BOJ-2884-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>24시간 기준으로 45분을 뺀 시각을 출력하는 문제, 입력받은 분에 45를 뺀 값으로 비교를 했으며 0시 일 때를 따로 확인하여 23시로 바꿔주었다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">h<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">m <span class="token operator">-=</span> <span class="token number">45</span>
</span><span class="code-line"><span class="token keyword">if</span> m <span class="token operator">&#x3C;</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">if</span> h <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">60</span> <span class="token operator">+</span> m<span class="token punctuation">)</span>
</span><span class="code-line">    <span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">        <span class="token keyword">print</span><span class="token punctuation">(</span>h<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">60</span> <span class="token operator">+</span> m<span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> m<span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-1330 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-1330-Python</link>
    <pubDate>2020-06-17</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-1330-Python</guid>
    <description>
    <![CDATA[BOJ-1330-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>동시에 입력되는 두 수를 비교한 결과를 출력하는 문제,map 함수를 이용하여 아주 조금은 효율적으로 풀지 않았나 생각한다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">if</span> n<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"=="</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">elif</span> n<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#x3C;"</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2753 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2753-Python</link>
    <pubDate>2020-06-17</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2753-Python</guid>
    <description>
    <![CDATA[BOJ-2753-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>윤년인지 확인하는 문제, 단순히 문제에서 말해준 규칙을 if문으로 나열해 풀었다. 이게 최선인가?</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">if</span> n <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">elif</span> n <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> n <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">else</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item><item>
    <title><![CDATA[BOJ-2588 - Python]]></title>
    <link>https://www.hyesungoh.xyz/BOJ-2588-Python</link>
    <pubDate>2020-06-16</pubDate>
    <guid isPermaLink="false">https://www.hyesungoh.xyz/BOJ-2588-Python</guid>
    <description>
    <![CDATA[BOJ-2588-Python]]>
    </description>
    <content:encoded>
      <![CDATA[<p>간단한 문제, input을 어떻게 사용하는 지 까먹은 내가 레전드.조금 더 잘 풀어볼 수 있을 거 같다.</p>
<pre class="language-python"><code class="language-python code-highlight"><span class="code-line">x <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">y <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">reversed</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</span><span class="code-line">    <span class="token keyword">print</span><span class="token punctuation">(</span>x <span class="token operator">*</span> <span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line"><span class="token keyword">print</span><span class="token punctuation">(</span>x <span class="token operator">*</span> <span class="token builtin">int</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line">
</span></code></pre>]]>
    </content:encoded>
  </item>
    </channel>
  </rss>